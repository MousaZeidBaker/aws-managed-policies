{
  "APIGatewayServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:AddListenerCertificates",
            "elasticloadbalancing:RemoveListenerCertificates",
            "elasticloadbalancing:ModifyListener",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancers",
            "xray:PutTraceSegments",
            "xray:PutTelemetryRecords",
            "xray:GetSamplingTargets",
            "xray:GetSamplingRules",
            "logs:CreateLogDelivery",
            "logs:GetLogDelivery",
            "logs:UpdateLogDelivery",
            "logs:DeleteLogDelivery",
            "logs:ListLogDeliveries",
            "servicediscovery:DiscoverInstances"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "firehose:DescribeDeliveryStream",
            "firehose:PutRecord",
            "firehose:PutRecordBatch"
          ],
          "Resource": "arn:aws:firehose:*:*:deliverystream/amazon-apigateway-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "acm:DescribeCertificate",
            "acm:GetCertificate"
          ],
          "Resource": "arn:aws:acm:*:*:certificate/*"
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateNetworkInterfacePermission",
          "Resource": "arn:aws:ec2:*:*:network-interface/*"
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": "arn:aws:ec2:*:*:network-interface/*",
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "Owner",
                "VpcLinkId"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:DeleteNetworkInterface",
            "ec2:AssignPrivateIpAddresses",
            "ec2:CreateNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeNetworkInterfaceAttribute",
            "ec2:DescribeVpcs",
            "ec2:DescribeNetworkInterfacePermissions",
            "ec2:UnassignPrivateIpAddresses",
            "ec2:DescribeSubnets",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "servicediscovery:GetNamespace",
          "Resource": "arn:aws:servicediscovery:*:*:namespace/*"
        },
        {
          "Effect": "Allow",
          "Action": "servicediscovery:GetService",
          "Resource": "arn:aws:servicediscovery:*:*:service/*"
        }
      ]
    },
    "VersionId": "v9",
    "IsDefaultVersion": true,
    "CreateDate": "2021-07-12T22:24:40+00:00"
  },
  "AWSAccountActivityAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "account:GetAccountInformation",
            "account:GetAlternateContact",
            "account:GetChallengeQuestions",
            "account:GetContactInformation",
            "account:GetRegionOptStatus",
            "account:ListRegions",
            "billing:GetIAMAccessPreference",
            "billing:GetSellerOfRecord",
            "payments:ListPaymentPreferences"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "aws-portal:ViewBilling"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-07T17:02:30+00:00"
  },
  "AWSAccountManagementFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "account:*",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-09-30T23:20:37+00:00"
  },
  "AWSAccountManagementReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "account:Get*",
            "account:List*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-09-30T23:29:53+00:00"
  },
  "AWSAccountUsageReportAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "aws-portal:ViewUsage"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:41:19+00:00"
  },
  "AWSAgentlessDiscoveryService": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "awsconnector:RegisterConnector",
            "awsconnector:GetConnectorHealth"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:GetUser",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:ListBucket"
          ],
          "Resource": [
            "arn:aws:s3:::connector-platform-upgrade-info/*",
            "arn:aws:s3:::connector-platform-upgrade-info",
            "arn:aws:s3:::connector-platform-upgrade-bundles/*",
            "arn:aws:s3:::connector-platform-upgrade-bundles",
            "arn:aws:s3:::connector-platform-release-notes/*",
            "arn:aws:s3:::connector-platform-release-notes",
            "arn:aws:s3:::prod.agentless.discovery.connector.upgrade/*",
            "arn:aws:s3:::prod.agentless.discovery.connector.upgrade"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:PutObject",
            "s3:PutObjectAcl"
          ],
          "Resource": [
            "arn:aws:s3:::import-to-ec2-connector-debug-logs/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "SNS:Publish"
          ],
          "Resource": "arn:aws:sns:*:*:metrics-sns-topic-for-*"
        },
        {
          "Sid": "Discovery",
          "Effect": "Allow",
          "Action": [
            "Discovery:*"
          ],
          "Resource": "*"
        },
        {
          "Sid": "arsenal",
          "Effect": "Allow",
          "Action": [
            "arsenal:RegisterOnPremisesAgent"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "mgh:GetHomeRegion"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2020-02-24T23:08:23+00:00"
  },
  "AWSAppFabricFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "appfabric:*"
          ],
          "Resource": "*"
        },
        {
          "Sid": "KMSListAccess",
          "Effect": "Allow",
          "Action": [
            "kms:ListAliases"
          ],
          "Resource": "*"
        },
        {
          "Sid": "S3ReadAccess",
          "Effect": "Allow",
          "Action": [
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets"
          ],
          "Resource": "*"
        },
        {
          "Sid": "FirehoseReadAccess",
          "Effect": "Allow",
          "Action": [
            "firehose:DescribeDeliveryStream",
            "firehose:ListDeliveryStreams"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AllowUseOfServiceLinkedRole",
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "appfabric.amazonaws.com"
            }
          },
          "Resource": "arn:aws:iam::*:role/aws-service-role/appfabric.amazonaws.com/AWSServiceRoleForAppFabric"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-06-27T19:51:17+00:00"
  },
  "AWSAppFabricReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "appfabric:GetAppAuthorization",
            "appfabric:GetAppBundle",
            "appfabric:GetIngestion",
            "appfabric:GetIngestionDestination",
            "appfabric:ListAppAuthorizations",
            "appfabric:ListAppBundles",
            "appfabric:ListIngestionDestinations",
            "appfabric:ListIngestions",
            "appfabric:ListTagsForResource"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-06-27T19:52:02+00:00"
  },
  "AWSAppFabricServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "CloudWatchEmitMetric",
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricData"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": "AWS/AppFabric"
            }
          }
        },
        {
          "Sid": "S3PutObject",
          "Effect": "Allow",
          "Action": [
            "s3:PutObject"
          ],
          "Resource": "arn:aws:s3:::*/AWSAppFabric/*",
          "Condition": {
            "StringEquals": {
              "s3:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        },
        {
          "Sid": "FirehosePutRecord",
          "Effect": "Allow",
          "Action": [
            "firehose:PutRecordBatch"
          ],
          "Resource": "arn:aws:firehose:*:*:deliverystream/*",
          "Condition": {
            "StringEqualsIgnoreCase": {
              "aws:ResourceTag/AWSAppFabricManaged": "true"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-06-26T21:07:45+00:00"
  },
  "AWSAppMeshEnvoyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "appmesh:StreamAggregatedResources"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-07-03T21:29:37+00:00"
  },
  "AWSAppMeshFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "appmesh:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": "arn:aws:iam::*:role/aws-service-role/appmesh.amazonaws.com/AWSServiceRoleForAppMesh",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": [
                "appmesh.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeStack*",
            "cloudformation:UpdateStack"
          ],
          "Resource": "arn:aws:cloudformation:*:*:stack/AWSAppMesh-GettingStarted-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "acm:ListCertificates",
            "acm:DescribeCertificate",
            "acm-pca:DescribeCertificateAuthority",
            "acm-pca:ListCertificateAuthorities"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "servicediscovery:ListNamespaces",
            "servicediscovery:ListServices",
            "servicediscovery:ListInstances"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v6",
    "IsDefaultVersion": true,
    "CreateDate": "2021-01-07T19:54:08+00:00"
  },
  "AWSAppMeshPreviewEnvoyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "appmesh-preview:StreamAggregatedResources"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-08-05T23:32:39+00:00"
  },
  "AWSAppMeshPreviewServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "CloudMapServiceDiscovery",
          "Effect": "Allow",
          "Action": [
            "servicediscovery:DiscoverInstances"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ACMCertificateVerification",
          "Effect": "Allow",
          "Action": [
            "acm:DescribeCertificate"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2019-08-21T21:06:29+00:00"
  },
  "AWSAppMeshReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "appmesh:Describe*",
            "appmesh:List*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:DescribeStack*"
          ],
          "Resource": "arn:aws:cloudformation:*:*:stack/AWSAppMesh-GettingStarted-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "acm:ListCertificates",
            "acm:DescribeCertificate",
            "acm-pca:DescribeCertificateAuthority",
            "acm-pca:ListCertificateAuthorities"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "servicediscovery:ListNamespaces",
            "servicediscovery:ListServices",
            "servicediscovery:ListInstances"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2021-01-07T19:53:16+00:00"
  },
  "AWSAppMeshServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "CloudMapServiceDiscovery",
          "Effect": "Allow",
          "Action": [
            "servicediscovery:DiscoverInstances",
            "servicediscovery:DiscoverInstancesRevision"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ACMCertificateVerification",
          "Effect": "Allow",
          "Action": [
            "acm:DescribeCertificate"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-10-10T16:46:37+00:00"
  },
  "AWSAppRunnerFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/apprunner.amazonaws.com/AWSServiceRoleForAppRunner",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "apprunner.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": "apprunner.amazonaws.com"
            }
          }
        },
        {
          "Sid": "AppRunnerAdminAccess",
          "Effect": "Allow",
          "Action": "apprunner:*",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-01-11T04:02:09+00:00"
  },
  "AWSAppRunnerReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "apprunner:List*",
            "apprunner:Describe*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-02-24T21:24:15+00:00"
  },
  "AWSAppRunnerServicePolicyForECRAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ecr:GetDownloadUrlForLayer",
            "ecr:BatchGetImage",
            "ecr:DescribeImages",
            "ecr:GetAuthorizationToken",
            "ecr:BatchCheckLayerAvailability"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-05-14T19:17:21+00:00"
  },
  "AWSAppSyncAdministrator": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "appsync:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "appsync.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "appsync.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:DeleteServiceLinkedRole",
            "iam:GetServiceLinkedRoleDeletionStatus"
          ],
          "Resource": "arn:aws:iam::*:role/aws-service-role/appsync.amazonaws.com/AWSServiceRoleForAppSync*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2019-11-04T19:23:49+00:00"
  },
  "AWSAppSyncInvokeFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "appsync:GraphQL",
            "appsync:GetGraphqlApi",
            "appsync:ListGraphqlApis",
            "appsync:ListApiKeys"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-03-20T21:21:20+00:00"
  },
  "AWSAppSyncPushToCloudWatchLogs": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-04-09T19:38:55+00:00"
  },
  "AWSAppSyncSchemaAuthor": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "appsync:GraphQL",
            "appsync:CreateResolver",
            "appsync:CreateType",
            "appsync:DeleteResolver",
            "appsync:DeleteType",
            "appsync:GetResolver",
            "appsync:GetType",
            "appsync:GetDataSource",
            "appsync:GetSchemaCreationStatus",
            "appsync:GetIntrospectionSchema",
            "appsync:GetGraphqlApi",
            "appsync:ListTypes",
            "appsync:ListApiKeys",
            "appsync:ListResolvers",
            "appsync:ListDataSources",
            "appsync:ListGraphqlApis",
            "appsync:StartSchemaCreation",
            "appsync:UpdateResolver",
            "appsync:UpdateType",
            "appsync:TagResource",
            "appsync:UntagResource",
            "appsync:ListTagsForResource",
            "appsync:CreateFunction",
            "appsync:UpdateFunction",
            "appsync:GetFunction",
            "appsync:DeleteFunction",
            "appsync:ListFunctions",
            "appsync:ListResolversByFunction",
            "appsync:EvaluateMappingTemplate",
            "appsync:EvaluateCode"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-02-01T18:36:20+00:00"
  },
  "AWSAppSyncServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "xray:PutTraceSegments",
            "xray:PutTelemetryRecords",
            "xray:GetSamplingTargets",
            "xray:GetSamplingRules",
            "xray:GetSamplingStatisticSummaries"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-01-21T19:56:53+00:00"
  },
  "AWSApplicationAutoScalingCustomResourcePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "execute-api:Invoke",
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DeleteAlarms"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-06-04T23:22:44+00:00"
  },
  "AWSApplicationAutoscalingAppStreamFleetPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "appstream:UpdateFleet",
            "appstream:DescribeFleets",
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DeleteAlarms"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2017-10-20T19:04:06+00:00"
  },
  "AWSApplicationAutoscalingCassandraTablePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "cassandra:Select",
          "Resource": [
            "arn:*:cassandra:*:*:/keyspace/system/table/*",
            "arn:*:cassandra:*:*:/keyspace/system_schema/table/*",
            "arn:*:cassandra:*:*:/keyspace/system_schema_mcs/table/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cassandra:Alter",
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DeleteAlarms"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-03-18T22:49:23+00:00"
  },
  "AWSApplicationAutoscalingComprehendEndpointPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "comprehend:UpdateEndpoint",
            "comprehend:DescribeEndpoint",
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DeleteAlarms"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-11-14T18:39:07+00:00"
  },
  "AWSApplicationAutoscalingDynamoDBTablePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:DescribeTable",
            "dynamodb:UpdateTable",
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DeleteAlarms"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2017-10-20T21:34:57+00:00"
  },
  "AWSApplicationAutoscalingEC2SpotFleetRequestPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeSpotFleetRequests",
            "ec2:ModifySpotFleetRequest",
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DeleteAlarms"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2017-10-25T18:23:27+00:00"
  },
  "AWSApplicationAutoscalingECSServicePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ecs:DescribeServices",
            "ecs:UpdateService",
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DeleteAlarms"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2017-10-25T23:53:08+00:00"
  },
  "AWSApplicationAutoscalingEMRInstanceGroupPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "elasticmapreduce:ListInstanceGroups",
            "elasticmapreduce:ModifyInstanceGroups",
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DeleteAlarms"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2017-10-26T00:57:39+00:00"
  },
  "AWSApplicationAutoscalingElastiCacheRGPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "elasticache:DescribeReplicationGroups",
            "elasticache:ModifyReplicationGroupShardConfiguration",
            "elasticache:IncreaseReplicaCount",
            "elasticache:DecreaseReplicaCount",
            "elasticache:DescribeCacheClusters",
            "elasticache:DescribeCacheParameters",
            "cloudwatch:DescribeAlarms"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:DeleteAlarms"
          ],
          "Resource": [
            "arn:aws:cloudwatch:*:*:alarm:TargetTracking*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-08-17T23:41:42+00:00"
  },
  "AWSApplicationAutoscalingKafkaClusterPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "kafka:DescribeCluster",
            "kafka:DescribeClusterOperation",
            "kafka:UpdateBrokerStorage",
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DeleteAlarms"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-08-24T18:36:01+00:00"
  },
  "AWSApplicationAutoscalingLambdaConcurrencyPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "lambda:PutProvisionedConcurrencyConfig",
            "lambda:GetProvisionedConcurrencyConfig",
            "lambda:DeleteProvisionedConcurrencyConfig",
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DeleteAlarms"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-10-21T20:04:17+00:00"
  },
  "AWSApplicationAutoscalingNeptuneClusterPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "rds:ListTagsForResource",
            "rds:DescribeDBInstances",
            "rds:DescribeDBClusters",
            "rds:DescribeDBClusterParameters",
            "cloudwatch:DescribeAlarms"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "rds:AddTagsToResource",
          "Resource": [
            "arn:aws:rds:*:*:db:autoscaled-reader*"
          ],
          "Condition": {
            "StringEquals": {
              "rds:DatabaseEngine": "neptune"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "rds:CreateDBInstance",
          "Resource": [
            "arn:aws:rds:*:*:db:autoscaled-reader*",
            "arn:aws:rds:*:*:cluster:*"
          ],
          "Condition": {
            "StringEquals": {
              "rds:DatabaseEngine": "neptune"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "rds:DeleteDBInstance"
          ],
          "Resource": [
            "arn:aws:rds:*:*:db:autoscaled-reader*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:DeleteAlarms"
          ],
          "Resource": [
            "arn:aws:cloudwatch:*:*:alarm:TargetTracking*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-09-02T21:14:55+00:00"
  },
  "AWSApplicationAutoscalingRDSClusterPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "rds:AddTagsToResource",
            "rds:CreateDBInstance",
            "rds:DeleteDBInstance",
            "rds:DescribeDBClusters",
            "rds:DescribeDBInstances",
            "rds:ModifyDBCluster",
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DeleteAlarms"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": "rds.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2018-08-07T19:14:24+00:00"
  },
  "AWSApplicationAutoscalingSageMakerEndpointPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "SageMaker",
          "Effect": "Allow",
          "Action": [
            "sagemaker:DescribeEndpoint",
            "sagemaker:DescribeEndpointConfig",
            "sagemaker:DescribeInferenceComponent",
            "sagemaker:UpdateEndpointWeightsAndCapacities",
            "sagemaker:UpdateInferenceComponentRuntimeConfig",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricData"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "SageMakerCloudWatchUpdate",
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:DeleteAlarms"
          ],
          "Resource": [
            "arn:aws:cloudwatch:*:*:alarm:TargetTracking*"
          ]
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-13T18:52:34+00:00"
  },
  "AWSApplicationDiscoveryAgentAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "arsenal:RegisterOnPremisesAgent"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "mgh:GetHomeRegion"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2020-02-24T22:26:45+00:00"
  },
  "AWSApplicationDiscoveryAgentlessCollectorAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "arsenal:RegisterOnPremisesAgent"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ecr-public:DescribeImages"
          ],
          "Resource": "arn:aws:ecr-public::446372222237:repository/6e5498e4-8c31-4f57-9991-13b4b992ff7b"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ecr-public:GetAuthorizationToken"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "mgh:GetHomeRegion"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sts:GetServiceBearerToken"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-08-16T21:00:59+00:00"
  },
  "AWSApplicationDiscoveryServiceFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "mgh:*",
            "discovery:*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "iam:GetRole"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/continuousexport.discovery.amazonaws.com/AWSServiceRoleForApplicationDiscoveryServiceContinuousExport*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "continuousexport.discovery.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:DeleteServiceLinkedRole",
            "iam:GetServiceLinkedRoleDeletionStatus"
          ],
          "Resource": "arn:aws:iam::*:role/aws-service-role/continuousexport.discovery.amazonaws.com/AWSServiceRoleForApplicationDiscoveryServiceContinuousExport*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": [
                "migrationhub.amazonaws.com",
                "dmsintegration.migrationhub.amazonaws.com",
                "smsintegration.migrationhub.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2019-06-19T21:21:26+00:00"
  },
  "AWSApplicationMigrationAgentInstallationPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "mgn:GetAgentInstallationAssetsForMgn",
            "mgn:SendClientMetricsForMgn",
            "mgn:SendClientLogsForMgn",
            "mgn:RegisterAgentForMgn",
            "mgn:VerifyClientRoleForMgn"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "mgn:IssueClientCertificateForMgn"
          ],
          "Resource": "arn:aws:mgn:*:*:source-server/*"
        },
        {
          "Effect": "Allow",
          "Action": "mgn:TagResource",
          "Resource": "arn:aws:mgn:*:*:source-server/*",
          "Condition": {
            "StringEquals": {
              "mgn:CreateAction": "RegisterAgentForMgn"
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-09-20T11:21:24+00:00"
  },
  "AWSApplicationMigrationAgentPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "mgn:SendAgentMetricsForMgn",
            "mgn:SendAgentLogsForMgn",
            "mgn:SendClientMetricsForMgn",
            "mgn:SendClientLogsForMgn"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "mgn:RegisterAgentForMgn",
            "mgn:UpdateAgentSourcePropertiesForMgn",
            "mgn:UpdateAgentReplicationInfoForMgn",
            "mgn:UpdateAgentConversionInfoForMgn",
            "mgn:GetAgentInstallationAssetsForMgn",
            "mgn:GetAgentCommandForMgn",
            "mgn:GetAgentConfirmedResumeInfoForMgn",
            "mgn:GetAgentRuntimeConfigurationForMgn",
            "mgn:UpdateAgentBacklogForMgn",
            "mgn:GetAgentReplicationInfoForMgn"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "mgn:TagResource",
          "Resource": "arn:aws:mgn:*:*:source-server/*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-09-20T11:13:40+00:00"
  },
  "AWSApplicationMigrationAgentPolicy_v2": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "mgn:SendAgentMetricsForMgn",
            "mgn:SendAgentLogsForMgn",
            "mgn:UpdateAgentSourcePropertiesForMgn",
            "mgn:UpdateAgentReplicationInfoForMgn",
            "mgn:UpdateAgentConversionInfoForMgn",
            "mgn:GetAgentCommandForMgn",
            "mgn:GetAgentConfirmedResumeInfoForMgn",
            "mgn:GetAgentRuntimeConfigurationForMgn",
            "mgn:UpdateAgentBacklogForMgn",
            "mgn:GetAgentReplicationInfoForMgn",
            "mgn:IssueClientCertificateForMgn"
          ],
          "Resource": "arn:aws:mgn:*:*:source-server/${aws:SourceIdentity}"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-06-06T14:14:38+00:00"
  },
  "AWSApplicationMigrationConversionServerPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "mgn:SendClientMetricsForMgn",
            "mgn:SendClientLogsForMgn",
            "mgn:GetChannelCommandsForMgn",
            "mgn:SendChannelCommandResultForMgn"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-04-07T06:48:58+00:00"
  },
  "AWSApplicationMigrationEC2Access": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": [
            "arn:aws:iam::*:role/service-role/AWSApplicationMigrationConversionServerRole"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "ec2.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteSnapshot"
          ],
          "Resource": "arn:aws:ec2:*:*:snapshot/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
            },
            "Bool": {
              "aws:ViaAWSService": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeSnapshots",
            "ec2:DescribeImages",
            "ec2:DescribeVolumes"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "mgn.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateLaunchTemplateVersion",
            "ec2:ModifyLaunchTemplate",
            "ec2:DeleteLaunchTemplateVersions"
          ],
          "Resource": "arn:aws:ec2:*:*:launch-template/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateLaunchTemplate"
          ],
          "Resource": "arn:aws:ec2:*:*:launch-template/*",
          "Condition": {
            "Null": {
              "aws:RequestTag/AWSApplicationMigrationServiceManaged": "false"
            },
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "mgn.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteLaunchTemplate"
          ],
          "Resource": "arn:aws:ec2:*:*:launch-template/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
            },
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "mgn.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteVolume"
          ],
          "Resource": "arn:aws:ec2:*:*:volume/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
            },
            "Bool": {
              "aws:ViaAWSService": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances",
            "ec2:ModifyInstanceAttribute",
            "ec2:GetConsoleOutput",
            "ec2:GetConsoleScreenshot"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
            },
            "Bool": {
              "aws:ViaAWSService": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:RevokeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:AuthorizeSecurityGroupEgress"
          ],
          "Resource": "arn:aws:ec2:*:*:security-group/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
            },
            "Bool": {
              "aws:ViaAWSService": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateVolume"
          ],
          "Resource": "arn:aws:ec2:*:*:volume/*",
          "Condition": {
            "Null": {
              "aws:RequestTag/AWSApplicationMigrationServiceManaged": "false"
            },
            "Bool": {
              "aws:ViaAWSService": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateSecurityGroup",
          "Resource": "arn:aws:ec2:*:*:vpc/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSecurityGroup"
          ],
          "Resource": "arn:aws:ec2:*:*:security-group/*",
          "Condition": {
            "Null": {
              "aws:RequestTag/AWSApplicationMigrationServiceManaged": "false"
            },
            "Bool": {
              "aws:ViaAWSService": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSnapshot"
          ],
          "Resource": "arn:aws:ec2:*:*:volume/*",
          "Condition": {
            "Null": {
              "ec2:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
            },
            "Bool": {
              "aws:ViaAWSService": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSnapshot"
          ],
          "Resource": "arn:aws:ec2:*:*:snapshot/*",
          "Condition": {
            "Null": {
              "aws:RequestTag/AWSApplicationMigrationServiceManaged": "false"
            },
            "Bool": {
              "aws:ViaAWSService": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DetachVolume",
            "ec2:AttachVolume"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "Null": {
              "ec2:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
            },
            "Bool": {
              "aws:ViaAWSService": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AttachVolume"
          ],
          "Resource": "arn:aws:ec2:*:*:volume/*",
          "Condition": {
            "Null": {
              "ec2:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
            },
            "Bool": {
              "aws:ViaAWSService": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DetachVolume"
          ],
          "Resource": "arn:aws:ec2:*:*:volume/*",
          "Condition": {
            "Bool": {
              "aws:ViaAWSService": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:RunInstances"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "Null": {
              "aws:RequestTag/AWSApplicationMigrationServiceManaged": "false"
            },
            "Bool": {
              "aws:ViaAWSService": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:RunInstances"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:volume/*",
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:image/*",
            "arn:aws:ec2:*:*:network-interface/*",
            "arn:aws:ec2:*:*:launch-template/*"
          ],
          "Condition": {
            "Bool": {
              "aws:ViaAWSService": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": [
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:volume/*",
            "arn:aws:ec2:*:*:snapshot/*",
            "arn:aws:ec2:*:*:instance/*",
            "arn:aws:ec2:*:*:launch-template/*"
          ],
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": [
                "CreateSecurityGroup",
                "CreateVolume",
                "CreateSnapshot",
                "RunInstances",
                "CreateLaunchTemplate"
              ]
            },
            "Bool": {
              "aws:ViaAWSService": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags",
            "ec2:ModifyVolume"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:volume/*"
          ],
          "Condition": {
            "Null": {
              "ec2:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
            },
            "Bool": {
              "aws:ViaAWSService": "true"
            }
          }
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2023-02-06T16:07:02+00:00"
  },
  "AWSApplicationMigrationFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "mgn:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:ListAliases",
            "kms:DescribeKey"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeKeyPairs",
            "ec2:DescribeTags",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePlacementGroups",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeImages",
            "ec2:DescribeInstances",
            "ec2:DescribeInstanceTypes",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstanceTypeOfferings",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSubnets",
            "ec2:DescribeVolumes",
            "ec2:GetEbsEncryptionByDefault",
            "ec2:GetEbsDefaultKmsKeyId"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "license-manager:ListLicenseConfigurations",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "elasticloadbalancing:DescribeLoadBalancers",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:ListInstanceProfiles",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": [
            "arn:aws:iam::*:role/service-role/AWSApplicationMigrationLaunchInstanceWithSsmRole",
            "arn:aws:iam::*:role/service-role/AWSApplicationMigrationLaunchInstanceWithDrsRole"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "ec2.amazonaws.com"
            },
            "Bool": {
              "aws:ViaAWSService": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "drs:DescribeSourceServers"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:SendCommand"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "Bool": {
              "aws:ViaAWSService": "true"
            },
            "Null": {
              "aws:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:ListCommandInvocations"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:DescribeInstanceInformation",
            "ssm:GetCommandInvocation"
          ],
          "Resource": "*",
          "Condition": {
            "Bool": {
              "aws:ViaAWSService": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:DescribeDocument",
            "ssm:SendCommand"
          ],
          "Resource": [
            "arn:aws:ssm:*:*:document/AWSDisasterRecovery-InstallDRAgentOnInstance",
            "arn:aws:ssm:*:*:document/AWSMigration-*"
          ],
          "Condition": {
            "Bool": {
              "aws:ViaAWSService": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "drs:DisconnectSourceServer"
          ],
          "Resource": "arn:aws:drs:*:*:source-server/*",
          "Condition": {
            "Bool": {
              "aws:ViaAWSService": "true"
            },
            "Null": {
              "aws:ResourceTag/AWSApplicationMigrationServiceConfiguredDR": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:GetParameter",
            "ssm:PutParameter"
          ],
          "Resource": "arn:aws:ssm:*:*:parameter/ManagedByAWSApplicationMigrationService-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "servicequotas:GetServiceQuota"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:GetAutomationExecution"
          ],
          "Resource": "arn:aws:ssm:*:*:automation-execution/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:GetDocument"
          ],
          "Resource": [
            "arn:aws:ssm:*:*:document/AWSDisasterRecovery-InstallDRAgentOnInstance",
            "arn:aws:ssm:*:*:document/AWSMigration-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:GetParameters"
          ],
          "Resource": "arn:aws:ssm:*:*:parameter/ManagedByAWSApplicationMigrationService-*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "ssm.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:StartAutomationExecution"
          ],
          "Resource": "arn:aws:ssm:*:*:automation-definition/AWSMigration-*:$DEFAULT",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "mgn.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ssm:ListCommands",
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "ssm.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v7",
    "IsDefaultVersion": true,
    "CreateDate": "2023-04-20T17:28:13+00:00"
  },
  "AWSApplicationMigrationMGHAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "mgh:AssociateCreatedArtifact",
            "mgh:CreateProgressUpdateStream",
            "mgh:DisassociateCreatedArtifact",
            "mgh:GetHomeRegion",
            "mgh:ImportMigrationTask",
            "mgh:NotifyMigrationTaskState",
            "mgh:PutResourceAttributes"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-04-07T07:10:01+00:00"
  },
  "AWSApplicationMigrationReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "mgn:DescribeJobLogItems",
            "mgn:DescribeJobs",
            "mgn:DescribeSourceServers",
            "mgn:DescribeReplicationConfigurationTemplates",
            "mgn:GetLaunchConfiguration",
            "mgn:DescribeVcenterClients",
            "mgn:GetReplicationConfiguration",
            "mgn:DescribeLaunchConfigurationTemplates",
            "mgn:ListSourceServerActions",
            "mgn:ListTemplateActions",
            "mgn:ListApplications",
            "mgn:ListWaves",
            "mgn:ListExports",
            "mgn:ListImports",
            "mgn:ListImportErrors",
            "mgn:ListExportErrors"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstances",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "servicequotas:GetServiceQuota"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-20T08:58:08+00:00"
  },
  "AWSApplicationMigrationReplicationServerPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "mgn:SendClientMetricsForMgn",
            "mgn:SendClientLogsForMgn",
            "mgn:GetChannelCommandsForMgn",
            "mgn:SendChannelCommandResultForMgn",
            "mgn:GetAgentSnapshotCreditsForMgn",
            "mgn:DescribeReplicationServerAssociationsForMgn",
            "mgn:DescribeSnapshotRequestsForMgn",
            "mgn:BatchDeleteSnapshotRequestForMgn",
            "mgn:NotifyAgentAuthenticationForMgn",
            "mgn:BatchCreateVolumeSnapshotGroupForMgn",
            "mgn:UpdateAgentReplicationProcessStateForMgn",
            "mgn:NotifyAgentReplicationProgressForMgn",
            "mgn:NotifyAgentConnectedForMgn",
            "mgn:NotifyAgentDisconnectedForMgn"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstances",
            "ec2:DescribeSnapshots"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSnapshot"
          ],
          "Resource": "arn:aws:ec2:*:*:volume/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSnapshot"
          ],
          "Resource": "arn:aws:ec2:*:*:snapshot/*",
          "Condition": {
            "Null": {
              "aws:RequestTag/AWSApplicationMigrationServiceManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "CreateSnapshot"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-04-07T07:21:57+00:00"
  },
  "AWSApplicationMigrationSSMAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ssm:GetCommandInvocation",
            "ssm:DescribeInstanceInformation"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "mgn.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:SendCommand",
            "ssm:DescribeDocument",
            "ssm:StartAutomationExecution"
          ],
          "Resource": [
            "arn:aws:ssm:*:*:document/*",
            "arn:aws:ssm:*:*:automation-definition/*:*"
          ],
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "mgn.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:SendCommand"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "mgn.amazonaws.com"
              ]
            },
            "Null": {
              "aws:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:ListDocuments"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:ListDocumentVersions",
            "ssm:GetDocument"
          ],
          "Resource": "arn:aws:ssm:*:*:document/*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-20T10:57:51+00:00"
  },
  "AWSApplicationMigrationServiceEc2InstancePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "mgn:SendClientLogsForMgn",
            "mgn:RegisterAgentForMgn",
            "mgn:GetAgentInstallationAssetsForMgn"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "mgn:SendAgentMetricsForMgn",
            "mgn:SendAgentLogsForMgn",
            "mgn:UpdateAgentSourcePropertiesForMgn",
            "mgn:UpdateAgentReplicationInfoForMgn",
            "mgn:UpdateAgentConversionInfoForMgn",
            "mgn:GetAgentCommandForMgn",
            "mgn:GetAgentConfirmedResumeInfoForMgn",
            "mgn:GetAgentRuntimeConfigurationForMgn",
            "mgn:UpdateAgentBacklogForMgn",
            "mgn:GetAgentReplicationInfoForMgn"
          ],
          "Resource": "arn:aws:mgn:*:*:source-server/*"
        },
        {
          "Effect": "Allow",
          "Action": "mgn:TagResource",
          "Resource": "arn:aws:mgn:*:*:source-server/*",
          "Condition": {
            "StringEquals": {
              "mgn:CreateAction": "RegisterAgentForMgn"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-08-22T13:19:02+00:00"
  },
  "AWSApplicationMigrationServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "mgn:ListTagsForResource",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "kms:ListRetirableGrants",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "mgh:AssociateCreatedArtifact",
            "mgh:CreateProgressUpdateStream",
            "mgh:DisassociateCreatedArtifact",
            "mgh:GetHomeRegion",
            "mgh:ImportMigrationTask",
            "mgh:NotifyMigrationTaskState",
            "mgh:PutResourceAttributes"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeImages",
            "ec2:DescribeInstances",
            "ec2:DescribeInstanceTypes",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSubnets",
            "ec2:DescribeVolumes",
            "ec2:GetEbsDefaultKmsKeyId",
            "ec2:GetEbsEncryptionByDefault"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "organizations:DescribeAccount"
          ],
          "Resource": "arn:aws:organizations::*:account/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListDelegatedAdministrators",
            "organizations:ListAccounts"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:RegisterImage",
            "ec2:DeregisterImage"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteSnapshot"
          ],
          "Resource": "arn:aws:ec2:*:*:snapshot/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateLaunchTemplateVersion",
            "ec2:ModifyLaunchTemplate",
            "ec2:DeleteLaunchTemplate",
            "ec2:DeleteLaunchTemplateVersions"
          ],
          "Resource": "arn:aws:ec2:*:*:launch-template/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteVolume"
          ],
          "Resource": "arn:aws:ec2:*:*:volume/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances",
            "ec2:ModifyInstanceAttribute",
            "ec2:GetConsoleOutput",
            "ec2:GetConsoleScreenshot"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:RevokeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:AuthorizeSecurityGroupEgress"
          ],
          "Resource": "arn:aws:ec2:*:*:security-group/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateVolume"
          ],
          "Resource": "arn:aws:ec2:*:*:volume/*",
          "Condition": {
            "Null": {
              "aws:RequestTag/AWSApplicationMigrationServiceManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSecurityGroup"
          ],
          "Resource": "arn:aws:ec2:*:*:security-group/*",
          "Condition": {
            "Null": {
              "aws:RequestTag/AWSApplicationMigrationServiceManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSecurityGroup"
          ],
          "Resource": "arn:aws:ec2:*:*:vpc/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateLaunchTemplate"
          ],
          "Resource": "arn:aws:ec2:*:*:launch-template/*",
          "Condition": {
            "Null": {
              "aws:RequestTag/AWSApplicationMigrationServiceManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSnapshot"
          ],
          "Resource": "arn:aws:ec2:*:*:volume/*",
          "Condition": {
            "Null": {
              "ec2:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSnapshot"
          ],
          "Resource": "arn:aws:ec2:*:*:snapshot/*",
          "Condition": {
            "Null": {
              "aws:RequestTag/AWSApplicationMigrationServiceManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DetachVolume",
            "ec2:AttachVolume"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "Null": {
              "ec2:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AttachVolume"
          ],
          "Resource": "arn:aws:ec2:*:*:volume/*",
          "Condition": {
            "Null": {
              "ec2:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DetachVolume"
          ],
          "Resource": "arn:aws:ec2:*:*:volume/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:RunInstances"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "Null": {
              "aws:RequestTag/AWSApplicationMigrationServiceManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:RunInstances"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:volume/*",
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:image/*",
            "arn:aws:ec2:*:*:network-interface/*",
            "arn:aws:ec2:*:*:launch-template/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": [
            "arn:aws:iam::*:role/service-role/AWSApplicationMigrationReplicationServerRole",
            "arn:aws:iam::*:role/service-role/AWSApplicationMigrationConversionServerRole"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "ec2.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": [
            "arn:aws:ec2:*:*:launch-template/*",
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:volume/*",
            "arn:aws:ec2:*:*:snapshot/*",
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": [
                "CreateLaunchTemplate",
                "CreateSecurityGroup",
                "CreateVolume",
                "CreateSnapshot",
                "RunInstances"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-06-20T09:12:04+00:00"
  },
  "AWSApplicationMigrationVCenterClientPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "mgn:CreateVcenterClientForMgn",
            "mgn:DescribeVcenterClients"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "mgn:GetVcenterClientCommandsForMgn",
            "mgn:SendVcenterClientCommandResultForMgn",
            "mgn:SendVcenterClientLogsForMgn",
            "mgn:SendVcenterClientMetricsForMgn",
            "mgn:DeleteVcenterClient",
            "mgn:TagResource",
            "mgn:NotifyVcenterClientStartedForMgn"
          ],
          "Resource": "arn:aws:mgn:*:*:vcenter-client/*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-11-08T12:53:08+00:00"
  },
  "AWSArtifactAccountSync": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "organizations:ListAccounts",
            "organizations:DescribeOrganization"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-04-10T23:04:33+00:00"
  },
  "AWSArtifactServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "organizations:ListAccounts",
            "organizations:DescribeOrganization",
            "organizations:DescribeAccount",
            "organizations:ListAWSServiceAccessForOrganization"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-08-21T20:27:31+00:00"
  },
  "AWSAuditManagerAdministratorAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AuditManagerAccess",
          "Effect": "Allow",
          "Action": [
            "auditmanager:*"
          ],
          "Resource": "*"
        },
        {
          "Sid": "OrganizationsAccess",
          "Effect": "Allow",
          "Action": [
            "organizations:ListAccountsForParent",
            "organizations:ListAccounts",
            "organizations:DescribeOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:DescribeAccount",
            "organizations:ListParents",
            "organizations:ListChildren"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AllowOnlyAuditManagerIntegration",
          "Effect": "Allow",
          "Action": [
            "organizations:RegisterDelegatedAdministrator",
            "organizations:DeregisterDelegatedAdministrator",
            "organizations:EnableAWSServiceAccess"
          ],
          "Resource": "*",
          "Condition": {
            "StringLikeIfExists": {
              "organizations:ServicePrincipal": [
                "auditmanager.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "IAMAccess",
          "Effect": "Allow",
          "Action": [
            "iam:GetUser",
            "iam:ListUsers",
            "iam:ListRoles"
          ],
          "Resource": "*"
        },
        {
          "Sid": "IAMAccessCreateSLR",
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/auditmanager.amazonaws.com/AWSServiceRoleForAuditManager*",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "auditmanager.amazonaws.com"
            }
          }
        },
        {
          "Sid": "IAMAccessManageSLR",
          "Effect": "Allow",
          "Action": [
            "iam:DeleteServiceLinkedRole",
            "iam:UpdateRoleDescription",
            "iam:GetServiceLinkedRoleDeletionStatus"
          ],
          "Resource": "arn:aws:iam::*:role/aws-service-role/auditmanager.amazonaws.com/AWSServiceRoleForAuditManager*"
        },
        {
          "Sid": "S3Access",
          "Effect": "Allow",
          "Action": [
            "s3:ListAllMyBuckets"
          ],
          "Resource": "*"
        },
        {
          "Sid": "KmsAccess",
          "Effect": "Allow",
          "Action": [
            "kms:DescribeKey",
            "kms:ListKeys",
            "kms:ListAliases"
          ],
          "Resource": "*"
        },
        {
          "Sid": "KmsCreateGrantAccess",
          "Effect": "Allow",
          "Action": [
            "kms:CreateGrant"
          ],
          "Resource": "*",
          "Condition": {
            "Bool": {
              "kms:GrantIsForAWSResource": "true"
            },
            "StringLike": {
              "kms:ViaService": "auditmanager.*.amazonaws.com"
            }
          }
        },
        {
          "Sid": "SNSAccess",
          "Effect": "Allow",
          "Action": [
            "sns:ListTopics"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CreateEventsAccess",
          "Effect": "Allow",
          "Action": [
            "events:PutRule"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "events:detail-type": "Security Hub Findings - Imported"
            },
            "ForAllValues:StringEquals": {
              "events:source": [
                "aws.securityhub"
              ]
            }
          }
        },
        {
          "Sid": "EventsAccess",
          "Effect": "Allow",
          "Action": [
            "events:DeleteRule",
            "events:DescribeRule",
            "events:EnableRule",
            "events:DisableRule",
            "events:ListTargetsByRule",
            "events:PutTargets",
            "events:RemoveTargets"
          ],
          "Resource": "arn:aws:events:*:*:rule/AuditManagerSecurityHubFindingsReceiver"
        },
        {
          "Sid": "TagAccess",
          "Effect": "Allow",
          "Action": [
            "tag:GetResources"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-04-30T00:02:56+00:00"
  },
  "AWSAuditManagerServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "acm:GetAccountConfiguration",
            "acm:ListCertificates",
            "backup:ListRecoveryPointsByResource",
            "bedrock:GetCustomModel",
            "bedrock:GetFoundationModel",
            "bedrock:GetModelCustomizationJob",
            "bedrock:GetModelInvocationLoggingConfiguration",
            "bedrock:ListCustomModels",
            "bedrock:ListFoundationModels",
            "bedrock:ListModelCustomizationJobs",
            "cloudtrail:DescribeTrails",
            "cloudtrail:LookupEvents",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DescribeAlarmsForMetric",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "cognito-idp:DescribeUserPool",
            "config:DescribeConfigRules",
            "config:DescribeDeliveryChannels",
            "config:ListDiscoveredResources",
            "directconnect:DescribeDirectConnectGateways",
            "directconnect:DescribeVirtualGateways",
            "dynamodb:DescribeTable",
            "dynamodb:ListBackups",
            "dynamodb:ListGlobalTables",
            "dynamodb:ListTables",
            "ec2:DescribeAddresses",
            "ec2:DescribeCustomerGateways",
            "ec2:DescribeEgressOnlyInternetGateways",
            "ec2:DescribeFlowLogs",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
            "ec2:DescribeLocalGateways",
            "ec2:DescribeLocalGatewayVirtualInterfaces",
            "ec2:DescribeNatGateways",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeTransitGateways",
            "ec2:DescribeVolumes",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcPeeringConnections",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpnConnections",
            "ec2:DescribeVpnGateways",
            "ec2:GetEbsDefaultKmsKeyId",
            "ec2:GetEbsEncryptionByDefault",
            "ecs:DescribeClusters",
            "eks:DescribeAddonVersions",
            "elasticache:DescribeCacheClusters",
            "elasticache:DescribeServiceUpdates",
            "elasticfilesystem:DescribeAccessPoints",
            "elasticfilesystem:DescribeFileSystems",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeSslPolicies",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticmapreduce:ListClusters",
            "elasticmapreduce:ListSecurityConfigurations",
            "events:DescribeRule",
            "events:ListConnections",
            "events:ListEventBuses",
            "events:ListEventSources",
            "events:ListRules",
            "firehose:ListDeliveryStreams",
            "fsx:DescribeFileSystems",
            "guardduty:ListDetectors",
            "iam:GenerateCredentialReport",
            "iam:GetAccountAuthorizationDetails",
            "iam:GetAccountPasswordPolicy",
            "iam:GetAccountSummary",
            "iam:GetCredentialReport",
            "iam:ListEntitiesForPolicy",
            "iam:ListGroupPolicies",
            "iam:ListGroups",
            "iam:ListOpenIdConnectProviders",
            "iam:ListPolicies",
            "iam:ListRolePolicies",
            "iam:ListRoles",
            "iam:ListSamlProviders",
            "iam:ListUserPolicies",
            "iam:ListUsers",
            "iam:ListVirtualMFADevices",
            "kafka:ListClusters",
            "kafka:ListKafkaVersions",
            "kinesis:ListStreams",
            "kms:DescribeKey",
            "kms:GetKeyPolicy",
            "kms:GetKeyRotationStatus",
            "kms:ListGrants",
            "kms:ListKeyPolicies",
            "kms:ListKeys",
            "lambda:ListFunctions",
            "license-manager:ListAssociationsForLicenseConfiguration",
            "license-manager:ListLicenseConfigurations",
            "license-manager:ListUsageForLicenseConfiguration",
            "logs:DescribeDestinations",
            "logs:DescribeExportTasks",
            "logs:DescribeLogGroups",
            "logs:DescribeMetricFilters",
            "logs:DescribeResourcePolicies",
            "logs:FilterLogEvents",
            "organizations:DescribeOrganization",
            "organizations:DescribePolicy",
            "rds:DescribeCertificates",
            "rds:DescribeDbClusterEndpoints",
            "rds:DescribeDbClusterParameterGroups",
            "rds:DescribeDbClusters",
            "rds:DescribeDBInstances",
            "rds:DescribeDbSecurityGroups",
            "redshift:DescribeClusters",
            "route53:GetQueryLoggingConfig",
            "s3:GetBucketPublicAccessBlock",
            "s3:GetBucketVersioning",
            "s3:GetEncryptionConfiguration",
            "s3:GetLifecycleConfiguration",
            "s3:ListAllMyBuckets",
            "securityhub:DescribeStandards",
            "sns:ListTopics",
            "sqs:ListQueues",
            "waf-regional:GetLoggingConfiguration",
            "waf-regional:ListRuleGroups",
            "waf-regional:ListSubscribedRuleGroups",
            "waf-regional:ListWebACLs",
            "waf:ListActivatedRulesInRuleGroup"
          ],
          "Resource": "*",
          "Sid": "s2sAPIsAccess"
        },
        {
          "Sid": "CreateEventsAccess",
          "Effect": "Allow",
          "Action": [
            "events:PutRule"
          ],
          "Resource": "arn:aws:events:*:*:rule/AuditManagerSecurityHubFindingsReceiver",
          "Condition": {
            "StringEquals": {
              "events:detail-type": "Security Hub Findings - Imported"
            },
            "Null": {
              "events:source": "false"
            },
            "ForAllValues:StringEquals": {
              "events:source": [
                "aws.securityhub"
              ]
            }
          }
        },
        {
          "Sid": "EventsAccess",
          "Effect": "Allow",
          "Action": [
            "events:DeleteRule",
            "events:DescribeRule",
            "events:EnableRule",
            "events:DisableRule",
            "events:ListTargetsByRule",
            "events:PutTargets",
            "events:RemoveTargets"
          ],
          "Resource": "arn:aws:events:*:*:rule/AuditManagerSecurityHubFindingsReceiver"
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-06T20:07:07+00:00"
  },
  "AWSAutoScalingPlansEC2AutoScalingPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:GetMetricData",
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribeScheduledActions",
            "autoscaling:BatchPutScheduledUpdateGroupAction",
            "autoscaling:BatchDeleteScheduledAction"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-08-23T22:46:59+00:00"
  },
  "AWSBackupAuditAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "backup:CreateFramework",
            "backup:UpdateFramework",
            "backup:ListFrameworks",
            "backup:DescribeFramework",
            "backup:DeleteFramework",
            "backup:ListBackupPlans",
            "backup:ListBackupVaults",
            "backup:CreateReportPlan",
            "backup:UpdateReportPlan",
            "backup:ListReportPlans",
            "backup:DescribeReportPlan",
            "backup:DeleteReportPlan",
            "backup:StartReportJob",
            "backup:ListReportJobs",
            "backup:DescribeReportJob"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "config:DescribeConfigurationRecorders",
            "config:DescribeConfigurationRecorderStatus",
            "config:DescribeComplianceByConfigRule"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "config:GetComplianceDetailsByConfigRule"
          ],
          "Resource": "arn:aws:config:*:*:config-rule/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListAllMyBuckets",
            "s3:GetBucketLocation"
          ],
          "Resource": "arn:aws:s3:::*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-04-10T21:23:31+00:00"
  },
  "AWSBackupDataTransferAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "backup-storage:StartObject",
            "backup-storage:PutChunk",
            "backup-storage:GetChunk",
            "backup-storage:ListChunks",
            "backup-storage:ListObjects",
            "backup-storage:GetObjectMetadata",
            "backup-storage:NotifyObjectComplete"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-10T22:48:05+00:00"
  },
  "AWSBackupFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "backup:*",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "backup-storage:*",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "rds:DescribeDBSnapshots",
            "rds:ListTagsForResource",
            "rds:DescribeDBInstances",
            "rds:describeDBEngineVersions",
            "rds:describeOptionGroups",
            "rds:describeOrderableDBInstanceOptions",
            "rds:describeDBSubnetGroups",
            "rds:describeDBClusterSnapshots",
            "rds:describeDBClusters",
            "rds:describeDBParameterGroups",
            "rds:DescribeDBClusterParameterGroups",
            "rds:DescribeDBInstanceAutomatedBackups",
            "rds:DescribeDBClusterAutomatedBackups"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "rds:DeleteDBSnapshot",
            "rds:DeleteDBClusterSnapshot"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "backup.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:ListBackups",
            "dynamodb:ListTables"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:DeleteBackup"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "backup.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticfilesystem:DescribeFilesystems"
          ],
          "Resource": "arn:aws:elasticfilesystem:*:*:file-system/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeSnapshots",
            "ec2:DescribeVolumes",
            "ec2:describeAvailabilityZones",
            "ec2:DescribeVpcs",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeImages",
            "ec2:DescribeSubnets",
            "ec2:DescribePlacementGroups",
            "ec2:DescribeInstances",
            "ec2:DescribeInstanceTypes",
            "ec2:DescribeVpcEndpoints"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteSnapshot",
            "ec2:DeregisterImage"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "backup.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "tag:GetTagKeys",
            "tag:GetTagValues",
            "tag:GetResources"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "storagegateway:DescribeCachediSCSIVolumes",
            "storagegateway:DescribeStorediSCSIVolumes"
          ],
          "Resource": "arn:aws:storagegateway:*:*:gateway/*/volume/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "storagegateway:ListGateways"
          ],
          "Resource": "arn:aws:storagegateway:*:*:*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "storagegateway:DescribeGatewayInformation",
            "storagegateway:ListVolumes",
            "storagegateway:ListLocalDisks"
          ],
          "Resource": "arn:aws:storagegateway:*:*:gateway/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:ListRoles",
            "iam:GetRole"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": [
            "arn:aws:iam::*:role/*AwsBackup*",
            "arn:aws:iam::*:role/*AWSBackup*"
          ],
          "Condition": {
            "StringLike": {
              "iam:PassedToService": "backup.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "organizations:DescribeOrganization",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:ListKeys",
            "kms:DescribeKey",
            "kms:GenerateDataKey",
            "kms:ListAliases"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:CreateGrant"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "kms:EncryptionContextKeys": "aws:backup:backup-vault"
            },
            "Bool": {
              "kms:GrantIsForAWSResource": true
            },
            "StringLike": {
              "kms:ViaService": "backup.*.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:CancelCommand",
            "ssm:GetCommandInvocation"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "ssm:SendCommand",
          "Resource": [
            "arn:aws:ssm:*:*:document/AWSEC2-CreateVssSnapshot",
            "arn:aws:ec2:*:*:instance/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "fsx:DescribeFileSystems",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "fsx:DescribeBackups",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "fsx:DescribeVolumes",
          "Resource": "arn:aws:fsx:*:*:volume/*/*"
        },
        {
          "Effect": "Allow",
          "Action": "fsx:DescribeStorageVirtualMachines",
          "Resource": "arn:aws:fsx:*:*:storage-virtual-machine/*/*"
        },
        {
          "Effect": "Allow",
          "Action": "fsx:DeleteBackup",
          "Resource": "arn:aws:fsx:*:*:backup/*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "backup.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ds:DescribeDirectories",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "backup.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "backup-gateway:AssociateGatewayToServer",
            "backup-gateway:CreateGateway",
            "backup-gateway:DeleteGateway",
            "backup-gateway:DeleteHypervisor",
            "backup-gateway:DisassociateGatewayFromServer",
            "backup-gateway:ImportHypervisorConfiguration",
            "backup-gateway:ListGateways",
            "backup-gateway:ListHypervisors",
            "backup-gateway:ListTagsForResource",
            "backup-gateway:ListVirtualMachines",
            "backup-gateway:PutMaintenanceStartTime",
            "backup-gateway:TagResource",
            "backup-gateway:TestHypervisorConfiguration",
            "backup-gateway:UntagResource",
            "backup-gateway:UpdateGatewayInformation",
            "backup-gateway:UpdateHypervisor"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "backup-gateway:GetHypervisor",
            "backup-gateway:GetHypervisorPropertyMappings",
            "backup-gateway:PutHypervisorPropertyMappings",
            "backup-gateway:StartVirtualMachinesMetadataSync"
          ],
          "Resource": "arn:aws:backup-gateway:*:*:hypervisor/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "backup-gateway:GetVirtualMachine"
          ],
          "Resource": "arn:aws:backup-gateway:*:*:vm/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "backup-gateway:GetBandwidthRateLimitSchedule",
            "backup-gateway:GetGateway",
            "backup-gateway:PutBandwidthRateLimitSchedule"
          ],
          "Resource": "arn:aws:backup-gateway:*:*:gateway/*"
        },
        {
          "Effect": "Allow",
          "Action": "cloudwatch:GetMetricData",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "timestream:ListTables",
            "timestream:ListDatabases"
          ],
          "Resource": [
            "arn:aws:timestream:*:*:database/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "timestream:DescribeEndpoints"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListAllMyBuckets"
          ],
          "Resource": "arn:aws:s3:::*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "redshift:DescribeClusters",
            "redshift:DescribeClusterSubnetGroups",
            "redshift:DescribeClusterSnapshots",
            "redshift:DescribeSnapshotSchedules"
          ],
          "Resource": [
            "arn:aws:redshift:*:*:cluster:*",
            "arn:aws:redshift:*:*:subnetgroup:*",
            "arn:aws:redshift:*:*:snapshot:*/*",
            "arn:aws:redshift:*:*:snapshotschedule:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "redshift:DescribeNodeConfigurationOptions",
            "redshift:DescribeOrderableClusterOptions",
            "redshift:DescribeClusterParameterGroups",
            "redshift:DescribeClusterTracks"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeAddresses"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:ListStacks"
          ],
          "Resource": [
            "arn:aws:cloudformation:*:*:stack/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm-sap:GetOperation",
            "ssm-sap:ListDatabases"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm-sap:GetDatabase",
            "ssm-sap:ListTagsForResource"
          ],
          "Resource": "arn:aws:ssm-sap:*:*:*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ram:GetResourceShareAssociations"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v16",
    "IsDefaultVersion": true,
    "CreateDate": "2023-09-06T20:47:03+00:00"
  },
  "AWSBackupGatewayServiceRolePolicyForVirtualMachineMetadataSync": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "ListVmTags",
          "Effect": "Allow",
          "Action": [
            "backup-gateway:ListTagsForResource"
          ],
          "Resource": "arn:aws:backup-gateway:*:*:vm/*"
        },
        {
          "Sid": "VMTagPermissions",
          "Effect": "Allow",
          "Action": [
            "backup-gateway:TagResource",
            "backup-gateway:UntagResource"
          ],
          "Resource": "arn:aws:backup-gateway:*:*:vm/*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-12-15T19:43:11+00:00"
  },
  "AWSBackupOperatorAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "backup:Get*",
            "backup:List*",
            "backup:Describe*",
            "backup:CreateBackupSelection",
            "backup:DeleteBackupSelection",
            "backup:StartBackupJob",
            "backup:StartRestoreJob",
            "backup:StartCopyJob"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "rds:DescribeDBSnapshots",
            "rds:ListTagsForResource",
            "rds:DescribeDBInstances",
            "rds:describeDBEngineVersions",
            "rds:describeOptionGroups",
            "rds:describeOrderableDBInstanceOptions",
            "rds:describeDBSubnetGroups",
            "rds:DescribeDBClusterSnapshots",
            "rds:DescribeDBClusters",
            "rds:DescribeDBParameterGroups",
            "rds:DescribeDBClusterParameterGroups",
            "rds:DescribeDBInstanceAutomatedBackups",
            "rds:DescribeDBClusterAutomatedBackups"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:ListBackups",
            "dynamodb:ListTables"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticfilesystem:DescribeFilesystems"
          ],
          "Resource": "arn:aws:elasticfilesystem:*:*:file-system/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeSnapshots",
            "ec2:DescribeVolumes",
            "ec2:describeAvailabilityZones",
            "ec2:DescribeVpcs",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeImages",
            "ec2:DescribeSubnets",
            "ec2:DescribePlacementGroups",
            "ec2:DescribeInstances",
            "ec2:DescribeInstanceTypes",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeAddresses"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "tag:GetTagKeys",
            "tag:GetTagValues",
            "tag:GetResources"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "storagegateway:DescribeCachediSCSIVolumes",
            "storagegateway:DescribeStorediSCSIVolumes"
          ],
          "Resource": "arn:aws:storagegateway:*:*:gateway/*/volume/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "storagegateway:ListGateways"
          ],
          "Resource": "arn:aws:storagegateway:*:*:*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "storagegateway:DescribeGatewayInformation",
            "storagegateway:ListVolumes",
            "storagegateway:ListLocalDisks"
          ],
          "Resource": "arn:aws:storagegateway:*:*:gateway/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:ListRoles",
            "iam:GetRole"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": [
            "arn:aws:iam::*:role/*AwsBackup*",
            "arn:aws:iam::*:role/*AWSBackup*"
          ],
          "Condition": {
            "StringLike": {
              "iam:PassedToService": "backup.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "organizations:DescribeOrganization",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:CancelCommand",
            "ssm:GetCommandInvocation"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "ssm:SendCommand",
          "Resource": [
            "arn:aws:ssm:*:*:document/AWSEC2-CreateVssSnapshot",
            "arn:aws:ec2:*:*:instance/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "fsx:DescribeBackups",
          "Resource": "arn:aws:fsx:*:*:backup/*"
        },
        {
          "Effect": "Allow",
          "Action": "fsx:DescribeFileSystems",
          "Resource": "arn:aws:fsx:*:*:file-system/*"
        },
        {
          "Effect": "Allow",
          "Action": "fsx:DescribeVolumes",
          "Resource": "arn:aws:fsx:*:*:volume/*/*"
        },
        {
          "Effect": "Allow",
          "Action": "fsx:DescribeStorageVirtualMachines",
          "Resource": "arn:aws:fsx:*:*:storage-virtual-machine/*/*"
        },
        {
          "Effect": "Allow",
          "Action": "ds:DescribeDirectories",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "backup-gateway:ListGateways",
            "backup-gateway:ListHypervisors",
            "backup-gateway:ListTagsForResource",
            "backup-gateway:ListVirtualMachines"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "backup-gateway:GetHypervisor",
            "backup-gateway:GetHypervisorPropertyMappings"
          ],
          "Resource": "arn:aws:backup-gateway:*:*:hypervisor/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "backup-gateway:GetVirtualMachine"
          ],
          "Resource": "arn:aws:backup-gateway:*:*:vm/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "backup-gateway:GetBandwidthRateLimitSchedule",
            "backup-gateway:GetGateway"
          ],
          "Resource": "arn:aws:backup-gateway:*:*:gateway/*"
        },
        {
          "Effect": "Allow",
          "Action": "cloudwatch:GetMetricData",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "timestream:ListDatabases",
            "timestream:ListTables"
          ],
          "Resource": [
            "arn:aws:timestream:*:*:database/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "timestream:DescribeEndpoints"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListAllMyBuckets"
          ],
          "Resource": "arn:aws:s3:::*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "redshift:DescribeClusters",
            "redshift:DescribeClusterSubnetGroups",
            "redshift:DescribeClusterSnapshots",
            "redshift:DescribeSnapshotSchedules"
          ],
          "Resource": [
            "arn:aws:redshift:*:*:cluster:*",
            "arn:aws:redshift:*:*:subnetgroup:*",
            "arn:aws:redshift:*:*:snapshot:*/*",
            "arn:aws:redshift:*:*:snapshotschedule:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "redshift:DescribeNodeConfigurationOptions",
            "redshift:DescribeOrderableClusterOptions",
            "redshift:DescribeClusterParameterGroups",
            "redshift:DescribeClusterTracks"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:ListStacks"
          ],
          "Resource": [
            "arn:aws:cloudformation:*:*:stack/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm-sap:GetOperation",
            "ssm-sap:ListDatabases"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm-sap:GetDatabase",
            "ssm-sap:ListTagsForResource"
          ],
          "Resource": "arn:aws:ssm-sap:*:*:*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ram:GetResourceShareAssociations"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v15",
    "IsDefaultVersion": true,
    "CreateDate": "2023-09-06T20:45:05+00:00"
  },
  "AWSBackupOrganizationAdminAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "organizations:DisableAWSServiceAccess",
            "organizations:EnableAWSServiceAccess",
            "organizations:ListDelegatedAdministrators"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "organizations:ServicePrincipal": [
                "backup.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "organizations:RegisterDelegatedAdministrator",
            "organizations:DeregisterDelegatedAdministrator"
          ],
          "Resource": "arn:aws:organizations::*:account/*",
          "Condition": {
            "StringEquals": {
              "organizations:ServicePrincipal": [
                "backup.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "organizations:AttachPolicy",
            "organizations:ListPoliciesForTarget",
            "organizations:ListTargetsForPolicy",
            "organizations:DetachPolicy",
            "organizations:DisablePolicyType",
            "organizations:DescribePolicy",
            "organizations:DescribeEffectivePolicy",
            "organizations:ListPolicies",
            "organizations:EnablePolicyType",
            "organizations:CreatePolicy",
            "organizations:UpdatePolicy",
            "organizations:DeletePolicy"
          ],
          "Resource": "*",
          "Condition": {
            "StringLikeIfExists": {
              "organizations:PolicyType": [
                "BACKUP_POLICY"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "organizations:ListRoots",
            "organizations:ListParents",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccountsForParent",
            "organizations:ListAccounts",
            "organizations:DescribeOrganization",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListChildren",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganizationalUnit"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-18T18:26:40+00:00"
  },
  "AWSBackupRestoreAccessForSAPHANA": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "backup:Get*",
            "backup:List*",
            "backup:Describe*",
            "backup:StartBackupJob",
            "backup:StartRestoreJob"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm-sap:GetOperation",
            "ssm-sap:ListDatabases"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm-sap:BackupDatabase",
            "ssm-sap:RestoreDatabase",
            "ssm-sap:UpdateHanaBackupSettings",
            "ssm-sap:GetDatabase",
            "ssm-sap:ListTagsForResource"
          ],
          "Resource": "arn:aws:ssm-sap:*:*:*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-10T22:43:27+00:00"
  },
  "AWSBackupServiceLinkedRolePolicyForBackup": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "elasticfilesystem:Backup",
            "elasticfilesystem:DescribeTags"
          ],
          "Resource": "arn:aws:elasticfilesystem:*:*:file-system/*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/aws:elasticfilesystem:default-backup": "enabled"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "tag:GetResources",
            "elasticfilesystem:DescribeFileSystems",
            "dynamodb:ListTables",
            "storagegateway:ListVolumes",
            "ec2:DescribeVolumes",
            "ec2:DescribeInstances",
            "rds:DescribeDBInstances",
            "rds:DescribeDBClusters",
            "fsx:DescribeFileSystems",
            "fsx:DescribeVolumes",
            "s3:ListAllMyBuckets",
            "s3:GetBucketTagging"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": "arn:aws:ec2:*::snapshot/*",
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "CopySnapshot"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": [
            "arn:aws:ec2:*::image/*",
            "arn:aws:ec2:*::snapshot/*"
          ],
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "AWSBackupManagedResource"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": [
            "arn:aws:ec2:*::image/*",
            "arn:aws:ec2:*::snapshot/*"
          ],
          "Condition": {
            "Null": {
              "ec2:ResourceTag/AWSBackupManagedResource": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeSnapshots",
            "ec2:DescribeImages",
            "rds:DescribeDBSnapshots",
            "rds:DescribeDBClusterSnapshots"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CopySnapshot",
          "Resource": "arn:aws:ec2:*::snapshot/*"
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CopyImage",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeregisterImage",
            "ec2:DeleteSnapshot"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "ec2:ResourceTag/AWSBackupManagedResource": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "rds:AddTagsToResource",
            "rds:CopyDBSnapshot",
            "rds:DeleteDBSnapshot"
          ],
          "Resource": "arn:aws:rds:*:*:snapshot:awsbackup:*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "rds:AddTagsToResource",
            "rds:CopyDBClusterSnapshot",
            "rds:DeleteDBClusterSnapshot"
          ],
          "Resource": "arn:aws:rds:*:*:cluster-snapshot:awsbackup:*"
        },
        {
          "Effect": "Allow",
          "Action": "kms:DescribeKey",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:ListGrants",
            "kms:ReEncryptFrom",
            "kms:GenerateDataKeyWithoutPlaintext"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "kms:ViaService": [
                "ec2.*.amazonaws.com",
                "rds.*.amazonaws.com",
                "fsx.*.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "kms:CreateGrant",
          "Resource": "*",
          "Condition": {
            "Bool": {
              "kms:GrantIsForAWSResource": "true"
            },
            "StringLike": {
              "kms:ViaService": [
                "ec2.*.amazonaws.com",
                "rds.*.amazonaws.com",
                "fsx.*.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "fsx:CopyBackup",
            "fsx:TagResource",
            "fsx:DescribeBackups",
            "fsx:DeleteBackup"
          ],
          "Resource": "arn:aws:fsx:*:*:backup/*"
        },
        {
          "Effect": "Allow",
          "Action": "dynamodb:DeleteBackup",
          "Resource": "arn:aws:dynamodb:*:*:table/*/backup/*"
        },
        {
          "Sid": "BackupGateway",
          "Effect": "Allow",
          "Action": [
            "backup-gateway:ListVirtualMachines"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ListTagsForBackupGateway",
          "Effect": "Allow",
          "Action": [
            "backup-gateway:ListTagsForResource"
          ],
          "Resource": "arn:aws:backup-gateway:*:*:vm/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:ListTagsOfResource",
            "dynamodb:DescribeTable"
          ],
          "Resource": "arn:aws:dynamodb:*:*:table/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "storagegateway:DescribeCachediSCSIVolumes",
            "storagegateway:DescribeStorediSCSIVolumes"
          ],
          "Resource": "arn:aws:storagegateway:*:*:gateway/*/volume/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "events:DeleteRule",
            "events:PutTargets",
            "events:DescribeRule",
            "events:EnableRule",
            "events:PutRule",
            "events:RemoveTargets",
            "events:ListTargetsByRule",
            "events:DisableRule"
          ],
          "Resource": [
            "arn:aws:events:*:*:rule/AwsBackupManagedRule*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "events:ListRules",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm-sap:GetOperation",
            "ssm-sap:UpdateHANABackupSettings"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "timestream:ListDatabases",
            "timestream:ListTables",
            "timestream:ListTagsForResource",
            "timestream:DescribeDatabase",
            "timestream:DescribeTable",
            "timestream:GetAwsBackupStatus",
            "timestream:GetAwsRestoreStatus"
          ],
          "Resource": [
            "arn:aws:timestream:*:*:database/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "timestream:DescribeEndpoints"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "redshift:DescribeClusterSnapshots",
            "redshift:DescribeTags"
          ],
          "Resource": [
            "arn:aws:redshift:*:*:snapshot:*/*",
            "arn:aws:redshift:*:*:cluster:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "redshift:DeleteClusterSnapshot"
          ],
          "Resource": [
            "arn:aws:redshift:*:*:snapshot:*/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "redshift:DescribeClusters"
          ],
          "Resource": [
            "arn:aws:redshift:*:*:cluster:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:ListStacks"
          ],
          "Resource": [
            "arn:aws:cloudformation:*:*:stack/*"
          ]
        }
      ]
    },
    "VersionId": "v13",
    "IsDefaultVersion": true,
    "CreateDate": "2023-04-24T21:22:45+00:00"
  },
  "AWSBackupServiceLinkedRolePolicyForBackupTest": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "elasticfilesystem:Backup",
            "elasticfilesystem:DescribeTags"
          ],
          "Resource": "arn:aws:elasticfilesystem:*:*:file-system/*",
          "Effect": "Allow",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/aws:elasticfilesystem:default-backup": "enabled"
            }
          }
        },
        {
          "Action": [
            "tag:GetResources"
          ],
          "Resource": "*",
          "Effect": "Allow"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-05-12T17:37:29+00:00"
  },
  "AWSBackupServiceRolePolicyForBackup": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:DescribeTable",
            "dynamodb:CreateBackup"
          ],
          "Resource": "arn:aws:dynamodb:*:*:table/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:DescribeBackup",
            "dynamodb:DeleteBackup"
          ],
          "Resource": "arn:aws:dynamodb:*:*:table/*/backup/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "rds:AddTagsToResource",
            "rds:ListTagsForResource",
            "rds:DescribeDBSnapshots",
            "rds:CreateDBSnapshot",
            "rds:CopyDBSnapshot",
            "rds:DescribeDBInstances",
            "rds:CreateDBClusterSnapshot",
            "rds:DescribeDBClusters",
            "rds:DescribeDBClusterSnapshots",
            "rds:CopyDBClusterSnapshot",
            "rds:DescribeDBClusterAutomatedBackups"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "rds:ModifyDBInstance"
          ],
          "Resource": [
            "arn:aws:rds:*:*:db:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "rds:ModifyDBCluster"
          ],
          "Resource": [
            "arn:aws:rds:*:*:cluster:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "rds:DeleteDBClusterAutomatedBackup"
          ],
          "Resource": "arn:aws:rds:*:*:cluster-auto-backup:*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "rds:DeleteDBSnapshot",
            "rds:ModifyDBSnapshotAttribute"
          ],
          "Resource": [
            "arn:aws:rds:*:*:snapshot:awsbackup:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "rds:DeleteDBClusterSnapshot",
            "rds:ModifyDBClusterSnapshotAttribute"
          ],
          "Resource": [
            "arn:aws:rds:*:*:cluster-snapshot:awsbackup:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "storagegateway:CreateSnapshot",
            "storagegateway:ListTagsForResource"
          ],
          "Resource": "arn:aws:storagegateway:*:*:gateway/*/volume/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CopySnapshot"
          ],
          "Resource": "arn:aws:ec2:*::snapshot/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CopyImage"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags",
            "ec2:DeleteSnapshot"
          ],
          "Resource": "arn:aws:ec2:*::snapshot/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateImage",
            "ec2:DeregisterImage"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": "arn:aws:ec2:*:*:image/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeSnapshots",
            "ec2:DescribeTags",
            "ec2:DescribeImages",
            "ec2:DescribeInstances",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstanceCreditSpecifications",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeElasticGpus",
            "ec2:DescribeSpotInstanceRequests"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:ModifySnapshotAttribute",
            "ec2:ModifyImageAttribute"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/aws:backup:source-resource": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "backup:DescribeBackupVault",
            "backup:CopyIntoBackupVault"
          ],
          "Resource": "arn:aws:backup:*:*:backup-vault:*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "backup:CopyFromBackupVault"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticfilesystem:Backup",
            "elasticfilesystem:DescribeTags"
          ],
          "Resource": "arn:aws:elasticfilesystem:*:*:file-system/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSnapshot",
            "ec2:DeleteSnapshot",
            "ec2:DescribeVolumes",
            "ec2:DescribeSnapshots"
          ],
          "Resource": [
            "arn:aws:ec2:*::snapshot/*",
            "arn:aws:ec2:*:*:volume/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:Decrypt",
            "kms:GenerateDataKey"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "kms:ViaService": [
                "dynamodb.*.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "kms:DescribeKey",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "kms:CreateGrant",
          "Resource": "*",
          "Condition": {
            "Bool": {
              "kms:GrantIsForAWSResource": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:GenerateDataKeyWithoutPlaintext"
          ],
          "Resource": "arn:aws:kms:*:*:key/*",
          "Condition": {
            "StringLike": {
              "kms:ViaService": [
                "ec2.*.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "tag:GetResources"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:CancelCommand",
            "ssm:GetCommandInvocation"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "ssm:SendCommand",
          "Resource": [
            "arn:aws:ssm:*:*:document/AWSEC2-CreateVssSnapshot",
            "arn:aws:ec2:*:*:instance/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "fsx:DescribeBackups",
          "Resource": "arn:aws:fsx:*:*:backup/*"
        },
        {
          "Effect": "Allow",
          "Action": "fsx:CreateBackup",
          "Resource": [
            "arn:aws:fsx:*:*:file-system/*",
            "arn:aws:fsx:*:*:backup/*",
            "arn:aws:fsx:*:*:volume/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "fsx:DescribeFileSystems",
          "Resource": "arn:aws:fsx:*:*:file-system/*"
        },
        {
          "Effect": "Allow",
          "Action": "fsx:DescribeVolumes",
          "Resource": "arn:aws:fsx:*:*:volume/*"
        },
        {
          "Effect": "Allow",
          "Action": "fsx:ListTagsForResource",
          "Resource": [
            "arn:aws:fsx:*:*:file-system/*",
            "arn:aws:fsx:*:*:volume/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "fsx:DeleteBackup",
          "Resource": "arn:aws:fsx:*:*:backup/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "fsx:ListTagsForResource",
            "fsx:ManageBackupPrincipalAssociations",
            "fsx:CopyBackup",
            "fsx:TagResource"
          ],
          "Resource": "arn:aws:fsx:*:*:backup/*"
        },
        {
          "Sid": "DynamodbBackupPermissions",
          "Effect": "Allow",
          "Action": [
            "dynamodb:StartAwsBackupJob",
            "dynamodb:ListTagsOfResource"
          ],
          "Resource": "arn:aws:dynamodb:*:*:table/*"
        },
        {
          "Sid": "BackupGatewayBackupPermissions",
          "Effect": "Allow",
          "Action": [
            "backup-gateway:Backup",
            "backup-gateway:ListTagsForResource"
          ],
          "Resource": "arn:aws:backup-gateway:*:*:vm/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:ListStacks",
            "cloudformation:GetTemplate",
            "cloudformation:DescribeStacks",
            "cloudformation:ListStackResources"
          ],
          "Resource": "arn:aws:cloudformation:*:*:stack/*/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "redshift:CreateClusterSnapshot",
            "redshift:DescribeClusterSnapshots",
            "redshift:DescribeTags"
          ],
          "Resource": [
            "arn:aws:redshift:*:*:snapshot:*/*",
            "arn:aws:redshift:*:*:cluster:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "redshift:DeleteClusterSnapshot"
          ],
          "Resource": [
            "arn:aws:redshift:*:*:snapshot:*/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "redshift:DescribeClusters"
          ],
          "Resource": [
            "arn:aws:redshift:*:*:cluster:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "redshift:CreateTags"
          ],
          "Resource": [
            "arn:aws:redshift:*:*:snapshot:*/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "timestream:StartAwsBackupJob",
            "timestream:GetAwsBackupStatus",
            "timestream:ListTables",
            "timestream:ListDatabases",
            "timestream:ListTagsForResource",
            "timestream:DescribeTable",
            "timestream:DescribeDatabase"
          ],
          "Resource": [
            "arn:aws:timestream:*:*:database/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "timestream:DescribeEndpoints"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm-sap:GetOperation",
            "ssm-sap:ListDatabases"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm-sap:BackupDatabase",
            "ssm-sap:UpdateHanaBackupSettings",
            "ssm-sap:GetDatabase",
            "ssm-sap:ListTagsForResource"
          ],
          "Resource": "arn:aws:ssm-sap:*:*:*"
        }
      ]
    },
    "VersionId": "v16",
    "IsDefaultVersion": true,
    "CreateDate": "2023-09-06T20:38:44+00:00"
  },
  "AWSBackupServiceRolePolicyForRestores": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Scan",
            "dynamodb:Query",
            "dynamodb:UpdateItem",
            "dynamodb:PutItem",
            "dynamodb:GetItem",
            "dynamodb:DeleteItem",
            "dynamodb:BatchWriteItem",
            "dynamodb:DescribeTable"
          ],
          "Resource": "arn:aws:dynamodb:*:*:table/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:RestoreTableFromBackup"
          ],
          "Resource": "arn:aws:dynamodb:*:*:table/*/backup/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateVolume",
            "ec2:DeleteVolume"
          ],
          "Resource": [
            "arn:aws:ec2:*::snapshot/*",
            "arn:aws:ec2:*:*:volume/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeImages",
            "ec2:DescribeInstances",
            "ec2:DescribeSnapshots",
            "ec2:DescribeVolumes"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "storagegateway:DeleteVolume",
            "storagegateway:DescribeCachediSCSIVolumes",
            "storagegateway:DescribeStorediSCSIVolumes",
            "storagegateway:AddTagsToResource"
          ],
          "Resource": "arn:aws:storagegateway:*:*:gateway/*/volume/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "storagegateway:DescribeGatewayInformation",
            "storagegateway:CreateStorediSCSIVolume",
            "storagegateway:CreateCachediSCSIVolume"
          ],
          "Resource": "arn:aws:storagegateway:*:*:gateway/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "storagegateway:ListVolumes"
          ],
          "Resource": "arn:aws:storagegateway:*:*:*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "rds:DescribeDBInstances",
            "rds:DescribeDBSnapshots",
            "rds:ListTagsForResource",
            "rds:RestoreDBInstanceFromDBSnapshot",
            "rds:DeleteDBInstance",
            "rds:AddTagsToResource",
            "rds:DescribeDBClusters",
            "rds:RestoreDBClusterFromSnapshot",
            "rds:DeleteDBCluster",
            "rds:RestoreDBInstanceToPointInTime",
            "rds:DescribeDBClusterSnapshots",
            "rds:RestoreDBClusterToPointInTime"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticfilesystem:Restore",
            "elasticfilesystem:CreateFilesystem",
            "elasticfilesystem:DescribeFilesystems",
            "elasticfilesystem:DeleteFilesystem",
            "elasticfilesystem:TagResource"
          ],
          "Resource": "arn:aws:elasticfilesystem:*:*:file-system/*"
        },
        {
          "Effect": "Allow",
          "Action": "kms:DescribeKey",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:Decrypt",
            "kms:Encrypt",
            "kms:GenerateDataKey",
            "kms:ReEncryptTo",
            "kms:ReEncryptFrom",
            "kms:GenerateDataKeyWithoutPlaintext"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "kms:ViaService": [
                "dynamodb.*.amazonaws.com",
                "ec2.*.amazonaws.com",
                "elasticfilesystem.*.amazonaws.com",
                "rds.*.amazonaws.com",
                "redshift.*.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "kms:CreateGrant",
          "Resource": "*",
          "Condition": {
            "Bool": {
              "kms:GrantIsForAWSResource": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ebs:CompleteSnapshot",
            "ebs:StartSnapshot",
            "ebs:PutSnapshotBlock"
          ],
          "Resource": "arn:aws:ec2:*::snapshot/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "rds:CreateDBInstance"
          ],
          "Resource": "arn:aws:rds:*:*:db:*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteSnapshot",
            "ec2:DeleteTags"
          ],
          "Resource": "arn:aws:ec2:*::snapshot/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/aws:backup:source-resource": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": [
            "arn:aws:ec2:*::snapshot/*",
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "aws:backup:source-resource"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:RunInstances"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:TerminateInstances"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*",
            "arn:aws:ec2:*:*:volume/*"
          ],
          "Condition": {
            "ForAnyValue:StringLike": {
              "ec2:CreateAction": [
                "RunInstances",
                "CreateVolume"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "fsx:CreateFileSystemFromBackup"
          ],
          "Resource": [
            "arn:aws:fsx:*:*:file-system/*",
            "arn:aws:fsx:*:*:backup/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "fsx:DescribeFileSystems",
            "fsx:TagResource"
          ],
          "Resource": "arn:aws:fsx:*:*:file-system/*"
        },
        {
          "Effect": "Allow",
          "Action": "fsx:DescribeBackups",
          "Resource": "arn:aws:fsx:*:*:backup/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "fsx:DeleteFileSystem",
            "fsx:UntagResource"
          ],
          "Resource": "arn:aws:fsx:*:*:file-system/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/aws:backup:source-resource": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "fsx:DescribeVolumes"
          ],
          "Resource": "arn:aws:fsx:*:*:volume/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "fsx:CreateVolumeFromBackup",
            "fsx:TagResource"
          ],
          "Resource": [
            "arn:aws:fsx:*:*:volume/*"
          ],
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "aws:backup:source-resource"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "fsx:CreateVolumeFromBackup",
            "fsx:TagResource"
          ],
          "Resource": [
            "arn:aws:fsx:*:*:storage-virtual-machine/*",
            "arn:aws:fsx:*:*:backup/*",
            "arn:aws:fsx:*:*:volume/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "fsx:DeleteVolume",
            "fsx:UntagResource"
          ],
          "Resource": "arn:aws:fsx:*:*:volume/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/aws:backup:source-resource": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ds:DescribeDirectories",
          "Resource": "*"
        },
        {
          "Sid": "DynamoDBRestorePermissions",
          "Effect": "Allow",
          "Action": [
            "dynamodb:RestoreTableFromAwsBackup"
          ],
          "Resource": "arn:aws:dynamodb:*:*:table/*"
        },
        {
          "Sid": "GatewayRestorePermissions",
          "Effect": "Allow",
          "Action": [
            "backup-gateway:Restore"
          ],
          "Resource": "arn:aws:backup-gateway:*:*:hypervisor/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:CreateChangeSet",
            "cloudformation:DescribeChangeSet",
            "cloudformation:TagResource"
          ],
          "Resource": "arn:aws:cloudformation:*:*:*/*/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "redshift:RestoreFromClusterSnapshot",
            "redshift:RestoreTableFromClusterSnapshot"
          ],
          "Resource": [
            "arn:aws:redshift:*:*:snapshot:*/*",
            "arn:aws:redshift:*:*:cluster:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "redshift:DescribeClusters"
          ],
          "Resource": [
            "arn:aws:redshift:*:*:cluster:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "redshift:DescribeTableRestoreStatus"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:DescribeInternetGateways"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "timestream:StartAwsRestoreJob",
            "timestream:GetAwsRestoreStatus",
            "timestream:ListTables",
            "timestream:ListTagsForResource",
            "timestream:ListDatabases",
            "timestream:DescribeTable",
            "timestream:DescribeDatabase"
          ],
          "Resource": [
            "arn:aws:timestream:*:*:database/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "timestream:DescribeEndpoints"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v18",
    "IsDefaultVersion": true,
    "CreateDate": "2023-09-06T20:41:44+00:00"
  },
  "AWSBackupServiceRolePolicyForS3Backup": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "cloudwatch:GetMetricData",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "events:DeleteRule",
            "events:PutTargets",
            "events:DescribeRule",
            "events:EnableRule",
            "events:PutRule",
            "events:RemoveTargets",
            "events:ListTargetsByRule",
            "events:DisableRule"
          ],
          "Resource": [
            "arn:aws:events:*:*:rule/AwsBackupManagedRule*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "events:ListRules",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:Decrypt",
            "kms:DescribeKey"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "kms:ViaService": "s3.*.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetBucketTagging",
            "s3:GetInventoryConfiguration",
            "s3:ListBucketVersions",
            "s3:ListBucket",
            "s3:GetBucketVersioning",
            "s3:GetBucketLocation",
            "s3:GetBucketAcl",
            "s3:PutInventoryConfiguration",
            "s3:GetBucketNotification",
            "s3:PutBucketNotification"
          ],
          "Resource": "arn:aws:s3:::*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObjectAcl",
            "s3:GetObject",
            "s3:GetObjectVersionTagging",
            "s3:GetObjectVersionAcl",
            "s3:GetObjectTagging",
            "s3:GetObjectVersion"
          ],
          "Resource": "arn:aws:s3:::*/*"
        },
        {
          "Effect": "Allow",
          "Action": "s3:ListAllMyBuckets",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2022-09-01T16:52:33+00:00"
  },
  "AWSBackupServiceRolePolicyForS3Restore": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:CreateBucket",
            "s3:ListBucketVersions",
            "s3:ListBucket",
            "s3:GetBucketVersioning",
            "s3:GetBucketLocation",
            "s3:PutBucketVersioning",
            "s3:PutBucketOwnershipControls",
            "s3:GetBucketOwnershipControls"
          ],
          "Resource": [
            "arn:aws:s3:::*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:DeleteObject",
            "s3:PutObjectVersionAcl",
            "s3:GetObjectVersionAcl",
            "s3:GetObjectTagging",
            "s3:PutObjectTagging",
            "s3:GetObjectAcl",
            "s3:PutObjectAcl",
            "s3:ListMultipartUploadParts",
            "s3:PutObject"
          ],
          "Resource": [
            "arn:aws:s3:::*/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:DescribeKey",
            "kms:GenerateDataKey",
            "kms:Decrypt"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "kms:ViaService": "s3.*.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-02-07T00:06:00+00:00"
  },
  "AWSBatchFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "batch:*",
            "cloudwatch:GetMetricStatistics",
            "ec2:DescribeSubnets",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeVpcs",
            "ec2:DescribeImages",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeLaunchTemplateVersions",
            "ecs:DescribeClusters",
            "ecs:Describe*",
            "ecs:List*",
            "eks:DescribeCluster",
            "eks:ListClusters",
            "logs:Describe*",
            "logs:Get*",
            "logs:TestMetricFilter",
            "logs:FilterLogEvents",
            "iam:ListInstanceProfiles",
            "iam:ListRoles"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/AWSBatchServiceRole",
            "arn:aws:iam::*:role/service-role/AWSBatchServiceRole",
            "arn:aws:iam::*:role/ecsInstanceRole",
            "arn:aws:iam::*:instance-profile/ecsInstanceRole",
            "arn:aws:iam::*:role/iaws-ec2-spot-fleet-role",
            "arn:aws:iam::*:role/aws-ec2-spot-fleet-role",
            "arn:aws:iam::*:role/AWSBatchJobRole*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": "arn:aws:iam::*:role/*Batch*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "batch.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v7",
    "IsDefaultVersion": true,
    "CreateDate": "2022-10-24T16:09:09+00:00"
  },
  "AWSBatchServiceEventTargetRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "batch:SubmitJob"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-02-28T22:31:13+00:00"
  },
  "AWSBatchServiceRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeInstances",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeSubnets",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeImages",
            "ec2:DescribeImageAttribute",
            "ec2:DescribeSpotInstanceRequests",
            "ec2:DescribeSpotFleetInstances",
            "ec2:DescribeSpotFleetRequests",
            "ec2:DescribeSpotPriceHistory",
            "ec2:DescribeVpcClassicLink",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:CreateLaunchTemplate",
            "ec2:DeleteLaunchTemplate",
            "ec2:RequestSpotFleet",
            "ec2:CancelSpotFleetRequests",
            "ec2:ModifySpotFleetRequest",
            "ec2:TerminateInstances",
            "ec2:RunInstances",
            "autoscaling:DescribeAccountLimits",
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribeLaunchConfigurations",
            "autoscaling:DescribeAutoScalingInstances",
            "autoscaling:CreateLaunchConfiguration",
            "autoscaling:CreateAutoScalingGroup",
            "autoscaling:UpdateAutoScalingGroup",
            "autoscaling:SetDesiredCapacity",
            "autoscaling:DeleteLaunchConfiguration",
            "autoscaling:DeleteAutoScalingGroup",
            "autoscaling:CreateOrUpdateTags",
            "autoscaling:SuspendProcesses",
            "autoscaling:PutNotificationConfiguration",
            "autoscaling:TerminateInstanceInAutoScalingGroup",
            "ecs:DescribeClusters",
            "ecs:DescribeContainerInstances",
            "ecs:DescribeTaskDefinition",
            "ecs:DescribeTasks",
            "ecs:ListAccountSettings",
            "ecs:ListClusters",
            "ecs:ListContainerInstances",
            "ecs:ListTaskDefinitionFamilies",
            "ecs:ListTaskDefinitions",
            "ecs:ListTasks",
            "ecs:CreateCluster",
            "ecs:DeleteCluster",
            "ecs:RegisterTaskDefinition",
            "ecs:DeregisterTaskDefinition",
            "ecs:RunTask",
            "ecs:StartTask",
            "ecs:StopTask",
            "ecs:UpdateContainerAgent",
            "ecs:DeregisterContainerInstance",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "logs:DescribeLogGroups",
            "iam:GetInstanceProfile",
            "iam:GetRole"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "ecs:TagResource",
          "Resource": [
            "arn:aws:ecs:*:*:task/*_Batch_*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "ec2.amazonaws.com",
                "ec2.amazonaws.com.cn",
                "ecs-tasks.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": [
                "spot.amazonaws.com",
                "spotfleet.amazonaws.com",
                "autoscaling.amazonaws.com",
                "ecs.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "RunInstances"
            }
          }
        }
      ]
    },
    "VersionId": "v12",
    "IsDefaultVersion": true,
    "CreateDate": "2021-12-07T02:22:29+00:00"
  },
  "AWSBillingConductorFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "billingconductor:*",
            "organizations:ListAccounts",
            "pricing:DescribeServices"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-04-13T18:02:29+00:00"
  },
  "AWSBillingConductorReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "billingconductor:List*",
            "organizations:ListAccounts",
            "pricing:DescribeServices"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-04-13T18:02:59+00:00"
  },
  "AWSBillingReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "VisualEditor0",
          "Effect": "Allow",
          "Action": [
            "account:GetAccountInformation",
            "aws-portal:ViewBilling",
            "billing:GetBillingData",
            "billing:GetBillingDetails",
            "billing:GetBillingNotifications",
            "billing:GetBillingPreferences",
            "billing:GetCredits",
            "billing:GetContractInformation",
            "billing:GetIAMAccessPreference",
            "billing:GetSellerOfRecord",
            "billing:ListBillingViews",
            "ce:ListCostAllocationTags",
            "consolidatedbilling:ListLinkedAccounts",
            "consolidatedbilling:GetAccountBillingRole",
            "cur:GetClassicReport",
            "cur:GetClassicReportPreferences",
            "cur:GetUsageReport",
            "freetier:GetFreeTierAlertPreference",
            "freetier:GetFreeTierUsage",
            "invoicing:GetInvoiceEmailDeliveryPreferences",
            "invoicing:GetInvoicePDF",
            "invoicing:ListInvoiceSummaries",
            "payments:GetPaymentInstrument",
            "payments:GetPaymentStatus",
            "payments:ListPaymentPreferences",
            "purchase-orders:GetPurchaseOrder",
            "purchase-orders:ViewPurchaseOrders",
            "purchase-orders:ListPurchaseOrderInvoices",
            "purchase-orders:ListPurchaseOrders",
            "purchase-orders:ListTagsForResource",
            "tax:GetTaxRegistrationDocument",
            "tax:GetTaxInheritance",
            "tax:ListTaxRegistrations"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2023-07-26T18:05:19+00:00"
  },
  "AWSBudgetsActionsRolePolicyForResourceAdministrationWithSSM": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstanceStatus",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "rds:DescribeDBInstances",
            "rds:StartDBInstance",
            "rds:StopDBInstance"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "ssm.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:StartAutomationExecution"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-10-15T17:20:48+00:00"
  },
  "AWSBudgetsActionsWithAWSResourceControlAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "budgets:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "aws-portal:ViewBilling"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "budgets.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "aws-portal:ModifyBilling",
            "ec2:DescribeInstances",
            "iam:ListGroups",
            "iam:ListPolicies",
            "iam:ListRoles",
            "iam:ListUsers",
            "organizations:ListAccounts",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListPolicies",
            "organizations:ListRoots",
            "rds:DescribeDBInstances",
            "sns:ListTopics"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-10-15T17:19:12+00:00"
  },
  "AWSBudgetsActions_RolePolicyForResourceAdministrationWithSSM": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstanceStatus",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "rds:DescribeDBInstances",
            "rds:StartDBInstance",
            "rds:StopDBInstance"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "ssm.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:StartAutomationExecution"
          ],
          "Resource": [
            "arn:aws:ssm:*:*:automation-definition/AWS-StartEC2Instance:*",
            "arn:aws:ssm:*:*:automation-definition/AWS-StopEC2Instance:*",
            "arn:aws:ssm:*:*:automation-definition/AWS-StartRdsInstance:*",
            "arn:aws:ssm:*:*:automation-definition/AWS-StopRdsInstance:*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-05-25T19:03:30+00:00"
  },
  "AWSBudgetsReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "aws-portal:ViewBilling",
            "budgets:ViewBudget",
            "budgets:Describe*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-10-15T17:18:28+00:00"
  },
  "AWSBugBustFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "CodeGuruReviewerPermission",
          "Effect": "Allow",
          "Action": [
            "codeguru-reviewer:DescribeCodeReview",
            "codeguru-reviewer:ListRecommendations",
            "codeguru-reviewer:ListCodeReviews"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CodeGuruProfilerPermission",
          "Effect": "Allow",
          "Action": [
            "codeguru-profiler:ListProfilingGroups",
            "codeguru-profiler:DescribeProfilingGroup"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AWSBugBustFullAccess",
          "Effect": "Allow",
          "Action": [
            "bugbust:*"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AWSBugBustSLRCreation",
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/bugbust.amazonaws.com/AWSServiceRoleForBugBust",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "bugbust.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2021-07-22T20:04:29+00:00"
  },
  "AWSBugBustPlayerAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "CodeGuruReviewerPermission",
          "Effect": "Allow",
          "Action": [
            "codeguru-reviewer:DescribeCodeReview",
            "codeguru-reviewer:ListRecommendations"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CodeGuruProfilerPermission",
          "Effect": "Allow",
          "Action": [
            "codeguru-profiler:DescribeProfilingGroup"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AWSBugBustPlayerAccess",
          "Effect": "Allow",
          "Action": [
            "bugbust:ListBugs",
            "bugbust:ListProfilingGroups",
            "bugbust:JoinEvent",
            "bugbust:GetEvent",
            "bugbust:ListEvents",
            "bugbust:GetJoinEventStatus",
            "bugbust:ListEventScores",
            "bugbust:ListEventParticipants",
            "bugbust:UpdateWorkItem",
            "bugbust:ListPullRequests"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-06-24T07:15:00+00:00"
  },
  "AWSBugBustServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "codeguru-reviewer:ListRecommendations",
            "codeguru-reviewer:UntagResource",
            "codeguru-reviewer:DescribeCodeReview"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/bugbust": "enabled"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-06-24T06:59:05+00:00"
  },
  "AWSCertificateManagerFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "acm:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/acm.amazonaws.com/AWSServiceRoleForCertificateManager*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "acm.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:DeleteServiceLinkedRole",
            "iam:GetServiceLinkedRoleDeletionStatus",
            "iam:GetRole"
          ],
          "Resource": "arn:aws:iam::*:role/aws-service-role/acm.amazonaws.com/AWSServiceRoleForCertificateManager*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2020-08-17T22:18:28+00:00"
  },
  "AWSCertificateManagerPrivateCAAuditor": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "acm-pca:CreateCertificateAuthorityAuditReport",
            "acm-pca:DescribeCertificateAuthority",
            "acm-pca:DescribeCertificateAuthorityAuditReport",
            "acm-pca:GetCertificateAuthorityCsr",
            "acm-pca:GetCertificateAuthorityCertificate",
            "acm-pca:GetCertificate",
            "acm-pca:GetPolicy",
            "acm-pca:ListPermissions",
            "acm-pca:ListTags"
          ],
          "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "acm-pca:ListCertificateAuthorities"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2020-08-17T22:54:12+00:00"
  },
  "AWSCertificateManagerPrivateCAFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "acm-pca:*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-10-23T16:54:50+00:00"
  },
  "AWSCertificateManagerPrivateCAPrivilegedUser": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "acm-pca:IssueCertificate"
          ],
          "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*",
          "Condition": {
            "StringLike": {
              "acm-pca:TemplateArn": [
                "arn:aws:acm-pca:::template/*CACertificate*/V*"
              ]
            }
          }
        },
        {
          "Effect": "Deny",
          "Action": [
            "acm-pca:IssueCertificate"
          ],
          "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*",
          "Condition": {
            "StringNotLike": {
              "acm-pca:TemplateArn": [
                "arn:aws:acm-pca:::template/*CACertificate*/V*"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "acm-pca:RevokeCertificate",
            "acm-pca:GetCertificate",
            "acm-pca:ListPermissions"
          ],
          "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "acm-pca:ListCertificateAuthorities"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-06-20T17:43:13+00:00"
  },
  "AWSCertificateManagerPrivateCAReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": {
        "Effect": "Allow",
        "Action": [
          "acm-pca:DescribeCertificateAuthority",
          "acm-pca:DescribeCertificateAuthorityAuditReport",
          "acm-pca:ListCertificateAuthorities",
          "acm-pca:GetCertificateAuthorityCsr",
          "acm-pca:GetCertificateAuthorityCertificate",
          "acm-pca:GetCertificate",
          "acm-pca:GetPolicy",
          "acm-pca:ListPermissions",
          "acm-pca:ListTags"
        ],
        "Resource": "*"
      }
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2020-08-17T22:54:22+00:00"
  },
  "AWSCertificateManagerPrivateCAUser": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "acm-pca:IssueCertificate"
          ],
          "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*",
          "Condition": {
            "StringLike": {
              "acm-pca:TemplateArn": [
                "arn:aws:acm-pca:::template/EndEntityCertificate/V*"
              ]
            }
          }
        },
        {
          "Effect": "Deny",
          "Action": [
            "acm-pca:IssueCertificate"
          ],
          "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*",
          "Condition": {
            "StringNotLike": {
              "acm-pca:TemplateArn": [
                "arn:aws:acm-pca:::template/EndEntityCertificate/V*"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "acm-pca:RevokeCertificate",
            "acm-pca:GetCertificate",
            "acm-pca:ListPermissions"
          ],
          "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "acm-pca:ListCertificateAuthorities"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2019-06-20T17:42:37+00:00"
  },
  "AWSCertificateManagerReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": {
        "Effect": "Allow",
        "Action": [
          "acm:DescribeCertificate",
          "acm:ListCertificates",
          "acm:GetCertificate",
          "acm:ListTagsForCertificate",
          "acm:GetAccountConfiguration"
        ],
        "Resource": "*"
      }
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2021-03-15T16:25:21+00:00"
  },
  "AWSChatbotServiceLinkedRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "sns:ListSubscriptionsByTopic",
            "sns:ListTopics",
            "sns:Unsubscribe",
            "sns:Subscribe",
            "sns:ListSubscriptions"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:PutLogEvents",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:CreateLogGroup",
            "logs:DescribeLogGroups"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/chatbot/*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-11-18T16:39:50+00:00"
  },
  "AWSCleanRoomsFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "CleanRoomsAccess",
          "Effect": "Allow",
          "Action": [
            "cleanrooms:*"
          ],
          "Resource": "*"
        },
        {
          "Sid": "PassServiceRole",
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "arn:aws:iam::*:role/service-role/*cleanrooms*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "cleanrooms.amazonaws.com"
            }
          }
        },
        {
          "Sid": "ListRolesToPickServiceRole",
          "Effect": "Allow",
          "Action": [
            "iam:ListRoles"
          ],
          "Resource": "*"
        },
        {
          "Sid": "GetRoleAndListRolePoliciesToInspectServiceRole",
          "Effect": "Allow",
          "Action": [
            "iam:GetRole",
            "iam:ListRolePolicies",
            "iam:ListAttachedRolePolicies"
          ],
          "Resource": "arn:aws:iam::*:role/service-role/*cleanrooms*"
        },
        {
          "Sid": "ListPoliciesToInspectServiceRolePolicy",
          "Effect": "Allow",
          "Action": [
            "iam:ListPolicies"
          ],
          "Resource": "*"
        },
        {
          "Sid": "GetPolicyToInspectServiceRolePolicy",
          "Effect": "Allow",
          "Action": [
            "iam:GetPolicy",
            "iam:GetPolicyVersion"
          ],
          "Resource": "arn:aws:iam::*:policy/*cleanrooms*"
        },
        {
          "Sid": "ConsoleDisplayTables",
          "Effect": "Allow",
          "Action": [
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:GetTable",
            "glue:GetTables",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:GetSchema",
            "glue:GetSchemaVersion",
            "glue:BatchGetPartition"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ConsolePickQueryResultsBucketListAll",
          "Effect": "Allow",
          "Action": [
            "s3:ListAllMyBuckets"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ConsolePickQueryResultsBucket",
          "Effect": "Allow",
          "Action": [
            "s3:GetBucketLocation",
            "s3:ListBucketVersions"
          ],
          "Resource": "arn:aws:s3:::cleanrooms-queryresults*"
        },
        {
          "Sid": "WriteQueryResults",
          "Effect": "Allow",
          "Action": [
            "s3:ListBucket",
            "s3:PutObject"
          ],
          "Resource": "arn:aws:s3:::cleanrooms-queryresults*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "cleanrooms.amazonaws.com"
            }
          }
        },
        {
          "Sid": "ConsoleDisplayQueryResults",
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": "arn:aws:s3:::cleanrooms-queryresults*"
        },
        {
          "Sid": "EstablishLogDeliveries",
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogDelivery",
            "logs:GetLogDelivery",
            "logs:UpdateLogDelivery",
            "logs:DeleteLogDelivery",
            "logs:ListLogDeliveries"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "cleanrooms.amazonaws.com"
            }
          }
        },
        {
          "Sid": "SetupLogGroupsDescribe",
          "Effect": "Allow",
          "Action": [
            "logs:DescribeLogGroups"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "cleanrooms.amazonaws.com"
            }
          }
        },
        {
          "Sid": "SetupLogGroupsCreate",
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/cleanrooms*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "cleanrooms.amazonaws.com"
            }
          }
        },
        {
          "Sid": "SetupLogGroupsResourcePolicy",
          "Effect": "Allow",
          "Action": [
            "logs:DescribeResourcePolicies",
            "logs:PutResourcePolicy"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "cleanrooms.amazonaws.com"
            }
          }
        },
        {
          "Sid": "ConsoleLogSummaryQueryLogs",
          "Effect": "Allow",
          "Action": [
            "logs:StartQuery"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/cleanrooms*"
        },
        {
          "Sid": "ConsoleLogSummaryObtainLogs",
          "Effect": "Allow",
          "Action": [
            "logs:GetQueryResults"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-01-12T16:10:54+00:00"
  },
  "AWSCleanRoomsFullAccessNoQuerying": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "CleanRoomsAccess",
          "Effect": "Allow",
          "Action": [
            "cleanrooms:BatchGetCollaborationAnalysisTemplate",
            "cleanrooms:BatchGetSchema",
            "cleanrooms:CreateAnalysisTemplate",
            "cleanrooms:CreateCollaboration",
            "cleanrooms:CreateConfiguredTable",
            "cleanrooms:CreateConfiguredTableAnalysisRule",
            "cleanrooms:CreateConfiguredTableAssociation",
            "cleanrooms:CreateMembership",
            "cleanrooms:DeleteAnalysisTemplate",
            "cleanrooms:DeleteCollaboration",
            "cleanrooms:DeleteConfiguredTable",
            "cleanrooms:DeleteConfiguredTableAnalysisRule",
            "cleanrooms:DeleteConfiguredTableAssociation",
            "cleanrooms:DeleteMember",
            "cleanrooms:DeleteMembership",
            "cleanrooms:GetAnalysisTemplate",
            "cleanrooms:GetCollaborationAnalysisTemplate",
            "cleanrooms:GetCollaboration",
            "cleanrooms:GetConfiguredTable",
            "cleanrooms:GetConfiguredTableAnalysisRule",
            "cleanrooms:GetConfiguredTableAssociation",
            "cleanrooms:GetMembership",
            "cleanrooms:GetProtectedQuery",
            "cleanrooms:GetSchema",
            "cleanrooms:GetSchemaAnalysisRule",
            "cleanrooms:ListAnalysisTemplates",
            "cleanrooms:ListCollaborationAnalysisTemplates",
            "cleanrooms:ListCollaborations",
            "cleanrooms:ListConfiguredTableAssociations",
            "cleanrooms:ListConfiguredTables",
            "cleanrooms:ListMembers",
            "cleanrooms:ListMemberships",
            "cleanrooms:ListProtectedQueries",
            "cleanrooms:ListSchemas",
            "cleanrooms:UpdateAnalysisTemplate",
            "cleanrooms:UpdateCollaboration",
            "cleanrooms:UpdateConfiguredTable",
            "cleanrooms:UpdateConfiguredTableAnalysisRule",
            "cleanrooms:UpdateConfiguredTableAssociation",
            "cleanrooms:UpdateMembership",
            "cleanrooms:ListTagsForResource",
            "cleanrooms:UntagResource",
            "cleanrooms:TagResource"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CleanRoomsNoQuerying",
          "Effect": "Deny",
          "Action": [
            "cleanrooms:StartProtectedQuery",
            "cleanrooms:UpdateProtectedQuery"
          ],
          "Resource": "*"
        },
        {
          "Sid": "PassServiceRole",
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "arn:aws:iam::*:role/service-role/*cleanrooms*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "cleanrooms.amazonaws.com"
            }
          }
        },
        {
          "Sid": "ListRolesToPickServiceRole",
          "Effect": "Allow",
          "Action": [
            "iam:ListRoles"
          ],
          "Resource": "*"
        },
        {
          "Sid": "GetRoleAndListRolePoliciesToInspectServiceRole",
          "Effect": "Allow",
          "Action": [
            "iam:GetRole",
            "iam:ListRolePolicies",
            "iam:ListAttachedRolePolicies"
          ],
          "Resource": "arn:aws:iam::*:role/service-role/*cleanrooms*"
        },
        {
          "Sid": "ListPoliciesToInspectServiceRolePolicy",
          "Effect": "Allow",
          "Action": [
            "iam:ListPolicies"
          ],
          "Resource": "*"
        },
        {
          "Sid": "GetPolicyToInspectServiceRolePolicy",
          "Effect": "Allow",
          "Action": [
            "iam:GetPolicy",
            "iam:GetPolicyVersion"
          ],
          "Resource": "arn:aws:iam::*:policy/*cleanrooms*"
        },
        {
          "Sid": "ConsoleDisplayTables",
          "Effect": "Allow",
          "Action": [
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:GetTable",
            "glue:GetTables",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:GetSchema",
            "glue:GetSchemaVersion",
            "glue:BatchGetPartition"
          ],
          "Resource": "*"
        },
        {
          "Sid": "EstablishLogDeliveries",
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogDelivery",
            "logs:GetLogDelivery",
            "logs:UpdateLogDelivery",
            "logs:DeleteLogDelivery",
            "logs:ListLogDeliveries"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "cleanrooms.amazonaws.com"
            }
          }
        },
        {
          "Sid": "SetupLogGroupsDescribe",
          "Effect": "Allow",
          "Action": [
            "logs:DescribeLogGroups"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "cleanrooms.amazonaws.com"
            }
          }
        },
        {
          "Sid": "SetupLogGroupsCreate",
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/cleanrooms*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "cleanrooms.amazonaws.com"
            }
          }
        },
        {
          "Sid": "SetupLogGroupsResourcePolicy",
          "Effect": "Allow",
          "Action": [
            "logs:DescribeResourcePolicies",
            "logs:PutResourcePolicy"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "cleanrooms.amazonaws.com"
            }
          }
        },
        {
          "Sid": "ConsoleLogSummaryQueryLogs",
          "Effect": "Allow",
          "Action": [
            "logs:StartQuery"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/cleanrooms*"
        },
        {
          "Sid": "ConsoleLogSummaryObtainLogs",
          "Effect": "Allow",
          "Action": [
            "logs:GetQueryResults"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-07-31T20:03:50+00:00"
  },
  "AWSCleanRoomsReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "CleanRoomsRead",
          "Effect": "Allow",
          "Action": [
            "cleanrooms:BatchGet*",
            "cleanrooms:Get*",
            "cleanrooms:List*"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ConsoleDisplayTables",
          "Effect": "Allow",
          "Action": [
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:GetTable",
            "glue:GetTables",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:GetSchema",
            "glue:GetSchemaVersion",
            "glue:BatchGetPartition"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ConsoleLogSummaryQueryLogs",
          "Effect": "Allow",
          "Action": [
            "logs:StartQuery"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/cleanrooms*"
        },
        {
          "Sid": "ConsoleLogSummaryObtainLogs",
          "Effect": "Allow",
          "Action": [
            "logs:GetQueryResults"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-01-12T16:10:48+00:00"
  },
  "AWSCloud9Administrator": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloud9:*",
            "iam:GetUser",
            "iam:ListUsers",
            "ec2:DescribeVpcs",
            "ec2:DescribeSubnets",
            "ec2:DescribeInstanceTypeOfferings",
            "ec2:DescribeRouteTables"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "cloud9.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:StartSession",
            "ssm:GetConnectionStatus"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "StringLike": {
              "ssm:resourceTag/aws:cloud9:environment": "*"
            },
            "StringEquals": {
              "aws:CalledViaFirst": "cloud9.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:StartSession"
          ],
          "Resource": [
            "arn:aws:ssm:*:*:document/*"
          ]
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2023-10-11T12:59:29+00:00"
  },
  "AWSCloud9EnvironmentMember": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloud9:GetUserSettings",
            "cloud9:UpdateUserSettings",
            "iam:GetUser",
            "iam:ListUsers"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloud9:DescribeEnvironmentMemberships"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "Null": {
              "cloud9:UserArn": "true",
              "cloud9:EnvironmentId": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:StartSession",
            "ssm:GetConnectionStatus"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "StringLike": {
              "ssm:resourceTag/aws:cloud9:environment": "*"
            },
            "StringEquals": {
              "aws:CalledViaFirst": "cloud9.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:StartSession"
          ],
          "Resource": [
            "arn:aws:ssm:*:*:document/*"
          ]
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-10-11T12:13:40+00:00"
  },
  "AWSCloud9SSMInstanceProfile": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ssmmessages:CreateControlChannel",
            "ssmmessages:CreateDataChannel",
            "ssmmessages:OpenControlChannel",
            "ssmmessages:OpenDataChannel",
            "ssm:UpdateInstanceInformation"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-05-14T11:40:49+00:00"
  },
  "AWSCloud9ServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:RunInstances",
            "ec2:CreateSecurityGroup",
            "ec2:DescribeVpcs",
            "ec2:DescribeSubnets",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeInstances",
            "ec2:DescribeInstanceStatus",
            "cloudformation:CreateStack",
            "cloudformation:DescribeStacks",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStackResources"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:TerminateInstances",
            "ec2:DeleteSecurityGroup",
            "ec2:AuthorizeSecurityGroupIngress"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:DeleteStack"
          ],
          "Resource": "arn:aws:cloudformation:*:*:stack/aws-cloud9-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*",
            "arn:aws:ec2:*:*:security-group/*"
          ],
          "Condition": {
            "StringLike": {
              "aws:RequestTag/Name": "aws-cloud9-*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:StartInstances",
            "ec2:StopInstances"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/aws:cloudformation:stack-name": "aws-cloud9-*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:StartInstances",
            "ec2:StopInstances"
          ],
          "Resource": [
            "arn:aws:license-manager:*:*:license-configuration:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:ListInstanceProfiles",
            "iam:GetInstanceProfile"
          ],
          "Resource": [
            "arn:aws:iam::*:instance-profile/cloud9/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/service-role/AWSCloud9SSMAccessRole"
          ],
          "Condition": {
            "StringLike": {
              "iam:PassedToService": "ec2.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v8",
    "IsDefaultVersion": true,
    "CreateDate": "2022-01-17T14:06:15+00:00"
  },
  "AWSCloud9User": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloud9:UpdateUserSettings",
            "cloud9:GetUserSettings",
            "iam:GetUser",
            "iam:ListUsers",
            "ec2:DescribeVpcs",
            "ec2:DescribeSubnets",
            "ec2:DescribeInstanceTypeOfferings",
            "ec2:DescribeRouteTables"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloud9:CreateEnvironmentEC2",
            "cloud9:CreateEnvironmentSSH"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "cloud9:OwnerArn": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloud9:GetUserPublicKey"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "cloud9:UserArn": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloud9:DescribeEnvironmentMemberships"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "Null": {
              "cloud9:UserArn": "true",
              "cloud9:EnvironmentId": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "cloud9.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:StartSession",
            "ssm:GetConnectionStatus"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "StringLike": {
              "ssm:resourceTag/aws:cloud9:environment": "*"
            },
            "StringEquals": {
              "aws:CalledViaFirst": "cloud9.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:StartSession"
          ],
          "Resource": [
            "arn:aws:ssm:*:*:document/*"
          ]
        }
      ]
    },
    "VersionId": "v6",
    "IsDefaultVersion": true,
    "CreateDate": "2023-10-11T13:24:10+00:00"
  },
  "AWSCloudFormationFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-07-26T21:50:35+00:00"
  },
  "AWSCloudFormationReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:Describe*",
            "cloudformation:EstimateTemplateCost",
            "cloudformation:Get*",
            "cloudformation:List*",
            "cloudformation:ValidateTemplate",
            "cloudformation:Detect*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2019-11-13T17:40:07+00:00"
  },
  "AWSCloudFrontLogger": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/cloudfront/*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2019-11-22T19:33:51+00:00"
  },
  "AWSCloudHSMFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "cloudhsm:*",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:39:51+00:00"
  },
  "AWSCloudHSMReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudhsm:Get*",
            "cloudhsm:List*",
            "cloudhsm:Describe*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:39:52+00:00"
  },
  "AWSCloudHSMRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeNetworkInterfaceAttribute",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:DetachNetworkInterface"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:41:23+00:00"
  },
  "AWSCloudMapDiscoverInstanceAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "servicediscovery:DiscoverInstances",
            "servicediscovery:DiscoverInstancesRevision"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-09-20T21:48:09+00:00"
  },
  "AWSCloudMapFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "route53:GetHostedZone",
            "route53:ListHostedZonesByName",
            "route53:CreateHostedZone",
            "route53:DeleteHostedZone",
            "route53:ChangeResourceRecordSets",
            "route53:CreateHealthCheck",
            "route53:GetHealthCheck",
            "route53:DeleteHealthCheck",
            "route53:UpdateHealthCheck",
            "ec2:DescribeVpcs",
            "ec2:DescribeRegions",
            "ec2:DescribeInstances",
            "servicediscovery:*"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2020-07-29T19:15:35+00:00"
  },
  "AWSCloudMapReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "servicediscovery:Get*",
            "servicediscovery:List*",
            "servicediscovery:DiscoverInstances",
            "servicediscovery:DiscoverInstancesRevision"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-09-20T21:47:45+00:00"
  },
  "AWSCloudMapRegisterInstanceAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "route53:GetHostedZone",
            "route53:ListHostedZonesByName",
            "route53:ChangeResourceRecordSets",
            "route53:CreateHealthCheck",
            "route53:GetHealthCheck",
            "route53:DeleteHealthCheck",
            "route53:UpdateHealthCheck",
            "servicediscovery:Get*",
            "servicediscovery:List*",
            "servicediscovery:RegisterInstance",
            "servicediscovery:DeregisterInstance",
            "servicediscovery:DiscoverInstances",
            "servicediscovery:DiscoverInstancesRevision",
            "ec2:DescribeInstances"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-09-20T21:47:06+00:00"
  },
  "AWSCloudShellFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "cloudshell:*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-15T18:07:44+00:00"
  },
  "AWSCloudTrailReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:GetBucketLocation"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudtrail:GetTrail",
            "cloudtrail:GetTrailStatus",
            "cloudtrail:DescribeTrails",
            "cloudtrail:ListTrails",
            "cloudtrail:LookupEvents",
            "cloudtrail:ListTags",
            "cloudtrail:ListPublicKeys",
            "cloudtrail:GetEventSelectors",
            "cloudtrail:GetInsightSelectors",
            "s3:ListAllMyBuckets",
            "kms:ListAliases",
            "lambda:ListFunctions"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v9",
    "IsDefaultVersion": true,
    "CreateDate": "2019-11-20T21:06:49+00:00"
  },
  "AWSCloudTrail_FullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "sns:AddPermission",
            "sns:CreateTopic",
            "sns:SetTopicAttributes",
            "sns:GetTopicAttributes"
          ],
          "Resource": [
            "arn:aws:sns:*:*:aws-cloudtrail-logs*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "sns:ListTopics"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:CreateBucket",
            "s3:PutBucketPolicy",
            "s3:PutBucketPublicAccessBlock"
          ],
          "Resource": [
            "arn:aws:s3:::aws-cloudtrail-logs*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListAllMyBuckets",
            "s3:GetBucketLocation",
            "s3:GetBucketPolicy"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "cloudtrail:*",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:aws-cloudtrail-logs*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:ListRoles",
            "iam:GetRolePolicy",
            "iam:GetUser"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "cloudtrail.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:CreateKey",
            "kms:CreateAlias",
            "kms:ListKeys",
            "kms:ListAliases"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "lambda:ListFunctions"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:ListGlobalTables",
            "dynamodb:ListTables"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2021-02-22T19:01:00+00:00"
  },
  "AWSCloudTrail_ReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudtrail:Get*",
            "cloudtrail:Describe*",
            "cloudtrail:List*",
            "cloudtrail:LookupEvents"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-06-14T17:19:05+00:00"
  },
  "AWSCloudWatchAlarms_ActionSSMIncidentsServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "StartIncidentPermissions",
          "Effect": "Allow",
          "Action": "ssm-incidents:StartIncident",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-04-27T13:30:52+00:00"
  },
  "AWSCodeArtifactAdminAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "codeartifact:*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "sts:GetServiceBearerToken",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "sts:AWSServiceName": "codeartifact.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-06-16T23:53:23+00:00"
  },
  "AWSCodeArtifactReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "codeartifact:Describe*",
            "codeartifact:Get*",
            "codeartifact:List*",
            "codeartifact:ReadFromRepository"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "sts:GetServiceBearerToken",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "sts:AWSServiceName": "codeartifact.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-06-25T21:23:52+00:00"
  },
  "AWSCodeBuildAdminAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AWSServicesAccess",
          "Action": [
            "codebuild:*",
            "codecommit:GetBranch",
            "codecommit:GetCommit",
            "codecommit:GetRepository",
            "codecommit:ListBranches",
            "codecommit:ListRepositories",
            "cloudwatch:GetMetricStatistics",
            "ec2:DescribeVpcs",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ecr:DescribeRepositories",
            "ecr:ListImages",
            "elasticfilesystem:DescribeFileSystems",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:DisableRule",
            "events:EnableRule",
            "events:ListTargetsByRule",
            "events:ListRuleNamesByTarget",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "logs:GetLogEvents",
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Sid": "CWLDeleteLogGroupAccess",
          "Action": [
            "logs:DeleteLogGroup"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:logs:*:*:log-group:/aws/codebuild/*:log-stream:*"
        },
        {
          "Sid": "SSMParameterWriteAccess",
          "Effect": "Allow",
          "Action": [
            "ssm:PutParameter"
          ],
          "Resource": "arn:aws:ssm:*:*:parameter/CodeBuild/*"
        },
        {
          "Sid": "SSMStartSessionAccess",
          "Effect": "Allow",
          "Action": [
            "ssm:StartSession"
          ],
          "Resource": "arn:aws:ecs:*:*:task/*/*"
        },
        {
          "Sid": "CodeStarConnectionsReadWriteAccess",
          "Effect": "Allow",
          "Action": [
            "codestar-connections:CreateConnection",
            "codestar-connections:DeleteConnection",
            "codestar-connections:UpdateConnectionInstallation",
            "codestar-connections:TagResource",
            "codestar-connections:UntagResource",
            "codestar-connections:ListConnections",
            "codestar-connections:ListInstallationTargets",
            "codestar-connections:ListTagsForResource",
            "codestar-connections:GetConnection",
            "codestar-connections:GetIndividualAccessToken",
            "codestar-connections:GetInstallationUrl",
            "codestar-connections:PassConnection",
            "codestar-connections:StartOAuthHandshake",
            "codestar-connections:UseConnection"
          ],
          "Resource": "arn:aws:codestar-connections:*:*:connection/*"
        },
        {
          "Sid": "CodeStarNotificationsReadWriteAccess",
          "Effect": "Allow",
          "Action": [
            "codestar-notifications:CreateNotificationRule",
            "codestar-notifications:DescribeNotificationRule",
            "codestar-notifications:UpdateNotificationRule",
            "codestar-notifications:DeleteNotificationRule",
            "codestar-notifications:Subscribe",
            "codestar-notifications:Unsubscribe"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "codestar-notifications:NotificationsForResource": "arn:aws:codebuild:*"
            }
          }
        },
        {
          "Sid": "CodeStarNotificationsListAccess",
          "Effect": "Allow",
          "Action": [
            "codestar-notifications:ListNotificationRules",
            "codestar-notifications:ListEventTypes",
            "codestar-notifications:ListTargets",
            "codestar-notifications:ListTagsforResource"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CodeStarNotificationsSNSTopicCreateAccess",
          "Effect": "Allow",
          "Action": [
            "sns:CreateTopic",
            "sns:SetTopicAttributes"
          ],
          "Resource": "arn:aws:sns:*:*:codestar-notifications*"
        },
        {
          "Sid": "SNSTopicListAccess",
          "Effect": "Allow",
          "Action": [
            "sns:ListTopics",
            "sns:GetTopicAttributes"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CodeStarNotificationsChatbotAccess",
          "Effect": "Allow",
          "Action": [
            "chatbot:DescribeSlackChannelConfigurations",
            "chatbot:ListMicrosoftTeamsChannelConfigurations"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v13",
    "IsDefaultVersion": true,
    "CreateDate": "2023-07-31T23:06:23+00:00"
  },
  "AWSCodeBuildDeveloperAccess": {
    "Document": {
      "Statement": [
        {
          "Sid": "AWSServicesAccess",
          "Action": [
            "codebuild:StartBuild",
            "codebuild:StopBuild",
            "codebuild:StartBuildBatch",
            "codebuild:StopBuildBatch",
            "codebuild:RetryBuild",
            "codebuild:RetryBuildBatch",
            "codebuild:BatchGet*",
            "codebuild:GetResourcePolicy",
            "codebuild:DescribeTestCases",
            "codebuild:DescribeCodeCoverages",
            "codebuild:List*",
            "codecommit:GetBranch",
            "codecommit:GetCommit",
            "codecommit:GetRepository",
            "codecommit:ListBranches",
            "cloudwatch:GetMetricStatistics",
            "events:DescribeRule",
            "events:ListTargetsByRule",
            "events:ListRuleNamesByTarget",
            "logs:GetLogEvents",
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Sid": "SSMParameterWriteAccess",
          "Effect": "Allow",
          "Action": [
            "ssm:PutParameter"
          ],
          "Resource": "arn:aws:ssm:*:*:parameter/CodeBuild/*"
        },
        {
          "Sid": "SSMStartSessionAccess",
          "Effect": "Allow",
          "Action": [
            "ssm:StartSession"
          ],
          "Resource": "arn:aws:ecs:*:*:task/*/*"
        },
        {
          "Sid": "CodeStarConnectionsUserAccess",
          "Effect": "Allow",
          "Action": [
            "codestar-connections:ListConnections",
            "codestar-connections:GetConnection"
          ],
          "Resource": "arn:aws:codestar-connections:*:*:connection/*"
        },
        {
          "Sid": "CodeStarNotificationsReadWriteAccess",
          "Effect": "Allow",
          "Action": [
            "codestar-notifications:CreateNotificationRule",
            "codestar-notifications:DescribeNotificationRule",
            "codestar-notifications:UpdateNotificationRule",
            "codestar-notifications:Subscribe",
            "codestar-notifications:Unsubscribe"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "codestar-notifications:NotificationsForResource": "arn:aws:codebuild:*"
            }
          }
        },
        {
          "Sid": "CodeStarNotificationsListAccess",
          "Effect": "Allow",
          "Action": [
            "codestar-notifications:ListNotificationRules",
            "codestar-notifications:ListEventTypes",
            "codestar-notifications:ListTargets",
            "codestar-notifications:ListTagsforResource"
          ],
          "Resource": "*"
        },
        {
          "Sid": "SNSTopicListAccess",
          "Effect": "Allow",
          "Action": [
            "sns:ListTopics",
            "sns:GetTopicAttributes"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CodeStarNotificationsChatbotAccess",
          "Effect": "Allow",
          "Action": [
            "chatbot:DescribeSlackChannelConfigurations",
            "chatbot:ListMicrosoftTeamsChannelConfigurations"
          ],
          "Resource": "*"
        }
      ],
      "Version": "2012-10-17"
    },
    "VersionId": "v14",
    "IsDefaultVersion": true,
    "CreateDate": "2023-07-31T23:06:10+00:00"
  },
  "AWSCodeBuildReadOnlyAccess": {
    "Document": {
      "Statement": [
        {
          "Action": [
            "codebuild:BatchGet*",
            "codebuild:GetResourcePolicy",
            "codebuild:List*",
            "codebuild:DescribeTestCases",
            "codebuild:DescribeCodeCoverages",
            "codecommit:GetBranch",
            "codecommit:GetCommit",
            "codecommit:GetRepository",
            "cloudwatch:GetMetricStatistics",
            "events:DescribeRule",
            "events:ListTargetsByRule",
            "events:ListRuleNamesByTarget",
            "logs:GetLogEvents"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Sid": "CodeStarConnectionsUserAccess",
          "Effect": "Allow",
          "Action": [
            "codestar-connections:ListConnections",
            "codestar-connections:GetConnection"
          ],
          "Resource": "arn:aws:codestar-connections:*:*:connection/*"
        },
        {
          "Sid": "CodeStarNotificationsPowerUserAccess",
          "Effect": "Allow",
          "Action": [
            "codestar-notifications:DescribeNotificationRule"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "codestar-notifications:NotificationsForResource": "arn:aws:codebuild:*"
            }
          }
        },
        {
          "Sid": "CodeStarNotificationsListAccess",
          "Effect": "Allow",
          "Action": [
            "codestar-notifications:ListNotificationRules",
            "codestar-notifications:ListEventTypes",
            "codestar-notifications:ListTargets"
          ],
          "Resource": "*"
        }
      ],
      "Version": "2012-10-17"
    },
    "VersionId": "v11",
    "IsDefaultVersion": true,
    "CreateDate": "2020-09-14T16:04:04+00:00"
  },
  "AWSCodeCommitFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "codecommit:*"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CloudWatchEventsCodeCommitRulesAccess",
          "Effect": "Allow",
          "Action": [
            "events:DeleteRule",
            "events:DescribeRule",
            "events:DisableRule",
            "events:EnableRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "events:ListTargetsByRule"
          ],
          "Resource": "arn:aws:events:*:*:rule/codecommit*"
        },
        {
          "Sid": "SNSTopicAndSubscriptionAccess",
          "Effect": "Allow",
          "Action": [
            "sns:CreateTopic",
            "sns:DeleteTopic",
            "sns:Subscribe",
            "sns:Unsubscribe",
            "sns:SetTopicAttributes"
          ],
          "Resource": "arn:aws:sns:*:*:codecommit*"
        },
        {
          "Sid": "SNSTopicAndSubscriptionReadAccess",
          "Effect": "Allow",
          "Action": [
            "sns:ListTopics",
            "sns:ListSubscriptionsByTopic",
            "sns:GetTopicAttributes"
          ],
          "Resource": "*"
        },
        {
          "Sid": "LambdaReadOnlyListAccess",
          "Effect": "Allow",
          "Action": [
            "lambda:ListFunctions"
          ],
          "Resource": "*"
        },
        {
          "Sid": "IAMReadOnlyListAccess",
          "Effect": "Allow",
          "Action": [
            "iam:ListUsers"
          ],
          "Resource": "*"
        },
        {
          "Sid": "IAMReadOnlyConsoleAccess",
          "Effect": "Allow",
          "Action": [
            "iam:ListAccessKeys",
            "iam:ListSSHPublicKeys",
            "iam:ListServiceSpecificCredentials"
          ],
          "Resource": "arn:aws:iam::*:user/${aws:username}"
        },
        {
          "Sid": "IAMUserSSHKeys",
          "Effect": "Allow",
          "Action": [
            "iam:DeleteSSHPublicKey",
            "iam:GetSSHPublicKey",
            "iam:ListSSHPublicKeys",
            "iam:UpdateSSHPublicKey",
            "iam:UploadSSHPublicKey"
          ],
          "Resource": "arn:aws:iam::*:user/${aws:username}"
        },
        {
          "Sid": "IAMSelfManageServiceSpecificCredentials",
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceSpecificCredential",
            "iam:UpdateServiceSpecificCredential",
            "iam:DeleteServiceSpecificCredential",
            "iam:ResetServiceSpecificCredential"
          ],
          "Resource": "arn:aws:iam::*:user/${aws:username}"
        },
        {
          "Sid": "CodeStarNotificationsReadWriteAccess",
          "Effect": "Allow",
          "Action": [
            "codestar-notifications:CreateNotificationRule",
            "codestar-notifications:DescribeNotificationRule",
            "codestar-notifications:UpdateNotificationRule",
            "codestar-notifications:DeleteNotificationRule",
            "codestar-notifications:Subscribe",
            "codestar-notifications:Unsubscribe"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "codestar-notifications:NotificationsForResource": "arn:aws:codecommit:*"
            }
          }
        },
        {
          "Sid": "CodeStarNotificationsListAccess",
          "Effect": "Allow",
          "Action": [
            "codestar-notifications:ListNotificationRules",
            "codestar-notifications:ListTargets",
            "codestar-notifications:ListTagsforResource",
            "codestar-notifications:ListEventTypes"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CodeStarNotificationsSNSTopicCreateAccess",
          "Effect": "Allow",
          "Action": [
            "sns:CreateTopic",
            "sns:SetTopicAttributes"
          ],
          "Resource": "arn:aws:sns:*:*:codestar-notifications*"
        },
        {
          "Sid": "AmazonCodeGuruReviewerFullAccess",
          "Effect": "Allow",
          "Action": [
            "codeguru-reviewer:AssociateRepository",
            "codeguru-reviewer:DescribeRepositoryAssociation",
            "codeguru-reviewer:ListRepositoryAssociations",
            "codeguru-reviewer:DisassociateRepository",
            "codeguru-reviewer:DescribeCodeReview",
            "codeguru-reviewer:ListCodeReviews"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AmazonCodeGuruReviewerSLRCreation",
          "Action": "iam:CreateServiceLinkedRole",
          "Effect": "Allow",
          "Resource": "arn:aws:iam::*:role/aws-service-role/codeguru-reviewer.amazonaws.com/AWSServiceRoleForAmazonCodeGuruReviewer",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "codeguru-reviewer.amazonaws.com"
            }
          }
        },
        {
          "Sid": "CloudWatchEventsManagedRules",
          "Effect": "Allow",
          "Action": [
            "events:PutRule",
            "events:PutTargets",
            "events:DeleteRule",
            "events:RemoveTargets"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "events:ManagedBy": "codeguru-reviewer.amazonaws.com"
            }
          }
        },
        {
          "Sid": "CodeStarNotificationsChatbotAccess",
          "Effect": "Allow",
          "Action": [
            "chatbot:DescribeSlackChannelConfigurations",
            "chatbot:ListMicrosoftTeamsChannelConfigurations"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CodeStarConnectionsReadOnlyAccess",
          "Effect": "Allow",
          "Action": [
            "codestar-connections:ListConnections",
            "codestar-connections:GetConnection"
          ],
          "Resource": "arn:aws:codestar-connections:*:*:connection/*"
        }
      ]
    },
    "VersionId": "v10",
    "IsDefaultVersion": true,
    "CreateDate": "2023-07-17T21:50:11+00:00"
  },
  "AWSCodeCommitPowerUser": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "codecommit:AssociateApprovalRuleTemplateWithRepository",
            "codecommit:BatchAssociateApprovalRuleTemplateWithRepositories",
            "codecommit:BatchDisassociateApprovalRuleTemplateFromRepositories",
            "codecommit:BatchGet*",
            "codecommit:BatchDescribe*",
            "codecommit:Create*",
            "codecommit:DeleteBranch",
            "codecommit:DeleteFile",
            "codecommit:Describe*",
            "codecommit:DisassociateApprovalRuleTemplateFromRepository",
            "codecommit:EvaluatePullRequestApprovalRules",
            "codecommit:Get*",
            "codecommit:List*",
            "codecommit:Merge*",
            "codecommit:OverridePullRequestApprovalRules",
            "codecommit:Put*",
            "codecommit:Post*",
            "codecommit:TagResource",
            "codecommit:Test*",
            "codecommit:UntagResource",
            "codecommit:Update*",
            "codecommit:GitPull",
            "codecommit:GitPush"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CloudWatchEventsCodeCommitRulesAccess",
          "Effect": "Allow",
          "Action": [
            "events:DeleteRule",
            "events:DescribeRule",
            "events:DisableRule",
            "events:EnableRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "events:ListTargetsByRule"
          ],
          "Resource": "arn:aws:events:*:*:rule/codecommit*"
        },
        {
          "Sid": "SNSTopicAndSubscriptionAccess",
          "Effect": "Allow",
          "Action": [
            "sns:Subscribe",
            "sns:Unsubscribe"
          ],
          "Resource": "arn:aws:sns:*:*:codecommit*"
        },
        {
          "Sid": "SNSTopicAndSubscriptionReadAccess",
          "Effect": "Allow",
          "Action": [
            "sns:ListTopics",
            "sns:ListSubscriptionsByTopic",
            "sns:GetTopicAttributes"
          ],
          "Resource": "*"
        },
        {
          "Sid": "LambdaReadOnlyListAccess",
          "Effect": "Allow",
          "Action": [
            "lambda:ListFunctions"
          ],
          "Resource": "*"
        },
        {
          "Sid": "IAMReadOnlyListAccess",
          "Effect": "Allow",
          "Action": [
            "iam:ListUsers"
          ],
          "Resource": "*"
        },
        {
          "Sid": "IAMReadOnlyConsoleAccess",
          "Effect": "Allow",
          "Action": [
            "iam:ListAccessKeys",
            "iam:ListSSHPublicKeys",
            "iam:ListServiceSpecificCredentials"
          ],
          "Resource": "arn:aws:iam::*:user/${aws:username}"
        },
        {
          "Sid": "IAMUserSSHKeys",
          "Effect": "Allow",
          "Action": [
            "iam:DeleteSSHPublicKey",
            "iam:GetSSHPublicKey",
            "iam:ListSSHPublicKeys",
            "iam:UpdateSSHPublicKey",
            "iam:UploadSSHPublicKey"
          ],
          "Resource": "arn:aws:iam::*:user/${aws:username}"
        },
        {
          "Sid": "IAMSelfManageServiceSpecificCredentials",
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceSpecificCredential",
            "iam:UpdateServiceSpecificCredential",
            "iam:DeleteServiceSpecificCredential",
            "iam:ResetServiceSpecificCredential"
          ],
          "Resource": "arn:aws:iam::*:user/${aws:username}"
        },
        {
          "Sid": "CodeStarNotificationsReadWriteAccess",
          "Effect": "Allow",
          "Action": [
            "codestar-notifications:CreateNotificationRule",
            "codestar-notifications:DescribeNotificationRule",
            "codestar-notifications:UpdateNotificationRule",
            "codestar-notifications:Subscribe",
            "codestar-notifications:Unsubscribe"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "codestar-notifications:NotificationsForResource": "arn:aws:codecommit:*"
            }
          }
        },
        {
          "Sid": "CodeStarNotificationsListAccess",
          "Effect": "Allow",
          "Action": [
            "codestar-notifications:ListNotificationRules",
            "codestar-notifications:ListTargets",
            "codestar-notifications:ListTagsforResource",
            "codestar-notifications:ListEventTypes"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AmazonCodeGuruReviewerFullAccess",
          "Effect": "Allow",
          "Action": [
            "codeguru-reviewer:AssociateRepository",
            "codeguru-reviewer:DescribeRepositoryAssociation",
            "codeguru-reviewer:ListRepositoryAssociations",
            "codeguru-reviewer:DisassociateRepository",
            "codeguru-reviewer:DescribeCodeReview",
            "codeguru-reviewer:ListCodeReviews"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AmazonCodeGuruReviewerSLRCreation",
          "Action": "iam:CreateServiceLinkedRole",
          "Effect": "Allow",
          "Resource": "arn:aws:iam::*:role/aws-service-role/codeguru-reviewer.amazonaws.com/AWSServiceRoleForAmazonCodeGuruReviewer",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "codeguru-reviewer.amazonaws.com"
            }
          }
        },
        {
          "Sid": "CloudWatchEventsManagedRules",
          "Effect": "Allow",
          "Action": [
            "events:PutRule",
            "events:PutTargets",
            "events:DeleteRule",
            "events:RemoveTargets"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "events:ManagedBy": "codeguru-reviewer.amazonaws.com"
            }
          }
        },
        {
          "Sid": "CodeStarNotificationsChatbotAccess",
          "Effect": "Allow",
          "Action": [
            "chatbot:DescribeSlackChannelConfigurations",
            "chatbot:ListMicrosoftTeamsChannelConfigurations"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CodeStarConnectionsReadOnlyAccess",
          "Effect": "Allow",
          "Action": [
            "codestar-connections:ListConnections",
            "codestar-connections:GetConnection"
          ],
          "Resource": "arn:aws:codestar-connections:*:*:connection/*"
        }
      ]
    },
    "VersionId": "v15",
    "IsDefaultVersion": true,
    "CreateDate": "2023-07-17T21:49:06+00:00"
  },
  "AWSCodeCommitReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "codecommit:BatchGet*",
            "codecommit:BatchDescribe*",
            "codecommit:Describe*",
            "codecommit:EvaluatePullRequestApprovalRules",
            "codecommit:Get*",
            "codecommit:List*",
            "codecommit:GitPull"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CloudWatchEventsCodeCommitRulesReadOnlyAccess",
          "Effect": "Allow",
          "Action": [
            "events:DescribeRule",
            "events:ListTargetsByRule"
          ],
          "Resource": "arn:aws:events:*:*:rule/codecommit*"
        },
        {
          "Sid": "SNSSubscriptionAccess",
          "Effect": "Allow",
          "Action": [
            "sns:ListTopics",
            "sns:ListSubscriptionsByTopic",
            "sns:GetTopicAttributes"
          ],
          "Resource": "*"
        },
        {
          "Sid": "LambdaReadOnlyListAccess",
          "Effect": "Allow",
          "Action": [
            "lambda:ListFunctions"
          ],
          "Resource": "*"
        },
        {
          "Sid": "IAMReadOnlyListAccess",
          "Effect": "Allow",
          "Action": [
            "iam:ListUsers"
          ],
          "Resource": "*"
        },
        {
          "Sid": "IAMReadOnlyConsoleAccess",
          "Effect": "Allow",
          "Action": [
            "iam:ListSSHPublicKeys",
            "iam:ListServiceSpecificCredentials",
            "iam:ListAccessKeys",
            "iam:GetSSHPublicKey"
          ],
          "Resource": "arn:aws:iam::*:user/${aws:username}"
        },
        {
          "Sid": "CodeStarConnectionsReadOnlyAccess",
          "Effect": "Allow",
          "Action": [
            "codestar-connections:ListConnections",
            "codestar-connections:GetConnection"
          ],
          "Resource": "arn:aws:codestar-connections:*:*:connection/*"
        },
        {
          "Sid": "CodeStarNotificationsReadOnlyAccess",
          "Effect": "Allow",
          "Action": [
            "codestar-notifications:DescribeNotificationRule"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "codestar-notifications:NotificationsForResource": "arn:aws:codecommit:*"
            }
          }
        },
        {
          "Sid": "CodeStarNotificationsListAccess",
          "Effect": "Allow",
          "Action": [
            "codestar-notifications:ListNotificationRules",
            "codestar-notifications:ListEventTypes",
            "codestar-notifications:ListTargets"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AmazonCodeGuruReviewerReadOnlyAccess",
          "Effect": "Allow",
          "Action": [
            "codeguru-reviewer:DescribeRepositoryAssociation",
            "codeguru-reviewer:ListRepositoryAssociations",
            "codeguru-reviewer:DescribeCodeReview",
            "codeguru-reviewer:ListCodeReviews"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v11",
    "IsDefaultVersion": true,
    "CreateDate": "2021-08-18T18:18:01+00:00"
  },
  "AWSCodeDeployDeployerAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "codedeploy:Batch*",
            "codedeploy:CreateDeployment",
            "codedeploy:Get*",
            "codedeploy:List*",
            "codedeploy:RegisterApplicationRevision"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Sid": "CodeStarNotificationsReadWriteAccess",
          "Effect": "Allow",
          "Action": [
            "codestar-notifications:CreateNotificationRule",
            "codestar-notifications:DescribeNotificationRule",
            "codestar-notifications:UpdateNotificationRule",
            "codestar-notifications:Subscribe",
            "codestar-notifications:Unsubscribe"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "codestar-notifications:NotificationsForResource": "arn:aws:codedeploy:*"
            }
          }
        },
        {
          "Sid": "CodeStarNotificationsListAccess",
          "Effect": "Allow",
          "Action": [
            "codestar-notifications:ListNotificationRules",
            "codestar-notifications:ListTargets",
            "codestar-notifications:ListTagsforResource",
            "codestar-notifications:ListEventTypes"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CodeStarNotificationsChatbotAccess",
          "Effect": "Allow",
          "Action": [
            "chatbot:DescribeSlackChannelConfigurations"
          ],
          "Resource": "*"
        },
        {
          "Sid": "SNSTopicListAccess",
          "Effect": "Allow",
          "Action": [
            "sns:ListTopics"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2020-04-02T16:16:11+00:00"
  },
  "AWSCodeDeployFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": "codedeploy:*",
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Sid": "CodeStarNotificationsReadWriteAccess",
          "Effect": "Allow",
          "Action": [
            "codestar-notifications:CreateNotificationRule",
            "codestar-notifications:DescribeNotificationRule",
            "codestar-notifications:UpdateNotificationRule",
            "codestar-notifications:DeleteNotificationRule",
            "codestar-notifications:Subscribe",
            "codestar-notifications:Unsubscribe"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "codestar-notifications:NotificationsForResource": "arn:aws:codedeploy:*"
            }
          }
        },
        {
          "Sid": "CodeStarNotificationsListAccess",
          "Effect": "Allow",
          "Action": [
            "codestar-notifications:ListNotificationRules",
            "codestar-notifications:ListTargets",
            "codestar-notifications:ListTagsforResource",
            "codestar-notifications:ListEventTypes"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CodeStarNotificationsSNSTopicCreateAccess",
          "Effect": "Allow",
          "Action": [
            "sns:CreateTopic",
            "sns:SetTopicAttributes"
          ],
          "Resource": "arn:aws:sns:*:*:codestar-notifications*"
        },
        {
          "Sid": "CodeStarNotificationsChatbotAccess",
          "Effect": "Allow",
          "Action": [
            "chatbot:DescribeSlackChannelConfigurations"
          ],
          "Resource": "*"
        },
        {
          "Sid": "SNSTopicListAccess",
          "Effect": "Allow",
          "Action": [
            "sns:ListTopics"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2020-04-02T16:14:47+00:00"
  },
  "AWSCodeDeployReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "codedeploy:Batch*",
            "codedeploy:Get*",
            "codedeploy:List*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Sid": "CodeStarNotificationsPowerUserAccess",
          "Effect": "Allow",
          "Action": [
            "codestar-notifications:DescribeNotificationRule"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "codestar-notifications:NotificationsForResource": "arn:aws:codedeploy:*"
            }
          }
        },
        {
          "Sid": "CodeStarNotificationsListAccess",
          "Effect": "Allow",
          "Action": [
            "codestar-notifications:ListNotificationRules",
            "codestar-notifications:ListEventTypes",
            "codestar-notifications:ListTargets"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2020-04-02T16:20:09+00:00"
  },
  "AWSCodeDeployRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "autoscaling:CompleteLifecycleAction",
            "autoscaling:DeleteLifecycleHook",
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribeLifecycleHooks",
            "autoscaling:PutLifecycleHook",
            "autoscaling:RecordLifecycleActionHeartbeat",
            "autoscaling:CreateAutoScalingGroup",
            "autoscaling:CreateOrUpdateTags",
            "autoscaling:UpdateAutoScalingGroup",
            "autoscaling:EnableMetricsCollection",
            "autoscaling:DescribePolicies",
            "autoscaling:DescribeScheduledActions",
            "autoscaling:DescribeNotificationConfigurations",
            "autoscaling:SuspendProcesses",
            "autoscaling:ResumeProcesses",
            "autoscaling:AttachLoadBalancers",
            "autoscaling:AttachLoadBalancerTargetGroups",
            "autoscaling:PutScalingPolicy",
            "autoscaling:PutScheduledUpdateGroupAction",
            "autoscaling:PutNotificationConfiguration",
            "autoscaling:PutWarmPool",
            "autoscaling:DescribeScalingActivities",
            "autoscaling:DeleteAutoScalingGroup",
            "ec2:DescribeInstances",
            "ec2:DescribeInstanceStatus",
            "ec2:TerminateInstances",
            "tag:GetResources",
            "sns:Publish",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:PutMetricAlarm",
            "elasticloadbalancing:DescribeLoadBalancerAttributes",
            "elasticloadbalancing:DescribeTargetGroupAttributes",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeInstanceHealth",
            "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
            "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "elasticloadbalancing:RegisterTargets",
            "elasticloadbalancing:DeregisterTargets"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v11",
    "IsDefaultVersion": true,
    "CreateDate": "2023-08-16T20:38:58+00:00"
  },
  "AWSCodeDeployRoleForCloudFormation": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "lambda:InvokeFunction"
          ],
          "Resource": "arn:aws:lambda:*:*:function:CodeDeployHook_*",
          "Effect": "Allow"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-05-19T17:12:52+00:00"
  },
  "AWSCodeDeployRoleForECS": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "ecs:DescribeServices",
            "ecs:CreateTaskSet",
            "ecs:UpdateServicePrimaryTaskSet",
            "ecs:DeleteTaskSet",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:ModifyListener",
            "elasticloadbalancing:DescribeRules",
            "elasticloadbalancing:ModifyRule",
            "lambda:InvokeFunction",
            "cloudwatch:DescribeAlarms",
            "sns:Publish",
            "s3:GetObject",
            "s3:GetObjectVersion"
          ],
          "Resource": "*",
          "Effect": "Allow"
        },
        {
          "Action": [
            "iam:PassRole"
          ],
          "Effect": "Allow",
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": [
                "ecs-tasks.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2019-09-23T22:37:46+00:00"
  },
  "AWSCodeDeployRoleForECSLimited": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "ecs:DescribeServices",
            "ecs:CreateTaskSet",
            "ecs:UpdateServicePrimaryTaskSet",
            "ecs:DeleteTaskSet",
            "cloudwatch:DescribeAlarms"
          ],
          "Resource": "*",
          "Effect": "Allow"
        },
        {
          "Action": [
            "sns:Publish"
          ],
          "Resource": "arn:aws:sns:*:*:CodeDeployTopic_*",
          "Effect": "Allow"
        },
        {
          "Action": [
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:ModifyListener",
            "elasticloadbalancing:DescribeRules",
            "elasticloadbalancing:ModifyRule"
          ],
          "Resource": "*",
          "Effect": "Allow"
        },
        {
          "Action": [
            "lambda:InvokeFunction"
          ],
          "Resource": "arn:aws:lambda:*:*:function:CodeDeployHook_*",
          "Effect": "Allow"
        },
        {
          "Action": [
            "s3:GetObject",
            "s3:GetObjectVersion"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "s3:ExistingObjectTag/UseWithCodeDeploy": "true"
            }
          },
          "Effect": "Allow"
        },
        {
          "Action": [
            "iam:PassRole"
          ],
          "Effect": "Allow",
          "Resource": [
            "arn:aws:iam::*:role/ecsTaskExecutionRole",
            "arn:aws:iam::*:role/ECSTaskExecution*"
          ],
          "Condition": {
            "StringLike": {
              "iam:PassedToService": [
                "ecs-tasks.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2019-09-23T22:10:29+00:00"
  },
  "AWSCodeDeployRoleForLambda": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "cloudwatch:DescribeAlarms",
            "lambda:UpdateAlias",
            "lambda:GetAlias",
            "lambda:GetProvisionedConcurrencyConfig",
            "sns:Publish"
          ],
          "Resource": "*",
          "Effect": "Allow"
        },
        {
          "Action": [
            "s3:GetObject",
            "s3:GetObjectVersion"
          ],
          "Resource": "arn:aws:s3:::*/CodeDeploy/*",
          "Effect": "Allow"
        },
        {
          "Action": [
            "s3:GetObject",
            "s3:GetObjectVersion"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "s3:ExistingObjectTag/UseWithCodeDeploy": "true"
            }
          },
          "Effect": "Allow"
        },
        {
          "Action": [
            "lambda:InvokeFunction"
          ],
          "Resource": "arn:aws:lambda:*:*:function:CodeDeployHook_*",
          "Effect": "Allow"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2019-12-03T19:53:10+00:00"
  },
  "AWSCodeDeployRoleForLambdaLimited": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "cloudwatch:DescribeAlarms",
            "lambda:UpdateAlias",
            "lambda:GetAlias",
            "lambda:GetProvisionedConcurrencyConfig"
          ],
          "Resource": "*",
          "Effect": "Allow"
        },
        {
          "Action": [
            "s3:GetObject",
            "s3:GetObjectVersion"
          ],
          "Resource": "arn:aws:s3:::*/CodeDeploy/*",
          "Effect": "Allow"
        },
        {
          "Action": [
            "s3:GetObject",
            "s3:GetObjectVersion"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "s3:ExistingObjectTag/UseWithCodeDeploy": "true"
            }
          },
          "Effect": "Allow"
        },
        {
          "Action": [
            "lambda:InvokeFunction"
          ],
          "Resource": "arn:aws:lambda:*:*:function:CodeDeployHook_*",
          "Effect": "Allow"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-08-17T17:14:14+00:00"
  },
  "AWSCodePipelineApproverAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "codepipeline:GetPipeline",
            "codepipeline:GetPipelineState",
            "codepipeline:GetPipelineExecution",
            "codepipeline:ListPipelineExecutions",
            "codepipeline:ListPipelines",
            "codepipeline:PutApprovalResult"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2017-08-02T17:24:58+00:00"
  },
  "AWSCodePipelineCustomActionAccess": {
    "Document": {
      "Statement": [
        {
          "Action": [
            "codepipeline:AcknowledgeJob",
            "codepipeline:GetJobDetails",
            "codepipeline:PollForJobs",
            "codepipeline:PutJobFailureResult",
            "codepipeline:PutJobSuccessResult"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ],
      "Version": "2012-10-17"
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-07-09T17:02:54+00:00"
  },
  "AWSCodePipelineFullAccess": {
    "Document": {
      "Statement": [
        {
          "Action": [
            "codepipeline:*",
            "cloudformation:DescribeStacks",
            "cloudformation:ListChangeSets",
            "cloudtrail:CreateTrail",
            "cloudtrail:DescribeTrails",
            "cloudtrail:GetEventSelectors",
            "cloudtrail:PutEventSelectors",
            "cloudtrail:StartLogging",
            "codebuild:BatchGetProjects",
            "codebuild:CreateProject",
            "codebuild:ListCuratedEnvironmentImages",
            "codebuild:ListProjects",
            "codecommit:GetBranch",
            "codecommit:GetRepositoryTriggers",
            "codecommit:ListBranches",
            "codecommit:ListRepositories",
            "codecommit:PutRepositoryTriggers",
            "codecommit:GetReferences",
            "codedeploy:GetApplication",
            "codedeploy:BatchGetApplications",
            "codedeploy:GetDeploymentGroup",
            "codedeploy:BatchGetDeploymentGroups",
            "codedeploy:ListApplications",
            "codedeploy:ListDeploymentGroups",
            "devicefarm:GetDevicePool",
            "devicefarm:GetProject",
            "devicefarm:ListDevicePools",
            "devicefarm:ListProjects",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ecr:DescribeRepositories",
            "ecr:ListImages",
            "ecs:ListClusters",
            "ecs:ListServices",
            "elasticbeanstalk:DescribeApplications",
            "elasticbeanstalk:DescribeEnvironments",
            "iam:ListRoles",
            "iam:GetRole",
            "lambda:GetFunctionConfiguration",
            "lambda:ListFunctions",
            "events:ListRules",
            "events:ListTargetsByRule",
            "events:DescribeRule",
            "opsworks:DescribeApps",
            "opsworks:DescribeLayers",
            "opsworks:DescribeStacks",
            "s3:GetBucketPolicy",
            "s3:GetBucketVersioning",
            "s3:GetObjectVersion",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "sns:ListTopics",
            "codestar-notifications:ListNotificationRules",
            "codestar-notifications:ListTargets",
            "codestar-notifications:ListTagsforResource",
            "codestar-notifications:ListEventTypes",
            "states:ListStateMachines"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "s3:GetObject",
            "s3:CreateBucket",
            "s3:PutBucketPolicy"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:s3::*:codepipeline-*"
        },
        {
          "Action": [
            "iam:PassRole"
          ],
          "Effect": "Allow",
          "Resource": [
            "arn:aws:iam::*:role/service-role/cwe-role-*"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "events.amazonaws.com"
              ]
            }
          }
        },
        {
          "Action": [
            "iam:PassRole"
          ],
          "Effect": "Allow",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "codepipeline.amazonaws.com"
              ]
            }
          }
        },
        {
          "Action": [
            "events:PutRule",
            "events:PutTargets",
            "events:DeleteRule",
            "events:DisableRule",
            "events:RemoveTargets"
          ],
          "Effect": "Allow",
          "Resource": [
            "arn:aws:events:*:*:rule/codepipeline-*"
          ]
        },
        {
          "Sid": "CodeStarNotificationsReadWriteAccess",
          "Effect": "Allow",
          "Action": [
            "codestar-notifications:CreateNotificationRule",
            "codestar-notifications:DescribeNotificationRule",
            "codestar-notifications:UpdateNotificationRule",
            "codestar-notifications:DeleteNotificationRule",
            "codestar-notifications:Subscribe",
            "codestar-notifications:Unsubscribe"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "codestar-notifications:NotificationsForResource": "arn:aws:codepipeline:*"
            }
          }
        },
        {
          "Sid": "CodeStarNotificationsSNSTopicCreateAccess",
          "Effect": "Allow",
          "Action": [
            "sns:CreateTopic",
            "sns:SetTopicAttributes"
          ],
          "Resource": "arn:aws:sns:*:*:codestar-notifications*"
        },
        {
          "Sid": "CodeStarNotificationsChatbotAccess",
          "Effect": "Allow",
          "Action": [
            "chatbot:DescribeSlackChannelConfigurations"
          ],
          "Resource": "*"
        }
      ],
      "Version": "2012-10-17"
    },
    "VersionId": "v10",
    "IsDefaultVersion": true,
    "CreateDate": "2020-05-21T22:03:13+00:00"
  },
  "AWSCodePipelineReadOnlyAccess": {
    "Document": {
      "Statement": [
        {
          "Action": [
            "codepipeline:GetPipeline",
            "codepipeline:GetPipelineState",
            "codepipeline:GetPipelineExecution",
            "codepipeline:ListPipelineExecutions",
            "codepipeline:ListActionExecutions",
            "codepipeline:ListActionTypes",
            "codepipeline:ListPipelines",
            "codepipeline:ListTagsForResource",
            "iam:ListRoles",
            "s3:GetBucketPolicy",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "codecommit:ListBranches",
            "codecommit:ListRepositories",
            "codedeploy:GetApplication",
            "codedeploy:GetDeploymentGroup",
            "codedeploy:ListApplications",
            "codedeploy:ListDeploymentGroups",
            "elasticbeanstalk:DescribeApplications",
            "elasticbeanstalk:DescribeEnvironments",
            "lambda:GetFunctionConfiguration",
            "lambda:ListFunctions",
            "opsworks:DescribeApps",
            "opsworks:DescribeLayers",
            "opsworks:DescribeStacks",
            "codestar-notifications:ListNotificationRules",
            "codestar-notifications:ListEventTypes",
            "codestar-notifications:ListTargets"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Sid": "CodeStarNotificationsReadOnlyAccess",
          "Effect": "Allow",
          "Action": [
            "codestar-notifications:DescribeNotificationRule"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "codestar-notifications:NotificationsForResource": "arn:aws:codepipeline:*"
            }
          }
        }
      ],
      "Version": "2012-10-17"
    },
    "VersionId": "v9",
    "IsDefaultVersion": true,
    "CreateDate": "2020-03-26T16:07:17+00:00"
  },
  "AWSCodePipeline_FullAccess": {
    "Document": {
      "Statement": [
        {
          "Action": [
            "codepipeline:*",
            "cloudformation:DescribeStacks",
            "cloudformation:ListChangeSets",
            "cloudtrail:DescribeTrails",
            "codebuild:BatchGetProjects",
            "codebuild:CreateProject",
            "codebuild:ListCuratedEnvironmentImages",
            "codebuild:ListProjects",
            "codecommit:ListBranches",
            "codecommit:GetReferences",
            "codecommit:ListRepositories",
            "codedeploy:BatchGetDeploymentGroups",
            "codedeploy:ListApplications",
            "codedeploy:ListDeploymentGroups",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ecr:DescribeRepositories",
            "ecr:ListImages",
            "ecs:ListClusters",
            "ecs:ListServices",
            "elasticbeanstalk:DescribeApplications",
            "elasticbeanstalk:DescribeEnvironments",
            "iam:ListRoles",
            "iam:GetRole",
            "lambda:ListFunctions",
            "events:ListRules",
            "events:ListTargetsByRule",
            "events:DescribeRule",
            "opsworks:DescribeApps",
            "opsworks:DescribeLayers",
            "opsworks:DescribeStacks",
            "s3:ListAllMyBuckets",
            "sns:ListTopics",
            "codestar-notifications:ListNotificationRules",
            "codestar-notifications:ListTargets",
            "codestar-notifications:ListTagsforResource",
            "codestar-notifications:ListEventTypes",
            "states:ListStateMachines"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "s3:GetObject",
            "s3:ListBucket",
            "s3:GetBucketPolicy",
            "s3:GetBucketVersioning",
            "s3:GetObjectVersion",
            "s3:CreateBucket",
            "s3:PutBucketPolicy"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:s3::*:codepipeline-*"
        },
        {
          "Action": [
            "cloudtrail:PutEventSelectors",
            "cloudtrail:CreateTrail",
            "cloudtrail:GetEventSelectors",
            "cloudtrail:StartLogging"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:cloudtrail:*:*:trail/codepipeline-source-trail"
        },
        {
          "Action": [
            "iam:PassRole"
          ],
          "Effect": "Allow",
          "Resource": [
            "arn:aws:iam::*:role/service-role/cwe-role-*"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "events.amazonaws.com"
              ]
            }
          }
        },
        {
          "Action": [
            "iam:PassRole"
          ],
          "Effect": "Allow",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "codepipeline.amazonaws.com"
              ]
            }
          }
        },
        {
          "Action": [
            "events:PutRule",
            "events:PutTargets",
            "events:DeleteRule",
            "events:DisableRule",
            "events:RemoveTargets"
          ],
          "Effect": "Allow",
          "Resource": [
            "arn:aws:events:*:*:rule/codepipeline-*"
          ]
        },
        {
          "Sid": "CodeStarNotificationsReadWriteAccess",
          "Effect": "Allow",
          "Action": [
            "codestar-notifications:CreateNotificationRule",
            "codestar-notifications:DescribeNotificationRule",
            "codestar-notifications:UpdateNotificationRule",
            "codestar-notifications:DeleteNotificationRule",
            "codestar-notifications:Subscribe",
            "codestar-notifications:Unsubscribe"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "codestar-notifications:NotificationsForResource": "arn:aws:codepipeline:*"
            }
          }
        },
        {
          "Sid": "CodeStarNotificationsSNSTopicCreateAccess",
          "Effect": "Allow",
          "Action": [
            "sns:CreateTopic",
            "sns:SetTopicAttributes"
          ],
          "Resource": "arn:aws:sns:*:*:codestar-notifications*"
        },
        {
          "Sid": "CodeStarNotificationsChatbotAccess",
          "Effect": "Allow",
          "Action": [
            "chatbot:DescribeSlackChannelConfigurations",
            "chatbot:ListMicrosoftTeamsChannelConfigurations"
          ],
          "Resource": "*"
        }
      ],
      "Version": "2012-10-17"
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-06-21T22:46:59+00:00"
  },
  "AWSCodePipeline_ReadOnlyAccess": {
    "Document": {
      "Statement": [
        {
          "Action": [
            "codepipeline:GetPipeline",
            "codepipeline:GetPipelineState",
            "codepipeline:GetPipelineExecution",
            "codepipeline:ListPipelineExecutions",
            "codepipeline:ListActionExecutions",
            "codepipeline:ListActionTypes",
            "codepipeline:ListPipelines",
            "codepipeline:ListTagsForResource",
            "s3:ListAllMyBuckets",
            "codestar-notifications:ListNotificationRules",
            "codestar-notifications:ListEventTypes",
            "codestar-notifications:ListTargets"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "s3:GetObject",
            "s3:ListBucket",
            "s3:GetBucketPolicy"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:s3::*:codepipeline-*"
        },
        {
          "Sid": "CodeStarNotificationsReadOnlyAccess",
          "Effect": "Allow",
          "Action": [
            "codestar-notifications:DescribeNotificationRule"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "codestar-notifications:NotificationsForResource": "arn:aws:codepipeline:*"
            }
          }
        }
      ],
      "Version": "2012-10-17"
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-08-03T22:25:17+00:00"
  },
  "AWSCodeStarFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "CodeStarEC2",
          "Effect": "Allow",
          "Action": [
            "codestar:*",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeVpcs",
            "ec2:DescribeSubnets",
            "cloud9:DescribeEnvironment*",
            "cloud9:ValidateEnvironmentName"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CodeStarCF",
          "Effect": "Allow",
          "Action": [
            "cloudformation:DescribeStack*",
            "cloudformation:ListStacks*",
            "cloudformation:GetTemplateSummary"
          ],
          "Resource": [
            "arn:aws:cloudformation:*:*:stack/awscodestar-*"
          ]
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-28T00:06:28+00:00"
  },
  "AWSCodeStarNotificationsServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "events:PutTargets",
            "events:PutRule",
            "events:DescribeRule"
          ],
          "Resource": "arn:aws:events:*:*:rule/awscodestarnotifications-*",
          "Effect": "Allow"
        },
        {
          "Action": [
            "sns:CreateTopic"
          ],
          "Resource": "arn:aws:sns:*:*:CodeStarNotifications-*",
          "Effect": "Allow"
        },
        {
          "Action": [
            "codecommit:GetCommentsForPullRequest",
            "codecommit:GetCommentsForComparedCommit",
            "chatbot:DescribeSlackChannelConfigurations",
            "chatbot:UpdateSlackChannelConfiguration",
            "codecommit:GetDifferences",
            "codepipeline:ListActionExecutions"
          ],
          "Resource": "*",
          "Effect": "Allow"
        },
        {
          "Action": [
            "codecommit:GetFile"
          ],
          "Resource": "*",
          "Condition": {
            "StringNotEquals": {
              "aws:ResourceTag/ExcludeFileContentFromNotifications": "true"
            }
          },
          "Effect": "Allow"
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2020-03-19T16:01:55+00:00"
  },
  "AWSCodeStarServiceRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "ProjectEventRules",
          "Effect": "Allow",
          "Action": [
            "events:PutTargets",
            "events:RemoveTargets",
            "events:PutRule",
            "events:DeleteRule",
            "events:DescribeRule"
          ],
          "Resource": [
            "arn:aws:events:*:*:rule/awscodestar-*"
          ]
        },
        {
          "Sid": "ProjectStack",
          "Effect": "Allow",
          "Action": [
            "cloudformation:*Stack*",
            "cloudformation:CreateChangeSet",
            "cloudformation:ExecuteChangeSet",
            "cloudformation:DeleteChangeSet",
            "cloudformation:GetTemplate"
          ],
          "Resource": [
            "arn:aws:cloudformation:*:*:stack/awscodestar-*",
            "arn:aws:cloudformation:*:*:stack/awseb-*",
            "arn:aws:cloudformation:*:*:stack/aws-cloud9-*",
            "arn:aws:cloudformation:*:aws:transform/CodeStar*"
          ]
        },
        {
          "Sid": "ProjectStackTemplate",
          "Effect": "Allow",
          "Action": [
            "cloudformation:GetTemplateSummary",
            "cloudformation:DescribeChangeSet"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ProjectQuickstarts",
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": [
            "arn:aws:s3:::awscodestar-*/*"
          ]
        },
        {
          "Sid": "ProjectS3Buckets",
          "Effect": "Allow",
          "Action": [
            "s3:*"
          ],
          "Resource": [
            "arn:aws:s3:::aws-codestar-*",
            "arn:aws:s3:::elasticbeanstalk-*"
          ]
        },
        {
          "Sid": "ProjectServices",
          "Effect": "Allow",
          "Action": [
            "codestar:*",
            "codecommit:*",
            "codepipeline:*",
            "codedeploy:*",
            "codebuild:*",
            "autoscaling:*",
            "cloudwatch:Put*",
            "ec2:*",
            "elasticbeanstalk:*",
            "elasticloadbalancing:*",
            "iam:ListRoles",
            "logs:*",
            "sns:*",
            "cloud9:CreateEnvironmentEC2",
            "cloud9:DeleteEnvironment",
            "cloud9:DescribeEnvironment*",
            "cloud9:ListEnvironments"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ProjectWorkerRoles",
          "Effect": "Allow",
          "Action": [
            "iam:AttachRolePolicy",
            "iam:CreateRole",
            "iam:DeleteRole",
            "iam:DeleteRolePolicy",
            "iam:DetachRolePolicy",
            "iam:GetRole",
            "iam:PassRole",
            "iam:GetRolePolicy",
            "iam:PutRolePolicy",
            "iam:SetDefaultPolicyVersion",
            "iam:CreatePolicy",
            "iam:DeletePolicy",
            "iam:AddRoleToInstanceProfile",
            "iam:CreateInstanceProfile",
            "iam:DeleteInstanceProfile",
            "iam:RemoveRoleFromInstanceProfile"
          ],
          "Resource": [
            "arn:aws:iam::*:role/CodeStarWorker*",
            "arn:aws:iam::*:policy/CodeStarWorker*",
            "arn:aws:iam::*:instance-profile/awscodestar-*"
          ]
        },
        {
          "Sid": "ProjectTeamMembers",
          "Effect": "Allow",
          "Action": [
            "iam:AttachUserPolicy",
            "iam:DetachUserPolicy"
          ],
          "Resource": "*",
          "Condition": {
            "ArnEquals": {
              "iam:PolicyArn": [
                "arn:aws:iam::*:policy/CodeStar_*"
              ]
            }
          }
        },
        {
          "Sid": "ProjectRoles",
          "Effect": "Allow",
          "Action": [
            "iam:CreatePolicy",
            "iam:DeletePolicy",
            "iam:CreatePolicyVersion",
            "iam:DeletePolicyVersion",
            "iam:ListEntitiesForPolicy",
            "iam:ListPolicyVersions",
            "iam:GetPolicy",
            "iam:GetPolicyVersion"
          ],
          "Resource": [
            "arn:aws:iam::*:policy/CodeStar_*"
          ]
        },
        {
          "Sid": "InspectServiceRole",
          "Effect": "Allow",
          "Action": [
            "iam:ListAttachedRolePolicies"
          ],
          "Resource": [
            "arn:aws:iam::*:role/aws-codestar-service-role",
            "arn:aws:iam::*:role/service-role/aws-codestar-service-role"
          ]
        },
        {
          "Sid": "IAMLinkRole",
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "cloud9.amazonaws.com"
            }
          }
        },
        {
          "Sid": "DescribeConfigRuleForARN",
          "Effect": "Allow",
          "Action": [
            "config:DescribeConfigRules"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "ProjectCodeStarConnections",
          "Effect": "Allow",
          "Action": [
            "codestar-connections:UseConnection",
            "codestar-connections:GetConnection"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ProjectCodeStarConnectionsPassConnections",
          "Effect": "Allow",
          "Action": "codestar-connections:PassConnection",
          "Resource": "*",
          "Condition": {
            "StringEqualsIfExists": {
              "codestar-connections:PassedToService": "codepipeline.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v11",
    "IsDefaultVersion": true,
    "CreateDate": "2021-09-20T19:11:03+00:00"
  },
  "AWSCompromisedKeyQuarantine": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Deny",
          "Action": [
            "iam:AttachGroupPolicy",
            "iam:AttachRolePolicy",
            "iam:AttachUserPolicy",
            "iam:ChangePassword",
            "iam:CreateAccessKey",
            "iam:CreateInstanceProfile",
            "iam:CreateLoginProfile",
            "iam:CreateRole",
            "iam:CreateUser",
            "iam:DetachUserPolicy",
            "iam:PutUserPermissionsBoundary",
            "iam:PutUserPolicy",
            "iam:UpdateAccessKey",
            "iam:UpdateAccountPasswordPolicy",
            "iam:UpdateUser",
            "ec2:RequestSpotInstances",
            "ec2:RunInstances",
            "ec2:StartInstances",
            "organizations:CreateAccount",
            "organizations:CreateOrganization",
            "organizations:InviteAccountToOrganization",
            "lambda:CreateFunction",
            "lightsail:Create*",
            "lightsail:Start*",
            "lightsail:Delete*",
            "lightsail:Update*",
            "lightsail:GetInstanceAccessDetails",
            "lightsail:DownloadDefaultKeyPair"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-08-11T18:04:13+00:00"
  },
  "AWSCompromisedKeyQuarantineV2": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Deny",
          "Action": [
            "cloudtrail:LookupEvents",
            "ec2:RequestSpotInstances",
            "ec2:RunInstances",
            "ec2:StartInstances",
            "iam:AddUserToGroup",
            "iam:AttachGroupPolicy",
            "iam:AttachRolePolicy",
            "iam:AttachUserPolicy",
            "iam:ChangePassword",
            "iam:CreateAccessKey",
            "iam:CreateInstanceProfile",
            "iam:CreateLoginProfile",
            "iam:CreatePolicyVersion",
            "iam:CreateRole",
            "iam:CreateUser",
            "iam:DetachUserPolicy",
            "iam:PassRole",
            "iam:PutGroupPolicy",
            "iam:PutRolePolicy",
            "iam:PutUserPermissionsBoundary",
            "iam:PutUserPolicy",
            "iam:SetDefaultPolicyVersion",
            "iam:UpdateAccessKey",
            "iam:UpdateAccountPasswordPolicy",
            "iam:UpdateAssumeRolePolicy",
            "iam:UpdateLoginProfile",
            "iam:UpdateUser",
            "lambda:AddLayerVersionPermission",
            "lambda:AddPermission",
            "lambda:CreateFunction",
            "lambda:GetPolicy",
            "lambda:ListTags",
            "lambda:PutProvisionedConcurrencyConfig",
            "lambda:TagResource",
            "lambda:UntagResource",
            "lambda:UpdateFunctionCode",
            "lightsail:Create*",
            "lightsail:Delete*",
            "lightsail:DownloadDefaultKeyPair",
            "lightsail:GetInstanceAccessDetails",
            "lightsail:Start*",
            "lightsail:Update*",
            "organizations:CreateAccount",
            "organizations:CreateOrganization",
            "organizations:InviteAccountToOrganization",
            "s3:DeleteBucket",
            "s3:DeleteObject",
            "s3:DeleteObjectVersion",
            "s3:PutLifecycleConfiguration",
            "s3:PutBucketAcl",
            "s3:PutBucketOwnershipControls",
            "s3:DeleteBucketPolicy",
            "s3:ObjectOwnerOverrideToBucketOwner",
            "s3:PutAccountPublicAccessBlock",
            "s3:PutBucketPolicy",
            "s3:ListAllMyBuckets",
            "ec2:PurchaseReservedInstancesOffering",
            "ec2:AcceptReservedInstancesExchangeQuote",
            "ec2:CreateReservedInstancesListing",
            "savingsplans:CreateSavingsPlan"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-16T00:20:25+00:00"
  },
  "AWSConfigMultiAccountSetupPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "config:PutConfigRule",
            "config:DeleteConfigRule"
          ],
          "Resource": "arn:aws:config:*:*:config-rule/aws-service-rule/config-multiaccountsetup.amazonaws.com/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "config:DescribeConfigurationRecorders"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "organizations:ListAccounts",
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:DescribeAccount"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "config:PutConformancePack",
            "config:DeleteConformancePack"
          ],
          "Resource": "arn:aws:config:*:*:conformance-pack/aws-service-conformance-pack/config-multiaccountsetup.amazonaws.com/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "config:DescribeConformancePackStatus"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:GetRole"
          ],
          "Resource": "arn:aws:iam::*:role/aws-service-role/config-conforms.amazonaws.com/AWSServiceRoleForConfigConforms"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": "arn:aws:iam::*:role/aws-service-role/config-conforms.amazonaws.com/AWSServiceRoleForConfigConforms",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "config-conforms.amazonaws.com"
            }
          }
        },
        {
          "Action": "iam:PassRole",
          "Resource": "*",
          "Effect": "Allow",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "ssm.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2023-02-24T01:39:49+00:00"
  },
  "AWSConfigRemediationServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "ssm:GetDocument",
            "ssm:DescribeDocument",
            "ssm:StartAutomationExecution"
          ],
          "Resource": "*",
          "Effect": "Allow"
        },
        {
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "ssm.amazonaws.com"
            }
          },
          "Action": "iam:PassRole",
          "Resource": "*",
          "Effect": "Allow"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-06-18T21:21:35+00:00"
  },
  "AWSConfigRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "access-analyzer:GetAnalyzer",
            "access-analyzer:GetArchiveRule",
            "access-analyzer:ListAnalyzers",
            "access-analyzer:ListArchiveRules",
            "access-analyzer:ListTagsForResource",
            "account:GetAlternateContact",
            "acm:DescribeCertificate",
            "acm:ListCertificates",
            "acm:ListTagsForCertificate",
            "apigateway:GET",
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingPolicies",
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribeLaunchConfigurations",
            "autoscaling:DescribeLifecycleHooks",
            "autoscaling:DescribePolicies",
            "autoscaling:DescribeScheduledActions",
            "autoscaling:DescribeTags",
            "backup:DescribeBackupVault",
            "backup:DescribeRecoveryPoint",
            "backup:GetBackupPlan",
            "backup:GetBackupSelection",
            "backup:GetBackupVaultAccessPolicy",
            "backup:GetBackupVaultNotifications",
            "backup:ListBackupPlans",
            "backup:ListBackupSelections",
            "backup:ListBackupVaults",
            "backup:ListRecoveryPointsByBackupVault",
            "backup:ListTags",
            "cloudformation:DescribeType",
            "cloudformation:ListTypes",
            "cloudfront:ListDistributions",
            "cloudfront:ListTagsForResource",
            "cloudtrail:DescribeTrails",
            "cloudtrail:GetEventSelectors",
            "cloudtrail:GetTrailStatus",
            "cloudtrail:ListTags",
            "cloudwatch:DescribeAlarms",
            "codedeploy:GetDeploymentConfig",
            "codepipeline:GetPipeline",
            "codepipeline:GetPipelineState",
            "codepipeline:ListPipelines",
            "config:BatchGet*",
            "config:Describe*",
            "config:Get*",
            "config:List*",
            "config:Put*",
            "config:Select*",
            "dax:DescribeClusters",
            "dms:DescribeEventSubscriptions",
            "dms:DescribeReplicationInstances",
            "dms:DescribeReplicationSubnetGroups",
            "dms:ListTagsForResource",
            "dynamodb:DescribeContinuousBackups",
            "dynamodb:DescribeLimits",
            "dynamodb:DescribeTable",
            "dynamodb:ListTables",
            "dynamodb:ListTagsOfResource",
            "ec2:Describe*",
            "ec2:GetEbsEncryptionByDefault",
            "ecr-public:DescribeRepositories",
            "ecr-public:GetRepositoryCatalogData",
            "ecr-public:GetRepositoryPolicy",
            "ecr-public:ListTagsForResource",
            "ecr:DescribeRepositories",
            "ecr:GetLifecyclePolicy",
            "ecr:GetRepositoryPolicy",
            "ecr:ListTagsForResource",
            "ecs:DescribeClusters",
            "ecs:DescribeServices",
            "ecs:DescribeTaskDefinition",
            "ecs:DescribeTaskSets",
            "ecs:ListClusters",
            "ecs:ListServices",
            "ecs:ListTagsForResource",
            "ecs:ListTaskDefinitionFamilies",
            "ecs:ListTaskDefinitions",
            "eks:DescribeCluster",
            "eks:DescribeNodegroup",
            "eks:ListClusters",
            "eks:ListNodegroups",
            "elasticache:DescribeCacheClusters",
            "elasticache:DescribeCacheParameterGroups",
            "elasticache:DescribeCacheSubnetGroups",
            "elasticache:DescribeReplicationGroups",
            "elasticache:DescribeSnapshots",
            "elasticache:ListTagsForResource",
            "elasticbeanstalk:DescribeConfigurationSettings",
            "elasticbeanstalk:DescribeEnvironments",
            "elasticfilesystem:DescribeAccessPoints",
            "elasticfilesystem:DescribeBackupPolicy",
            "elasticfilesystem:DescribeFileSystemPolicy",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DescribeLifecycleConfiguration",
            "elasticfilesystem:DescribeMountTargets",
            "elasticfilesystem:DescribeMountTargetSecurityGroups",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancerAttributes",
            "elasticloadbalancing:DescribeLoadBalancerPolicies",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeRules",
            "elasticloadbalancing:DescribeTags",
            "elasticmapreduce:DescribeCluster",
            "elasticmapreduce:DescribeSecurityConfiguration",
            "elasticmapreduce:DescribeStep",
            "elasticmapreduce:GetBlockPublicAccessConfiguration",
            "elasticmapreduce:GetManagedScalingPolicy",
            "elasticmapreduce:ListClusters",
            "elasticmapreduce:ListInstanceFleets",
            "elasticmapreduce:ListInstanceGroups",
            "elasticmapreduce:ListInstances",
            "elasticmapreduce:ListSecurityConfigurations",
            "elasticmapreduce:ListSteps",
            "es:DescribeDomain",
            "es:DescribeDomains",
            "es:DescribeElasticsearchDomain",
            "es:DescribeElasticsearchDomains",
            "es:GetCompatibleElasticsearchVersions",
            "es:GetCompatibleVersions",
            "es:ListDomainNames",
            "es:ListTags",
            "firehose:DescribeDeliveryStream",
            "firehose:ListDeliveryStreams",
            "firehose:ListTagsForDeliveryStream",
            "fsx:DescribeFileSystems",
            "globalaccelerator:DescribeAccelerator",
            "globalaccelerator:DescribeEndpointGroup",
            "globalaccelerator:DescribeListener",
            "globalaccelerator:ListAccelerators",
            "globalaccelerator:ListEndpointGroups",
            "globalaccelerator:ListListeners",
            "globalaccelerator:ListTagsForResource",
            "guardduty:GetDetector",
            "guardduty:GetFindings",
            "guardduty:GetMasterAccount",
            "guardduty:ListDetectors",
            "guardduty:ListFindings",
            "iam:GenerateCredentialReport",
            "iam:GetAccountAuthorizationDetails",
            "iam:GetAccountPasswordPolicy",
            "iam:GetAccountSummary",
            "iam:GetCredentialReport",
            "iam:GetGroup",
            "iam:GetGroupPolicy",
            "iam:GetPolicy",
            "iam:GetPolicyVersion",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:GetUser",
            "iam:GetUserPolicy",
            "iam:ListAttachedGroupPolicies",
            "iam:ListAttachedRolePolicies",
            "iam:ListAttachedUserPolicies",
            "iam:ListEntitiesForPolicy",
            "iam:ListGroupPolicies",
            "iam:ListGroupsForUser",
            "iam:ListInstanceProfilesForRole",
            "iam:ListPolicyVersions",
            "iam:ListRolePolicies",
            "iam:ListUserPolicies",
            "iam:ListVirtualMFADevices",
            "kafka:DescribeCluster",
            "kafka:ListClusters",
            "kinesis:DescribeStreamConsumer",
            "kinesis:DescribeStreamSummary",
            "kinesis:ListStreamConsumers",
            "kinesis:ListStreams",
            "kinesis:ListTagsForStream",
            "kms:DescribeKey",
            "kms:GetKeyPolicy",
            "kms:GetKeyRotationStatus",
            "kms:ListKeys",
            "kms:ListResourceTags",
            "lambda:GetAlias",
            "lambda:GetFunction",
            "lambda:GetFunctionCodeSigningConfig",
            "lambda:GetPolicy",
            "lambda:ListAliases",
            "lambda:ListFunctions",
            "lambda:ListVersionsByFunction",
            "logs:DescribeLogGroups",
            "logs:ListTagsLogGroup",
            "network-firewall:DescribeLoggingConfiguration",
            "network-firewall:ListFirewalls",
            "organizations:DescribeOrganization",
            "organizations:DescribePolicy",
            "organizations:ListParents",
            "organizations:ListPoliciesForTarget",
            "rds:DescribeDBClusters",
            "rds:DescribeDBClusterSnapshotAttributes",
            "rds:DescribeDBClusterSnapshots",
            "rds:DescribeDBEngineVersions",
            "rds:DescribeDBInstances",
            "rds:DescribeDBParameterGroups",
            "rds:DescribeDBParameters",
            "rds:DescribeDBSecurityGroups",
            "rds:DescribeDBSnapshotAttributes",
            "rds:DescribeDBSnapshots",
            "rds:DescribeDBSubnetGroups",
            "rds:DescribeEventSubscriptions",
            "rds:DescribeOptionGroups",
            "rds:ListTagsForResource",
            "redshift:DescribeClusterParameterGroups",
            "redshift:DescribeClusterParameters",
            "redshift:DescribeClusters",
            "redshift:DescribeClusterSecurityGroups",
            "redshift:DescribeClusterSnapshots",
            "redshift:DescribeClusterSubnetGroups",
            "redshift:DescribeEventSubscriptions",
            "redshift:DescribeLoggingStatus",
            "route53:GetHealthCheck",
            "route53:GetHostedZone",
            "route53:ListHealthChecks",
            "route53:ListHostedZones",
            "route53:ListHostedZonesByName",
            "route53:ListQueryLoggingConfigs",
            "route53:ListResourceRecordSets",
            "route53:ListTagsForResource",
            "route53resolver:GetResolverEndpoint",
            "route53resolver:GetResolverRule",
            "route53resolver:GetResolverRuleAssociation",
            "route53resolver:ListResolverEndpointIpAddresses",
            "route53resolver:ListResolverEndpoints",
            "route53resolver:ListResolverRuleAssociations",
            "route53resolver:ListResolverRules",
            "route53resolver:ListTagsForResource",
            "s3:GetAccelerateConfiguration",
            "s3:GetAccessPoint",
            "s3:GetAccessPointPolicy",
            "s3:GetAccessPointPolicyStatus",
            "s3:GetAccountPublicAccessBlock",
            "s3:GetBucketAcl",
            "s3:GetBucketCORS",
            "s3:GetBucketLocation",
            "s3:GetBucketLogging",
            "s3:GetBucketNotification",
            "s3:GetBucketObjectLockConfiguration",
            "s3:GetBucketPolicy",
            "s3:GetBucketPublicAccessBlock",
            "s3:GetBucketRequestPayment",
            "s3:GetBucketTagging",
            "s3:GetBucketVersioning",
            "s3:GetBucketWebsite",
            "s3:GetEncryptionConfiguration",
            "s3:GetLifecycleConfiguration",
            "s3:GetObject",
            "s3:GetReplicationConfiguration",
            "s3:ListAccessPoints",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "sagemaker:DescribeCodeRepository",
            "sagemaker:DescribeEndpoint",
            "sagemaker:DescribeEndpointConfig",
            "sagemaker:DescribeModel",
            "sagemaker:DescribeMonitoringSchedule",
            "sagemaker:DescribeNotebookInstance",
            "sagemaker:DescribeNotebookInstanceLifecycleConfig",
            "sagemaker:DescribeWorkteam",
            "sagemaker:ListCodeRepositories",
            "sagemaker:ListEndpointConfigs",
            "sagemaker:ListEndpoints",
            "sagemaker:ListModels",
            "sagemaker:ListMonitoringSchedules",
            "sagemaker:ListNotebookInstanceLifecycleConfigs",
            "sagemaker:ListNotebookInstances",
            "sagemaker:ListTags",
            "sagemaker:ListWorkteams",
            "secretsmanager:ListSecrets",
            "secretsmanager:ListSecretVersionIds",
            "securityhub:DescribeHub",
            "shield:DescribeDRTAccess",
            "shield:DescribeProtection",
            "shield:DescribeSubscription",
            "sns:GetSubscriptionAttributes",
            "sns:GetTopicAttributes",
            "sns:ListSubscriptions",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTagsForResource",
            "sns:ListTopics",
            "sqs:GetQueueAttributes",
            "sqs:ListQueues",
            "sqs:ListQueueTags",
            "ssm:DescribeAutomationExecutions",
            "ssm:DescribeDocument",
            "ssm:DescribeDocumentPermission",
            "ssm:GetAutomationExecution",
            "ssm:GetDocument",
            "ssm:ListDocuments",
            "states:DescribeStateMachine",
            "states:ListStateMachines",
            "states:ListTagsForResource",
            "storagegateway:ListGateways",
            "storagegateway:ListTagsForResource",
            "storagegateway:ListVolumes",
            "support:DescribeCases",
            "tag:GetResources",
            "waf-regional:GetLoggingConfiguration",
            "waf-regional:GetWebACL",
            "waf-regional:GetWebACLForResource",
            "waf:GetLoggingConfiguration",
            "waf:GetWebACL",
            "wafv2:GetLoggingConfiguration"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v42",
    "IsDefaultVersion": true,
    "CreateDate": "2022-02-10T18:33:55+00:00"
  },
  "AWSConfigRoleForOrganizations": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "organizations:ListAccounts",
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListDelegatedAdministrators"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2020-11-24T20:19:13+00:00"
  },
  "AWSConfigRulesExecutionRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": "arn:aws:s3:::*/AWSLogs/*/Config/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "config:Put*",
            "config:Get*",
            "config:List*",
            "config:Describe*",
            "config:BatchGet*",
            "config:Select*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2019-05-13T21:33:30+00:00"
  },
  "AWSConfigServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AWSConfigServiceRolePolicyStatementID",
          "Effect": "Allow",
          "Action": [
            "access-analyzer:GetAnalyzer",
            "access-analyzer:GetArchiveRule",
            "access-analyzer:ListAnalyzers",
            "access-analyzer:ListArchiveRules",
            "access-analyzer:ListTagsForResource",
            "account:GetAlternateContact",
            "acm-pca:DescribeCertificateAuthority",
            "acm-pca:GetCertificateAuthorityCertificate",
            "acm-pca:GetCertificateAuthorityCsr",
            "acm-pca:ListCertificateAuthorities",
            "acm-pca:ListTags",
            "acm:DescribeCertificate",
            "acm:ListCertificates",
            "acm:ListTagsForCertificate",
            "airflow:GetEnvironment",
            "airflow:ListEnvironments",
            "airflow:ListTagsForResource",
            "amplify:GetApp",
            "amplify:GetBranch",
            "amplify:ListApps",
            "amplify:ListBranches",
            "amplifyuibuilder:ExportThemes",
            "amplifyuibuilder:GetTheme",
            "amplifyuibuilder:ListThemes",
            "app-integrations:GetEventIntegration",
            "app-integrations:ListEventIntegrationAssociations",
            "app-integrations:ListEventIntegrations",
            "appconfig:GetApplication",
            "appconfig:GetConfigurationProfile",
            "appconfig:GetDeployment",
            "appconfig:GetDeploymentStrategy",
            "appconfig:GetEnvironment",
            "appconfig:GetHostedConfigurationVersion",
            "appconfig:ListApplications",
            "appconfig:ListConfigurationProfiles",
            "appconfig:ListDeployments",
            "appconfig:ListDeploymentStrategies",
            "appconfig:ListEnvironments",
            "appconfig:ListHostedConfigurationVersions",
            "appconfig:ListTagsForResource",
            "appflow:DescribeConnectorProfiles",
            "appflow:DescribeFlow",
            "appflow:ListFlows",
            "appflow:ListTagsForResource",
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingPolicies",
            "appmesh:DescribeGatewayRoute",
            "appmesh:DescribeMesh",
            "appmesh:DescribeRoute",
            "appmesh:DescribeVirtualGateway",
            "appmesh:DescribeVirtualNode",
            "appmesh:DescribeVirtualRouter",
            "appmesh:DescribeVirtualService",
            "appmesh:ListGatewayRoutes",
            "appmesh:ListMeshes",
            "appmesh:ListRoutes",
            "appmesh:ListTagsForResource",
            "appmesh:ListVirtualGateways",
            "appmesh:ListVirtualNodes",
            "appmesh:ListVirtualRouters",
            "appmesh:ListVirtualServices",
            "apprunner:DescribeService",
            "apprunner:DescribeVpcConnector",
            "apprunner:ListServices",
            "apprunner:ListTagsForResource",
            "apprunner:ListVpcConnectors",
            "appstream:DescribeApplications",
            "appstream:DescribeDirectoryConfigs",
            "appstream:DescribeFleets",
            "appstream:DescribeStacks",
            "appstream:ListTagsForResource",
            "appsync:GetApiCache",
            "appsync:GetGraphqlApi",
            "appsync:ListGraphqlApis",
            "APS:DescribeRuleGroupsNamespace",
            "APS:DescribeWorkspace",
            "aps:ListRuleGroupsNamespaces",
            "aps:ListTagsForResource",
            "APS:ListWorkspaces",
            "athena:GetDataCatalog",
            "athena:GetPreparedStatement",
            "athena:GetWorkGroup",
            "athena:ListDataCatalogs",
            "athena:ListPreparedStatements",
            "athena:ListTagsForResource",
            "athena:ListWorkGroups",
            "auditmanager:GetAccountStatus",
            "auditmanager:GetAssessment",
            "auditmanager:ListAssessments",
            "autoscaling-plans:DescribeScalingPlanResources",
            "autoscaling-plans:DescribeScalingPlans",
            "autoscaling-plans:GetScalingPlanResourceForecastData",
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribeLaunchConfigurations",
            "autoscaling:DescribeLifecycleHooks",
            "autoscaling:DescribePolicies",
            "autoscaling:DescribeScheduledActions",
            "autoscaling:DescribeTags",
            "autoscaling:DescribeWarmPool",
            "backup-gateway:ListTagsForResource",
            "backup-gateway:ListVirtualMachines",
            "backup:DescribeBackupVault",
            "backup:DescribeFramework",
            "backup:DescribeProtectedResource",
            "backup:DescribeRecoveryPoint",
            "backup:DescribeReportPlan",
            "backup:GetBackupPlan",
            "backup:GetBackupSelection",
            "backup:GetBackupVaultAccessPolicy",
            "backup:GetBackupVaultNotifications",
            "backup:ListBackupPlans",
            "backup:ListBackupSelections",
            "backup:ListBackupVaults",
            "backup:ListFrameworks",
            "backup:ListRecoveryPointsByBackupVault",
            "backup:ListReportPlans",
            "backup:ListTags",
            "batch:DescribeComputeEnvironments",
            "batch:DescribeJobQueues",
            "batch:DescribeSchedulingPolicies",
            "batch:ListSchedulingPolicies",
            "batch:ListTagsForResource",
            "billingconductor:ListAccountAssociations",
            "billingconductor:ListBillingGroups",
            "billingconductor:ListCustomLineItems",
            "billingconductor:ListPricingPlans",
            "billingconductor:ListPricingRules",
            "billingconductor:ListPricingRulesAssociatedToPricingPlan",
            "billingconductor:ListTagsForResource",
            "budgets:DescribeBudgetAction",
            "budgets:DescribeBudgetActionsForAccount",
            "budgets:DescribeBudgetActionsForBudget",
            "budgets:ViewBudget",
            "cassandra:Select",
            "ce:GetAnomalyMonitors",
            "ce:GetAnomalySubscriptions",
            "cloud9:DescribeEnvironmentMemberships",
            "cloud9:DescribeEnvironments",
            "cloud9:ListEnvironments",
            "cloud9:ListTagsForResource",
            "cloudformation:DescribeType",
            "cloudformation:GetResource",
            "cloudformation:ListResources",
            "cloudformation:ListStackResources",
            "cloudformation:ListStacks",
            "cloudformation:ListTypes",
            "cloudfront:GetFunction",
            "cloudfront:GetOriginAccessControl",
            "cloudfront:GetResponseHeadersPolicy",
            "cloudfront:ListDistributions",
            "cloudfront:ListFunctions",
            "cloudfront:ListOriginAccessControls",
            "cloudfront:ListResponseHeadersPolicies",
            "cloudfront:ListTagsForResource",
            "cloudtrail:DescribeTrails",
            "cloudtrail:GetEventDataStore",
            "cloudtrail:GetEventSelectors",
            "cloudtrail:GetTrailStatus",
            "cloudtrail:ListEventDataStores",
            "cloudtrail:ListTags",
            "cloudtrail:ListTrails",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DescribeAnomalyDetectors",
            "cloudwatch:GetDashboard",
            "cloudwatch:GetMetricStream",
            "cloudwatch:ListDashboards",
            "cloudwatch:ListMetricStreams",
            "cloudwatch:ListTagsForResource",
            "codeartifact:DescribeRepository",
            "codeartifact:GetRepositoryPermissionsPolicy",
            "codeartifact:ListDomains",
            "codeartifact:ListPackages",
            "codeartifact:ListPackageVersions",
            "codeartifact:ListRepositories",
            "codeartifact:ListTagsForResource",
            "codebuild:BatchGetReportGroups",
            "codebuild:ListReportGroups",
            "codecommit:GetRepository",
            "codecommit:GetRepositoryTriggers",
            "codecommit:ListRepositories",
            "codecommit:ListTagsForResource",
            "codedeploy:GetDeploymentConfig",
            "codeguru-profiler:DescribeProfilingGroup",
            "codeguru-profiler:GetNotificationConfiguration",
            "codeguru-profiler:GetPolicy",
            "codeguru-profiler:ListProfilingGroups",
            "codeguru-reviewer:DescribeRepositoryAssociation",
            "codeguru-reviewer:ListRepositoryAssociations",
            "codepipeline:GetPipeline",
            "codepipeline:GetPipelineState",
            "codepipeline:ListPipelines",
            "cognito-identity:GetIdentityPoolRoles",
            "cognito-identity:ListIdentityPools",
            "cognito-identity:ListTagsForResource",
            "cognito-idp:DescribeIdentityProvider",
            "cognito-idp:DescribeResourceServer",
            "cognito-idp:DescribeUserPool",
            "cognito-idp:DescribeUserPoolClient",
            "cognito-idp:DescribeUserPoolDomain",
            "cognito-idp:GetGroup",
            "cognito-idp:GetUserPoolMfaConfig",
            "cognito-idp:ListGroups",
            "cognito-idp:ListIdentityProviders",
            "cognito-idp:ListResourceServers",
            "cognito-idp:ListUserPoolClients",
            "cognito-idp:ListUserPools",
            "cognito-idp:ListTagsForResource",
            "config:BatchGet*",
            "config:Describe*",
            "config:Get*",
            "config:List*",
            "config:Put*",
            "config:Select*",
            "connect:DescribeEvaluationForm",
            "connect:DescribeInstance",
            "connect:DescribeInstanceStorageConfig",
            "connect:DescribePhoneNumber",
            "connect:DescribePrompt",
            "connect:DescribeQuickConnect",
            "connect:DescribeRule",
            "connect:DescribeUser",
            "connect:GetTaskTemplate",
            "connect:ListApprovedOrigins",
            "connect:ListEvaluationForms",
            "connect:ListInstanceAttributes",
            "connect:ListInstances",
            "connect:ListInstanceStorageConfigs",
            "connect:ListIntegrationAssociations",
            "connect:ListPhoneNumbers",
            "connect:ListPhoneNumbersV2",
            "connect:ListPrompts",
            "connect:ListQuickConnects",
            "connect:ListRules",
            "connect:ListSecurityKeys",
            "connect:ListTagsForResource",
            "connect:ListTaskTemplates",
            "connect:ListUsers",
            "connect:SearchAvailablePhoneNumbers",
            "databrew:DescribeDataset",
            "databrew:DescribeJob",
            "databrew:DescribeProject",
            "databrew:DescribeRecipe",
            "databrew:DescribeRuleset",
            "databrew:DescribeSchedule",
            "databrew:ListDatasets",
            "databrew:ListJobs",
            "databrew:ListProjects",
            "databrew:ListRecipes",
            "databrew:ListRecipeVersions",
            "databrew:ListRulesets",
            "databrew:ListSchedules",
            "datasync:DescribeAgent",
            "datasync:DescribeLocationEfs",
            "datasync:DescribeLocationFsxLustre",
            "datasync:DescribeLocationFsxWindows",
            "datasync:DescribeLocationHdfs",
            "datasync:DescribeLocationNfs",
            "datasync:DescribeLocationObjectStorage",
            "datasync:DescribeLocationS3",
            "datasync:DescribeLocationSmb",
            "datasync:DescribeTask",
            "datasync:ListAgents",
            "datasync:ListLocations",
            "datasync:ListTagsForResource",
            "datasync:ListTasks",
            "dax:DescribeClusters",
            "dax:DescribeParameterGroups",
            "dax:DescribeParameters",
            "dax:DescribeSubnetGroups",
            "dax:ListTags",
            "detective:ListGraphs",
            "detective:ListTagsForResource",
            "devicefarm:GetInstanceProfile",
            "devicefarm:GetNetworkProfile",
            "devicefarm:GetProject",
            "devicefarm:GetTestGridProject",
            "devicefarm:ListInstanceProfiles",
            "devicefarm:ListNetworkProfiles",
            "devicefarm:ListProjects",
            "devicefarm:ListTagsForResource",
            "devicefarm:ListTestGridProjects",
            "devops-guru:GetResourceCollection",
            "dms:DescribeCertificates",
            "dms:DescribeEndpoints",
            "dms:DescribeEventSubscriptions",
            "dms:DescribeReplicationInstances",
            "dms:DescribeReplicationSubnetGroups",
            "dms:DescribeReplicationTasks",
            "dms:ListTagsForResource",
            "ds:DescribeDirectories",
            "ds:DescribeDomainControllers",
            "ds:DescribeEventTopics",
            "ds:ListLogSubscriptions",
            "ds:ListTagsForResource",
            "dynamodb:DescribeContinuousBackups",
            "dynamodb:DescribeGlobalTable",
            "dynamodb:DescribeGlobalTableSettings",
            "dynamodb:DescribeLimits",
            "dynamodb:DescribeTable",
            "dynamodb:DescribeTableReplicaAutoScaling",
            "dynamodb:DescribeTimeToLive",
            "dynamodb:ListTables",
            "dynamodb:ListTagsOfResource",
            "ec2:Describe*",
            "ec2:DescribeClientVpnAuthorizationRules",
            "ec2:DescribeClientVpnEndpoints",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeFleets",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribePlacementGroups",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSpotFleetRequests",
            "ec2:DescribeTags",
            "ec2:DescribeTrafficMirrorFilters",
            "ec2:DescribeTrafficMirrorSessions",
            "ec2:DescribeTrafficMirrorTargets",
            "ec2:DescribeVolumeAttribute",
            "ec2:DescribeVolumes",
            "ec2:GetEbsEncryptionByDefault",
            "ec2:GetInstanceTypesFromInstanceRequirements",
            "ec2:GetIpamPoolAllocations",
            "ec2:GetIpamPoolCidrs",
            "ec2:GetManagedPrefixListEntries",
            "ec2:GetNetworkInsightsAccessScopeAnalysisFindings",
            "ec2:GetNetworkInsightsAccessScopeContent",
            "ecr-public:DescribeRepositories",
            "ecr-public:GetRepositoryCatalogData",
            "ecr-public:GetRepositoryPolicy",
            "ecr-public:ListTagsForResource",
            "ecr:BatchGetRepositoryScanningConfiguration",
            "ecr:DescribePullThroughCacheRules",
            "ecr:DescribeRegistry",
            "ecr:DescribeRepositories",
            "ecr:GetLifecyclePolicy",
            "ecr:GetRegistryPolicy",
            "ecr:GetRepositoryPolicy",
            "ecr:ListTagsForResource",
            "ecs:DescribeCapacityProviders",
            "ecs:DescribeClusters",
            "ecs:DescribeServices",
            "ecs:DescribeTaskDefinition",
            "ecs:DescribeTaskSets",
            "ecs:ListClusters",
            "ecs:ListServices",
            "ecs:ListTagsForResource",
            "ecs:ListTaskDefinitionFamilies",
            "ecs:ListTaskDefinitions",
            "eks:DescribeAddon",
            "eks:DescribeCluster",
            "eks:DescribeFargateProfile",
            "eks:DescribeIdentityProviderConfig",
            "eks:DescribeNodegroup",
            "eks:ListAddons",
            "eks:ListClusters",
            "eks:ListFargateProfiles",
            "eks:ListIdentityProviderConfigs",
            "eks:ListNodegroups",
            "eks:ListTagsForResource",
            "elasticache:DescribeCacheClusters",
            "elasticache:DescribeCacheParameterGroups",
            "elasticache:DescribeCacheParameters",
            "elasticache:DescribeCacheSubnetGroups",
            "elasticache:DescribeReplicationGroups",
            "elasticache:DescribeSnapshots",
            "elasticache:ListTagsForResource",
            "elasticbeanstalk:DescribeConfigurationSettings",
            "elasticbeanstalk:DescribeEnvironments",
            "elasticfilesystem:DescribeAccessPoints",
            "elasticfilesystem:DescribeBackupPolicy",
            "elasticfilesystem:DescribeFileSystemPolicy",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DescribeLifecycleConfiguration",
            "elasticfilesystem:DescribeMountTargets",
            "elasticfilesystem:DescribeMountTargetSecurityGroups",
            "elasticloadbalancing:DescribeListenerCertificates",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancerAttributes",
            "elasticloadbalancing:DescribeLoadBalancerPolicies",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeRules",
            "elasticloadbalancing:DescribeTags",
            "elasticloadbalancing:DescribeTargetGroupAttributes",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "elasticmapreduce:DescribeCluster",
            "elasticmapreduce:DescribeSecurityConfiguration",
            "elasticmapreduce:DescribeStep",
            "elasticmapreduce:DescribeStudio",
            "elasticmapreduce:GetBlockPublicAccessConfiguration",
            "elasticmapreduce:GetManagedScalingPolicy",
            "elasticmapreduce:GetStudioSessionMapping",
            "elasticmapreduce:ListClusters",
            "elasticmapreduce:ListInstanceFleets",
            "elasticmapreduce:ListInstanceGroups",
            "elasticmapreduce:ListInstances",
            "elasticmapreduce:ListSecurityConfigurations",
            "elasticmapreduce:ListSteps",
            "elasticmapreduce:ListStudios",
            "elasticmapreduce:ListStudioSessionMappings",
            "emr-containers:DescribeVirtualCluster",
            "emr-containers:ListVirtualClusters",
            "emr-serverless:GetApplication",
            "emr-serverless:ListApplications",
            "es:DescribeDomain",
            "es:DescribeDomains",
            "es:DescribeElasticsearchDomain",
            "es:DescribeElasticsearchDomains",
            "es:GetCompatibleElasticsearchVersions",
            "es:GetCompatibleVersions",
            "es:ListDomainNames",
            "es:ListTags",
            "events:DescribeApiDestination",
            "events:DescribeArchive",
            "events:DescribeConnection",
            "events:DescribeEndpoint",
            "events:DescribeEventBus",
            "events:DescribeRule",
            "events:ListApiDestinations",
            "events:ListArchives",
            "events:ListConnections",
            "events:ListEndpoints",
            "events:ListEventBuses",
            "events:ListRules",
            "events:ListTagsForResource",
            "events:ListTargetsByRule",
            "evidently:GetLaunch",
            "evidently:GetProject",
            "evidently:GetSegment",
            "evidently:ListLaunches",
            "evidently:ListProjects",
            "evidently:ListSegments",
            "evidently:ListTagsForResource",
            "finspace:GetEnvironment",
            "finspace:ListEnvironments",
            "firehose:DescribeDeliveryStream",
            "firehose:ListDeliveryStreams",
            "firehose:ListTagsForDeliveryStream",
            "fis:GetExperimentTemplate",
            "fis:ListExperimentTemplates",
            "fms:GetNotificationChannel",
            "fms:GetPolicy",
            "fms:ListPolicies",
            "fms:ListTagsForResource",
            "forecast:DescribeDataset",
            "forecast:DescribeDatasetGroup",
            "forecast:ListDatasetGroups",
            "forecast:ListDatasets",
            "forecast:ListTagsForResource",
            "frauddetector:GetDetectors",
            "frauddetector:GetDetectorVersion",
            "frauddetector:GetEntityTypes",
            "frauddetector:GetEventTypes",
            "frauddetector:GetExternalModels",
            "frauddetector:GetLabels",
            "frauddetector:GetModels",
            "frauddetector:GetOutcomes",
            "frauddetector:GetRules",
            "frauddetector:GetVariables",
            "frauddetector:ListTagsForResource",
            "fsx:DescribeBackups",
            "fsx:DescribeFileSystems",
            "fsx:DescribeSnapshots",
            "fsx:DescribeStorageVirtualMachines",
            "fsx:DescribeVolumes",
            "fsx:ListTagsForResource",
            "gamelift:DescribeAlias",
            "gamelift:DescribeBuild",
            "gamelift:DescribeFleetAttributes",
            "gamelift:DescribeFleetCapacity",
            "gamelift:DescribeFleetLocationAttributes",
            "gamelift:DescribeFleetLocationCapacity",
            "gamelift:DescribeFleetPortSettings",
            "gamelift:DescribeGameServerGroup",
            "gamelift:DescribeGameSessionQueues",
            "gamelift:DescribeMatchmakingConfigurations",
            "gamelift:DescribeMatchmakingRuleSets",
            "gamelift:DescribeRuntimeConfiguration",
            "gamelift:DescribeScript",
            "gamelift:DescribeVpcPeeringAuthorizations",
            "gamelift:DescribeVpcPeeringConnections",
            "gamelift:ListAliases",
            "gamelift:ListBuilds",
            "gamelift:ListFleets",
            "gamelift:ListGameServerGroups",
            "gamelift:ListScripts",
            "gamelift:ListTagsForResource",
            "geo:DescribeGeofenceCollection",
            "geo:DescribeMap",
            "geo:DescribePlaceIndex",
            "geo:DescribeRouteCalculator",
            "geo:DescribeTracker",
            "geo:ListGeofenceCollections",
            "geo:ListMaps",
            "geo:ListPlaceIndexes",
            "geo:ListRouteCalculators",
            "geo:ListTrackerConsumers",
            "geo:ListTrackers",
            "globalaccelerator:DescribeAccelerator",
            "globalaccelerator:DescribeEndpointGroup",
            "globalaccelerator:DescribeListener",
            "globalaccelerator:ListAccelerators",
            "globalaccelerator:ListEndpointGroups",
            "globalaccelerator:ListListeners",
            "globalaccelerator:ListTagsForResource",
            "glue:BatchGetDevEndpoints",
            "glue:BatchGetJobs",
            "glue:BatchGetWorkflows",
            "glue:GetClassifier",
            "glue:GetClassifiers",
            "glue:GetCrawler",
            "glue:GetCrawlers",
            "glue:GetDevEndpoint",
            "glue:GetDevEndpoints",
            "glue:GetJob",
            "glue:GetJobs",
            "glue:GetMLTransform",
            "glue:GetMLTransforms",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:GetSecurityConfiguration",
            "glue:GetSecurityConfigurations",
            "glue:GetTable",
            "glue:GetTags",
            "glue:GetWorkflow",
            "glue:ListCrawlers",
            "glue:ListDevEndpoints",
            "glue:ListJobs",
            "glue:ListMLTransforms",
            "glue:ListWorkflows",
            "grafana:DescribeWorkspace",
            "grafana:DescribeWorkspaceAuthentication",
            "grafana:DescribeWorkspaceConfiguration",
            "grafana:ListWorkspaces",
            "greengrass:DescribeComponent",
            "greengrass:GetComponent",
            "greengrass:ListComponents",
            "greengrass:ListComponentVersions",
            "groundstation:GetConfig",
            "groundstation:GetDataflowEndpointGroup",
            "groundstation:GetMissionProfile",
            "groundstation:ListConfigs",
            "groundstation:ListDataflowEndpointGroups",
            "groundstation:ListMissionProfiles",
            "groundstation:ListTagsForResource",
            "guardduty:DescribePublishingDestination",
            "guardduty:GetAdministratorAccount",
            "guardduty:GetDetector",
            "guardduty:GetFilter",
            "guardduty:GetFindings",
            "guardduty:GetIPSet",
            "guardduty:GetMasterAccount",
            "guardduty:GetMemberDetectors",
            "guardduty:GetMembers",
            "guardduty:GetThreatIntelSet",
            "guardduty:ListDetectors",
            "guardduty:ListFilters",
            "guardduty:ListFindings",
            "guardduty:ListIPSets",
            "guardduty:ListMembers",
            "guardduty:ListOrganizationAdminAccounts",
            "guardduty:ListPublishingDestinations",
            "guardduty:ListTagsForResource",
            "guardduty:ListThreatIntelSets",
            "healthlake:DescribeFHIRDatastore",
            "healthlake:ListFHIRDatastores",
            "healthlake:ListTagsForResource",
            "iam:GenerateCredentialReport",
            "iam:GetAccountAuthorizationDetails",
            "iam:GetAccountPasswordPolicy",
            "iam:GetAccountSummary",
            "iam:GetCredentialReport",
            "iam:GetGroup",
            "iam:GetGroupPolicy",
            "iam:GetInstanceProfile",
            "iam:GetPolicy",
            "iam:GetPolicyVersion",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:GetSAMLProvider",
            "iam:GetServerCertificate",
            "iam:GetUser",
            "iam:GetUserPolicy",
            "iam:ListAccessKeys",
            "iam:ListAttachedGroupPolicies",
            "iam:ListAttachedRolePolicies",
            "iam:ListAttachedUserPolicies",
            "iam:ListEntitiesForPolicy",
            "iam:ListGroupPolicies",
            "iam:ListGroups",
            "iam:ListGroupsForUser",
            "iam:ListInstanceProfiles",
            "iam:ListInstanceProfilesForRole",
            "iam:ListInstanceProfileTags",
            "iam:ListMFADevices",
            "iam:ListMFADeviceTags",
            "iam:ListPolicyVersions",
            "iam:ListRolePolicies",
            "iam:ListRoles",
            "iam:ListSAMLProviders",
            "iam:ListServerCertificates",
            "iam:ListUserPolicies",
            "iam:ListVirtualMFADevices",
            "imagebuilder:GetComponent",
            "imagebuilder:GetContainerRecipe",
            "imagebuilder:GetDistributionConfiguration",
            "imagebuilder:GetImage",
            "imagebuilder:GetImagePipeline",
            "imagebuilder:GetImageRecipe",
            "imagebuilder:GetInfrastructureConfiguration",
            "imagebuilder:ListComponentBuildVersions",
            "imagebuilder:ListComponents",
            "imagebuilder:ListContainerRecipes",
            "imagebuilder:ListDistributionConfigurations",
            "imagebuilder:ListImageBuildVersions",
            "imagebuilder:ListImagePipelines",
            "imagebuilder:ListImageRecipes",
            "imagebuilder:ListImages",
            "imagebuilder:ListInfrastructureConfigurations",
            "inspector2:BatchGetAccountStatus",
            "inspector2:GetDelegatedAdminAccount",
            "inspector2:ListFilters",
            "inspector2:ListMembers",
            "iot:DescribeAccountAuditConfiguration",
            "iot:DescribeAuthorizer",
            "iot:DescribeCACertificate",
            "iot:DescribeCertificate",
            "iot:DescribeCustomMetric",
            "iot:DescribeDimension",
            "iot:DescribeDomainConfiguration",
            "iot:DescribeFleetMetric",
            "iot:DescribeJobTemplate",
            "iot:DescribeMitigationAction",
            "iot:DescribeProvisioningTemplate",
            "iot:DescribeRoleAlias",
            "iot:DescribeScheduledAudit",
            "iot:DescribeSecurityProfile",
            "iot:GetPolicy",
            "iot:GetTopicRule",
            "iot:GetTopicRuleDestination",
            "iot:ListAuthorizers",
            "iot:ListCACertificates",
            "iot:ListCertificates",
            "iot:ListCustomMetrics",
            "iot:ListDimensions",
            "iot:ListDomainConfigurations",
            "iot:ListFleetMetrics",
            "iot:ListJobTemplates",
            "iot:ListMitigationActions",
            "iot:ListPolicies",
            "iot:ListProvisioningTemplates",
            "iot:ListRoleAliases",
            "iot:ListScheduledAudits",
            "iot:ListSecurityProfiles",
            "iot:ListSecurityProfilesForTarget",
            "iot:ListTagsForResource",
            "iot:ListTargetsForSecurityProfile",
            "iot:ListTopicRuleDestinations",
            "iot:ListTopicRules",
            "iot:ListV2LoggingLevels",
            "iot:ValidateSecurityProfileBehaviors",
            "iotanalytics:DescribeChannel",
            "iotanalytics:DescribeDataset",
            "iotanalytics:DescribeDatastore",
            "iotanalytics:DescribePipeline",
            "iotanalytics:ListChannels",
            "iotanalytics:ListDatasets",
            "iotanalytics:ListDatastores",
            "iotanalytics:ListPipelines",
            "iotanalytics:ListTagsForResource",
            "iotevents:DescribeAlarmModel",
            "iotevents:DescribeDetectorModel",
            "iotevents:DescribeInput",
            "iotevents:ListAlarmModels",
            "iotevents:ListDetectorModels",
            "iotevents:ListInputs",
            "iotevents:ListTagsForResource",
            "iotsitewise:DescribeAccessPolicy",
            "iotsitewise:DescribeAsset",
            "iotsitewise:DescribeAssetModel",
            "iotsitewise:DescribeDashboard",
            "iotsitewise:DescribeGateway",
            "iotsitewise:DescribePortal",
            "iotsitewise:DescribeProject",
            "iotsitewise:ListAccessPolicies",
            "iotsitewise:ListAssetModels",
            "iotsitewise:ListAssets",
            "iotsitewise:ListDashboards",
            "iotsitewise:ListGateways",
            "iotsitewise:ListPortals",
            "iotsitewise:ListProjectAssets",
            "iotsitewise:ListProjects",
            "iotsitewise:ListTagsForResource",
            "iottwinmaker:GetComponentType",
            "iottwinmaker:GetEntity",
            "iottwinmaker:GetScene",
            "iottwinmaker:GetSyncJob",
            "iottwinmaker:GetWorkspace",
            "iottwinmaker:ListComponentTypes",
            "iottwinmaker:ListEntities",
            "iottwinmaker:ListScenes",
            "iottwinmaker:ListSyncJobs",
            "iottwinmaker:ListTagsForResource",
            "iottwinmaker:ListWorkspaces",
            "iotwireless:GetFuotaTask",
            "iotwireless:GetMulticastGroup",
            "iotwireless:GetServiceProfile",
            "iotwireless:GetWirelessDevice",
            "iotwireless:GetWirelessGatewayTaskDefinition",
            "iotwireless:ListFuotaTasks",
            "iotwireless:ListMulticastGroups",
            "iotwireless:ListServiceProfiles",
            "iotwireless:ListTagsForResource",
            "iotwireless:ListWirelessDevices",
            "iotwireless:ListWirelessGatewayTaskDefinitions",
            "ivs:GetChannel",
            "ivs:GetPlaybackKeyPair",
            "ivs:GetRecordingConfiguration",
            "ivs:GetStreamKey",
            "ivs:ListChannels",
            "ivs:ListPlaybackKeyPairs",
            "ivs:ListRecordingConfigurations",
            "ivs:ListStreamKeys",
            "ivs:ListTagsForResource",
            "kafka:DescribeCluster",
            "kafka:DescribeClusterV2",
            "kafka:DescribeConfiguration",
            "kafka:DescribeConfigurationRevision",
            "kafka:ListClusters",
            "kafka:ListClustersV2",
            "kafka:ListConfigurations",
            "kafka:ListScramSecrets",
            "kafka:ListTagsForResource",
            "kafkaconnect:DescribeConnector",
            "kafkaconnect:ListConnectors",
            "kendra:DescribeIndex",
            "kendra:ListIndices",
            "kendra:ListTagsForResource",
            "kinesis:DescribeStreamConsumer",
            "kinesis:DescribeStreamSummary",
            "kinesis:ListStreamConsumers",
            "kinesis:ListStreams",
            "kinesis:ListTagsForStream",
            "kinesisanalytics:DescribeApplication",
            "kinesisanalytics:ListApplications",
            "kinesisanalytics:ListTagsForResource",
            "kinesisvideo:DescribeSignalingChannel",
            "kinesisvideo:DescribeStream",
            "kinesisvideo:ListSignalingChannels",
            "kinesisvideo:ListStreams",
            "kinesisvideo:ListTagsForResource",
            "kinesisvideo:ListTagsForStream",
            "kms:DescribeKey",
            "kms:GetKeyPolicy",
            "kms:GetKeyRotationStatus",
            "kms:ListAliases",
            "kms:ListKeys",
            "kms:ListResourceTags",
            "lakeformation:DescribeResource",
            "lakeformation:GetDataLakeSettings",
            "lakeformation:ListPermissions",
            "lakeformation:ListResources",
            "lambda:GetAlias",
            "lambda:GetCodeSigningConfig",
            "lambda:GetFunction",
            "lambda:GetFunctionCodeSigningConfig",
            "lambda:GetPolicy",
            "lambda:ListAliases",
            "lambda:ListCodeSigningConfigs",
            "lambda:ListFunctions",
            "lambda:ListTags",
            "lambda:ListVersionsByFunction",
            "lex:DescribeBot",
            "lex:DescribeBotAlias",
            "lex:DescribeBotVersion",
            "lex:DescribeResourcePolicy",
            "lex:ListBotAliases",
            "lex:ListBotLocales",
            "lex:ListBots",
            "lex:ListBotVersions",
            "lex:ListTagsForResource",
            "license-manager:GetGrant",
            "license-manager:GetLicense",
            "license-manager:ListDistributedGrants",
            "license-manager:ListLicenses",
            "license-manager:ListReceivedGrants",
            "lightsail:GetAlarms",
            "lightsail:GetBuckets",
            "lightsail:GetCertificates",
            "lightsail:GetContainerServices",
            "lightsail:GetDisk",
            "lightsail:GetDisks",
            "lightsail:GetDistributions",
            "lightsail:GetInstance",
            "lightsail:GetInstances",
            "lightsail:GetKeyPair",
            "lightsail:GetLoadBalancer",
            "lightsail:GetLoadBalancers",
            "lightsail:GetLoadBalancerTlsCertificates",
            "lightsail:GetRelationalDatabase",
            "lightsail:GetRelationalDatabaseParameters",
            "lightsail:GetRelationalDatabases",
            "lightsail:GetStaticIp",
            "lightsail:GetStaticIps",
            "logs:DescribeDestinations",
            "logs:DescribeLogGroups",
            "logs:GetDataProtectionPolicy",
            "logs:GetLogDelivery",
            "logs:ListLogDeliveries",
            "logs:ListTagsLogGroup",
            "lookoutequipment:DescribeInferenceScheduler",
            "lookoutequipment:ListTagsForResource",
            "lookoutmetrics:DescribeAlert",
            "lookoutmetrics:DescribeAnomalyDetector",
            "lookoutmetrics:ListAlerts",
            "lookoutmetrics:ListAnomalyDetectors",
            "lookoutmetrics:ListMetricSets",
            "lookoutmetrics:ListTagsForResource",
            "lookoutvision:DescribeProject",
            "lookoutvision:ListProjects",
            "m2:GetEnvironment",
            "m2:ListEnvironments",
            "m2:ListTagsForResource",
            "macie2:DescribeOrganizationConfiguration",
            "macie2:GetAutomatedDiscoveryConfiguration",
            "macie2:GetClassificationExportConfiguration",
            "macie2:GetCustomDataIdentifier",
            "macie2:GetFindingsPublicationConfiguration",
            "macie2:GetMacieSession",
            "macie2:ListCustomDataIdentifiers",
            "macie2:ListTagsForResource",
            "managedblockchain:GetMember",
            "managedblockchain:GetNetwork",
            "managedblockchain:GetNode",
            "managedblockchain:ListInvitations",
            "managedblockchain:ListMembers",
            "managedblockchain:ListNodes",
            "mediaconnect:DescribeFlow",
            "mediaconnect:ListFlows",
            "mediaconnect:ListTagsForResource",
            "mediapackage-vod:DescribePackagingConfiguration",
            "mediapackage-vod:DescribePackagingGroup",
            "mediapackage-vod:ListPackagingConfigurations",
            "mediapackage-vod:ListPackagingGroups",
            "mediapackage-vod:ListTagsForResource",
            "mediatailor:GetPlaybackConfiguration",
            "mediatailor:ListPlaybackConfigurations",
            "memorydb:DescribeAcls",
            "memorydb:DescribeClusters",
            "memorydb:DescribeParameterGroups",
            "memorydb:DescribeParameters",
            "memorydb:DescribeSubnetGroups",
            "memorydb:DescribeUsers",
            "memorydb:ListTags",
            "mobiletargeting:GetApp",
            "mobiletargeting:GetApplicationSettings",
            "mobiletargeting:GetApps",
            "mobiletargeting:GetCampaign",
            "mobiletargeting:GetCampaigns",
            "mobiletargeting:GetEmailChannel",
            "mobiletargeting:GetEmailTemplate",
            "mobiletargeting:GetEventStream",
            "mobiletargeting:GetInAppTemplate",
            "mobiletargeting:GetSegment",
            "mobiletargeting:GetSegments",
            "mobiletargeting:ListTagsForResource",
            "mobiletargeting:ListTemplates",
            "mq:DescribeBroker",
            "mq:ListBrokers",
            "network-firewall:DescribeLoggingConfiguration",
            "network-firewall:ListFirewalls",
            "networkmanager:DescribeGlobalNetworks",
            "networkmanager:GetConnectPeer",
            "networkmanager:GetCustomerGatewayAssociations",
            "networkmanager:GetDevices",
            "networkmanager:GetLinkAssociations",
            "networkmanager:GetLinks",
            "networkmanager:GetSites",
            "networkmanager:GetTransitGatewayRegistrations",
            "networkmanager:ListConnectPeers",
            "networkmanager:ListTagsForResource",
            "nimble:GetLaunchProfile",
            "nimble:GetLaunchProfileDetails",
            "nimble:GetStreamingImage",
            "nimble:GetStudio",
            "nimble:GetStudioComponent",
            "nimble:ListLaunchProfiles",
            "nimble:ListStreamingImages",
            "nimble:ListStudioComponents",
            "nimble:ListStudios",
            "opsworks:DescribeInstances",
            "opsworks:DescribeLayers",
            "opsworks:DescribeTimeBasedAutoScaling",
            "opsworks:DescribeVolumes",
            "opsworks:ListTags",
            "organizations:DescribeAccount",
            "organizations:DescribeEffectivePolicy",
            "organizations:DescribeOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:DescribePolicy",
            "organizations:DescribeResourcePolicy",
            "organizations:ListAccounts",
            "organizations:ListAccountsForParent",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListParents",
            "organizations:ListPolicies",
            "organizations:ListPoliciesForTarget",
            "organizations:ListRoots",
            "organizations:ListTagsForResource",
            "organizations:ListTargetsForPolicy",
            "panorama:DescribeApplicationInstance",
            "panorama:DescribeApplicationInstanceDetails",
            "panorama:DescribePackage",
            "panorama:DescribePackageVersion",
            "panorama:ListApplicationInstances",
            "panorama:ListNodes",
            "panorama:ListPackages",
            "personalize:DescribeDataset",
            "personalize:DescribeDatasetGroup",
            "personalize:DescribeSchema",
            "personalize:DescribeSolution",
            "personalize:ListDatasetGroups",
            "personalize:ListDatasetImportJobs",
            "personalize:ListDatasets",
            "personalize:ListSchemas",
            "personalize:ListSolutions",
            "personalize:ListTagsForResource",
            "profile:GetDomain",
            "profile:GetIntegration",
            "profile:GetProfileObjectType",
            "profile:ListDomains",
            "profile:ListIntegrations",
            "profile:ListProfileObjectTypes",
            "profile:ListTagsForResource",
            "quicksight:DescribeAccountSubscription",
            "quicksight:DescribeAnalysis",
            "quicksight:DescribeAnalysisPermissions",
            "quicksight:DescribeDashboard",
            "quicksight:DescribeDashboardPermissions",
            "quicksight:DescribeDataSet",
            "quicksight:DescribeDataSetPermissions",
            "quicksight:DescribeDataSetRefreshProperties",
            "quicksight:DescribeDataSource",
            "quicksight:DescribeDataSourcePermissions",
            "quicksight:DescribeTemplate",
            "quicksight:DescribeTemplatePermissions",
            "quicksight:DescribeTheme",
            "quicksight:DescribeThemePermissions",
            "quicksight:ListAnalyses",
            "quicksight:ListDashboards",
            "quicksight:ListDataSets",
            "quicksight:ListDataSources",
            "quicksight:ListTagsForResource",
            "quicksight:ListTemplates",
            "quicksight:ListThemes",
            "ram:GetResourceShareAssociations",
            "ram:GetResourceShares",
            "ram:ListResources",
            "ram:ListResourceSharePermissions",
            "rds:DescribeDBClusterParameterGroups",
            "rds:DescribeDBClusterParameters",
            "rds:DescribeDBClusters",
            "rds:DescribeDBClusterSnapshotAttributes",
            "rds:DescribeDBClusterSnapshots",
            "rds:DescribeDBEngineVersions",
            "rds:DescribeDBInstances",
            "rds:DescribeDBParameterGroups",
            "rds:DescribeDBParameters",
            "rds:DescribeDBProxies",
            "rds:DescribeDBProxyEndpoints",
            "rds:DescribeDBSecurityGroups",
            "rds:DescribeDBSnapshotAttributes",
            "rds:DescribeDBSnapshots",
            "rds:DescribeDBSubnetGroups",
            "rds:DescribeEngineDefaultClusterParameters",
            "rds:DescribeEventSubscriptions",
            "rds:DescribeGlobalClusters",
            "rds:DescribeOptionGroups",
            "rds:ListTagsForResource",
            "redshift:DescribeClusterParameterGroups",
            "redshift:DescribeClusterParameters",
            "redshift:DescribeClusters",
            "redshift:DescribeClusterSecurityGroups",
            "redshift:DescribeClusterSnapshots",
            "redshift:DescribeClusterSubnetGroups",
            "redshift:DescribeEndpointAccess",
            "redshift:DescribeEndpointAuthorization",
            "redshift:DescribeEventSubscriptions",
            "redshift:DescribeLoggingStatus",
            "redshift:DescribeScheduledActions",
            "refactor-spaces:GetEnvironment",
            "refactor-spaces:GetService",
            "refactor-spaces:ListApplications",
            "refactor-spaces:ListEnvironments",
            "refactor-spaces:ListServices",
            "rekognition:DescribeStreamProcessor",
            "rekognition:ListStreamProcessors",
            "rekognition:ListTagsForResource",
            "resiliencehub:DescribeApp",
            "resiliencehub:DescribeAppVersionTemplate",
            "resiliencehub:DescribeResiliencyPolicy",
            "resiliencehub:ListApps",
            "resiliencehub:ListAppVersionResourceMappings",
            "resiliencehub:ListResiliencyPolicies",
            "resiliencehub:ListTagsForResource",
            "resource-explorer-2:GetIndex",
            "resource-explorer-2:ListIndexes",
            "resource-explorer-2:ListTagsForResource",
            "resource-groups:GetGroup",
            "resource-groups:GetGroupConfiguration",
            "resource-groups:GetGroupQuery",
            "resource-groups:GetTags",
            "resource-groups:ListGroupResources",
            "resource-groups:ListGroups",
            "robomaker:DescribeRobotApplication",
            "robomaker:DescribeSimulationApplication",
            "robomaker:ListRobotApplications",
            "robomaker:ListSimulationApplications",
            "route53-recovery-control-config:DescribeCluster",
            "route53-recovery-control-config:DescribeControlPanel",
            "route53-recovery-control-config:DescribeRoutingControl",
            "route53-recovery-control-config:DescribeSafetyRule",
            "route53-recovery-control-config:ListClusters",
            "route53-recovery-control-config:ListControlPanels",
            "route53-recovery-control-config:ListRoutingControls",
            "route53-recovery-control-config:ListSafetyRules",
            "route53-recovery-control-config:ListTagsForResource",
            "route53-recovery-readiness:GetCell",
            "route53-recovery-readiness:GetReadinessCheck",
            "route53-recovery-readiness:GetRecoveryGroup",
            "route53-recovery-readiness:GetResourceSet",
            "route53-recovery-readiness:ListCells",
            "route53-recovery-readiness:ListReadinessChecks",
            "route53-recovery-readiness:ListRecoveryGroups",
            "route53-recovery-readiness:ListResourceSets",
            "route53:GetChange",
            "route53:GetDNSSEC",
            "route53:GetHealthCheck",
            "route53:GetHostedZone",
            "route53:ListCidrBlocks",
            "route53:ListCidrCollections",
            "route53:ListCidrLocations",
            "route53:ListHealthChecks",
            "route53:ListHostedZones",
            "route53:ListHostedZonesByName",
            "route53:ListQueryLoggingConfigs",
            "route53:ListResourceRecordSets",
            "route53:ListTagsForResource",
            "route53resolver:GetFirewallDomainList",
            "route53resolver:GetFirewallRuleGroup",
            "route53resolver:GetFirewallRuleGroupAssociation",
            "route53resolver:GetResolverDnssecConfig",
            "route53resolver:GetResolverEndpoint",
            "route53resolver:GetResolverQueryLogConfig",
            "route53resolver:GetResolverQueryLogConfigAssociation",
            "route53resolver:GetResolverRule",
            "route53resolver:GetResolverRuleAssociation",
            "route53resolver:ListFirewallDomainLists",
            "route53resolver:ListFirewallDomains",
            "route53resolver:ListFirewallRuleGroupAssociations",
            "route53resolver:ListFirewallRuleGroups",
            "route53resolver:ListFirewallRules",
            "route53resolver:ListResolverDnssecConfigs",
            "route53resolver:ListResolverEndpointIpAddresses",
            "route53resolver:ListResolverEndpoints",
            "route53resolver:ListResolverQueryLogConfigAssociations",
            "route53resolver:ListResolverQueryLogConfigs",
            "route53resolver:ListResolverRuleAssociations",
            "route53resolver:ListResolverRules",
            "route53resolver:ListTagsForResource",
            "rum:GetAppMonitor",
            "rum:GetAppMonitorData",
            "rum:ListAppMonitors",
            "rum:ListTagsForResource",
            "s3-outposts:GetAccessPoint",
            "s3-outposts:GetAccessPointPolicy",
            "s3-outposts:GetBucket",
            "s3-outposts:GetBucketPolicy",
            "s3-outposts:GetBucketTagging",
            "s3-outposts:GetLifecycleConfiguration",
            "s3-outposts:ListAccessPoints",
            "s3-outposts:ListEndpoints",
            "s3-outposts:ListRegionalBuckets",
            "s3:GetAccelerateConfiguration",
            "s3:GetAccessPoint",
            "s3:GetAccessPointForObjectLambda",
            "s3:GetAccessPointPolicy",
            "s3:GetAccessPointPolicyForObjectLambda",
            "s3:GetAccessPointPolicyStatus",
            "s3:GetAccessPointPolicyStatusForObjectLambda",
            "s3:GetAccountPublicAccessBlock",
            "s3:GetBucketAcl",
            "s3:GetBucketCORS",
            "s3:GetBucketLocation",
            "s3:GetBucketLogging",
            "s3:GetBucketNotification",
            "s3:GetBucketObjectLockConfiguration",
            "s3:GetBucketPolicy",
            "s3:GetBucketPublicAccessBlock",
            "s3:GetBucketRequestPayment",
            "s3:GetBucketTagging",
            "s3:GetBucketVersioning",
            "s3:GetBucketWebsite",
            "s3:GetEncryptionConfiguration",
            "s3:GetLifecycleConfiguration",
            "s3:GetMultiRegionAccessPoint",
            "s3:GetMultiRegionAccessPointPolicy",
            "s3:GetMultiRegionAccessPointPolicyStatus",
            "s3:GetReplicationConfiguration",
            "s3:GetStorageLensConfiguration",
            "s3:GetStorageLensConfigurationTagging",
            "s3:ListAccessPoints",
            "s3:ListAccessPointsForObjectLambda",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ListMultiRegionAccessPoints",
            "s3:ListStorageLensConfigurations",
            "sagemaker:DescribeAppImageConfig",
            "sagemaker:DescribeCodeRepository",
            "sagemaker:DescribeDataQualityJobDefinition",
            "sagemaker:DescribeDeviceFleet",
            "sagemaker:DescribeDomain",
            "sagemaker:DescribeEndpoint",
            "sagemaker:DescribeEndpointConfig",
            "sagemaker:DescribeFeatureGroup",
            "sagemaker:DescribeImage",
            "sagemaker:DescribeImageVersion",
            "sagemaker:DescribeModel",
            "sagemaker:DescribeModelBiasJobDefinition",
            "sagemaker:DescribeModelExplainabilityJobDefinition",
            "sagemaker:DescribeModelQualityJobDefinition",
            "sagemaker:DescribeMonitoringSchedule",
            "sagemaker:DescribeNotebookInstance",
            "sagemaker:DescribeNotebookInstanceLifecycleConfig",
            "sagemaker:DescribePipeline",
            "sagemaker:DescribeProject",
            "sagemaker:DescribeWorkteam",
            "sagemaker:ListAppImageConfigs",
            "sagemaker:ListCodeRepositories",
            "sagemaker:ListDataQualityJobDefinitions",
            "sagemaker:ListDeviceFleets",
            "sagemaker:ListDomains",
            "sagemaker:ListEndpointConfigs",
            "sagemaker:ListEndpoints",
            "sagemaker:ListFeatureGroups",
            "sagemaker:ListImages",
            "sagemaker:ListImageVersions",
            "sagemaker:ListModelBiasJobDefinitions",
            "sagemaker:ListModelExplainabilityJobDefinitions",
            "sagemaker:ListModelQualityJobDefinitions",
            "sagemaker:ListModels",
            "sagemaker:ListMonitoringSchedules",
            "sagemaker:ListNotebookInstanceLifecycleConfigs",
            "sagemaker:ListNotebookInstances",
            "sagemaker:ListPipelines",
            "sagemaker:ListProjects",
            "sagemaker:ListTags",
            "sagemaker:ListWorkteams",
            "schemas:DescribeDiscoverer",
            "schemas:DescribeRegistry",
            "schemas:DescribeSchema",
            "schemas:GetResourcePolicy",
            "schemas:ListDiscoverers",
            "schemas:ListRegistries",
            "schemas:ListSchemas",
            "sdb:GetAttributes",
            "sdb:ListDomains",
            "secretsmanager:ListSecrets",
            "secretsmanager:ListSecretVersionIds",
            "securityhub:DescribeHub",
            "serviceCatalog:DescribePortfolioShares",
            "servicediscovery:GetInstance",
            "servicediscovery:GetNamespace",
            "servicediscovery:GetService",
            "servicediscovery:ListInstances",
            "servicediscovery:ListNamespaces",
            "servicediscovery:ListServices",
            "servicediscovery:ListTagsForResource",
            "ses:DescribeReceiptRule",
            "ses:DescribeReceiptRuleSet",
            "ses:GetConfigurationSet",
            "ses:GetConfigurationSetEventDestinations",
            "ses:GetContactList",
            "ses:GetEmailTemplate",
            "ses:GetTemplate",
            "ses:ListConfigurationSets",
            "ses:ListContactLists",
            "ses:ListEmailTemplates",
            "ses:ListReceiptFilters",
            "ses:ListReceiptRuleSets",
            "ses:ListTemplates",
            "shield:DescribeDRTAccess",
            "shield:DescribeProtection",
            "shield:DescribeSubscription",
            "signer:GetSigningProfile",
            "signer:ListProfilePermissions",
            "signer:ListSigningProfiles",
            "sns:GetDataProtectionPolicy",
            "sns:GetSubscriptionAttributes",
            "sns:GetTopicAttributes",
            "sns:ListSubscriptions",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTagsForResource",
            "sns:ListTopics",
            "sqs:GetQueueAttributes",
            "sqs:ListQueues",
            "sqs:ListQueueTags",
            "ssm:DescribeAutomationExecutions",
            "ssm:DescribeDocument",
            "ssm:DescribeDocumentPermission",
            "ssm:DescribeParameters",
            "ssm:GetAutomationExecution",
            "ssm:GetDocument",
            "ssm:ListDocuments",
            "ssm:ListTagsForResource",
            "sso:DescribeInstanceAccessControlAttributeConfiguration",
            "sso:DescribePermissionSet",
            "sso:GetInlinePolicyForPermissionSet",
            "sso:ListManagedPoliciesInPermissionSet",
            "sso:ListPermissionSets",
            "sso:ListTagsForResource",
            "states:DescribeActivity",
            "states:DescribeStateMachine",
            "states:ListActivities",
            "states:ListStateMachines",
            "states:ListTagsForResource",
            "storagegateway:ListGateways",
            "storagegateway:ListTagsForResource",
            "storagegateway:ListVolumes",
            "sts:GetCallerIdentity",
            "support:DescribeCases",
            "synthetics:DescribeCanaries",
            "synthetics:DescribeCanariesLastRun",
            "synthetics:DescribeRuntimeVersions",
            "synthetics:GetCanary",
            "synthetics:GetCanaryRuns",
            "synthetics:GetGroup",
            "synthetics:ListAssociatedGroups",
            "synthetics:ListGroupResources",
            "synthetics:ListGroups",
            "synthetics:ListTagsForResource",
            "tag:GetResources",
            "timestream:DescribeDatabase",
            "timestream:DescribeEndpoints",
            "timestream:DescribeTable",
            "timestream:ListDatabases",
            "timestream:ListTables",
            "timestream:ListTagsForResource",
            "transfer:DescribeAgreement",
            "transfer:DescribeCertificate",
            "transfer:DescribeConnector",
            "transfer:DescribeProfile",
            "transfer:DescribeServer",
            "transfer:DescribeUser",
            "transfer:DescribeWorkflow",
            "transfer:ListAgreements",
            "transfer:ListCertificates",
            "transfer:ListConnectors",
            "transfer:ListProfiles",
            "transfer:ListServers",
            "transfer:ListTagsForResource",
            "transfer:ListUsers",
            "transfer:ListWorkflows",
            "voiceid:DescribeDomain",
            "voiceid:ListTagsForResource",
            "waf-regional:GetLoggingConfiguration",
            "waf-regional:GetWebACL",
            "waf-regional:GetWebACLForResource",
            "waf-regional:ListLoggingConfigurations",
            "waf:GetLoggingConfiguration",
            "waf:GetWebACL",
            "wafv2:GetLoggingConfiguration",
            "wafv2:GetRuleGroup",
            "wafv2:ListRuleGroups",
            "wafv2:ListTagsForResource",
            "workspaces:DescribeConnectionAliases",
            "workspaces:DescribeTags",
            "workspaces:DescribeWorkspaces"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AWSConfigSLRLogStatementID",
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:CreateLogGroup"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/config/*"
        },
        {
          "Sid": "AWSConfigSLRLogEventStatementID",
          "Effect": "Allow",
          "Action": "logs:PutLogEvents",
          "Resource": "arn:aws:logs:*:*:log-group:/aws/config/*:log-stream:config-rule-evaluation/*"
        },
        {
          "Sid": "AWSConfigSLRApiGatewayStatementID",
          "Effect": "Allow",
          "Action": [
            "apigateway:GET"
          ],
          "Resource": [
            "arn:aws:apigateway:*::/apis",
            "arn:aws:apigateway:*::/apis/*",
            "arn:aws:apigateway:*::/apis/*/integrations",
            "arn:aws:apigateway:*::/apis/*/integrations/*",
            "arn:aws:apigateway:*::/domainnames",
            "arn:aws:apigateway:*::/clientcertificates",
            "arn:aws:apigateway:*::/clientcertificates/*",
            "arn:aws:apigateway:*::/restapis",
            "arn:aws:apigateway:*::/restapis/*/resources/*/methods/*",
            "arn:aws:apigateway:*::/restapis/*",
            "arn:aws:apigateway:*::/restapis/*/stages/*",
            "arn:aws:apigateway:*::/restapis/*/stages",
            "arn:aws:apigateway:*::/restapis/*/resources",
            "arn:aws:apigateway:*::/restapis/*/resources/*/methods/*/integration",
            "arn:aws:apigateway:*::/restapis/*/resources/*",
            "arn:aws:apigateway:*::/apis/*/routes/*",
            "arn:aws:apigateway:*::/apis/*/routes",
            "arn:aws:apigateway:*::/v2/apis/*/routes",
            "arn:aws:apigateway:*::/v2/apis/*/routes/*",
            "arn:aws:apigateway:*::/v2/apis",
            "arn:aws:apigateway:*::/v2/apis/*",
            "arn:aws:apigateway:*::/v2/apis/*/integrations",
            "arn:aws:apigateway:*::/v2/apis/*/integrations/*"
          ]
        }
      ]
    },
    "VersionId": "v48",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-16T22:58:04+00:00"
  },
  "AWSConfigUserAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "config:Get*",
            "config:Describe*",
            "config:Deliver*",
            "config:List*",
            "config:Select*",
            "tag:GetResources",
            "tag:GetTagKeys",
            "cloudtrail:DescribeTrails",
            "cloudtrail:GetTrailStatus",
            "cloudtrail:LookupEvents"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2019-03-18T20:27:47+00:00"
  },
  "AWSConnector": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "iam:GetUser",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListAllMyBuckets"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:DeleteObject",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:PutObject",
            "s3:PutObjectAcl",
            "s3:AbortMultipartUpload",
            "s3:ListBucketMultipartUploads",
            "s3:ListMultipartUploadParts"
          ],
          "Resource": "arn:aws:s3:::import-to-ec2-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CancelConversionTask",
            "ec2:CancelExportTask",
            "ec2:CreateImage",
            "ec2:CreateInstanceExportTask",
            "ec2:CreateTags",
            "ec2:CreateVolume",
            "ec2:DeleteTags",
            "ec2:DeleteVolume",
            "ec2:DescribeConversionTasks",
            "ec2:DescribeExportTasks",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstances",
            "ec2:DescribeRegions",
            "ec2:DescribeTags",
            "ec2:DetachVolume",
            "ec2:ImportInstance",
            "ec2:ImportVolume",
            "ec2:ModifyInstanceAttribute",
            "ec2:RunInstances",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances",
            "ec2:ImportImage",
            "ec2:DescribeImportImageTasks",
            "ec2:DeregisterImage",
            "ec2:DescribeSnapshots",
            "ec2:DeleteSnapshot",
            "ec2:CancelImportTask",
            "ec2:ImportSnapshot",
            "ec2:DescribeImportSnapshotTasks"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "SNS:Publish"
          ],
          "Resource": "arn:aws:sns:*:*:metrics-sns-topic-for-*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2015-09-28T19:50:38+00:00"
  },
  "AWSControlTowerAccountServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AllowPutRuleOnSpecificSourcesAndDetailTypes",
          "Effect": "Allow",
          "Action": "events:PutRule",
          "Resource": "arn:aws:events:*:*:rule/*ControlTower*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "events:source": "aws.securityhub"
            },
            "Null": {
              "events:detail-type": "false"
            },
            "StringEquals": {
              "events:ManagedBy": "controltower.amazonaws.com",
              "events:detail-type": "Security Hub Findings - Imported"
            }
          }
        },
        {
          "Sid": "AllowOtherOperationsOnRulesManagedByControlTower",
          "Effect": "Allow",
          "Action": [
            "events:DeleteRule",
            "events:EnableRule",
            "events:DisableRule",
            "events:PutTargets",
            "events:RemoveTargets"
          ],
          "Resource": "arn:aws:events:*:*:rule/*ControlTower*",
          "Condition": {
            "StringEquals": {
              "events:ManagedBy": "controltower.amazonaws.com"
            }
          }
        },
        {
          "Sid": "AllowDescribeOperationsOnRulesManagedByControlTower",
          "Effect": "Allow",
          "Action": [
            "events:DescribeRule",
            "events:ListTargetsByRule"
          ],
          "Resource": "arn:aws:events:*:*:rule/*ControlTower*"
        },
        {
          "Sid": "AllowControlTowerToPublishSecurityNotifications",
          "Effect": "Allow",
          "Action": "sns:publish",
          "Resource": "arn:aws:sns:*:*:aws-controltower-AggregateSecurityNotifications",
          "Condition": {
            "StringEquals": {
              "aws:PrincipalAccount": "${aws:ResourceAccount}"
            }
          }
        },
        {
          "Sid": "AllowActionsForSecurityHubIntegration",
          "Effect": "Allow",
          "Action": [
            "securityhub:DescribeStandardsControls",
            "securityhub:GetEnabledStandards"
          ],
          "Resource": "arn:aws:securityhub:*:*:hub/default"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-06-05T22:04:50+00:00"
  },
  "AWSControlTowerServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:CreateStack",
            "cloudformation:CreateStackInstances",
            "cloudformation:CreateStackSet",
            "cloudformation:DeleteStack",
            "cloudformation:DeleteStackInstances",
            "cloudformation:DeleteStackSet",
            "cloudformation:DescribeStackInstance",
            "cloudformation:DescribeStacks",
            "cloudformation:DescribeStackSet",
            "cloudformation:DescribeStackSetOperation",
            "cloudformation:ListStackInstances",
            "cloudformation:UpdateStack",
            "cloudformation:UpdateStackInstances",
            "cloudformation:UpdateStackSet"
          ],
          "Resource": [
            "arn:aws:cloudformation:*:*:type/resource/AWS-IAM-Role"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:CreateStack",
            "cloudformation:CreateStackInstances",
            "cloudformation:CreateStackSet",
            "cloudformation:DeleteStack",
            "cloudformation:DeleteStackInstances",
            "cloudformation:DeleteStackSet",
            "cloudformation:DescribeStackInstance",
            "cloudformation:DescribeStacks",
            "cloudformation:DescribeStackSet",
            "cloudformation:DescribeStackSetOperation",
            "cloudformation:GetTemplate",
            "cloudformation:ListStackInstances",
            "cloudformation:UpdateStack",
            "cloudformation:UpdateStackInstances",
            "cloudformation:UpdateStackSet"
          ],
          "Resource": [
            "arn:aws:cloudformation:*:*:stack/AWSControlTower*/*",
            "arn:aws:cloudformation:*:*:stack/StackSet-AWSControlTower*/*",
            "arn:aws:cloudformation:*:*:stackset/AWSControlTower*:*",
            "arn:aws:cloudformation:*:*:stackset-target/AWSControlTower*/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudtrail:CreateTrail",
            "cloudtrail:DeleteTrail",
            "cloudtrail:GetTrailStatus",
            "cloudtrail:StartLogging",
            "cloudtrail:StopLogging",
            "cloudtrail:UpdateTrail",
            "cloudtrail:PutEventSelectors",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "logs:PutRetentionPolicy"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:aws-controltower/CloudTrailLogs:*",
            "arn:aws:cloudtrail:*:*:trail/aws-controltower*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": [
            "arn:aws:s3:::aws-controltower*/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "sts:AssumeRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/AWSControlTowerExecution",
            "arn:aws:iam::*:role/AWSControlTowerBlueprintAccess"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudtrail:DescribeTrails",
            "ec2:DescribeAvailabilityZones",
            "iam:ListRoles",
            "logs:CreateLogGroup",
            "logs:DescribeLogGroups",
            "organizations:CreateAccount",
            "organizations:DescribeAccount",
            "organizations:DescribeCreateAccountStatus",
            "organizations:DescribeOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:DescribePolicy",
            "organizations:ListAccounts",
            "organizations:ListAccountsForParent",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListChildren",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListParents",
            "organizations:ListPoliciesForTarget",
            "organizations:ListTargetsForPolicy",
            "organizations:ListRoots",
            "organizations:MoveAccount",
            "servicecatalog:AssociatePrincipalWithPortfolio"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:GetRole",
            "iam:GetUser",
            "iam:ListAttachedRolePolicies",
            "iam:GetRolePolicy"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/service-role/AWSControlTowerStackSetRole",
            "arn:aws:iam::*:role/service-role/AWSControlTowerCloudTrailRole",
            "arn:aws:iam::*:role/service-role/AWSControlTowerConfigAggregatorRoleForOrganizations"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "config:DeleteConfigurationAggregator",
            "config:PutConfigurationAggregator",
            "config:TagResource"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/aws-control-tower": "managed-by-control-tower"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "organizations:EnableAWSServiceAccess",
            "organizations:DisableAWSServiceAccess"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "organizations:ServicePrincipal": [
                "config.amazonaws.com",
                "cloudtrail.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "cloudtrail.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "account:EnableRegion",
            "account:ListRegions",
            "account:GetRegionOptStatus"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v10",
    "IsDefaultVersion": true,
    "CreateDate": "2023-04-12T19:15:51+00:00"
  },
  "AWSCostAndUsageReportAutomationPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "organizations:DescribeOrganization"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetBucketTagging",
            "s3:PutBucketTagging",
            "s3:GetBucketPolicy",
            "s3:PutBucketPolicy",
            "s3:ListBucket",
            "s3:CreateBucket"
          ],
          "Resource": "arn:aws:s3:::aws-map-cur-bucket-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cur:PutReportDefinition",
            "cur:DeleteReportDefinition",
            "cur:DescribeReportDefinitions"
          ],
          "Resource": "arn:aws:cur:*:*:definition/map-migrated-report"
        },
        {
          "Effect": "Allow",
          "Action": "cur:DescribeReportDefinitions",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-11-01T21:27:29+00:00"
  },
  "AWSDMSFleetAdvisorServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": {
        "Effect": "Allow",
        "Action": "cloudwatch:PutMetricData",
        "Resource": "*",
        "Condition": {
          "StringEquals": {
            "cloudwatch:namespace": "AWS/DMS/FleetAdvisor"
          }
        }
      }
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-06T09:10:42+00:00"
  },
  "AWSDMSServerlessServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "id0",
          "Effect": "Allow",
          "Action": [
            "dms:CreateReplicationInstance",
            "dms:CreateReplicationTask"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "dms:req-tag/ResourceCreatedBy": "DMSServerless"
            }
          }
        },
        {
          "Sid": "id1",
          "Effect": "Allow",
          "Action": [
            "dms:DescribeReplicationInstances",
            "dms:DescribeReplicationTasks"
          ],
          "Resource": "*"
        },
        {
          "Sid": "id2",
          "Effect": "Allow",
          "Action": [
            "dms:StartReplicationTask",
            "dms:StopReplicationTask",
            "dms:DeleteReplicationTask",
            "dms:DeleteReplicationInstance"
          ],
          "Resource": [
            "arn:aws:dms:*:*:rep:*",
            "arn:aws:dms:*:*:task:*"
          ],
          "Condition": {
            "StringEqualsIgnoreCase": {
              "aws:ResourceTag/ResourceCreatedBy": "DMSServerless"
            }
          }
        },
        {
          "Sid": "id3",
          "Effect": "Allow",
          "Action": [
            "dms:TestConnection",
            "dms:DeleteConnection"
          ],
          "Resource": [
            "arn:aws:dms:*:*:rep:*",
            "arn:aws:dms:*:*:endpoint:*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-05-18T20:28:05+00:00"
  },
  "AWSDataExchangeFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "dataexchange:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "s3:GetObject",
          "Resource": "arn:aws:s3:::*aws-data-exchange*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "dataexchange.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "s3:GetObject",
          "Resource": "*",
          "Condition": {
            "StringEqualsIgnoreCase": {
              "s3:ExistingObjectTag/AWSDataExchange": "true"
            },
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "dataexchange.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:PutObject",
            "s3:PutObjectAcl"
          ],
          "Resource": "arn:aws:s3:::*aws-data-exchange*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "dataexchange.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetBucketLocation",
            "s3:ListBucket",
            "s3:ListAllMyBuckets"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "aws-marketplace:DescribeEntity",
            "aws-marketplace:ListEntities",
            "aws-marketplace:StartChangeSet",
            "aws-marketplace:ListChangeSets",
            "aws-marketplace:DescribeChangeSet",
            "aws-marketplace:CancelChangeSet",
            "aws-marketplace:GetAgreementApprovalRequest",
            "aws-marketplace:ListAgreementApprovalRequests",
            "aws-marketplace:AcceptAgreementApprovalRequest",
            "aws-marketplace:RejectAgreementApprovalRequest",
            "aws-marketplace:UpdateAgreementApprovalRequest",
            "aws-marketplace:SearchAgreements",
            "aws-marketplace:GetAgreementTerms"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "aws-marketplace:Subscribe",
            "aws-marketplace:Unsubscribe",
            "aws-marketplace:ViewSubscriptions",
            "aws-marketplace:GetAgreementRequest",
            "aws-marketplace:ListAgreementRequests",
            "aws-marketplace:CancelAgreementRequest"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:DescribeKey",
            "kms:ListAliases",
            "kms:ListKeys"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "redshift:AuthorizeDataShare"
          ],
          "Resource": "*",
          "Condition": {
            "StringEqualsIgnoreCase": {
              "redshift:ConsumerIdentifier": "ADX"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "redshift:DescribeDataSharesForProducer",
            "redshift:DescribeDataShares"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "apigateway:GET"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v6",
    "IsDefaultVersion": true,
    "CreateDate": "2021-12-02T16:14:27+00:00"
  },
  "AWSDataExchangeProviderFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "dataexchange:CreateDataSet",
            "dataexchange:CreateRevision",
            "dataexchange:CreateAsset",
            "dataexchange:Get*",
            "dataexchange:Update*",
            "dataexchange:List*",
            "dataexchange:Delete*",
            "dataexchange:TagResource",
            "dataexchange:UntagResource",
            "dataexchange:PublishDataSet",
            "dataexchange:SendApiAsset",
            "dataexchange:RevokeRevision",
            "tag:GetTagKeys",
            "tag:GetTagValues"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "dataexchange:CreateJob",
            "dataexchange:StartJob",
            "dataexchange:CancelJob"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "dataexchange:JobType": [
                "IMPORT_ASSETS_FROM_S3",
                "IMPORT_ASSET_FROM_SIGNED_URL",
                "EXPORT_ASSETS_TO_S3",
                "EXPORT_ASSET_TO_SIGNED_URL",
                "IMPORT_ASSET_FROM_API_GATEWAY_API",
                "IMPORT_ASSETS_FROM_REDSHIFT_DATA_SHARES"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "s3:GetObject",
          "Resource": "arn:aws:s3:::*aws-data-exchange*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "dataexchange.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "s3:GetObject",
          "Resource": "*",
          "Condition": {
            "StringEqualsIgnoreCase": {
              "s3:ExistingObjectTag/AWSDataExchange": "true"
            },
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "dataexchange.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:PutObject",
            "s3:PutObjectAcl"
          ],
          "Resource": "arn:aws:s3:::*aws-data-exchange*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "dataexchange.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetBucketLocation",
            "s3:ListBucket",
            "s3:ListAllMyBuckets"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "aws-marketplace:DescribeEntity",
            "aws-marketplace:ListEntities",
            "aws-marketplace:DescribeChangeSet",
            "aws-marketplace:ListChangeSets",
            "aws-marketplace:StartChangeSet",
            "aws-marketplace:CancelChangeSet",
            "aws-marketplace:GetAgreementApprovalRequest",
            "aws-marketplace:ListAgreementApprovalRequests",
            "aws-marketplace:AcceptAgreementApprovalRequest",
            "aws-marketplace:RejectAgreementApprovalRequest",
            "aws-marketplace:UpdateAgreementApprovalRequest",
            "aws-marketplace:SearchAgreements",
            "aws-marketplace:GetAgreementTerms"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:DescribeKey",
            "kms:ListAliases",
            "kms:ListKeys"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "redshift:AuthorizeDataShare"
          ],
          "Resource": "*",
          "Condition": {
            "StringEqualsIgnoreCase": {
              "redshift:ConsumerIdentifier": "ADX"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "redshift:DescribeDataSharesForProducer",
            "redshift:DescribeDataShares"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "apigateway:GET"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v11",
    "IsDefaultVersion": true,
    "CreateDate": "2022-03-15T16:16:20+00:00"
  },
  "AWSDataExchangeReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "dataexchange:Get*",
            "dataexchange:List*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "aws-marketplace:ViewSubscriptions",
            "aws-marketplace:GetAgreementRequest",
            "aws-marketplace:ListAgreementRequests",
            "aws-marketplace:GetAgreementApprovalRequest",
            "aws-marketplace:ListAgreementApprovalRequests",
            "aws-marketplace:DescribeEntity",
            "aws-marketplace:ListEntities",
            "aws-marketplace:DescribeChangeSet",
            "aws-marketplace:ListChangeSets",
            "aws-marketplace:SearchAgreements",
            "aws-marketplace:GetAgreementTerms"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2021-05-10T21:15:26+00:00"
  },
  "AWSDataExchangeSubscriberFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "dataexchange:Get*",
            "dataexchange:List*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "dataexchange:CreateJob",
            "dataexchange:StartJob",
            "dataexchange:CancelJob"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "dataexchange:JobType": [
                "EXPORT_ASSETS_TO_S3",
                "EXPORT_ASSET_TO_SIGNED_URL",
                "EXPORT_REVISIONS_TO_S3"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "dataexchange:CreateEventAction",
            "dataexchange:UpdateEventAction",
            "dataexchange:DeleteEventAction",
            "dataexchange:SendApiAsset"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "s3:GetObject",
          "Resource": "arn:aws:s3:::*aws-data-exchange*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "dataexchange.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetBucketLocation",
            "s3:ListBucket",
            "s3:ListAllMyBuckets"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "aws-marketplace:Subscribe",
            "aws-marketplace:Unsubscribe",
            "aws-marketplace:ViewSubscriptions",
            "aws-marketplace:GetAgreementRequest",
            "aws-marketplace:ListAgreementRequests",
            "aws-marketplace:CancelAgreementRequest"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:DescribeKey",
            "kms:ListAliases",
            "kms:ListKeys"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v6",
    "IsDefaultVersion": true,
    "CreateDate": "2021-11-29T23:00:06+00:00"
  },
  "AWSDataLifecycleManagerSSMFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AllowSSMReadOnlyAccess",
          "Effect": "Allow",
          "Action": [
            "ssm:GetCommandInvocation",
            "ssm:ListCommands",
            "ssm:DescribeInstanceInformation"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AllowTaggedSSMDocumentsOnly",
          "Effect": "Allow",
          "Action": [
            "ssm:SendCommand",
            "ssm:DescribeDocument",
            "ssm:GetDocument"
          ],
          "Resource": [
            "arn:aws:ssm:*:*:document/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/DLMScriptsAccess": "true"
            }
          }
        },
        {
          "Sid": "AllowSpecificAWSOwnedSSMDocuments",
          "Effect": "Allow",
          "Action": [
            "ssm:SendCommand",
            "ssm:DescribeDocument",
            "ssm:GetDocument"
          ],
          "Resource": [
            "arn:aws:ssm:*:*:document/AWSEC2-CreateVssSnapshot",
            "arn:aws:ssm:*:*:document/AWSSystemsManagerSAP-CreateDLMSnapshotForSAPHANA"
          ]
        },
        {
          "Sid": "AllowAllEC2Instances",
          "Effect": "Allow",
          "Action": [
            "ssm:SendCommand"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*"
          ]
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-16T22:31:54+00:00"
  },
  "AWSDataLifecycleManagerServiceRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSnapshot",
            "ec2:CreateSnapshots",
            "ec2:DeleteSnapshot",
            "ec2:DescribeInstances",
            "ec2:DescribeVolumes",
            "ec2:DescribeSnapshots",
            "ec2:EnableFastSnapshotRestores",
            "ec2:DescribeFastSnapshotRestores",
            "ec2:DisableFastSnapshotRestores",
            "ec2:CopySnapshot",
            "ec2:ModifySnapshotAttribute",
            "ec2:DescribeSnapshotAttribute",
            "ec2:DescribeSnapshotTierStatus",
            "ec2:ModifySnapshotTier"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": "arn:aws:ec2:*::snapshot/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "events:PutRule",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:EnableRule",
            "events:DisableRule",
            "events:ListTargetsByRule",
            "events:PutTargets",
            "events:RemoveTargets"
          ],
          "Resource": "arn:aws:events:*:*:rule/AwsDataLifecycleRule.managed-cwe.*"
        }
      ]
    },
    "VersionId": "v7",
    "IsDefaultVersion": true,
    "CreateDate": "2022-09-19T17:34:08+00:00"
  },
  "AWSDataLifecycleManagerServiceRoleForAMIManagement": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": [
            "arn:aws:ec2:*::snapshot/*",
            "arn:aws:ec2:*::image/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeImages",
            "ec2:DescribeInstances",
            "ec2:DescribeImageAttribute",
            "ec2:DescribeVolumes",
            "ec2:DescribeSnapshots"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "ec2:DeleteSnapshot",
          "Resource": "arn:aws:ec2:*::snapshot/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:ResetImageAttribute",
            "ec2:DeregisterImage",
            "ec2:CreateImage",
            "ec2:CopyImage",
            "ec2:ModifyImageAttribute"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:EnableImageDeprecation",
            "ec2:DisableImageDeprecation"
          ],
          "Resource": "arn:aws:ec2:*::image/*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2021-08-19T17:03:44+00:00"
  },
  "AWSDataPipelineRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:*",
            "datapipeline:DescribeObjects",
            "datapipeline:EvaluateExpression",
            "dynamodb:BatchGetItem",
            "dynamodb:DescribeTable",
            "dynamodb:GetItem",
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:UpdateTable",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CancelSpotInstanceRequests",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:DeleteTags",
            "ec2:Describe*",
            "ec2:ModifyImageAttribute",
            "ec2:ModifyInstanceAttribute",
            "ec2:RequestSpotInstances",
            "ec2:RunInstances",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:DeleteSecurityGroup",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:DescribeNetworkInterfaces",
            "ec2:CreateNetworkInterface",
            "ec2:DeleteNetworkInterface",
            "ec2:DetachNetworkInterface",
            "elasticmapreduce:*",
            "iam:GetInstanceProfile",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:ListAttachedRolePolicies",
            "iam:ListRolePolicies",
            "iam:ListInstanceProfiles",
            "iam:PassRole",
            "rds:DescribeDBInstances",
            "rds:DescribeDBSecurityGroups",
            "redshift:DescribeClusters",
            "redshift:DescribeClusterSecurityGroups",
            "s3:CreateBucket",
            "s3:DeleteObject",
            "s3:Get*",
            "s3:List*",
            "s3:Put*",
            "sdb:BatchPutAttributes",
            "sdb:Select*",
            "sns:GetTopicAttributes",
            "sns:ListTopics",
            "sns:Publish",
            "sns:Subscribe",
            "sns:Unsubscribe",
            "sqs:CreateQueue",
            "sqs:Delete*",
            "sqs:GetQueue*",
            "sqs:PurgeQueue",
            "sqs:ReceiveMessage"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": [
                "elasticmapreduce.amazonaws.com",
                "spot.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v6",
    "IsDefaultVersion": true,
    "CreateDate": "2017-12-22T23:43:28+00:00"
  },
  "AWSDataPipeline_FullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "s3:List*",
            "dynamodb:DescribeTable",
            "rds:DescribeDBInstances",
            "rds:DescribeDBSecurityGroups",
            "redshift:DescribeClusters",
            "redshift:DescribeClusterSecurityGroups",
            "sns:ListTopics",
            "sns:Subscribe",
            "iam:ListRoles",
            "iam:GetRolePolicy",
            "iam:GetInstanceProfile",
            "iam:ListInstanceProfiles",
            "datapipeline:*"
          ],
          "Effect": "Allow",
          "Resource": [
            "*"
          ]
        },
        {
          "Action": "iam:PassRole",
          "Effect": "Allow",
          "Resource": [
            "arn:aws:iam::*:role/DataPipelineDefaultResourceRole",
            "arn:aws:iam::*:role/DataPipelineDefaultRole"
          ]
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2017-08-17T18:48:39+00:00"
  },
  "AWSDataPipeline_PowerUser": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "s3:List*",
            "dynamodb:DescribeTable",
            "rds:DescribeDBInstances",
            "rds:DescribeDBSecurityGroups",
            "redshift:DescribeClusters",
            "redshift:DescribeClusterSecurityGroups",
            "sns:ListTopics",
            "iam:ListRoles",
            "iam:GetRolePolicy",
            "iam:GetInstanceProfile",
            "iam:ListInstanceProfiles",
            "datapipeline:*"
          ],
          "Effect": "Allow",
          "Resource": [
            "*"
          ]
        },
        {
          "Action": "iam:PassRole",
          "Effect": "Allow",
          "Resource": [
            "arn:aws:iam::*:role/DataPipelineDefaultResourceRole",
            "arn:aws:iam::*:role/DataPipelineDefaultRole"
          ]
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2017-08-17T18:49:42+00:00"
  },
  "AWSDataSyncDiscoveryServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:GetSecretValue"
          ],
          "Resource": [
            "arn:*:secretsmanager:*:*:secret:datasync!*"
          ],
          "Condition": {
            "StringEquals": {
              "secretsmanager:ResourceTag/aws:secretsmanager:owningService": "datasync",
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream"
          ],
          "Resource": [
            "arn:*:logs:*:*:log-group:/aws/datasync*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:PutLogEvents"
          ],
          "Resource": [
            "arn:*:logs:*:*:log-group:/aws/datasync:log-stream:*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-20T22:19:51+00:00"
  },
  "AWSDataSyncFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "datasync:*",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcEndpoints",
            "ec2:ModifyNetworkInterfaceAttribute",
            "fsx:DescribeFileSystems",
            "fsx:DescribeStorageVirtualMachines",
            "elasticfilesystem:DescribeAccessPoints",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DescribeMountTargets",
            "iam:GetRole",
            "iam:ListRoles",
            "logs:CreateLogGroup",
            "logs:DescribeLogGroups",
            "logs:DescribeResourcePolicies",
            "outposts:ListOutposts",
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3-outposts:ListAccessPoints",
            "s3-outposts:ListRegionalBuckets"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "datasync.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2023-05-02T16:37:43+00:00"
  },
  "AWSDataSyncReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "datasync:Describe*",
            "datasync:List*",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DescribeMountTargets",
            "fsx:DescribeFileSystems",
            "iam:GetRole",
            "iam:ListRoles",
            "logs:DescribeLogGroups",
            "logs:DescribeResourcePolicies",
            "s3:ListAllMyBuckets",
            "s3:ListBucket"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2020-06-30T17:59:22+00:00"
  },
  "AWSDeepLensLambdaFunctionAccessPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "DeepLensS3ObjectAccess",
          "Effect": "Allow",
          "Action": [
            "s3:ListBucket",
            "s3:GetObject"
          ],
          "Resource": [
            "arn:aws:s3:::deeplens*/*",
            "arn:aws:s3:::deeplens*"
          ]
        },
        {
          "Sid": "DeepLensGreenGrassCloudWatchAccess",
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "logs:CreateLogGroup"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/greengrass/*"
        },
        {
          "Sid": "DeepLensAccess",
          "Effect": "Allow",
          "Action": [
            "deeplens:*"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "DeepLensKinesisVideoAccess",
          "Effect": "Allow",
          "Action": [
            "kinesisvideo:DescribeStream",
            "kinesisvideo:CreateStream",
            "kinesisvideo:GetDataEndpoint",
            "kinesisvideo:PutMedia"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2019-06-11T23:11:55+00:00"
  },
  "AWSDeepLensServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "DeepLensIoTThingAccess",
          "Effect": "Allow",
          "Action": [
            "iot:CreateThing",
            "iot:DeleteThing",
            "iot:DeleteThingShadow",
            "iot:DescribeThing",
            "iot:GetThingShadow",
            "iot:UpdateThing",
            "iot:UpdateThingShadow"
          ],
          "Resource": [
            "arn:aws:iot:*:*:thing/deeplens*"
          ]
        },
        {
          "Sid": "DeepLensIoTCertificateAccess",
          "Effect": "Allow",
          "Action": [
            "iot:AttachThingPrincipal",
            "iot:DetachThingPrincipal",
            "iot:UpdateCertificate",
            "iot:DeleteCertificate",
            "iot:DetachPrincipalPolicy"
          ],
          "Resource": [
            "arn:aws:iot:*:*:thing/deeplens*",
            "arn:aws:iot:*:*:cert/*"
          ]
        },
        {
          "Sid": "DeepLensIoTCreateCertificateAndPolicyAccess",
          "Effect": "Allow",
          "Action": [
            "iot:CreateKeysAndCertificate",
            "iot:CreatePolicy",
            "iot:CreatePolicyVersion"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "DeepLensIoTAttachCertificatePolicyAccess",
          "Effect": "Allow",
          "Action": [
            "iot:AttachPrincipalPolicy"
          ],
          "Resource": [
            "arn:aws:iot:*:*:policy/deeplens*",
            "arn:aws:iot:*:*:cert/*"
          ]
        },
        {
          "Sid": "DeepLensIoTDataAccess",
          "Effect": "Allow",
          "Action": [
            "iot:GetThingShadow",
            "iot:UpdateThingShadow"
          ],
          "Resource": [
            "arn:aws:iot:*:*:thing/deeplens*"
          ]
        },
        {
          "Sid": "DeepLensIoTEndpointAccess",
          "Effect": "Allow",
          "Action": [
            "iot:DescribeEndpoint"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "DeepLensAccess",
          "Effect": "Allow",
          "Action": [
            "deeplens:*"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "DeepLensS3ObjectAccess",
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": [
            "arn:aws:s3:::deeplens*"
          ]
        },
        {
          "Sid": "DeepLensS3Buckets",
          "Effect": "Allow",
          "Action": [
            "s3:DeleteBucket",
            "s3:ListBucket"
          ],
          "Resource": [
            "arn:aws:s3:::deeplens*"
          ]
        },
        {
          "Sid": "DeepLensCreateS3Buckets",
          "Effect": "Allow",
          "Action": [
            "s3:CreateBucket"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "DeepLensIAMPassRoleAccess",
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "greengrass.amazonaws.com",
                "sagemaker.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "DeepLensIAMLambdaPassRoleAccess",
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/AWSDeepLens*",
            "arn:aws:iam::*:role/service-role/AWSDeepLens*"
          ],
          "Condition": {
            "StringEqualsIfExists": {
              "iam:PassedToService": "lambda.amazonaws.com"
            }
          }
        },
        {
          "Sid": "DeepLensGreenGrassAccess",
          "Effect": "Allow",
          "Action": [
            "greengrass:AssociateRoleToGroup",
            "greengrass:AssociateServiceRoleToAccount",
            "greengrass:CreateResourceDefinition",
            "greengrass:CreateResourceDefinitionVersion",
            "greengrass:CreateCoreDefinition",
            "greengrass:CreateCoreDefinitionVersion",
            "greengrass:CreateDeployment",
            "greengrass:CreateFunctionDefinition",
            "greengrass:CreateFunctionDefinitionVersion",
            "greengrass:CreateGroup",
            "greengrass:CreateGroupCertificateAuthority",
            "greengrass:CreateGroupVersion",
            "greengrass:CreateLoggerDefinition",
            "greengrass:CreateLoggerDefinitionVersion",
            "greengrass:CreateSubscriptionDefinition",
            "greengrass:CreateSubscriptionDefinitionVersion",
            "greengrass:DeleteCoreDefinition",
            "greengrass:DeleteFunctionDefinition",
            "greengrass:DeleteGroup",
            "greengrass:DeleteLoggerDefinition",
            "greengrass:DeleteSubscriptionDefinition",
            "greengrass:DisassociateRoleFromGroup",
            "greengrass:DisassociateServiceRoleFromAccount",
            "greengrass:GetAssociatedRole",
            "greengrass:GetConnectivityInfo",
            "greengrass:GetCoreDefinition",
            "greengrass:GetCoreDefinitionVersion",
            "greengrass:GetDeploymentStatus",
            "greengrass:GetDeviceDefinition",
            "greengrass:GetDeviceDefinitionVersion",
            "greengrass:GetFunctionDefinition",
            "greengrass:GetFunctionDefinitionVersion",
            "greengrass:GetGroup",
            "greengrass:GetGroupCertificateAuthority",
            "greengrass:GetGroupCertificateConfiguration",
            "greengrass:GetGroupVersion",
            "greengrass:GetLoggerDefinition",
            "greengrass:GetLoggerDefinitionVersion",
            "greengrass:GetResourceDefinition",
            "greengrass:GetServiceRoleForAccount",
            "greengrass:GetSubscriptionDefinition",
            "greengrass:GetSubscriptionDefinitionVersion",
            "greengrass:ListCoreDefinitionVersions",
            "greengrass:ListCoreDefinitions",
            "greengrass:ListDeployments",
            "greengrass:ListDeviceDefinitionVersions",
            "greengrass:ListDeviceDefinitions",
            "greengrass:ListFunctionDefinitionVersions",
            "greengrass:ListFunctionDefinitions",
            "greengrass:ListGroupCertificateAuthorities",
            "greengrass:ListGroupVersions",
            "greengrass:ListGroups",
            "greengrass:ListLoggerDefinitionVersions",
            "greengrass:ListLoggerDefinitions",
            "greengrass:ListSubscriptionDefinitionVersions",
            "greengrass:ListSubscriptionDefinitions",
            "greengrass:ResetDeployments",
            "greengrass:UpdateConnectivityInfo",
            "greengrass:UpdateCoreDefinition",
            "greengrass:UpdateDeviceDefinition",
            "greengrass:UpdateFunctionDefinition",
            "greengrass:UpdateGroup",
            "greengrass:UpdateGroupCertificateConfiguration",
            "greengrass:UpdateLoggerDefinition",
            "greengrass:UpdateSubscriptionDefinition",
            "greengrass:UpdateResourceDefinition"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "DeepLensLambdaAdminFunctionAccess",
          "Effect": "Allow",
          "Action": [
            "lambda:CreateFunction",
            "lambda:DeleteFunction",
            "lambda:GetFunction",
            "lambda:GetFunctionConfiguration",
            "lambda:ListFunctions",
            "lambda:ListVersionsByFunction",
            "lambda:PublishVersion",
            "lambda:UpdateFunctionCode",
            "lambda:UpdateFunctionConfiguration"
          ],
          "Resource": [
            "arn:aws:lambda:*:*:function:deeplens*"
          ]
        },
        {
          "Sid": "DeepLensLambdaUsersFunctionAccess",
          "Effect": "Allow",
          "Action": [
            "lambda:GetFunction",
            "lambda:GetFunctionConfiguration",
            "lambda:ListFunctions",
            "lambda:ListVersionsByFunction"
          ],
          "Resource": [
            "arn:aws:lambda:*:*:function:*"
          ]
        },
        {
          "Sid": "DeepLensSageMakerWriteAccess",
          "Effect": "Allow",
          "Action": [
            "sagemaker:CreateTrainingJob",
            "sagemaker:DescribeTrainingJob",
            "sagemaker:StopTrainingJob"
          ],
          "Resource": [
            "arn:aws:sagemaker:*:*:training-job/deeplens*"
          ]
        },
        {
          "Sid": "DeepLensSageMakerReadAccess",
          "Effect": "Allow",
          "Action": [
            "sagemaker:DescribeTrainingJob"
          ],
          "Resource": [
            "arn:aws:sagemaker:*:*:training-job/*"
          ]
        },
        {
          "Sid": "DeepLensKinesisVideoStreamAccess",
          "Effect": "Allow",
          "Action": [
            "kinesisvideo:CreateStream",
            "kinesisvideo:DescribeStream",
            "kinesisvideo:DeleteStream"
          ],
          "Resource": [
            "arn:aws:kinesisvideo:*:*:stream/deeplens*/*"
          ]
        },
        {
          "Sid": "DeepLensKinesisVideoEndpointAccess",
          "Effect": "Allow",
          "Action": [
            "kinesisvideo:GetDataEndpoint"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v6",
    "IsDefaultVersion": true,
    "CreateDate": "2019-09-25T19:25:06+00:00"
  },
  "AWSDeepRacerAccountAdminAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "DeepRacerAdminAccessStatement",
          "Effect": "Allow",
          "Action": [
            "deepracer:*"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "Null": {
              "deepracer:UserToken": "true"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-10-28T01:27:13+00:00"
  },
  "AWSDeepRacerCloudFormationAccessPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AllocateAddress",
            "ec2:AttachInternetGateway",
            "ec2:AssociateRouteTable",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateInternetGateway",
            "ec2:CreateNatGateway",
            "ec2:CreateNetworkAcl",
            "ec2:CreateNetworkAclEntry",
            "ec2:CreateRoute",
            "ec2:CreateRouteTable",
            "ec2:CreateSecurityGroup",
            "ec2:CreateSubnet",
            "ec2:CreateTags",
            "ec2:CreateVpc",
            "ec2:CreateVpcEndpoint",
            "ec2:DeleteInternetGateway",
            "ec2:DeleteNatGateway",
            "ec2:DeleteNetworkAcl",
            "ec2:DeleteNetworkAclEntry",
            "ec2:DeleteRoute",
            "ec2:DeleteRouteTable",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteSubnet",
            "ec2:DeleteTags",
            "ec2:DeleteVpc",
            "ec2:DeleteVpcEndpoints",
            "ec2:DescribeAddresses",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeNatGateways",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ec2:DetachInternetGateway",
            "ec2:DisassociateRouteTable",
            "ec2:ModifySubnetAttribute",
            "ec2:ModifyVpcAttribute",
            "ec2:ReleaseAddress",
            "ec2:ReplaceNetworkAclAssociation",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "arn:aws:iam::*:role/service-role/AWSDeepRacerLambdaAccessRole",
          "Condition": {
            "StringLikeIfExists": {
              "iam:PassedToService": "lambda.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "lambda:CreateFunction",
            "lambda:GetFunction",
            "lambda:DeleteFunction",
            "lambda:TagResource",
            "lambda:UpdateFunctionCode"
          ],
          "Resource": [
            "arn:aws:lambda:*:*:function:*DeepRacer*",
            "arn:aws:lambda:*:*:function:*Deepracer*",
            "arn:aws:lambda:*:*:function:*deepracer*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:PutBucketPolicy",
            "s3:CreateBucket",
            "s3:ListBucket",
            "s3:GetBucketAcl",
            "s3:DeleteBucket"
          ],
          "Resource": [
            "arn:aws:s3:::*DeepRacer*",
            "arn:aws:s3:::*Deepracer*",
            "arn:aws:s3:::*deepracer*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "robomaker:CreateSimulationApplication",
            "robomaker:CreateSimulationApplicationVersion",
            "robomaker:DeleteSimulationApplication",
            "robomaker:DescribeSimulationApplication",
            "robomaker:ListSimulationApplications",
            "robomaker:TagResource",
            "robomaker:UpdateSimulationApplication"
          ],
          "Resource": [
            "arn:aws:robomaker:*:*:/createSimulationApplication",
            "arn:aws:robomaker:*:*:simulation-application/deepracer*"
          ]
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2019-06-14T17:02:04+00:00"
  },
  "AWSDeepRacerDefaultMultiUserAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "deepracer:Add*",
            "deepracer:Remove*",
            "deepracer:Create*",
            "deepracer:Perform*",
            "deepracer:Clone*",
            "deepracer:Get*",
            "deepracer:List*",
            "deepracer:Edit*",
            "deepracer:Start*",
            "deepracer:Set*",
            "deepracer:Update*",
            "deepracer:Delete*",
            "deepracer:Stop*",
            "deepracer:Import*",
            "deepracer:Tag*",
            "deepracer:Untag*"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "Null": {
              "deepracer:UserToken": "false"
            },
            "Bool": {
              "deepracer:MultiUser": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "deepracer:GetAccountConfig",
            "deepracer:GetTrack",
            "deepracer:ListTracks",
            "deepracer:TestRewardFunction"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Deny",
          "Action": [
            "deepracer:Admin*"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-10-28T01:27:13+00:00"
  },
  "AWSDeepRacerFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListAllMyBuckets"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:DeleteObject",
            "s3:DeleteObjectVersion",
            "s3:GetBucketPolicy",
            "s3:PutBucketPolicy",
            "s3:ListBucket",
            "s3:GetBucketAcl",
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:GetObjectAcl",
            "s3:GetBucketLocation"
          ],
          "Resource": [
            "arn:aws:s3:::*DeepRacer*",
            "arn:aws:s3:::*Deepracer*",
            "arn:aws:s3:::*deepracer*",
            "arn:aws:s3:::dr-*",
            "arn:aws:s3:::*DeepRacer*/*",
            "arn:aws:s3:::*Deepracer*/*",
            "arn:aws:s3:::*deepracer*/*",
            "arn:aws:s3:::dr-*/*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-10-05T22:03:10+00:00"
  },
  "AWSDeepRacerRoboMakerAccessPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "robomaker:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricData",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSubnets",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeVpcs"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/robomaker/SimulationJobs",
            "arn:aws:logs:*:*:log-group:/aws/robomaker/SimulationJobs:log-stream:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:GetBucketLocation",
            "s3:ListBucket",
            "s3:ListAllMyBuckets",
            "s3:PutObject"
          ],
          "Resource": [
            "arn:aws:s3:::*DeepRacer*",
            "arn:aws:s3:::*Deepracer*",
            "arn:aws:s3:::*deepracer*",
            "arn:aws:s3:::dr-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": "*",
          "Condition": {
            "StringEqualsIgnoreCase": {
              "s3:ExistingObjectTag/DeepRacer": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "kinesisvideo:CreateStream",
            "kinesisvideo:DescribeStream",
            "kinesisvideo:GetDataEndpoint",
            "kinesisvideo:PutMedia",
            "kinesisvideo:TagStream"
          ],
          "Resource": [
            "arn:aws:kinesisvideo:*:*:stream/dr-*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-02-28T21:59:58+00:00"
  },
  "AWSDeepRacerServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "deepracer:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "robomaker:*",
            "sagemaker:*",
            "s3:ListAllMyBuckets"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:ListStackResources",
            "cloudformation:DescribeStacks",
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeStackResource",
            "cloudformation:DescribeStackResources",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DetectStackDrift",
            "cloudformation:DescribeStackDriftDetectionStatus",
            "cloudformation:DescribeStackResourceDrifts"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "robomaker.amazonaws.com"
            }
          },
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/AWSDeepRacer*",
            "arn:aws:iam::*:role/service-role/AWSDeepRacer*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:GetMetricData",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "logs:PutLogEvents"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "lambda:CreateFunction",
            "lambda:DeleteFunction",
            "lambda:GetFunction",
            "lambda:InvokeFunction",
            "lambda:UpdateFunctionCode"
          ],
          "Resource": [
            "arn:aws:lambda:*:*:function:*DeepRacer*",
            "arn:aws:lambda:*:*:function:*Deepracer*",
            "arn:aws:lambda:*:*:function:*deepracer*",
            "arn:aws:lambda:*:*:function:*dr-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:GetBucketLocation",
            "s3:DeleteObject",
            "s3:ListBucket",
            "s3:PutObject",
            "s3:PutBucketPolicy",
            "s3:GetBucketAcl"
          ],
          "Resource": [
            "arn:aws:s3:::*DeepRacer*",
            "arn:aws:s3:::*Deepracer*",
            "arn:aws:s3:::*deepracer*",
            "arn:aws:s3:::dr-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": "*",
          "Condition": {
            "StringEqualsIgnoreCase": {
              "s3:ExistingObjectTag/DeepRacer": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "kinesisvideo:CreateStream",
            "kinesisvideo:DeleteStream",
            "kinesisvideo:DescribeStream",
            "kinesisvideo:GetDataEndpoint",
            "kinesisvideo:GetHLSStreamingSessionURL",
            "kinesisvideo:GetMedia",
            "kinesisvideo:PutMedia",
            "kinesisvideo:TagStream"
          ],
          "Resource": [
            "arn:aws:kinesisvideo:*:*:stream/dr-*"
          ]
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2019-06-12T20:55:34+00:00"
  },
  "AWSDenyAll": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "*"
          ],
          "Effect": "Deny",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-05-01T22:36:14+00:00"
  },
  "AWSDeviceFarmFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "devicefarm:*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-07-13T16:37:38+00:00"
  },
  "AWSDeviceFarmServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeVpcs",
            "ec2:DescribeSubnets",
            "ec2:DescribeSecurityGroups"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:security-group/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:network-interface/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/AWSDeviceFarmManaged": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": "arn:aws:ec2:*:*:network-interface/*",
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "CreateNetworkInterface"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterface"
          ],
          "Resource": "arn:aws:ec2:*:*:network-interface/*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/AWSDeviceFarmManaged": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:ModifyNetworkInterfaceAttribute"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:instance/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:ModifyNetworkInterfaceAttribute"
          ],
          "Resource": "arn:aws:ec2:*:*:network-interface/*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/AWSDeviceFarmManaged": "true"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-09-20T21:02:28+00:00"
  },
  "AWSDeviceFarmTestGridServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeVpcs",
            "ec2:DescribeSubnets",
            "ec2:DescribeSecurityGroups"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:security-group/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:network-interface/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/AWSDeviceFarmManaged": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": "arn:aws:ec2:*:*:network-interface/*",
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "CreateNetworkInterface"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterface"
          ],
          "Resource": "arn:aws:ec2:*:*:network-interface/*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/AWSDeviceFarmManaged": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:ModifyNetworkInterfaceAttribute"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:instance/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:ModifyNetworkInterfaceAttribute"
          ],
          "Resource": "arn:aws:ec2:*:*:network-interface/*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/AWSDeviceFarmManaged": "true"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-05-26T22:01:35+00:00"
  },
  "AWSDirectConnectFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "directconnect:*",
            "ec2:DescribeVpnGateways",
            "ec2:DescribeTransitGateways"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2019-04-30T15:29:29+00:00"
  },
  "AWSDirectConnectReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "directconnect:Describe*",
            "directconnect:List*",
            "ec2:DescribeVpnGateways",
            "ec2:DescribeTransitGateways"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2020-05-18T18:48:22+00:00"
  },
  "AWSDirectConnectServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:DescribeSecret",
            "secretsmanager:ListSecretVersionIds",
            "secretsmanager:GetSecretValue"
          ],
          "Resource": [
            "arn:aws:secretsmanager:*:*:secret:*directconnect*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-01-14T18:35:27+00:00"
  },
  "AWSDirectoryServiceFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "ds:*",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateNetworkInterface",
            "ec2:CreateSecurityGroup",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteSecurityGroup",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:DescribeSecurityGroups",
            "sns:GetTopicAttributes",
            "sns:ListSubscriptions",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTopics",
            "iam:ListRoles",
            "organizations:ListAccountsForParent",
            "organizations:ListRoots",
            "organizations:ListAccounts",
            "organizations:DescribeOrganization",
            "organizations:DescribeAccount",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListAWSServiceAccessForOrganization"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "sns:CreateTopic",
            "sns:DeleteTopic",
            "sns:SetTopicAttributes",
            "sns:Subscribe",
            "sns:Unsubscribe"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:sns:*:*:DirectoryMonitoring*"
        },
        {
          "Action": [
            "organizations:EnableAWSServiceAccess",
            "organizations:DisableAWSServiceAccess"
          ],
          "Effect": "Allow",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "organizations:ServicePrincipal": "ds.amazonaws.com"
            }
          }
        },
        {
          "Action": [
            "ec2:CreateTags",
            "ec2:DeleteTags"
          ],
          "Effect": "Allow",
          "Resource": [
            "arn:aws:ec2:*:*:network-interface/*",
            "arn:aws:ec2:*:*:security-group/*"
          ]
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2020-11-24T23:24:10+00:00"
  },
  "AWSDirectoryServiceReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "ds:Check*",
            "ds:Describe*",
            "ds:Get*",
            "ds:List*",
            "ds:Verify*",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "sns:ListTopics",
            "sns:GetTopicAttributes",
            "sns:ListSubscriptions",
            "sns:ListSubscriptionsByTopic",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2018-09-25T21:54:01+00:00"
  },
  "AWSDiscoveryContinuousExportFirehosePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "glue:GetTableVersions"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:AbortMultipartUpload",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:ListBucketMultipartUploads",
            "s3:PutObject"
          ],
          "Resource": [
            "arn:aws:s3:::aws-application-discovery-service-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:PutLogEvents"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/application-discovery-service/firehose:log-stream:*"
          ]
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2021-06-08T17:32:46+00:00"
  },
  "AWSEC2CapacityReservationFleetRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeCapacityReservations",
            "ec2:DescribeInstances"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateCapacityReservation",
            "ec2:CancelCapacityReservation",
            "ec2:ModifyCapacityReservation"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:capacity-reservation/*"
          ],
          "Condition": {
            "StringLike": {
              "ec2:CapacityReservationFleet": "arn:aws:ec2:*:*:capacity-reservation-fleet/crf-*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:capacity-reservation/*"
          ],
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "CreateCapacityReservation"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-09-29T14:43:09+00:00"
  },
  "AWSEC2FleetServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeImages",
            "ec2:DescribeSubnets",
            "ec2:RequestSpotInstances",
            "ec2:DescribeInstanceStatus",
            "ec2:RunInstances"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "EC2SpotManagement",
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "spot.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "ec2.amazonaws.com",
                "ec2.amazonaws.com.cn"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*",
            "arn:aws:ec2:*:*:spot-instances-request/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:volume/*"
          ],
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "RunInstances"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:TerminateInstances"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/aws:ec2:fleet-id": "*"
            }
          }
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2020-05-04T20:10:31+00:00"
  },
  "AWSEC2SpotFleetServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeImages",
            "ec2:DescribeSubnets",
            "ec2:RequestSpotInstances",
            "ec2:DescribeInstanceStatus",
            "ec2:RunInstances"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "ec2.amazonaws.com",
                "ec2.amazonaws.com.cn"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*",
            "arn:aws:ec2:*:*:spot-instances-request/*",
            "arn:aws:ec2:*:*:spot-fleet-request/*",
            "arn:aws:ec2:*:*:volume/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:TerminateInstances"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/aws:ec2spot:fleet-request-id": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
          ],
          "Resource": [
            "arn:aws:elasticloadbalancing:*:*:loadbalancer/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:RegisterTargets"
          ],
          "Resource": [
            "arn:aws:elasticloadbalancing:*:*:*/*"
          ]
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2020-03-16T19:16:21+00:00"
  },
  "AWSEC2SpotServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstances",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:RunInstances"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Deny",
          "Action": [
            "ec2:RunInstances"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "StringNotEquals": {
              "ec2:InstanceMarketType": "spot"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "ec2.amazonaws.com",
                "ec2.amazonaws.com.cn"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "RunInstances"
            }
          }
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2018-12-12T00:13:51+00:00"
  },
  "AWSECRPullThroughCache_ServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "ECR",
          "Effect": "Allow",
          "Action": [
            "ecr:GetAuthorizationToken",
            "ecr:BatchCheckLayerAvailability",
            "ecr:InitiateLayerUpload",
            "ecr:UploadLayerPart",
            "ecr:CompleteLayerUpload",
            "ecr:PutImage"
          ],
          "Resource": "*"
        },
        {
          "Sid": "SecretsManager",
          "Effect": "Allow",
          "Action": [
            "secretsmanager:GetSecretValue"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:secret:ecr-pullthroughcache/*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-13T15:23:16+00:00"
  },
  "AWSElasticBeanstalkCustomPlatformforEC2Role": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "EC2Access",
          "Action": [
            "ec2:AttachVolume",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CopyImage",
            "ec2:CreateImage",
            "ec2:CreateKeypair",
            "ec2:CreateSecurityGroup",
            "ec2:CreateSnapshot",
            "ec2:CreateTags",
            "ec2:CreateVolume",
            "ec2:DeleteKeypair",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteSnapshot",
            "ec2:DeleteVolume",
            "ec2:DeregisterImage",
            "ec2:DescribeImageAttribute",
            "ec2:DescribeImages",
            "ec2:DescribeInstances",
            "ec2:DescribeRegions",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:DescribeVolumes",
            "ec2:DetachVolume",
            "ec2:GetPasswordData",
            "ec2:ModifyImageAttribute",
            "ec2:ModifyInstanceAttribute",
            "ec2:ModifySnapshotAttribute",
            "ec2:RegisterImage",
            "ec2:RunInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Sid": "BucketAccess",
          "Action": [
            "s3:Get*",
            "s3:List*",
            "s3:PutObject"
          ],
          "Effect": "Allow",
          "Resource": [
            "arn:aws:s3:::elasticbeanstalk-*",
            "arn:aws:s3:::elasticbeanstalk-*/*"
          ]
        },
        {
          "Sid": "CloudWatchLogsAccess",
          "Action": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "logs:DescribeLogStreams"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/platform/*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2017-02-21T22:50:30+00:00"
  },
  "AWSElasticBeanstalkEnhancedHealth": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:DescribeInstanceHealth",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTargetHealth",
            "ec2:DescribeInstances",
            "ec2:DescribeInstanceStatus",
            "ec2:GetConsoleOutput",
            "ec2:AssociateAddress",
            "ec2:DescribeAddresses",
            "ec2:DescribeSecurityGroups",
            "sqs:GetQueueAttributes",
            "sqs:GetQueueUrl",
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribeAutoScalingInstances",
            "autoscaling:DescribeScalingActivities",
            "autoscaling:DescribeNotificationConfigurations",
            "sns:Publish"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:DescribeLogStreams",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/*:log-stream:*"
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2018-04-09T22:12:53+00:00"
  },
  "AWSElasticBeanstalkMaintenance": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AllowCloudformationChangeSetOperationsOnElasticBeanstalkStacks",
          "Effect": "Allow",
          "Action": [
            "cloudformation:CreateChangeSet",
            "cloudformation:DescribeChangeSet",
            "cloudformation:ExecuteChangeSet",
            "cloudformation:DeleteChangeSet",
            "cloudformation:ListChangeSets",
            "cloudformation:DescribeStacks"
          ],
          "Resource": [
            "arn:aws:cloudformation:*:*:stack/awseb-*",
            "arn:aws:cloudformation:*:*:stack/eb-*"
          ]
        },
        {
          "Sid": "AllowElasticBeanstalkStacksUpdateExecuteSuccessfully",
          "Effect": "Allow",
          "Action": "elasticloadbalancing:DescribeLoadBalancers",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2019-06-04T17:48:27+00:00"
  },
  "AWSElasticBeanstalkManagedUpdatesCustomerRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "ElasticBeanstalkPermissions",
          "Effect": "Allow",
          "Action": [
            "elasticbeanstalk:*"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AllowPassRoleToElasticBeanstalkAndDownstreamServices",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "elasticbeanstalk.amazonaws.com",
                "ec2.amazonaws.com",
                "ec2.amazonaws.com.cn",
                "autoscaling.amazonaws.com",
                "elasticloadbalancing.amazonaws.com",
                "ecs.amazonaws.com",
                "cloudformation.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "ReadOnlyPermissions",
          "Effect": "Allow",
          "Action": [
            "autoscaling:DescribeAccountLimits",
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribeAutoScalingInstances",
            "autoscaling:DescribeLaunchConfigurations",
            "autoscaling:DescribeLoadBalancers",
            "autoscaling:DescribeNotificationConfigurations",
            "autoscaling:DescribeScalingActivities",
            "autoscaling:DescribeScheduledActions",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstances",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSpotInstanceRequests",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcClassicLink",
            "ec2:DescribeVpcs",
            "elasticloadbalancing:DescribeInstanceHealth",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "logs:DescribeLogGroups",
            "rds:DescribeDBEngineVersions",
            "rds:DescribeDBInstances",
            "rds:DescribeOrderableDBInstanceOptions",
            "sns:ListSubscriptionsByTopic"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "EC2BroadOperationPermissions",
          "Effect": "Allow",
          "Action": [
            "ec2:AllocateAddress",
            "ec2:AssociateAddress",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateLaunchTemplate",
            "ec2:CreateLaunchTemplateVersion",
            "ec2:CreateSecurityGroup",
            "ec2:DeleteLaunchTemplate",
            "ec2:DeleteLaunchTemplateVersions",
            "ec2:DeleteSecurityGroup",
            "ec2:DisassociateAddress",
            "ec2:ReleaseAddress",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress"
          ],
          "Resource": "*"
        },
        {
          "Sid": "EC2RunInstancesOperationPermissions",
          "Effect": "Allow",
          "Action": "ec2:RunInstances",
          "Resource": "*",
          "Condition": {
            "ArnLike": {
              "ec2:LaunchTemplate": "arn:aws:ec2:*:*:launch-template/*"
            }
          }
        },
        {
          "Sid": "EC2TerminateInstancesOperationPermissions",
          "Effect": "Allow",
          "Action": [
            "ec2:TerminateInstances"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/aws:cloudformation:stack-id": [
                "arn:aws:cloudformation:*:*:stack/awseb-e-*",
                "arn:aws:cloudformation:*:*:stack/eb-*"
              ]
            }
          }
        },
        {
          "Sid": "ECSBroadOperationPermissions",
          "Effect": "Allow",
          "Action": [
            "ecs:CreateCluster",
            "ecs:DescribeClusters",
            "ecs:RegisterTaskDefinition"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ECSDeleteClusterOperationPermissions",
          "Effect": "Allow",
          "Action": "ecs:DeleteCluster",
          "Resource": "arn:aws:ecs:*:*:cluster/awseb-*"
        },
        {
          "Sid": "ASGOperationPermissions",
          "Effect": "Allow",
          "Action": [
            "autoscaling:AttachInstances",
            "autoscaling:CreateAutoScalingGroup",
            "autoscaling:CreateLaunchConfiguration",
            "autoscaling:CreateOrUpdateTags",
            "autoscaling:DeleteLaunchConfiguration",
            "autoscaling:DeleteAutoScalingGroup",
            "autoscaling:DeleteScheduledAction",
            "autoscaling:DetachInstances",
            "autoscaling:DeletePolicy",
            "autoscaling:PutScalingPolicy",
            "autoscaling:PutScheduledUpdateGroupAction",
            "autoscaling:PutNotificationConfiguration",
            "autoscaling:ResumeProcesses",
            "autoscaling:SetDesiredCapacity",
            "autoscaling:SuspendProcesses",
            "autoscaling:TerminateInstanceInAutoScalingGroup",
            "autoscaling:UpdateAutoScalingGroup"
          ],
          "Resource": [
            "arn:aws:autoscaling:*:*:launchConfiguration:*:launchConfigurationName/awseb-e-*",
            "arn:aws:autoscaling:*:*:launchConfiguration:*:launchConfigurationName/eb-*",
            "arn:aws:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/awseb-e-*",
            "arn:aws:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/eb-*"
          ]
        },
        {
          "Sid": "CFNOperationPermissions",
          "Effect": "Allow",
          "Action": [
            "cloudformation:*"
          ],
          "Resource": [
            "arn:aws:cloudformation:*:*:stack/awseb-*",
            "arn:aws:cloudformation:*:*:stack/eb-*"
          ]
        },
        {
          "Sid": "ELBOperationPermissions",
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:AddTags",
            "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
            "elasticloadbalancing:ConfigureHealthCheck",
            "elasticloadbalancing:CreateLoadBalancer",
            "elasticloadbalancing:DeleteLoadBalancer",
            "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
            "elasticloadbalancing:DeregisterTargets",
            "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
            "elasticloadbalancing:RegisterTargets"
          ],
          "Resource": [
            "arn:aws:elasticloadbalancing:*:*:targetgroup/awseb-*",
            "arn:aws:elasticloadbalancing:*:*:targetgroup/eb-*",
            "arn:aws:elasticloadbalancing:*:*:loadbalancer/awseb-*",
            "arn:aws:elasticloadbalancing:*:*:loadbalancer/eb-*",
            "arn:aws:elasticloadbalancing:*:*:loadbalancer/*/awseb-*/*",
            "arn:aws:elasticloadbalancing:*:*:loadbalancer/*/eb-*/*"
          ]
        },
        {
          "Sid": "CWLogsOperationPermissions",
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:DeleteLogGroup",
            "logs:PutRetentionPolicy"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/*"
        },
        {
          "Sid": "S3ObjectOperationPermissions",
          "Effect": "Allow",
          "Action": [
            "s3:DeleteObject",
            "s3:GetObject",
            "s3:GetObjectAcl",
            "s3:GetObjectVersion",
            "s3:GetObjectVersionAcl",
            "s3:PutObject",
            "s3:PutObjectAcl",
            "s3:PutObjectVersionAcl"
          ],
          "Resource": "arn:aws:s3:::elasticbeanstalk-*/*"
        },
        {
          "Sid": "S3BucketOperationPermissions",
          "Effect": "Allow",
          "Action": [
            "s3:GetBucketLocation",
            "s3:GetBucketPolicy",
            "s3:ListBucket",
            "s3:PutBucketPolicy"
          ],
          "Resource": "arn:aws:s3:::elasticbeanstalk-*"
        },
        {
          "Sid": "SNSOperationPermissions",
          "Effect": "Allow",
          "Action": [
            "sns:CreateTopic",
            "sns:GetTopicAttributes",
            "sns:SetTopicAttributes",
            "sns:Subscribe"
          ],
          "Resource": "arn:aws:sns:*:*:ElasticBeanstalkNotifications-*"
        },
        {
          "Sid": "SQSOperationPermissions",
          "Effect": "Allow",
          "Action": [
            "sqs:GetQueueAttributes",
            "sqs:GetQueueUrl"
          ],
          "Resource": [
            "arn:aws:sqs:*:*:awseb-e-*",
            "arn:aws:sqs:*:*:eb-*"
          ]
        },
        {
          "Sid": "CWPutMetricAlarmOperationPermissions",
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricAlarm"
          ],
          "Resource": [
            "arn:aws:cloudwatch:*:*:alarm:awseb-*",
            "arn:aws:cloudwatch:*:*:alarm:eb-*"
          ]
        },
        {
          "Sid": "AllowECSTagResource",
          "Effect": "Allow",
          "Action": [
            "ecs:TagResource"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "ecs:CreateAction": [
                "CreateCluster",
                "RegisterTaskDefinition"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v6",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-23T23:15:54+00:00"
  },
  "AWSElasticBeanstalkManagedUpdatesServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AllowPassRoleToElasticBeanstalkAndDownstreamServices",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "*",
          "Condition": {
            "StringLikeIfExists": {
              "iam:PassedToService": [
                "elasticbeanstalk.amazonaws.com",
                "ec2.amazonaws.com",
                "autoscaling.amazonaws.com",
                "elasticloadbalancing.amazonaws.com",
                "ecs.amazonaws.com",
                "cloudformation.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "SingleInstanceAPIs",
          "Effect": "Allow",
          "Action": [
            "ec2:releaseAddress",
            "ec2:allocateAddress",
            "ec2:DisassociateAddress",
            "ec2:AssociateAddress"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ECS",
          "Effect": "Allow",
          "Action": [
            "ecs:RegisterTaskDefinition",
            "ecs:DeRegisterTaskDefinition",
            "ecs:List*",
            "ecs:Describe*"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ElasticBeanstalkAPIs",
          "Effect": "Allow",
          "Action": [
            "elasticbeanstalk:*"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ReadOnlyAPIs",
          "Effect": "Allow",
          "Action": [
            "cloudformation:Describe*",
            "cloudformation:List*",
            "ec2:Describe*",
            "autoscaling:Describe*",
            "elasticloadbalancing:Describe*",
            "logs:DescribeLogGroups",
            "sns:GetTopicAttributes",
            "sns:ListSubscriptionsByTopic",
            "rds:DescribeDBEngineVersions",
            "rds:DescribeDBInstances"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ASG",
          "Effect": "Allow",
          "Action": [
            "autoscaling:AttachInstances",
            "autoscaling:CreateAutoScalingGroup",
            "autoscaling:CreateLaunchConfiguration",
            "autoscaling:CreateOrUpdateTags",
            "autoscaling:DeleteAutoScalingGroup",
            "autoscaling:DeleteLaunchConfiguration",
            "autoscaling:DeleteScheduledAction",
            "autoscaling:DetachInstances",
            "autoscaling:PutNotificationConfiguration",
            "autoscaling:PutScalingPolicy",
            "autoscaling:PutScheduledUpdateGroupAction",
            "autoscaling:ResumeProcesses",
            "autoscaling:SuspendProcesses",
            "autoscaling:TerminateInstanceInAutoScalingGroup",
            "autoscaling:UpdateAutoScalingGroup"
          ],
          "Resource": [
            "arn:aws:autoscaling:*:*:launchConfiguration:*:launchConfigurationName/awseb-e-*",
            "arn:aws:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/awseb-e-*",
            "arn:aws:autoscaling:*:*:launchConfiguration:*:launchConfigurationName/eb-*",
            "arn:aws:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/eb-*"
          ]
        },
        {
          "Sid": "CFN",
          "Effect": "Allow",
          "Action": [
            "cloudformation:CreateStack",
            "cloudformation:CancelUpdateStack",
            "cloudformation:DeleteStack",
            "cloudformation:GetTemplate",
            "cloudformation:UpdateStack"
          ],
          "Resource": [
            "arn:aws:cloudformation:*:*:stack/awseb-e-*",
            "arn:aws:cloudformation:*:*:stack/eb-*"
          ]
        },
        {
          "Sid": "EC2",
          "Effect": "Allow",
          "Action": [
            "ec2:TerminateInstances"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/aws:cloudformation:stack-id": [
                "arn:aws:cloudformation:*:*:stack/awseb-e-*",
                "arn:aws:cloudformation:*:*:stack/eb-*"
              ]
            }
          }
        },
        {
          "Sid": "S3Obj",
          "Effect": "Allow",
          "Action": [
            "s3:DeleteObject",
            "s3:GetObject",
            "s3:GetObjectAcl",
            "s3:GetObjectVersion",
            "s3:GetObjectVersionAcl",
            "s3:PutObject",
            "s3:PutObjectAcl",
            "s3:PutObjectVersionAcl"
          ],
          "Resource": "arn:aws:s3:::elasticbeanstalk-*/*"
        },
        {
          "Sid": "S3Bucket",
          "Effect": "Allow",
          "Action": [
            "s3:GetBucketLocation",
            "s3:GetBucketPolicy",
            "s3:ListBucket",
            "s3:PutBucketPolicy"
          ],
          "Resource": "arn:aws:s3:::elasticbeanstalk-*"
        },
        {
          "Sid": "CWL",
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:DeleteLogGroup",
            "logs:PutRetentionPolicy"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/*"
        },
        {
          "Sid": "ELB",
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:RegisterTargets",
            "elasticloadbalancing:DeRegisterTargets",
            "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
            "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
          ],
          "Resource": [
            "arn:aws:elasticloadbalancing:*:*:targetgroup/awseb-*",
            "arn:aws:elasticloadbalancing:*:*:loadbalancer/awseb-e-*",
            "arn:aws:elasticloadbalancing:*:*:targetgroup/eb-*",
            "arn:aws:elasticloadbalancing:*:*:loadbalancer/eb-*"
          ]
        },
        {
          "Sid": "SNS",
          "Effect": "Allow",
          "Action": [
            "sns:CreateTopic"
          ],
          "Resource": "arn:aws:sns:*:*:ElasticBeanstalkNotifications-Environment-*"
        },
        {
          "Sid": "EC2LaunchTemplate",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateLaunchTemplate",
            "ec2:DeleteLaunchTemplate",
            "ec2:CreateLaunchTemplateVersion",
            "ec2:DeleteLaunchTemplateVersions"
          ],
          "Resource": "arn:aws:ec2:*:*:launch-template/*"
        },
        {
          "Sid": "AllowLaunchTemplateRunInstances",
          "Effect": "Allow",
          "Action": "ec2:RunInstances",
          "Resource": "*",
          "Condition": {
            "ArnLike": {
              "ec2:LaunchTemplate": "arn:aws:ec2:*:*:launch-template/*"
            }
          }
        },
        {
          "Sid": "AllowECSTagResource",
          "Effect": "Allow",
          "Action": [
            "ecs:TagResource"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "ecs:CreateAction": [
                "RegisterTaskDefinition"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v8",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-24T00:18:43+00:00"
  },
  "AWSElasticBeanstalkMulticontainerDocker": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "ECSAccess",
          "Effect": "Allow",
          "Action": [
            "ecs:Poll",
            "ecs:StartTask",
            "ecs:StopTask",
            "ecs:DiscoverPollEndpoint",
            "ecs:StartTelemetrySession",
            "ecs:RegisterContainerInstance",
            "ecs:DeregisterContainerInstance",
            "ecs:DescribeContainerInstances",
            "ecs:Submit*",
            "ecs:DescribeTasks"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AllowECSTagResource",
          "Effect": "Allow",
          "Action": [
            "ecs:TagResource"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "ecs:CreateAction": [
                "RegisterContainerInstance",
                "StartTask"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-23T22:04:20+00:00"
  },
  "AWSElasticBeanstalkReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AllowAPIs",
          "Effect": "Allow",
          "Action": [
            "acm:ListCertificates",
            "autoscaling:DescribeAccountLimits",
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribeAutoScalingInstances",
            "autoscaling:DescribeLaunchConfigurations",
            "autoscaling:DescribePolicies",
            "autoscaling:DescribeLoadBalancers",
            "autoscaling:DescribeNotificationConfigurations",
            "autoscaling:DescribeScalingActivities",
            "autoscaling:DescribeScheduledActions",
            "cloudformation:DescribeStackResource",
            "cloudformation:DescribeStackResources",
            "cloudformation:DescribeStacks",
            "cloudformation:GetTemplate",
            "cloudformation:ListStackResources",
            "cloudformation:ListStacks",
            "cloudformation:ValidateTemplate",
            "cloudtrail:LookupEvents",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstances",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSpotInstanceRequests",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "elasticbeanstalk:Check*",
            "elasticbeanstalk:Describe*",
            "elasticbeanstalk:List*",
            "elasticbeanstalk:RequestEnvironmentInfo",
            "elasticbeanstalk:RetrieveEnvironmentInfo",
            "elasticloadbalancing:DescribeInstanceHealth",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeSSLPolicies",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "iam:GetRole",
            "iam:ListAttachedRolePolicies",
            "iam:ListInstanceProfiles",
            "iam:ListRolePolicies",
            "iam:ListRoles",
            "iam:ListServerCertificates",
            "rds:DescribeDBEngineVersions",
            "rds:DescribeDBInstances",
            "rds:DescribeOrderableDBInstanceOptions",
            "rds:DescribeDBSnapshots",
            "s3:ListAllMyBuckets",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTopics",
            "sqs:ListQueues"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AllowS3",
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:GetObjectAcl",
            "s3:GetObjectVersion",
            "s3:GetObjectVersionAcl",
            "s3:GetBucketLocation",
            "s3:GetBucketPolicy",
            "s3:ListBucket"
          ],
          "Resource": "arn:aws:s3:::elasticbeanstalk-*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-01-22T19:02:37+00:00"
  },
  "AWSElasticBeanstalkRoleCWL": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AllowCWL",
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:DeleteLogGroup",
            "logs:PutRetentionPolicy"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-06-05T21:49:06+00:00"
  },
  "AWSElasticBeanstalkRoleCore": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "TerminateInstances",
          "Effect": "Allow",
          "Action": [
            "ec2:TerminateInstances"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/awseb-e-*"
            }
          }
        },
        {
          "Sid": "EC2",
          "Effect": "Allow",
          "Action": [
            "ec2:ReleaseAddress",
            "ec2:AllocateAddress",
            "ec2:DisassociateAddress",
            "ec2:AssociateAddress",
            "ec2:CreateTags",
            "ec2:DeleteTags",
            "ec2:CreateSecurityGroup",
            "ec2:DeleteSecurityGroup",
            "ec2:AuthorizeSecurityGroup*",
            "ec2:RevokeSecurityGroup*",
            "ec2:CreateLaunchTemplate*",
            "ec2:DeleteLaunchTemplate*"
          ],
          "Resource": "*"
        },
        {
          "Sid": "LTRunInstances",
          "Effect": "Allow",
          "Action": "ec2:RunInstances",
          "Resource": "*",
          "Condition": {
            "ArnLike": {
              "ec2:LaunchTemplate": "arn:aws:ec2:*:*:launch-template/*"
            }
          }
        },
        {
          "Sid": "ASG",
          "Effect": "Allow",
          "Action": [
            "autoscaling:AttachInstances",
            "autoscaling:*LoadBalancer*",
            "autoscaling:*AutoScalingGroup",
            "autoscaling:*LaunchConfiguration",
            "autoscaling:DeleteScheduledAction",
            "autoscaling:DetachInstances",
            "autoscaling:PutNotificationConfiguration",
            "autoscaling:PutScalingPolicy",
            "autoscaling:PutScheduledUpdateGroupAction",
            "autoscaling:ResumeProcesses",
            "autoscaling:SuspendProcesses",
            "autoscaling:*Tags"
          ],
          "Resource": [
            "arn:aws:autoscaling:*:*:launchConfiguration:*:launchConfigurationName/awseb-e-*",
            "arn:aws:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/awseb-e-*"
          ]
        },
        {
          "Sid": "ASGPolicy",
          "Effect": "Allow",
          "Action": [
            "autoscaling:DeletePolicy"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "EBSLR",
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/aws-service-role/elasticbeanstalk.amazonaws.com/AWSServiceRoleForElasticBeanstalk*"
          ],
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "elasticbeanstalk.amazonaws.com"
            }
          }
        },
        {
          "Sid": "S3Obj",
          "Effect": "Allow",
          "Action": [
            "s3:Delete*",
            "s3:Get*",
            "s3:Put*"
          ],
          "Resource": [
            "arn:aws:s3:::elasticbeanstalk-*/*",
            "arn:aws:s3:::elasticbeanstalk-env-resources-*/*"
          ]
        },
        {
          "Sid": "S3Bucket",
          "Effect": "Allow",
          "Action": [
            "s3:GetBucket*",
            "s3:ListBucket",
            "s3:PutBucketPolicy"
          ],
          "Resource": "arn:aws:s3:::elasticbeanstalk-*"
        },
        {
          "Sid": "CFN",
          "Effect": "Allow",
          "Action": [
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:GetTemplate",
            "cloudformation:ListStackResources",
            "cloudformation:UpdateStack",
            "cloudformation:ContinueUpdateRollback",
            "cloudformation:CancelUpdateStack"
          ],
          "Resource": "arn:aws:cloudformation:*:*:stack/awseb-e-*"
        },
        {
          "Sid": "CloudWatch",
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:DeleteAlarms"
          ],
          "Resource": "arn:aws:cloudwatch:*:*:alarm:awseb-*"
        },
        {
          "Sid": "ELB",
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:Create*",
            "elasticloadbalancing:Delete*",
            "elasticloadbalancing:Modify*",
            "elasticloadbalancing:RegisterTargets",
            "elasticloadbalancing:DeRegisterTargets",
            "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
            "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
            "elasticloadbalancing:*Tags",
            "elasticloadbalancing:ConfigureHealthCheck",
            "elasticloadbalancing:SetRulePriorities",
            "elasticloadbalancing:SetLoadBalancerPoliciesOfListener"
          ],
          "Resource": [
            "arn:aws:elasticloadbalancing:*:*:targetgroup/awseb-*",
            "arn:aws:elasticloadbalancing:*:*:loadbalancer/awseb-*",
            "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/awseb-*/*",
            "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/awseb-*/*",
            "arn:aws:elasticloadbalancing:*:*:listener/awseb-*",
            "arn:aws:elasticloadbalancing:*:*:listener/app/awseb-*",
            "arn:aws:elasticloadbalancing:*:*:listener/net/awseb-*",
            "arn:aws:elasticloadbalancing:*:*:listener-rule/app/awseb-*/*/*/*"
          ]
        },
        {
          "Sid": "ListAPIs",
          "Effect": "Allow",
          "Action": [
            "autoscaling:Describe*",
            "cloudformation:Describe*",
            "logs:Describe*",
            "ec2:Describe*",
            "ecs:Describe*",
            "ecs:List*",
            "elasticloadbalancing:Describe*",
            "rds:Describe*",
            "sns:List*",
            "iam:List*",
            "acm:Describe*",
            "acm:List*"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AllowPassRole",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/aws-elasticbeanstalk-*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "elasticbeanstalk.amazonaws.com",
                "ec2.amazonaws.com",
                "autoscaling.amazonaws.com",
                "elasticloadbalancing.amazonaws.com",
                "ecs.amazonaws.com",
                "cloudformation.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2020-09-09T20:31:14+00:00"
  },
  "AWSElasticBeanstalkRoleECS": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AllowECS",
          "Effect": "Allow",
          "Action": [
            "ecs:CreateCluster",
            "ecs:DeleteCluster",
            "ecs:RegisterTaskDefinition",
            "ecs:DeRegisterTaskDefinition"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "AllowECSTagResource",
          "Effect": "Allow",
          "Action": [
            "ecs:TagResource"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "ecs:CreateAction": [
                "CreateCluster",
                "RegisterTaskDefinition"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-23T22:43:56+00:00"
  },
  "AWSElasticBeanstalkRoleRDS": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AllowRDS",
          "Effect": "Allow",
          "Action": [
            "rds:CreateDBSecurityGroup",
            "rds:DeleteDBSecurityGroup",
            "rds:AuthorizeDBSecurityGroupIngress",
            "rds:CreateDBInstance",
            "rds:ModifyDBInstance",
            "rds:DeleteDBInstance"
          ],
          "Resource": [
            "arn:aws:rds:*:*:secgrp:awseb-e-*",
            "arn:aws:rds:*:*:db:*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-06-05T21:46:55+00:00"
  },
  "AWSElasticBeanstalkRoleSNS": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AllowBeanstalkManageSNS",
          "Effect": "Allow",
          "Action": [
            "sns:CreateTopic",
            "sns:SetTopicAttributes",
            "sns:DeleteTopic"
          ],
          "Resource": [
            "arn:aws:sns:*:*:ElasticBeanstalkNotifications-*"
          ]
        },
        {
          "Sid": "AllowSNSPublish",
          "Effect": "Allow",
          "Action": [
            "sns:GetTopicAttributes",
            "sns:Subscribe",
            "sns:Unsubscribe",
            "sns:Publish"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-06-05T21:46:22+00:00"
  },
  "AWSElasticBeanstalkRoleWorkerTier": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AllowSQS",
          "Effect": "Allow",
          "Action": [
            "sqs:TagQueue",
            "sqs:DeleteQueue",
            "sqs:GetQueueAttributes",
            "sqs:CreateQueue"
          ],
          "Resource": "arn:aws:sqs:*:*:awseb-e-*"
        },
        {
          "Sid": "AllowDDB",
          "Effect": "Allow",
          "Action": [
            "dynamodb:CreateTable",
            "dynamodb:TagResource",
            "dynamodb:DescribeTable",
            "dynamodb:DeleteTable"
          ],
          "Resource": "arn:aws:dynamodb:*:*:table/awseb-e-*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-06-05T21:43:37+00:00"
  },
  "AWSElasticBeanstalkService": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AllowCloudformationOperationsOnElasticBeanstalkStacks",
          "Effect": "Allow",
          "Action": [
            "cloudformation:*"
          ],
          "Resource": [
            "arn:aws:cloudformation:*:*:stack/awseb-*",
            "arn:aws:cloudformation:*:*:stack/eb-*"
          ]
        },
        {
          "Sid": "AllowDeleteCloudwatchLogGroups",
          "Effect": "Allow",
          "Action": [
            "logs:DeleteLogGroup"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk*"
          ]
        },
        {
          "Sid": "AllowECSTagResource",
          "Effect": "Allow",
          "Action": [
            "ecs:TagResource"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "ecs:CreateAction": [
                "CreateCluster",
                "RegisterTaskDefinition"
              ]
            }
          }
        },
        {
          "Sid": "AllowS3OperationsOnElasticBeanstalkBuckets",
          "Effect": "Allow",
          "Action": [
            "s3:*"
          ],
          "Resource": [
            "arn:aws:s3:::elasticbeanstalk-*",
            "arn:aws:s3:::elasticbeanstalk-*/*"
          ]
        },
        {
          "Sid": "AllowLaunchTemplateRunInstances",
          "Effect": "Allow",
          "Action": "ec2:RunInstances",
          "Resource": "*",
          "Condition": {
            "ArnLike": {
              "ec2:LaunchTemplate": "arn:aws:ec2:*:*:launch-template/*"
            }
          }
        },
        {
          "Sid": "AllowELBAddTags",
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:AddTags"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "elasticloadbalancing:CreateAction": [
                "CreateLoadBalancer"
              ]
            }
          }
        },
        {
          "Sid": "AllowOperations",
          "Effect": "Allow",
          "Action": [
            "autoscaling:AttachInstances",
            "autoscaling:CreateAutoScalingGroup",
            "autoscaling:CreateLaunchConfiguration",
            "autoscaling:CreateOrUpdateTags",
            "autoscaling:DeleteLaunchConfiguration",
            "autoscaling:DeleteAutoScalingGroup",
            "autoscaling:DeleteScheduledAction",
            "autoscaling:DescribeAccountLimits",
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribeAutoScalingInstances",
            "autoscaling:DescribeLaunchConfigurations",
            "autoscaling:DescribeLoadBalancers",
            "autoscaling:DescribeNotificationConfigurations",
            "autoscaling:DescribeScalingActivities",
            "autoscaling:DescribeScheduledActions",
            "autoscaling:DetachInstances",
            "autoscaling:DeletePolicy",
            "autoscaling:PutScalingPolicy",
            "autoscaling:PutScheduledUpdateGroupAction",
            "autoscaling:PutNotificationConfiguration",
            "autoscaling:ResumeProcesses",
            "autoscaling:SetDesiredCapacity",
            "autoscaling:SuspendProcesses",
            "autoscaling:TerminateInstanceInAutoScalingGroup",
            "autoscaling:UpdateAutoScalingGroup",
            "cloudwatch:PutMetricAlarm",
            "ec2:AssociateAddress",
            "ec2:AllocateAddress",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateLaunchTemplate",
            "ec2:CreateLaunchTemplateVersion",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DeleteLaunchTemplate",
            "ec2:DeleteLaunchTemplateVersions",
            "ec2:CreateSecurityGroup",
            "ec2:DeleteSecurityGroup",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeImages",
            "ec2:DescribeInstances",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeSpotInstanceRequests",
            "ec2:DescribeVpcClassicLink",
            "ec2:DisassociateAddress",
            "ec2:ReleaseAddress",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:TerminateInstances",
            "ecs:CreateCluster",
            "ecs:DeleteCluster",
            "ecs:DescribeClusters",
            "ecs:RegisterTaskDefinition",
            "elasticbeanstalk:*",
            "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
            "elasticloadbalancing:ConfigureHealthCheck",
            "elasticloadbalancing:CreateLoadBalancer",
            "elasticloadbalancing:DeleteLoadBalancer",
            "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
            "elasticloadbalancing:DescribeInstanceHealth",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTargetHealth",
            "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:RegisterTargets",
            "elasticloadbalancing:DeregisterTargets",
            "iam:ListRoles",
            "iam:PassRole",
            "logs:CreateLogGroup",
            "logs:PutRetentionPolicy",
            "logs:DescribeLogGroups",
            "rds:DescribeDBEngineVersions",
            "rds:DescribeDBInstances",
            "rds:DescribeOrderableDBInstanceOptions",
            "s3:GetObject",
            "s3:GetObjectAcl",
            "s3:ListBucket",
            "sns:CreateTopic",
            "sns:GetTopicAttributes",
            "sns:ListSubscriptionsByTopic",
            "sns:Subscribe",
            "sns:SetTopicAttributes",
            "sqs:GetQueueAttributes",
            "sqs:GetQueueUrl",
            "codebuild:CreateProject",
            "codebuild:DeleteProject",
            "codebuild:BatchGetBuilds",
            "codebuild:StartBuild"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v17",
    "IsDefaultVersion": true,
    "CreateDate": "2023-05-10T19:29:34+00:00"
  },
  "AWSElasticBeanstalkServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AllowCloudformationReadOperationsOnElasticBeanstalkStacks",
          "Effect": "Allow",
          "Action": [
            "cloudformation:DescribeStackResource",
            "cloudformation:DescribeStackResources",
            "cloudformation:DescribeStacks"
          ],
          "Resource": [
            "arn:aws:cloudformation:*:*:stack/awseb-*",
            "arn:aws:cloudformation:*:*:stack/eb-*"
          ]
        },
        {
          "Sid": "AllowOperations",
          "Effect": "Allow",
          "Action": [
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribeAutoScalingInstances",
            "autoscaling:DescribeNotificationConfigurations",
            "autoscaling:DescribeScalingActivities",
            "autoscaling:PutNotificationConfiguration",
            "ec2:DescribeInstanceStatus",
            "ec2:AssociateAddress",
            "ec2:DescribeAddresses",
            "ec2:DescribeInstances",
            "ec2:DescribeSecurityGroups",
            "elasticloadbalancing:DescribeInstanceHealth",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTargetHealth",
            "elasticloadbalancing:DescribeTargetGroups",
            "lambda:GetFunction",
            "sqs:GetQueueAttributes",
            "sqs:GetQueueUrl",
            "sns:Publish"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "AllowOperationsOnHealthStreamingLogs",
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:DeleteLogGroup",
            "logs:PutLogEvents"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/*"
        }
      ]
    },
    "VersionId": "v6",
    "IsDefaultVersion": true,
    "CreateDate": "2019-06-06T21:59:51+00:00"
  },
  "AWSElasticBeanstalkWebTier": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "BucketAccess",
          "Action": [
            "s3:Get*",
            "s3:List*",
            "s3:PutObject"
          ],
          "Effect": "Allow",
          "Resource": [
            "arn:aws:s3:::elasticbeanstalk-*",
            "arn:aws:s3:::elasticbeanstalk-*/*"
          ]
        },
        {
          "Sid": "XRayAccess",
          "Action": [
            "xray:PutTraceSegments",
            "xray:PutTelemetryRecords",
            "xray:GetSamplingRules",
            "xray:GetSamplingTargets",
            "xray:GetSamplingStatisticSummaries"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Sid": "CloudWatchLogsAccess",
          "Action": [
            "logs:PutLogEvents",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:DescribeLogGroups"
          ],
          "Effect": "Allow",
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk*"
          ]
        },
        {
          "Sid": "ElasticBeanstalkHealthAccess",
          "Action": [
            "elasticbeanstalk:PutInstanceStatistics"
          ],
          "Effect": "Allow",
          "Resource": [
            "arn:aws:elasticbeanstalk:*:*:application/*",
            "arn:aws:elasticbeanstalk:*:*:environment/*"
          ]
        }
      ]
    },
    "VersionId": "v7",
    "IsDefaultVersion": true,
    "CreateDate": "2020-09-09T19:38:36+00:00"
  },
  "AWSElasticBeanstalkWorkerTier": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "MetricsAccess",
          "Action": [
            "cloudwatch:PutMetricData"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Sid": "XRayAccess",
          "Action": [
            "xray:PutTraceSegments",
            "xray:PutTelemetryRecords",
            "xray:GetSamplingRules",
            "xray:GetSamplingTargets",
            "xray:GetSamplingStatisticSummaries"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Sid": "QueueAccess",
          "Action": [
            "sqs:ChangeMessageVisibility",
            "sqs:DeleteMessage",
            "sqs:ReceiveMessage",
            "sqs:SendMessage"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Sid": "BucketAccess",
          "Action": [
            "s3:Get*",
            "s3:List*",
            "s3:PutObject"
          ],
          "Effect": "Allow",
          "Resource": [
            "arn:aws:s3:::elasticbeanstalk-*",
            "arn:aws:s3:::elasticbeanstalk-*/*"
          ]
        },
        {
          "Sid": "DynamoPeriodicTasks",
          "Action": [
            "dynamodb:BatchGetItem",
            "dynamodb:BatchWriteItem",
            "dynamodb:DeleteItem",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:UpdateItem"
          ],
          "Effect": "Allow",
          "Resource": [
            "arn:aws:dynamodb:*:*:table/*-stack-AWSEBWorkerCronLeaderRegistry*"
          ]
        },
        {
          "Sid": "CloudWatchLogsAccess",
          "Action": [
            "logs:PutLogEvents",
            "logs:CreateLogStream"
          ],
          "Effect": "Allow",
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk*"
          ]
        },
        {
          "Sid": "ElasticBeanstalkHealthAccess",
          "Action": [
            "elasticbeanstalk:PutInstanceStatistics"
          ],
          "Effect": "Allow",
          "Resource": [
            "arn:aws:elasticbeanstalk:*:*:application/*",
            "arn:aws:elasticbeanstalk:*:*:environment/*"
          ]
        }
      ]
    },
    "VersionId": "v6",
    "IsDefaultVersion": true,
    "CreateDate": "2020-09-09T19:53:40+00:00"
  },
  "AWSElasticDisasterRecoveryAgentInstallationPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "drs:GetAgentInstallationAssetsForDrs",
            "drs:SendClientLogsForDrs",
            "drs:SendClientMetricsForDrs",
            "drs:CreateSourceServerForDrs",
            "drs:CreateRecoveryInstanceForDrs",
            "drs:DescribeRecoveryInstances",
            "drs:CreateSourceNetwork"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "drs:TagResource",
          "Resource": "arn:aws:drs:*:*:source-server/*",
          "Condition": {
            "StringEquals": {
              "drs:CreateAction": "CreateSourceServerForDrs"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "drs:TagResource",
          "Resource": "arn:aws:drs:*:*:source-server/*",
          "Condition": {
            "StringEquals": {
              "drs:CreateAction": "CreateRecoveryInstanceForDrs"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "drs:TagResource",
          "Resource": "arn:aws:drs:*:*:source-network/*",
          "Condition": {
            "StringEquals": {
              "drs:CreateAction": "CreateSourceNetwork"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "drs:IssueAgentCertificateForDrs",
          "Resource": "arn:aws:drs:*:*:source-server/*"
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2023-10-25T08:11:51+00:00"
  },
  "AWSElasticDisasterRecoveryAgentPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "drs:SendAgentMetricsForDrs",
            "drs:SendAgentLogsForDrs",
            "drs:UpdateAgentSourcePropertiesForDrs",
            "drs:UpdateAgentReplicationInfoForDrs",
            "drs:UpdateAgentConversionInfoForDrs",
            "drs:GetAgentCommandForDrs",
            "drs:GetAgentConfirmedResumeInfoForDrs",
            "drs:GetAgentRuntimeConfigurationForDrs",
            "drs:UpdateAgentBacklogForDrs",
            "drs:GetAgentReplicationInfoForDrs",
            "drs:IssueAgentCertificateForDrs"
          ],
          "Resource": "arn:aws:drs:*:*:source-server/${aws:SourceIdentity}"
        },
        {
          "Effect": "Allow",
          "Action": [
            "drs:GetAgentInstallationAssetsForDrs"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-27T13:47:48+00:00"
  },
  "AWSElasticDisasterRecoveryConsoleFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "ConsoleFullAccess1",
          "Effect": "Allow",
          "Action": [
            "drs:*"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ConsoleFullAccess2",
          "Effect": "Allow",
          "Action": [
            "kms:ListAliases",
            "kms:DescribeKey"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ConsoleFullAccess3",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeImages",
            "ec2:DescribeInstances",
            "ec2:DescribeInstanceTypes",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstanceTypeOfferings",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSubnets",
            "ec2:DescribeVolumes",
            "ec2:GetEbsEncryptionByDefault",
            "ec2:GetEbsDefaultKmsKeyId",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeCapacityReservations",
            "ec2:DescribeHosts"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ConsoleFullAccess4",
          "Effect": "Allow",
          "Action": "license-manager:ListLicenseConfigurations",
          "Resource": "*"
        },
        {
          "Sid": "ConsoleFullAccess5",
          "Effect": "Allow",
          "Action": "resource-groups:ListGroups",
          "Resource": "*"
        },
        {
          "Sid": "ConsoleFullAccess6",
          "Effect": "Allow",
          "Action": "elasticloadbalancing:DescribeLoadBalancers",
          "Resource": "*"
        },
        {
          "Sid": "ConsoleFullAccess7",
          "Effect": "Allow",
          "Action": [
            "iam:ListInstanceProfiles",
            "iam:ListRoles"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ConsoleFullAccess8",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": [
            "arn:aws:iam::*:role/service-role/AWSElasticDisasterRecoveryConversionServerRole",
            "arn:aws:iam::*:role/service-role/AWSElasticDisasterRecoveryRecoveryInstanceRole"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "ec2.amazonaws.com"
            }
          }
        },
        {
          "Sid": "ConsoleFullAccess9",
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteSnapshot"
          ],
          "Resource": "arn:aws:ec2:*:*:snapshot/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
            },
            "Bool": {
              "aws:ViaAWSService": "true"
            }
          }
        },
        {
          "Sid": "ConsoleFullAccess10",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateLaunchTemplateVersion",
            "ec2:ModifyLaunchTemplate",
            "ec2:DeleteLaunchTemplateVersions",
            "ec2:CreateTags",
            "ec2:DeleteTags"
          ],
          "Resource": "arn:aws:ec2:*:*:launch-template/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
            }
          }
        },
        {
          "Sid": "ConsoleFullAccess11",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateLaunchTemplate"
          ],
          "Resource": "arn:aws:ec2:*:*:launch-template/*",
          "Condition": {
            "Null": {
              "aws:RequestTag/AWSElasticDisasterRecoveryManaged": "false"
            }
          }
        },
        {
          "Sid": "ConsoleFullAccess12",
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteVolume"
          ],
          "Resource": "arn:aws:ec2:*:*:volume/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
            },
            "Bool": {
              "aws:ViaAWSService": "true"
            }
          }
        },
        {
          "Sid": "ConsoleFullAccess13",
          "Effect": "Allow",
          "Action": [
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances",
            "ec2:ModifyInstanceAttribute",
            "ec2:GetConsoleOutput",
            "ec2:GetConsoleScreenshot"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
            },
            "Bool": {
              "aws:ViaAWSService": "true"
            }
          }
        },
        {
          "Sid": "ConsoleFullAccess14",
          "Effect": "Allow",
          "Action": [
            "ec2:RevokeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:AuthorizeSecurityGroupEgress"
          ],
          "Resource": "arn:aws:ec2:*:*:security-group/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
            },
            "Bool": {
              "aws:ViaAWSService": "true"
            }
          }
        },
        {
          "Sid": "ConsoleFullAccess15",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateVolume"
          ],
          "Resource": "arn:aws:ec2:*:*:volume/*",
          "Condition": {
            "Null": {
              "aws:RequestTag/AWSElasticDisasterRecoveryManaged": "false"
            },
            "Bool": {
              "aws:ViaAWSService": "true"
            }
          }
        },
        {
          "Sid": "ConsoleFullAccess16",
          "Effect": "Allow",
          "Action": "ec2:CreateSecurityGroup",
          "Resource": "arn:aws:ec2:*:*:vpc/*"
        },
        {
          "Sid": "ConsoleFullAccess17",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSecurityGroup"
          ],
          "Resource": "arn:aws:ec2:*:*:security-group/*",
          "Condition": {
            "Null": {
              "aws:RequestTag/AWSElasticDisasterRecoveryManaged": "false"
            },
            "Bool": {
              "aws:ViaAWSService": "true"
            }
          }
        },
        {
          "Sid": "ConsoleFullAccess18",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSnapshot"
          ],
          "Resource": "arn:aws:ec2:*:*:volume/*",
          "Condition": {
            "Null": {
              "ec2:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
            },
            "Bool": {
              "aws:ViaAWSService": "true"
            }
          }
        },
        {
          "Sid": "ConsoleFullAccess19",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSnapshot"
          ],
          "Resource": "arn:aws:ec2:*:*:snapshot/*",
          "Condition": {
            "Null": {
              "aws:RequestTag/AWSElasticDisasterRecoveryManaged": "false"
            },
            "Bool": {
              "aws:ViaAWSService": "true"
            }
          }
        },
        {
          "Sid": "ConsoleFullAccess20",
          "Effect": "Allow",
          "Action": [
            "ec2:DetachVolume",
            "ec2:AttachVolume"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "Null": {
              "ec2:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
            },
            "Bool": {
              "aws:ViaAWSService": "true"
            }
          }
        },
        {
          "Sid": "ConsoleFullAccess21",
          "Effect": "Allow",
          "Action": [
            "ec2:DetachVolume",
            "ec2:AttachVolume",
            "ec2:StartInstances",
            "ec2:GetConsoleOutput",
            "ec2:GetConsoleScreenshot"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "StringEquals": {
              "ec2:ResourceTag/AWSDRS": "AllowLaunchingIntoThisInstance"
            },
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "drs.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "ConsoleFullAccess22",
          "Effect": "Allow",
          "Action": [
            "ec2:AttachVolume"
          ],
          "Resource": "arn:aws:ec2:*:*:volume/*",
          "Condition": {
            "Null": {
              "ec2:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
            },
            "Bool": {
              "aws:ViaAWSService": "true"
            }
          }
        },
        {
          "Sid": "ConsoleFullAccess23",
          "Effect": "Allow",
          "Action": [
            "ec2:DetachVolume"
          ],
          "Resource": "arn:aws:ec2:*:*:volume/*",
          "Condition": {
            "Bool": {
              "aws:ViaAWSService": "true"
            }
          }
        },
        {
          "Sid": "ConsoleFullAccess24",
          "Effect": "Allow",
          "Action": [
            "ec2:RunInstances"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "Null": {
              "aws:RequestTag/AWSElasticDisasterRecoveryManaged": "false"
            },
            "Bool": {
              "aws:ViaAWSService": "true"
            }
          }
        },
        {
          "Sid": "ConsoleFullAccess25",
          "Effect": "Allow",
          "Action": [
            "ec2:RunInstances"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:volume/*",
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:image/*",
            "arn:aws:ec2:*:*:network-interface/*",
            "arn:aws:ec2:*:*:launch-template/*"
          ],
          "Condition": {
            "Bool": {
              "aws:ViaAWSService": "true"
            }
          }
        },
        {
          "Sid": "ConsoleFullAccess26",
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": [
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:volume/*",
            "arn:aws:ec2:*:*:snapshot/*",
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": [
                "CreateSecurityGroup",
                "CreateVolume",
                "CreateSnapshot",
                "RunInstances"
              ]
            },
            "Bool": {
              "aws:ViaAWSService": "true"
            }
          }
        },
        {
          "Sid": "ConsoleFullAccess27",
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": "arn:aws:ec2:*:*:launch-template/*",
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": [
                "CreateLaunchTemplate"
              ]
            }
          }
        },
        {
          "Sid": "ConsoleFullAccess28",
          "Effect": "Allow",
          "Action": [
            "cloudformation:DescribeStacks",
            "cloudformation:ListStacks"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ConsoleFullAccess29",
          "Effect": "Allow",
          "Action": [
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2023-10-16T12:24:20+00:00"
  },
  "AWSElasticDisasterRecoveryConversionServerPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "drs:SendClientMetricsForDrs",
            "drs:SendClientLogsForDrs"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "drs:GetChannelCommandsForDrs",
            "drs:SendChannelCommandResultForDrs"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-11-17T13:42:23+00:00"
  },
  "AWSElasticDisasterRecoveryCrossAccountReplicationPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeVolumes",
            "ec2:DescribeInstances",
            "drs:DescribeSourceServers",
            "drs:DescribeReplicationConfigurationTemplates",
            "drs:CreateSourceServerForDrs"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "drs:TagResource"
          ],
          "Resource": "arn:aws:drs:*:*:source-server/*",
          "Condition": {
            "StringEquals": {
              "drs:CreateAction": "CreateSourceServerForDrs"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-05-14T07:16:47+00:00"
  },
  "AWSElasticDisasterRecoveryEc2InstancePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "drs:GetAgentInstallationAssetsForDrs",
            "drs:SendClientLogsForDrs",
            "drs:SendClientMetricsForDrs",
            "drs:CreateSourceServerForDrs",
            "drs:CreateSourceNetwork"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "drs:TagResource"
          ],
          "Resource": "arn:aws:drs:*:*:source-server/*",
          "Condition": {
            "StringEquals": {
              "drs:CreateAction": "CreateSourceServerForDrs"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "drs:TagResource"
          ],
          "Resource": "arn:aws:drs:*:*:source-network/*",
          "Condition": {
            "StringEquals": {
              "drs:CreateAction": "CreateSourceNetwork"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "drs:SendAgentMetricsForDrs",
            "drs:SendAgentLogsForDrs",
            "drs:UpdateAgentSourcePropertiesForDrs",
            "drs:UpdateAgentReplicationInfoForDrs",
            "drs:UpdateAgentConversionInfoForDrs",
            "drs:GetAgentCommandForDrs",
            "drs:GetAgentConfirmedResumeInfoForDrs",
            "drs:GetAgentRuntimeConfigurationForDrs",
            "drs:UpdateAgentBacklogForDrs",
            "drs:GetAgentReplicationInfoForDrs"
          ],
          "Resource": "arn:aws:drs:*:*:source-server/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sts:AssumeRole",
            "sts:TagSession"
          ],
          "Resource": [
            "arn:aws:iam::*:role/service-role/DRSCrossAccountAgentAuthorizedRole_*"
          ],
          "Condition": {
            "StringLike": {
              "aws:RequestTag/SourceInstanceARN": "${ec2:SourceInstanceARN}"
            },
            "ForAnyValue:StringEquals": {
              "sts:TransitiveTagKeys": "SourceInstanceARN"
            }
          }
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2023-10-25T08:19:46+00:00"
  },
  "AWSElasticDisasterRecoveryFailbackInstallationPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "drs:SendClientLogsForDrs",
            "drs:SendClientMetricsForDrs",
            "drs:DescribeRecoveryInstances",
            "drs:DescribeSourceServers"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "drs:TagResource",
            "drs:IssueAgentCertificateForDrs",
            "drs:AssociateFailbackClientToRecoveryInstanceForDrs",
            "drs:GetSuggestedFailbackClientDeviceMappingForDrs",
            "drs:UpdateAgentReplicationInfoForDrs",
            "drs:UpdateFailbackClientDeviceMappingForDrs"
          ],
          "Resource": "arn:aws:drs:*:*:recovery-instance/*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-06-27T09:13:40+00:00"
  },
  "AWSElasticDisasterRecoveryFailbackPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "drs:SendClientMetricsForDrs",
            "drs:SendClientLogsForDrs"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "drs:GetChannelCommandsForDrs",
            "drs:SendChannelCommandResultForDrs"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "drs:DescribeReplicationServerAssociationsForDrs",
            "drs:DescribeRecoveryInstances"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "drs:GetFailbackCommandForDrs",
            "drs:UpdateFailbackClientLastSeenForDrs",
            "drs:NotifyAgentAuthenticationForDrs",
            "drs:UpdateAgentReplicationProcessStateForDrs",
            "drs:NotifyAgentReplicationProgressForDrs",
            "drs:NotifyAgentConnectedForDrs",
            "drs:NotifyAgentDisconnectedForDrs",
            "drs:NotifyConsistencyAttainedForDrs",
            "drs:GetFailbackLaunchRequestedForDrs",
            "drs:IssueAgentCertificateForDrs"
          ],
          "Resource": "arn:aws:drs:*:*:recovery-instance/${aws:SourceIdentity}"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-11-17T10:41:40+00:00"
  },
  "AWSElasticDisasterRecoveryLaunchActionsPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "LaunchActionsPolicy1",
          "Effect": "Allow",
          "Action": [
            "ssm:DescribeInstanceInformation"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "drs.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "LaunchActionsPolicy2",
          "Effect": "Allow",
          "Action": [
            "ssm:SendCommand",
            "ssm:StartAutomationExecution"
          ],
          "Resource": [
            "arn:aws:ssm:*:*:document/*",
            "arn:aws:ssm:*:*:automation-definition/*:*"
          ],
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "drs.amazonaws.com"
              ]
            },
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        },
        {
          "Sid": "LaunchActionsPolicy3",
          "Effect": "Allow",
          "Action": [
            "ssm:SendCommand",
            "ssm:StartAutomationExecution"
          ],
          "Resource": [
            "arn:aws:ssm:*::document/AWS-*",
            "arn:aws:ssm:*::document/AWSCodeDeployAgent-*",
            "arn:aws:ssm:*::document/AWSConfigRemediation-*",
            "arn:aws:ssm:*::document/AWSConformancePacks-*",
            "arn:aws:ssm:*::document/AWSDisasterRecovery-*",
            "arn:aws:ssm:*::document/AWSDistroOTel-*",
            "arn:aws:ssm:*::document/AWSDocs-*",
            "arn:aws:ssm:*::document/AWSEC2-*",
            "arn:aws:ssm:*::document/AWSEC2Launch-*",
            "arn:aws:ssm:*::document/AWSFIS-*",
            "arn:aws:ssm:*::document/AWSFleetManager-*",
            "arn:aws:ssm:*::document/AWSIncidents-*",
            "arn:aws:ssm:*::document/AWSKinesisTap-*",
            "arn:aws:ssm:*::document/AWSMigration-*",
            "arn:aws:ssm:*::document/AWSNVMe-*",
            "arn:aws:ssm:*::document/AWSNitroEnclavesWindows-*",
            "arn:aws:ssm:*::document/AWSObservabilityExporter-*",
            "arn:aws:ssm:*::document/AWSPVDriver-*",
            "arn:aws:ssm:*::document/AWSQuickSetupType-*",
            "arn:aws:ssm:*::document/AWSQuickStarts-*",
            "arn:aws:ssm:*::document/AWSRefactorSpaces-*",
            "arn:aws:ssm:*::document/AWSResilienceHub-*",
            "arn:aws:ssm:*::document/AWSSAP-*",
            "arn:aws:ssm:*::document/AWSSAPTools-*",
            "arn:aws:ssm:*::document/AWSSQLServer-*",
            "arn:aws:ssm:*::document/AWSSSO-*",
            "arn:aws:ssm:*::document/AWSSupport-*",
            "arn:aws:ssm:*::document/AWSSystemsManagerSAP-*",
            "arn:aws:ssm:*::document/AmazonCloudWatch-*",
            "arn:aws:ssm:*::document/AmazonCloudWatchAgent-*",
            "arn:aws:ssm:*::document/AmazonECS-*",
            "arn:aws:ssm:*::document/AmazonEFSUtils-*",
            "arn:aws:ssm:*::document/AmazonEKS-*",
            "arn:aws:ssm:*::document/AmazonInspector-*",
            "arn:aws:ssm:*::document/AmazonInspector2-*",
            "arn:aws:ssm:*::document/AmazonInternal-*",
            "arn:aws:ssm:*::document/AwsEnaNetworkDriver-*",
            "arn:aws:ssm:*::document/AwsVssComponents-*",
            "arn:aws:ssm:*::automation-definition/AWS-*:*",
            "arn:aws:ssm:*::automation-definition/AWSCodeDeployAgent-*:*",
            "arn:aws:ssm:*::automation-definition/AWSConfigRemediation-*:*",
            "arn:aws:ssm:*::automation-definition/AWSConformancePacks-*:*",
            "arn:aws:ssm:*::automation-definition/AWSDisasterRecovery-*:*",
            "arn:aws:ssm:*::automation-definition/AWSDistroOTel-*:*",
            "arn:aws:ssm:*::automation-definition/AWSDocs-*:*",
            "arn:aws:ssm:*::automation-definition/AWSEC2-*:*",
            "arn:aws:ssm:*::automation-definition/AWSEC2Launch-*:*",
            "arn:aws:ssm:*::automation-definition/AWSFIS-*:*",
            "arn:aws:ssm:*::automation-definition/AWSFleetManager-*:*",
            "arn:aws:ssm:*::automation-definition/AWSIncidents-*:*",
            "arn:aws:ssm:*::automation-definition/AWSKinesisTap-*:*",
            "arn:aws:ssm:*::automation-definition/AWSMigration-*:*",
            "arn:aws:ssm:*::automation-definition/AWSNVMe-*:*",
            "arn:aws:ssm:*::automation-definition/AWSNitroEnclavesWindows-*:*",
            "arn:aws:ssm:*::automation-definition/AWSObservabilityExporter-*:*",
            "arn:aws:ssm:*::automation-definition/AWSPVDriver-*:*",
            "arn:aws:ssm:*::automation-definition/AWSQuickSetupType-*:*",
            "arn:aws:ssm:*::automation-definition/AWSQuickStarts-*:*",
            "arn:aws:ssm:*::automation-definition/AWSRefactorSpaces-*:*",
            "arn:aws:ssm:*::automation-definition/AWSResilienceHub-*:*",
            "arn:aws:ssm:*::automation-definition/AWSSAP-*:*",
            "arn:aws:ssm:*::automation-definition/AWSSAPTools-*:*",
            "arn:aws:ssm:*::automation-definition/AWSSQLServer-*:*",
            "arn:aws:ssm:*::automation-definition/AWSSSO-*:*",
            "arn:aws:ssm:*::automation-definition/AWSSupport-*:*",
            "arn:aws:ssm:*::automation-definition/AWSSystemsManagerSAP-*:*",
            "arn:aws:ssm:*::automation-definition/AmazonCloudWatch-*:*",
            "arn:aws:ssm:*::automation-definition/AmazonCloudWatchAgent-*:*",
            "arn:aws:ssm:*::automation-definition/AmazonECS-*:*",
            "arn:aws:ssm:*::automation-definition/AmazonEFSUtils-*:*",
            "arn:aws:ssm:*::automation-definition/AmazonEKS-*:*",
            "arn:aws:ssm:*::automation-definition/AmazonInspector-*:*",
            "arn:aws:ssm:*::automation-definition/AmazonInspector2-*:*",
            "arn:aws:ssm:*::automation-definition/AmazonInternal-*:*",
            "arn:aws:ssm:*::automation-definition/AwsEnaNetworkDriver-*:*",
            "arn:aws:ssm:*::automation-definition/AwsVssComponents-*:*"
          ],
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "drs.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "LaunchActionsPolicy4",
          "Effect": "Allow",
          "Action": [
            "ssm:SendCommand"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "drs.amazonaws.com"
              ]
            },
            "Null": {
              "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
            }
          }
        },
        {
          "Sid": "LaunchActionsPolicy5",
          "Effect": "Allow",
          "Action": [
            "ssm:SendCommand"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/AWSDRS": "AllowLaunchingIntoThisInstance"
            },
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "drs.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "LaunchActionsPolicy6",
          "Effect": "Allow",
          "Action": [
            "ssm:ListDocuments",
            "ssm:ListCommandInvocations"
          ],
          "Resource": "*"
        },
        {
          "Sid": "LaunchActionsPolicy7",
          "Effect": "Allow",
          "Action": [
            "ssm:ListDocumentVersions",
            "ssm:GetDocument",
            "ssm:DescribeDocument"
          ],
          "Resource": "arn:aws:ssm:*:*:document/*"
        },
        {
          "Sid": "LaunchActionsPolicy8",
          "Effect": "Allow",
          "Action": [
            "ssm:GetAutomationExecution"
          ],
          "Resource": "arn:aws:ssm:*:*:automation-execution/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
            }
          }
        },
        {
          "Sid": "LaunchActionsPolicy9",
          "Effect": "Allow",
          "Action": [
            "ssm:GetParameters"
          ],
          "Resource": "arn:aws:ssm:*:*:parameter/ManagedByAWSElasticDisasterRecoveryService-*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "ssm.amazonaws.com"
            }
          }
        },
        {
          "Sid": "LaunchActionsPolicy10",
          "Effect": "Allow",
          "Action": [
            "ssm:GetParameter",
            "ssm:PutParameter"
          ],
          "Resource": "arn:aws:ssm:*:*:parameter/ManagedByAWSElasticDisasterRecoveryService-*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        },
        {
          "Sid": "LaunchActionsPolicy11",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": [
            "arn:aws:iam::*:role/service-role/AWSElasticDisasterRecoveryRecoveryInstanceWithLaunchActionsRole"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "ec2.amazonaws.com"
            },
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "drs.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-10-16T12:28:44+00:00"
  },
  "AWSElasticDisasterRecoveryNetworkReplicationPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeVpcs",
            "ec2:DescribeSubnets",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeRouteTables",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeInstances"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-06-11T12:36:48+00:00"
  },
  "AWSElasticDisasterRecoveryReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "drs:DescribeJobLogItems",
            "drs:DescribeJobs",
            "drs:DescribeRecoveryInstances",
            "drs:DescribeRecoverySnapshots",
            "drs:DescribeReplicationConfigurationTemplates",
            "drs:DescribeSourceServers",
            "drs:GetFailbackReplicationConfiguration",
            "drs:GetLaunchConfiguration",
            "drs:GetReplicationConfiguration",
            "drs:ListExtensibleSourceServers",
            "drs:ListStagingAccounts",
            "drs:ListTagsForResource",
            "drs:ListLaunchActions"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstances",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:ListRoles",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "ssm:ListCommandInvocations",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "ssm:GetParameter",
          "Resource": "arn:aws:ssm:*:*:parameter/ManagedByAWSElasticDisasterRecovery-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:DescribeDocument",
            "ssm:GetDocument"
          ],
          "Resource": [
            "arn:aws:ssm:*:*:document/AWS-CreateImage",
            "arn:aws:ssm:*:*:document/AWSMigration-LinuxTimeSyncSetting",
            "arn:aws:ssm:*:*:document/AWSEC2-ApplicationInsightsCloudwatchAgentInstallAndConfigure"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:GetAutomationExecution"
          ],
          "Resource": "arn:aws:ssm:*:*:automation-execution/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
            }
          }
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-09-13T07:42:45+00:00"
  },
  "AWSElasticDisasterRecoveryRecoveryInstancePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "drs:SendAgentMetricsForDrs",
            "drs:SendAgentLogsForDrs",
            "drs:UpdateAgentSourcePropertiesForDrs",
            "drs:UpdateAgentReplicationInfoForDrs",
            "drs:UpdateAgentConversionInfoForDrs",
            "drs:GetAgentCommandForDrs",
            "drs:GetAgentConfirmedResumeInfoForDrs",
            "drs:GetAgentRuntimeConfigurationForDrs",
            "drs:UpdateAgentBacklogForDrs",
            "drs:GetAgentReplicationInfoForDrs",
            "drs:UpdateReplicationCertificateForDrs",
            "drs:NotifyReplicationServerAuthenticationForDrs"
          ],
          "Resource": "arn:aws:drs:*:*:recovery-instance/*",
          "Condition": {
            "StringEquals": {
              "drs:EC2InstanceARN": "${ec2:SourceInstanceARN}"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "drs:DescribeRecoveryInstances"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstanceTypes"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "drs:GetAgentInstallationAssetsForDrs",
            "drs:SendClientLogsForDrs",
            "drs:CreateSourceServerForDrs"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "drs:TagResource"
          ],
          "Resource": "arn:aws:drs:*:*:source-server/*",
          "Condition": {
            "StringEquals": {
              "drs:CreateAction": "CreateSourceServerForDrs"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "drs:SendAgentMetricsForDrs",
            "drs:SendAgentLogsForDrs",
            "drs:UpdateAgentSourcePropertiesForDrs",
            "drs:UpdateAgentReplicationInfoForDrs",
            "drs:UpdateAgentConversionInfoForDrs",
            "drs:GetAgentCommandForDrs",
            "drs:GetAgentConfirmedResumeInfoForDrs",
            "drs:GetAgentRuntimeConfigurationForDrs",
            "drs:UpdateAgentBacklogForDrs",
            "drs:GetAgentReplicationInfoForDrs"
          ],
          "Resource": "arn:aws:drs:*:*:source-server/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sts:AssumeRole",
            "sts:TagSession"
          ],
          "Resource": [
            "arn:aws:iam::*:role/service-role/DRSCrossAccountAgentAuthorizedRole_*"
          ],
          "Condition": {
            "StringLike": {
              "aws:RequestTag/SourceInstanceARN": "${ec2:SourceInstanceARN}"
            },
            "ForAnyValue:StringEquals": {
              "sts:TransitiveTagKeys": "SourceInstanceARN"
            }
          }
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-05-14T07:32:48+00:00"
  },
  "AWSElasticDisasterRecoveryReplicationServerPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "drs:SendClientMetricsForDrs",
            "drs:SendClientLogsForDrs"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "drs:GetChannelCommandsForDrs",
            "drs:SendChannelCommandResultForDrs"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "drs:GetAgentSnapshotCreditsForDrs",
            "drs:DescribeReplicationServerAssociationsForDrs",
            "drs:DescribeSnapshotRequestsForDrs",
            "drs:BatchDeleteSnapshotRequestForDrs",
            "drs:NotifyAgentAuthenticationForDrs",
            "drs:BatchCreateVolumeSnapshotGroupForDrs",
            "drs:UpdateAgentReplicationProcessStateForDrs",
            "drs:NotifyAgentReplicationProgressForDrs",
            "drs:NotifyAgentConnectedForDrs",
            "drs:NotifyAgentDisconnectedForDrs",
            "drs:NotifyVolumeEventForDrs",
            "drs:SendVolumeStatsForDrs"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstances",
            "ec2:DescribeSnapshots"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSnapshot"
          ],
          "Resource": "arn:aws:ec2:*:*:volume/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSnapshot"
          ],
          "Resource": "arn:aws:ec2:*:*:snapshot/*",
          "Condition": {
            "Null": {
              "aws:RequestTag/AWSElasticDisasterRecoveryManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "CreateSnapshot"
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-07-10T12:34:15+00:00"
  },
  "AWSElasticDisasterRecoveryServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "drs:ListTagsForResource"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "drs:TagResource"
          ],
          "Resource": "arn:aws:drs:*:*:recovery-instance/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "drs:CreateRecoveryInstanceForDrs",
            "drs:TagResource"
          ],
          "Resource": "arn:aws:drs:*:*:source-server/*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:GetInstanceProfile",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "kms:ListRetirableGrants",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeImages",
            "ec2:DescribeInstances",
            "ec2:DescribeInstanceTypes",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSubnets",
            "ec2:DescribeVolumes",
            "ec2:GetEbsDefaultKmsKeyId",
            "ec2:GetEbsEncryptionByDefault",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeVpcs",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeRouteTables",
            "ec2:DescribeDhcpOptions"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:RegisterImage"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeregisterImage"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteSnapshot"
          ],
          "Resource": "arn:aws:ec2:*:*:snapshot/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateLaunchTemplateVersion",
            "ec2:ModifyLaunchTemplate",
            "ec2:DeleteLaunchTemplate",
            "ec2:DeleteLaunchTemplateVersions"
          ],
          "Resource": "arn:aws:ec2:*:*:launch-template/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteVolume",
            "ec2:ModifyVolume"
          ],
          "Resource": "arn:aws:ec2:*:*:volume/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances",
            "ec2:ModifyInstanceAttribute",
            "ec2:GetConsoleOutput",
            "ec2:GetConsoleScreenshot"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:RevokeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:AuthorizeSecurityGroupEgress"
          ],
          "Resource": "arn:aws:ec2:*:*:security-group/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateVolume"
          ],
          "Resource": "arn:aws:ec2:*:*:volume/*",
          "Condition": {
            "Null": {
              "aws:RequestTag/AWSElasticDisasterRecoveryManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSecurityGroup"
          ],
          "Resource": "arn:aws:ec2:*:*:security-group/*",
          "Condition": {
            "Null": {
              "aws:RequestTag/AWSElasticDisasterRecoveryManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSecurityGroup"
          ],
          "Resource": "arn:aws:ec2:*:*:vpc/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateLaunchTemplate"
          ],
          "Resource": "arn:aws:ec2:*:*:launch-template/*",
          "Condition": {
            "Null": {
              "aws:RequestTag/AWSElasticDisasterRecoveryManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSnapshot"
          ],
          "Resource": "arn:aws:ec2:*:*:volume/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSnapshot"
          ],
          "Resource": "arn:aws:ec2:*:*:snapshot/*",
          "Condition": {
            "Null": {
              "aws:RequestTag/AWSElasticDisasterRecoveryManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DetachVolume",
            "ec2:AttachVolume"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AttachVolume"
          ],
          "Resource": "arn:aws:ec2:*:*:volume/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DetachVolume"
          ],
          "Resource": "arn:aws:ec2:*:*:volume/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:RunInstances"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "Null": {
              "aws:RequestTag/AWSElasticDisasterRecoveryManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:RunInstances"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:volume/*",
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:image/*",
            "arn:aws:ec2:*:*:network-interface/*",
            "arn:aws:ec2:*:*:launch-template/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": [
            "arn:aws:iam::*:role/service-role/AWSElasticDisasterRecoveryReplicationServerRole",
            "arn:aws:iam::*:role/service-role/AWSElasticDisasterRecoveryConversionServerRole",
            "arn:aws:iam::*:role/service-role/AWSElasticDisasterRecoveryRecoveryInstanceRole"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "ec2.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": [
            "arn:aws:ec2:*:*:launch-template/*",
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:volume/*",
            "arn:aws:ec2:*:*:snapshot/*",
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": [
                "CreateLaunchTemplate",
                "CreateSecurityGroup",
                "CreateVolume",
                "CreateSnapshot",
                "RunInstances"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": [
            "arn:aws:ec2:*:*:image/*"
          ],
          "Condition": {
            "Null": {
              "aws:RequestTag/AWSElasticDisasterRecoveryManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "cloudwatch:GetMetricData",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-06-11T08:33:31+00:00"
  },
  "AWSElasticDisasterRecoveryStagingAccountPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "drs:DescribeSourceServers",
            "drs:DescribeRecoverySnapshots",
            "drs:CreateConvertedSnapshotForDrs",
            "drs:GetReplicationConfiguration",
            "drs:DescribeJobs",
            "drs:DescribeJobLogItems"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:ModifySnapshotAttribute"
          ],
          "Resource": "arn:aws:ec2:*:*:snapshot/*",
          "Condition": {
            "StringEquals": {
              "ec2:Add/userId": "${aws:SourceIdentity}"
            },
            "Null": {
              "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-05-26T09:49:18+00:00"
  },
  "AWSElasticDisasterRecoveryStagingAccountPolicy_v2": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "drs:DescribeSourceServers",
            "drs:DescribeRecoverySnapshots",
            "drs:CreateConvertedSnapshotForDrs",
            "drs:GetReplicationConfiguration",
            "drs:DescribeJobs",
            "drs:DescribeJobLogItems"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:ModifySnapshotAttribute"
          ],
          "Resource": "arn:aws:ec2:*:*:snapshot/*",
          "Condition": {
            "StringEquals": {
              "ec2:Add/userId": "${aws:SourceIdentity}"
            },
            "Null": {
              "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "drs:IssueAgentCertificateForDrs",
          "Resource": [
            "arn:aws:drs:*:*:source-server/*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-01-05T12:11:44+00:00"
  },
  "AWSElasticLoadBalancingClassicServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeAddresses",
            "ec2:DescribeInstances",
            "ec2:DescribeSubnets",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeVpcs",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeClassicLinkInstances",
            "ec2:DescribeVpcClassicLink",
            "ec2:CreateSecurityGroup",
            "ec2:CreateNetworkInterface",
            "ec2:DeleteNetworkInterface",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:AssociateAddress",
            "ec2:DisassociateAddress",
            "ec2:AttachNetworkInterface",
            "ec2:DetachNetworkInterface",
            "ec2:AssignPrivateIpAddresses",
            "ec2:AssignIpv6Addresses",
            "ec2:UnassignIpv6Addresses"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2019-10-07T23:04:27+00:00"
  },
  "AWSElasticLoadBalancingServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeAddresses",
            "ec2:DescribeCoipPools",
            "ec2:DescribeInstances",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSubnets",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeVpcs",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeClassicLinkInstances",
            "ec2:DescribeVpcClassicLink",
            "ec2:CreateSecurityGroup",
            "ec2:CreateNetworkInterface",
            "ec2:DeleteNetworkInterface",
            "ec2:GetCoipPoolUsage",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:AllocateAddress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:AssociateAddress",
            "ec2:DisassociateAddress",
            "ec2:AttachNetworkInterface",
            "ec2:DetachNetworkInterface",
            "ec2:AssignPrivateIpAddresses",
            "ec2:AssignIpv6Addresses",
            "ec2:ReleaseAddress",
            "ec2:UnassignIpv6Addresses",
            "ec2:DescribeVpcPeeringConnections",
            "logs:CreateLogDelivery",
            "logs:GetLogDelivery",
            "logs:UpdateLogDelivery",
            "logs:DeleteLogDelivery",
            "logs:ListLogDeliveries",
            "outposts:GetOutpostInstanceTypes"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v7",
    "IsDefaultVersion": true,
    "CreateDate": "2021-08-26T19:01:48+00:00"
  },
  "AWSElementalMediaConvertFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "mediaconvert:*",
            "s3:ListAllMyBuckets",
            "s3:ListBucket"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": [
                "mediaconvert.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2019-06-10T22:52:25+00:00"
  },
  "AWSElementalMediaConvertReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "mediaconvert:Get*",
            "mediaconvert:List*",
            "mediaconvert:DescribeEndpoints",
            "s3:ListAllMyBuckets",
            "s3:ListBucket"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2019-06-10T22:52:18+00:00"
  },
  "AWSElementalMediaLiveFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": {
        "Effect": "Allow",
        "Action": "medialive:*",
        "Resource": "*"
      }
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-07-08T17:07:14+00:00"
  },
  "AWSElementalMediaLiveReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": {
        "Effect": "Allow",
        "Action": [
          "medialive:List*",
          "medialive:Describe*"
        ],
        "Resource": "*"
      }
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-07-08T16:38:07+00:00"
  },
  "AWSElementalMediaPackageFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": {
        "Effect": "Allow",
        "Action": "mediapackage:*",
        "Resource": "*"
      }
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2017-12-29T23:39:52+00:00"
  },
  "AWSElementalMediaPackageReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": {
        "Effect": "Allow",
        "Action": [
          "mediapackage:List*",
          "mediapackage:Describe*"
        ],
        "Resource": "*"
      }
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2017-12-30T00:04:29+00:00"
  },
  "AWSElementalMediaPackageV2FullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": {
        "Effect": "Allow",
        "Action": "mediapackagev2:*",
        "Resource": "*"
      }
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-07-25T20:29:37+00:00"
  },
  "AWSElementalMediaPackageV2ReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": {
        "Effect": "Allow",
        "Action": [
          "mediapackagev2:List*",
          "mediapackagev2:Get*"
        ],
        "Resource": "*"
      }
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-07-25T20:31:25+00:00"
  },
  "AWSElementalMediaStoreFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "mediastore:*"
          ],
          "Effect": "Allow",
          "Resource": "*",
          "Condition": {
            "Bool": {
              "aws:SecureTransport": "true"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-03-05T23:15:31+00:00"
  },
  "AWSElementalMediaStoreReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "mediastore:Get*",
            "mediastore:List*",
            "mediastore:Describe*"
          ],
          "Effect": "Allow",
          "Resource": "*",
          "Condition": {
            "Bool": {
              "aws:SecureTransport": "true"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-03-08T19:48:22+00:00"
  },
  "AWSElementalMediaTailorFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": {
        "Effect": "Allow",
        "Action": "mediatailor:*",
        "Resource": "*"
      }
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-11-23T00:04:39+00:00"
  },
  "AWSElementalMediaTailorReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": {
        "Effect": "Allow",
        "Action": [
          "mediatailor:List*",
          "mediatailor:Describe*",
          "mediatailor:Get*"
        ],
        "Resource": "*"
      }
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-11-23T00:05:01+00:00"
  },
  "AWSEnhancedClassicNetworkingMangementPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "ec2:DescribeInstances",
            "ec2:DescribeSecurityGroups"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2017-09-20T17:29:09+00:00"
  },
  "AWSEntityResolutionConsoleFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "EntityResolutionAccess",
          "Effect": "Allow",
          "Action": [
            "entityresolution:*"
          ],
          "Resource": "*"
        },
        {
          "Sid": "GlueSourcesConsoleDisplay",
          "Effect": "Allow",
          "Action": [
            "glue:GetSchema",
            "glue:SearchTables",
            "glue:GetSchemaByDefinition",
            "glue:GetSchemaVersion",
            "glue:GetSchemaVersionsDiff",
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:GetTable",
            "glue:GetTables",
            "glue:GetTableVersion",
            "glue:GetTableVersions"
          ],
          "Resource": "*"
        },
        {
          "Sid": "S3BucketsConsoleDisplay",
          "Effect": "Allow",
          "Action": [
            "s3:ListAllMyBuckets"
          ],
          "Resource": "*"
        },
        {
          "Sid": "S3SourcesConsoleDisplay",
          "Effect": "Allow",
          "Action": [
            "s3:ListBucket",
            "s3:GetBucketLocation",
            "s3:ListBucketVersions",
            "s3:GetBucketVersioning"
          ],
          "Resource": "*"
        },
        {
          "Sid": "TaggingConsoleDisplay",
          "Effect": "Allow",
          "Action": [
            "tag:GetTagKeys",
            "tag:GetTagValues"
          ],
          "Resource": "*"
        },
        {
          "Sid": "KMSConsoleDisplay",
          "Effect": "Allow",
          "Action": [
            "kms:DescribeKey",
            "kms:ListAliases"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ListRolesToPickRoleForPassing",
          "Effect": "Allow",
          "Action": [
            "iam:ListRoles"
          ],
          "Resource": "*"
        },
        {
          "Sid": "PassRoleToEntityResolutionService",
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "arn:aws:iam::*:role/*entityresolution*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "entityresolution.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "ManageEventBridgeRules",
          "Effect": "Allow",
          "Action": [
            "events:DeleteRule",
            "events:PutTargets",
            "events:PutRule"
          ],
          "Resource": [
            "arn:aws:events:*:*:rule/entity-resolution-automatic*"
          ]
        },
        {
          "Sid": "ADXReadAccess",
          "Effect": "Allow",
          "Action": [
            "dataexchange:GetDataSet"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-10-16T18:46:10+00:00"
  },
  "AWSEntityResolutionConsoleReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "EntityResolutionRead",
          "Effect": "Allow",
          "Action": [
            "entityresolution:Get*",
            "entityresolution:List*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-08-17T18:18:36+00:00"
  },
  "AWSFMAdminFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "fms:*",
            "waf:*",
            "waf-regional:*",
            "elasticloadbalancing:SetWebACL",
            "firehose:ListDeliveryStreams",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListRoots",
            "organizations:ListChildren",
            "organizations:ListAccounts",
            "organizations:ListAccountsForParent",
            "organizations:ListOrganizationalUnitsForParent",
            "shield:GetSubscriptionState",
            "route53resolver:ListFirewallRuleGroups",
            "route53resolver:GetFirewallRuleGroup",
            "wafv2:ListRuleGroups",
            "wafv2:ListAvailableManagedRuleGroups",
            "wafv2:CheckCapacity",
            "wafv2:PutLoggingConfiguration",
            "wafv2:ListAvailableManagedRuleGroupVersions",
            "network-firewall:DescribeRuleGroup",
            "network-firewall:DescribeRuleGroupMetadata",
            "network-firewall:ListRuleGroups",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeRegions"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:PutBucketPolicy",
            "s3:GetBucketPolicy"
          ],
          "Resource": [
            "arn:aws:s3:::aws-waf-logs-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": [
                "fms.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "organizations:EnableAWSServiceAccess",
            "organizations:ListDelegatedAdministrators",
            "organizations:RegisterDelegatedAdministrator",
            "organizations:DeregisterDelegatedAdministrator"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "organizations:ServicePrincipal": [
                "fms.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-10-20T23:39:06+00:00"
  },
  "AWSFMAdminReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "fms:Get*",
            "fms:List*",
            "waf:Get*",
            "waf:List*",
            "waf-regional:Get*",
            "waf-regional:List*",
            "firehose:ListDeliveryStreams",
            "organizations:DescribeOrganization",
            "organizations:DescribeAccount",
            "organizations:ListRoots",
            "organizations:ListChildren",
            "organizations:ListAccounts",
            "organizations:ListAccountsForParent",
            "organizations:ListOrganizationalUnitsForParent",
            "shield:GetSubscriptionState",
            "route53resolver:ListFirewallRuleGroups",
            "route53resolver:GetFirewallRuleGroup",
            "wafv2:ListRuleGroups",
            "wafv2:ListAvailableManagedRuleGroups",
            "wafv2:CheckCapacity",
            "wafv2:ListAvailableManagedRuleGroupVersions",
            "network-firewall:DescribeRuleGroup",
            "network-firewall:DescribeRuleGroupMetadata",
            "network-firewall:ListRuleGroups",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeRegions"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetBucketPolicy"
          ],
          "Resource": [
            "arn:aws:s3:::aws-waf-logs-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "organizations:ListDelegatedAdministrators"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "organizations:ServicePrincipal": [
                "fms.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-10-31T22:42:13+00:00"
  },
  "AWSFMMemberReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "fms:GetAdminAccount",
            "waf:Get*",
            "waf:List*",
            "waf-regional:Get*",
            "waf-regional:List*",
            "organizations:DescribeOrganization"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-05-09T21:05:29+00:00"
  },
  "AWSFaultInjectionSimulatorEC2Access": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AllowEc2Actions",
          "Effect": "Allow",
          "Action": [
            "ec2:RebootInstances",
            "ec2:SendSpotInstanceInterruptions",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances",
            "ec2:DescribeInstances"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*"
        },
        {
          "Sid": "AllowEc2InstancesWithEncryptedEbsVolumes",
          "Effect": "Allow",
          "Action": [
            "kms:CreateGrant"
          ],
          "Resource": [
            "arn:aws:kms:*:*:key/*"
          ],
          "Condition": {
            "StringLike": {
              "kms:ViaService": "ec2.*.amazonaws.com"
            },
            "Bool": {
              "kms:GrantIsForAWSResource": "true"
            }
          }
        },
        {
          "Sid": "AllowSSMSendOnEc2",
          "Effect": "Allow",
          "Action": [
            "ssm:SendCommand"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*",
            "arn:aws:ssm:*:*:document/*"
          ]
        },
        {
          "Sid": "AllowSSMStopOnEc2",
          "Effect": "Allow",
          "Action": [
            "ssm:CancelCommand",
            "ssm:ListCommands"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-13T16:39:49+00:00"
  },
  "AWSFaultInjectionSimulatorECSAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ecs:DescribeClusters",
            "ecs:ListContainerInstances"
          ],
          "Resource": [
            "arn:aws:ecs:*:*:cluster/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ecs:DescribeTasks",
            "ecs:StopTask"
          ],
          "Resource": [
            "arn:aws:ecs:*:*:task/*/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ecs:ListTasks",
            "ecs:UpdateContainerInstancesState"
          ],
          "Resource": [
            "arn:aws:ecs:*:*:container-instance/*/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "ssm:SendCommand",
          "Resource": [
            "arn:aws:ssm:*:*:managed-instance/*",
            "arn:aws:ssm:*:*:document/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:ListCommands",
            "ssm:CancelCommand"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-06-01T10:48:27+00:00"
  },
  "AWSFaultInjectionSimulatorEKSAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "DescribeInstances",
          "Effect": "Allow",
          "Action": "ec2:DescribeInstances",
          "Resource": "*"
        },
        {
          "Sid": "TerminateInstances",
          "Effect": "Allow",
          "Action": "ec2:TerminateInstances",
          "Resource": "arn:aws:ec2:*:*:instance/*"
        },
        {
          "Sid": "DescribeSubnets",
          "Effect": "Allow",
          "Action": "ec2:DescribeSubnets",
          "Resource": "*"
        },
        {
          "Sid": "DescribeCluster",
          "Effect": "Allow",
          "Action": "eks:DescribeCluster",
          "Resource": "arn:aws:eks:*:*:cluster/*"
        },
        {
          "Sid": "DescribeNodeGroup",
          "Effect": "Allow",
          "Action": "eks:DescribeNodegroup",
          "Resource": "arn:aws:eks:*:*:nodegroup/*"
        },
        {
          "Sid": "TargetResolutionByTags",
          "Effect": "Allow",
          "Action": [
            "tag:GetResources"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-13T16:44:51+00:00"
  },
  "AWSFaultInjectionSimulatorNetworkAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": "arn:aws:ec2:*:*:network-acl/*",
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "CreateNetworkAcl",
              "aws:RequestTag/managedByFIS": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateNetworkAcl",
          "Resource": "arn:aws:ec2:*:*:network-acl/*",
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/managedByFIS": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkAclEntry",
            "ec2:DeleteNetworkAcl"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:network-acl/*",
            "arn:aws:ec2:*:*:vpc/*"
          ],
          "Condition": {
            "StringEquals": {
              "ec2:ResourceTag/managedByFIS": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateNetworkAcl",
          "Resource": "arn:aws:ec2:*:*:vpc/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeVpcs",
            "ec2:DescribeManagedPrefixLists",
            "ec2:DescribeSubnets",
            "ec2:DescribeNetworkAcls"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "ec2:ReplaceNetworkAclAssociation",
          "Resource": [
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:network-acl/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "ec2:GetManagedPrefixListEntries",
          "Resource": "arn:aws:ec2:*:*:prefix-list/*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-10-26T20:32:50+00:00"
  },
  "AWSFaultInjectionSimulatorRDSAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AllowFailover",
          "Effect": "Allow",
          "Action": [
            "rds:FailoverDBCluster"
          ],
          "Resource": [
            "arn:aws:rds:*:*:cluster:*"
          ]
        },
        {
          "Sid": "AllowReboot",
          "Effect": "Allow",
          "Action": [
            "rds:RebootDBInstance"
          ],
          "Resource": [
            "arn:aws:rds:*:*:db:*"
          ]
        },
        {
          "Sid": "DescribeResources",
          "Effect": "Allow",
          "Action": [
            "rds:DescribeDBClusters",
            "rds:DescribeDBInstances"
          ],
          "Resource": "*"
        },
        {
          "Sid": "TargetResolutionByTags",
          "Effect": "Allow",
          "Action": [
            "tag:GetResources"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-13T16:23:29+00:00"
  },
  "AWSFaultInjectionSimulatorSSMAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "ssm.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:StartAutomationExecution"
          ],
          "Resource": [
            "arn:aws:ssm:*:*:automation-definition/*:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:GetAutomationExecution",
            "ssm:StopAutomationExecution"
          ],
          "Resource": [
            "arn:aws:ssm:*:*:automation-execution/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "ssm:SendCommand",
          "Resource": [
            "arn:aws:ec2:*:*:instance/*",
            "arn:aws:ssm:*:*:document/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:ListCommands",
            "ssm:CancelCommand"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-06-02T22:55:18+00:00"
  },
  "AWSFinSpaceServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "cloudwatch:PutMetricData",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": "AWS/FinSpace"
            }
          },
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-05-12T16:42:03+00:00"
  },
  "AWSForWordPressPluginPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "Permissions1",
          "Effect": "Allow",
          "Action": [
            "polly:SynthesizeSpeech",
            "polly:DescribeVoices",
            "translate:TranslateText"
          ],
          "Resource": "*"
        },
        {
          "Sid": "Permissions2",
          "Effect": "Allow",
          "Action": [
            "s3:ListBucket",
            "s3:GetBucketAcl",
            "s3:GetBucketPolicy",
            "s3:PutObject",
            "s3:DeleteObject",
            "s3:CreateBucket",
            "s3:PutObjectAcl"
          ],
          "Resource": [
            "arn:aws:s3:::audio_for_wordpress*",
            "arn:aws:s3:::audio-for-wordpress*"
          ]
        },
        {
          "Sid": "Permissions3",
          "Effect": "Allow",
          "Action": [
            "acm:AddTagsToCertificate",
            "acm:DescribeCertificate",
            "acm:RequestCertificate",
            "cloudformation:CreateStack",
            "cloudfront:ListDistributions"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:RequestedRegion": "us-east-1"
            }
          }
        },
        {
          "Sid": "Permissions4",
          "Effect": "Allow",
          "Action": [
            "acm:DeleteCertificate",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStackResources",
            "cloudformation:UpdateStack",
            "cloudfront:CreateDistribution",
            "cloudfront:CreateInvalidation",
            "cloudfront:DeleteDistribution",
            "cloudfront:GetDistribution",
            "cloudfront:GetInvalidation",
            "cloudfront:TagResource",
            "cloudfront:UpdateDistribution"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/createdBy": "AWSForWordPressPlugin"
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2020-01-20T23:20:47+00:00"
  },
  "AWSGitSyncServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AccessGitRepos",
          "Effect": "Allow",
          "Action": [
            "codestar-connections:UseConnection"
          ],
          "Resource": "arn:aws:codestar-connections:*:*:connection/*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-16T17:05:42+00:00"
  },
  "AWSGlobalAcceleratorSLRPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "EC2Action1",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeSubnets",
            "ec2:DescribeRegions",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeAddresses"
          ],
          "Resource": "*"
        },
        {
          "Sid": "EC2Action2",
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteSecurityGroup",
            "ec2:AssignIpv6Addresses",
            "ec2:UnassignIpv6Addresses"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "ec2:ResourceTag/AWSServiceName": "GlobalAccelerator"
            }
          }
        },
        {
          "Sid": "EC2Action3",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSecurityGroup",
            "ec2:DescribeSecurityGroups"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ElbAction1",
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeTargetGroups"
          ],
          "Resource": "*"
        },
        {
          "Sid": "EC2Action4",
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": [
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:network-interface/*"
          ]
        }
      ]
    },
    "VersionId": "v8",
    "IsDefaultVersion": true,
    "CreateDate": "2023-09-12T16:45:28+00:00"
  },
  "AWSGlueConsoleFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "BaseAppPermissions",
          "Effect": "Allow",
          "Action": [
            "glue:*",
            "redshift:DescribeClusters",
            "redshift:DescribeClusterSubnetGroups",
            "iam:ListRoles",
            "iam:ListUsers",
            "iam:ListGroups",
            "iam:ListRolePolicies",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:ListAttachedRolePolicies",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeRouteTables",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeInstances",
            "ec2:DescribeImages",
            "rds:DescribeDBInstances",
            "rds:DescribeDBClusters",
            "rds:DescribeDBSubnetGroups",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:GetBucketAcl",
            "s3:GetBucketLocation",
            "cloudformation:ListStacks",
            "cloudformation:DescribeStacks",
            "cloudformation:GetTemplateSummary",
            "dynamodb:ListTables",
            "kms:ListAliases",
            "kms:DescribeKey",
            "cloudwatch:GetMetricData",
            "cloudwatch:ListDashboards",
            "databrew:ListRecipes",
            "databrew:ListRecipeVersions",
            "databrew:DescribeRecipe"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:PutObject"
          ],
          "Resource": [
            "arn:aws:s3:::aws-glue-*/*",
            "arn:aws:s3:::*/*aws-glue-*/*",
            "arn:aws:s3:::aws-glue-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "tag:GetResources"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:CreateBucket"
          ],
          "Resource": [
            "arn:aws:s3:::aws-glue-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:GetLogEvents"
          ],
          "Resource": [
            "arn:aws:logs:*:*:/aws-glue/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack"
          ],
          "Resource": "arn:aws:cloudformation:*:*:stack/aws-glue*/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:RunInstances"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*",
            "arn:aws:ec2:*:*:key-pair/*",
            "arn:aws:ec2:*:*:image/*",
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:network-interface/*",
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:volume/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:TerminateInstances",
            "ec2:CreateTags",
            "ec2:DeleteTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/aws-glue-*/*"
            },
            "StringEquals": {
              "ec2:ResourceTag/aws:cloudformation:logical-id": "ZeppelinInstance"
            }
          }
        },
        {
          "Action": [
            "iam:PassRole"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:iam::*:role/AWSGlueServiceRole*",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": [
                "glue.amazonaws.com"
              ]
            }
          }
        },
        {
          "Action": [
            "iam:PassRole"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:iam::*:role/AWSGlueServiceNotebookRole*",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": [
                "ec2.amazonaws.com"
              ]
            }
          }
        },
        {
          "Action": [
            "iam:PassRole"
          ],
          "Effect": "Allow",
          "Resource": [
            "arn:aws:iam::*:role/service-role/AWSGlueServiceRole*"
          ],
          "Condition": {
            "StringLike": {
              "iam:PassedToService": [
                "glue.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v14",
    "IsDefaultVersion": true,
    "CreateDate": "2023-07-14T14:37:54+00:00"
  },
  "AWSGlueConsoleSageMakerNotebookFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "glue:*",
            "redshift:DescribeClusters",
            "redshift:DescribeClusterSubnetGroups",
            "iam:ListRoles",
            "iam:ListRolePolicies",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:ListAttachedRolePolicies",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeRouteTables",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeInstances",
            "ec2:DescribeImages",
            "ec2:CreateNetworkInterface",
            "ec2:AttachNetworkInterface",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeNetworkInterfaces",
            "rds:DescribeDBInstances",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:GetBucketAcl",
            "s3:GetBucketLocation",
            "cloudformation:DescribeStacks",
            "cloudformation:GetTemplateSummary",
            "dynamodb:ListTables",
            "kms:ListAliases",
            "kms:DescribeKey",
            "sagemaker:ListNotebookInstances",
            "cloudformation:ListStacks",
            "cloudwatch:GetMetricData",
            "cloudwatch:ListDashboards"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:PutObject"
          ],
          "Resource": [
            "arn:aws:s3:::*/*aws-glue-*/*",
            "arn:aws:s3:::aws-glue-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:CreateBucket"
          ],
          "Resource": [
            "arn:aws:s3:::aws-glue-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:GetLogEvents"
          ],
          "Resource": [
            "arn:aws:logs:*:*:/aws-glue/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack"
          ],
          "Resource": "arn:aws:cloudformation:*:*:stack/aws-glue*/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sagemaker:CreatePresignedNotebookInstanceUrl",
            "sagemaker:CreateNotebookInstance",
            "sagemaker:DeleteNotebookInstance",
            "sagemaker:DescribeNotebookInstance",
            "sagemaker:StartNotebookInstance",
            "sagemaker:StopNotebookInstance",
            "sagemaker:UpdateNotebookInstance",
            "sagemaker:ListTags"
          ],
          "Resource": "arn:aws:sagemaker:*:*:notebook-instance/aws-glue-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sagemaker:DescribeNotebookInstanceLifecycleConfig",
            "sagemaker:CreateNotebookInstanceLifecycleConfig",
            "sagemaker:DeleteNotebookInstanceLifecycleConfig",
            "sagemaker:ListNotebookInstanceLifecycleConfigs"
          ],
          "Resource": "arn:aws:sagemaker:*:*:notebook-instance-lifecycle-config/aws-glue-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:RunInstances"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*",
            "arn:aws:ec2:*:*:key-pair/*",
            "arn:aws:ec2:*:*:image/*",
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:network-interface/*",
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:volume/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:TerminateInstances",
            "ec2:CreateTags",
            "ec2:DeleteTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/aws-glue-*/*"
            },
            "StringEquals": {
              "ec2:ResourceTag/aws:cloudformation:logical-id": "ZeppelinInstance"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "tag:GetResources"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "ForAllValues:StringLike": {
              "aws:TagKeys": [
                "aws-glue-*"
              ]
            }
          }
        },
        {
          "Action": [
            "iam:PassRole"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:iam::*:role/AWSGlueServiceRole*",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": [
                "glue.amazonaws.com"
              ]
            }
          }
        },
        {
          "Action": [
            "iam:PassRole"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:iam::*:role/AWSGlueServiceNotebookRole*",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": [
                "ec2.amazonaws.com"
              ]
            }
          }
        },
        {
          "Action": [
            "iam:PassRole"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:iam::*:role/AWSGlueServiceSageMakerNotebookRole*",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": [
                "sagemaker.amazonaws.com"
              ]
            }
          }
        },
        {
          "Action": [
            "iam:PassRole"
          ],
          "Effect": "Allow",
          "Resource": [
            "arn:aws:iam::*:role/service-role/AWSGlueServiceRole*"
          ],
          "Condition": {
            "StringLike": {
              "iam:PassedToService": [
                "glue.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2021-07-15T15:24:19+00:00"
  },
  "AWSGlueDataBrewServiceRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "glue:GetDatabases",
            "glue:GetPartitions",
            "glue:GetTable",
            "glue:GetTables",
            "glue:GetConnection"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "glue:BatchGetCustomEntityTypes"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListBucket",
            "s3:GetObject"
          ],
          "Resource": [
            "arn:aws:s3:::databrew-public-datasets-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeRouteTables",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:CreateNetworkInterface"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "ec2:DeleteNetworkInterface",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/aws-glue-service-resource": "*"
            }
          },
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags",
            "ec2:DeleteTags"
          ],
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "aws-glue-service-resource"
              ]
            }
          },
          "Resource": [
            "arn:aws:ec2:*:*:network-interface/*",
            "arn:aws:ec2:*:*:security-group/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws-glue-databrew/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "lakeformation:GetDataAccess"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:GetSecretValue"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:secret:databrew!default-*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2022-05-09T23:06:36+00:00"
  },
  "AWSGlueSchemaRegistryFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AWSGlueSchemaRegistryFullAccess",
          "Effect": "Allow",
          "Action": [
            "glue:CreateRegistry",
            "glue:UpdateRegistry",
            "glue:DeleteRegistry",
            "glue:GetRegistry",
            "glue:ListRegistries",
            "glue:CreateSchema",
            "glue:UpdateSchema",
            "glue:DeleteSchema",
            "glue:GetSchema",
            "glue:ListSchemas",
            "glue:RegisterSchemaVersion",
            "glue:DeleteSchemaVersions",
            "glue:GetSchemaByDefinition",
            "glue:GetSchemaVersion",
            "glue:GetSchemaVersionsDiff",
            "glue:ListSchemaVersions",
            "glue:CheckSchemaVersionValidity",
            "glue:PutSchemaVersionMetadata",
            "glue:RemoveSchemaVersionMetadata",
            "glue:QuerySchemaVersionMetadata"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "AWSGlueSchemaRegistryTagsFullAccess",
          "Effect": "Allow",
          "Action": [
            "glue:GetTags",
            "glue:TagResource",
            "glue:UnTagResource"
          ],
          "Resource": [
            "arn:aws:glue:*:*:schema/*",
            "arn:aws:glue:*:*:registry/*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-11-20T00:19:00+00:00"
  },
  "AWSGlueSchemaRegistryReadonlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AWSGlueSchemaRegistryReadonlyAccess",
          "Effect": "Allow",
          "Action": [
            "glue:GetRegistry",
            "glue:ListRegistries",
            "glue:GetSchema",
            "glue:ListSchemas",
            "glue:GetSchemaByDefinition",
            "glue:GetSchemaVersion",
            "glue:ListSchemaVersions",
            "glue:GetSchemaVersionsDiff",
            "glue:CheckSchemaVersionValidity",
            "glue:QuerySchemaVersionMetadata",
            "glue:GetTags"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-11-20T00:20:06+00:00"
  },
  "AWSGlueServiceNotebookRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "glue:CreateDatabase",
            "glue:CreatePartition",
            "glue:CreateTable",
            "glue:DeleteDatabase",
            "glue:DeletePartition",
            "glue:DeleteTable",
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:GetTable",
            "glue:GetTableVersions",
            "glue:GetTables",
            "glue:UpdateDatabase",
            "glue:UpdatePartition",
            "glue:UpdateTable",
            "glue:CreateConnection",
            "glue:CreateJob",
            "glue:DeleteConnection",
            "glue:DeleteJob",
            "glue:GetConnection",
            "glue:GetConnections",
            "glue:GetDevEndpoint",
            "glue:GetDevEndpoints",
            "glue:GetJob",
            "glue:GetJobs",
            "glue:UpdateJob",
            "glue:BatchDeleteConnection",
            "glue:UpdateConnection",
            "glue:GetUserDefinedFunction",
            "glue:UpdateUserDefinedFunction",
            "glue:GetUserDefinedFunctions",
            "glue:DeleteUserDefinedFunction",
            "glue:CreateUserDefinedFunction",
            "glue:BatchGetPartition",
            "glue:BatchDeletePartition",
            "glue:BatchCreatePartition",
            "glue:BatchDeleteTable",
            "glue:UpdateDevEndpoint",
            "s3:GetBucketLocation",
            "s3:ListBucket",
            "s3:ListAllMyBuckets",
            "s3:GetBucketAcl",
            "codewhisperer:GenerateRecommendations"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": [
            "arn:aws:s3:::crawler-public*",
            "arn:aws:s3:::aws-glue*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:PutObject",
            "s3:DeleteObject"
          ],
          "Resource": [
            "arn:aws:s3:::aws-glue*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags",
            "ec2:DeleteTags"
          ],
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "aws-glue-service-resource"
              ]
            }
          },
          "Resource": [
            "arn:aws:ec2:*:*:network-interface/*",
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:instance/*"
          ]
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2023-10-09T15:59:41+00:00"
  },
  "AWSGlueServiceRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "glue:*",
            "s3:GetBucketLocation",
            "s3:ListBucket",
            "s3:ListAllMyBuckets",
            "s3:GetBucketAcl",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeRouteTables",
            "ec2:CreateNetworkInterface",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "iam:ListRolePolicies",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "cloudwatch:PutMetricData"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:CreateBucket"
          ],
          "Resource": [
            "arn:aws:s3:::aws-glue-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:PutObject",
            "s3:DeleteObject"
          ],
          "Resource": [
            "arn:aws:s3:::aws-glue-*/*",
            "arn:aws:s3:::*/*aws-glue-*/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": [
            "arn:aws:s3:::crawler-public*",
            "arn:aws:s3:::aws-glue-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
          ],
          "Resource": [
            "arn:aws:logs:*:*:*:/aws-glue/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags",
            "ec2:DeleteTags"
          ],
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "aws-glue-service-resource"
              ]
            }
          },
          "Resource": [
            "arn:aws:ec2:*:*:network-interface/*",
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:instance/*"
          ]
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2023-09-11T16:39:47+00:00"
  },
  "AWSGrafanaAccountAdministrator": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AWSGrafanaOrganizationAdmin",
          "Effect": "Allow",
          "Action": [
            "iam:ListRoles"
          ],
          "Resource": "*"
        },
        {
          "Sid": "GrafanaIAMGetRolePermission",
          "Effect": "Allow",
          "Action": "iam:GetRole",
          "Resource": "arn:aws:iam::*:role/*"
        },
        {
          "Sid": "AWSGrafanaPermissions",
          "Effect": "Allow",
          "Action": [
            "grafana:*"
          ],
          "Resource": "*"
        },
        {
          "Sid": "GrafanaIAMPassRolePermission",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/*",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": "grafana.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2022-02-15T22:36:18+00:00"
  },
  "AWSGrafanaConsoleReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AWSGrafanaConsoleReadOnlyAccess",
          "Effect": "Allow",
          "Action": [
            "grafana:Describe*",
            "grafana:List*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2022-02-15T22:30:54+00:00"
  },
  "AWSGrafanaWorkspacePermissionManagement": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AWSGrafanaPermissions",
          "Effect": "Allow",
          "Action": [
            "grafana:DescribeWorkspace",
            "grafana:DescribeWorkspaceAuthentication",
            "grafana:UpdatePermissions",
            "grafana:ListPermissions",
            "grafana:ListWorkspaces"
          ],
          "Resource": "arn:aws:grafana:*:*:/workspaces*"
        },
        {
          "Sid": "IAMIdentityCenterPermissions",
          "Effect": "Allow",
          "Action": [
            "sso:DescribeRegisteredRegions",
            "sso:GetSharedSsoConfiguration",
            "sso:ListDirectoryAssociations",
            "sso:GetManagedApplicationInstance",
            "sso:ListProfiles",
            "sso:AssociateProfile",
            "sso:DisassociateProfile",
            "sso:GetProfile",
            "sso:ListProfileAssociations",
            "sso-directory:DescribeUser",
            "sso-directory:DescribeGroup"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-15T22:17:26+00:00"
  },
  "AWSGreengrassFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "greengrass:*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2017-05-03T00:47:37+00:00"
  },
  "AWSGreengrassReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "greengrass:List*",
            "greengrass:Get*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-10-30T16:01:43+00:00"
  },
  "AWSGreengrassResourceAccessRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AllowGreengrassAccessToShadows",
          "Action": [
            "iot:DeleteThingShadow",
            "iot:GetThingShadow",
            "iot:UpdateThingShadow"
          ],
          "Effect": "Allow",
          "Resource": [
            "arn:aws:iot:*:*:thing/GG_*",
            "arn:aws:iot:*:*:thing/*-gcm",
            "arn:aws:iot:*:*:thing/*-gda",
            "arn:aws:iot:*:*:thing/*-gci"
          ]
        },
        {
          "Sid": "AllowGreengrassToDescribeThings",
          "Action": [
            "iot:DescribeThing"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:iot:*:*:thing/*"
        },
        {
          "Sid": "AllowGreengrassToDescribeCertificates",
          "Action": [
            "iot:DescribeCertificate"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:iot:*:*:cert/*"
        },
        {
          "Sid": "AllowGreengrassToCallGreengrassServices",
          "Action": [
            "greengrass:*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Sid": "AllowGreengrassToGetLambdaFunctions",
          "Action": [
            "lambda:GetFunction",
            "lambda:GetFunctionConfiguration"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Sid": "AllowGreengrassToGetGreengrassSecrets",
          "Action": [
            "secretsmanager:GetSecretValue"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:secretsmanager:*:*:secret:greengrass-*"
        },
        {
          "Sid": "AllowGreengrassAccessToS3Objects",
          "Action": [
            "s3:GetObject"
          ],
          "Effect": "Allow",
          "Resource": [
            "arn:aws:s3:::*Greengrass*",
            "arn:aws:s3:::*GreenGrass*",
            "arn:aws:s3:::*greengrass*",
            "arn:aws:s3:::*Sagemaker*",
            "arn:aws:s3:::*SageMaker*",
            "arn:aws:s3:::*sagemaker*"
          ]
        },
        {
          "Sid": "AllowGreengrassAccessToS3BucketLocation",
          "Action": [
            "s3:GetBucketLocation"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Sid": "AllowGreengrassAccessToSageMakerTrainingJobs",
          "Action": [
            "sagemaker:DescribeTrainingJob"
          ],
          "Effect": "Allow",
          "Resource": [
            "arn:aws:sagemaker:*:*:training-job/*"
          ]
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2018-11-14T00:35:02+00:00"
  },
  "AWSGroundStationAgentInstancePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "groundstation:RegisterAgent",
            "groundstation:UpdateAgentStatus",
            "groundstation:GetAgentConfiguration"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-29T15:23:12+00:00"
  },
  "AWSHealthFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "organizations:EnableAWSServiceAccess",
            "organizations:DisableAWSServiceAccess"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "organizations:ServicePrincipal": "health.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "health:*",
            "organizations:ListAccounts",
            "organizations:ListParents",
            "organizations:DescribeAccount",
            "organizations:ListDelegatedAdministrators"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "health.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2020-11-16T18:11:34+00:00"
  },
  "AWSHealthImagingFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "medical-imaging:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "medical-imaging.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-07-25T23:39:40+00:00"
  },
  "AWSHealthImagingReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "medical-imaging:GetDICOMImportJob",
            "medical-imaging:GetDatastore",
            "medical-imaging:GetImageFrame",
            "medical-imaging:GetImageSet",
            "medical-imaging:GetImageSetMetadata",
            "medical-imaging:ListDICOMImportJobs",
            "medical-imaging:ListDatastores",
            "medical-imaging:ListImageSetVersions",
            "medical-imaging:ListTagsForResource",
            "medical-imaging:SearchImageSets"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-08-01T15:18:49+00:00"
  },
  "AWSHealth_EventProcessorServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "events:DeleteRule",
            "events:PutTargets",
            "events:PutRule",
            "events:RemoveTargets"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "events:ManagedBy": "event-processor.health.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "events:DescribeRule",
            "events:ListTargetsByRule"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-01-13T19:24:56+00:00"
  },
  "AWSIAMIdentityCenterAllowListForIdentityContext": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "TrustedIdentityPropagation",
          "Effect": "Deny",
          "NotAction": [
            "athena:BatchGetNamedQuery",
            "athena:BatchGetPreparedStatement",
            "athena:BatchGetQueryExecution",
            "athena:CreateNamedQuery",
            "athena:CreatePreparedStatement",
            "athena:DeleteNamedQuery",
            "athena:DeletePreparedStatement",
            "athena:GetNamedQuery",
            "athena:GetPreparedStatement",
            "athena:GetQueryExecution",
            "athena:GetQueryResults",
            "athena:GetQueryResultsStream",
            "athena:GetQueryRuntimeStatistics",
            "athena:GetWorkGroup",
            "athena:ListNamedQueries",
            "athena:ListPreparedStatements",
            "athena:ListQueryExecutions",
            "athena:StartQueryExecution",
            "athena:StopQueryExecution",
            "athena:UpdateNamedQuery",
            "athena:UpdatePreparedStatement",
            "athena:GetDatabase",
            "athena:GetDataCatalog",
            "athena:GetTableMetadata",
            "athena:ListDatabases",
            "athena:ListDataCatalogs",
            "athena:ListTableMetadata",
            "athena:ListWorkGroups",
            "elasticmapreduce:GetClusterSessionCredentials",
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:GetTable",
            "glue:GetTables",
            "glue:GetTableVersions",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:BatchGetPartition",
            "glue:GetColumnStatisticsForPartition",
            "glue:GetColumnStatisticsForTable",
            "glue:SearchTables",
            "glue:CreateDatabase",
            "glue:UpdateDatabase",
            "glue:DeleteDatabase",
            "glue:CreateTable",
            "glue:DeleteTable",
            "glue:BatchDeleteTable",
            "glue:UpdateTable",
            "glue:BatchCreatePartition",
            "glue:CreatePartition",
            "glue:DeletePartition",
            "glue:BatchDeletePartition",
            "glue:UpdatePartition",
            "glue:BatchUpdatePartition",
            "glue:DeleteColumnStatisticsForPartition",
            "glue:DeleteColumnStatisticsForTable",
            "glue:UpdateColumnStatisticsForPartition",
            "glue:UpdateColumnStatisticsForTable",
            "lakeformation:GetDataAccess"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-08T15:21:33+00:00"
  },
  "AWSIPAMServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "IPAMDiscoveryDescribeActions",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeByoipCidrs",
            "ec2:DescribeIpv6Pools",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePublicIpv4Pools",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSecurityGroupRules",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpnConnections",
            "ec2:GetIpamDiscoveredAccounts",
            "ec2:GetIpamDiscoveredPublicAddresses",
            "ec2:GetIpamDiscoveredResourceCidrs",
            "globalaccelerator:ListAccelerators",
            "globalaccelerator:ListByoipCidrs",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAccounts",
            "organizations:ListDelegatedAdministrators"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CloudWatchMetricsPublishActions",
          "Effect": "Allow",
          "Action": "cloudwatch:PutMetricData",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": "AWS/IPAM"
            }
          }
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-08T19:05:45+00:00"
  },
  "AWSIQContractServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "aws-marketplace:Subscribe"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-08-22T19:28:39+00:00"
  },
  "AWSIQFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "iq:*",
            "iq-permission:*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": [
                "permission.iq.amazonaws.com",
                "contract.iq.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2019-09-25T20:22:34+00:00"
  },
  "AWSIQPermissionServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iam:DeleteRole",
            "iam:ListAttachedRolePolicies"
          ],
          "Resource": "arn:aws:iam::*:role/AWSIQPermission-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:AttachRolePolicy"
          ],
          "Resource": "arn:aws:iam::*:role/AWSIQPermission-*",
          "Condition": {
            "ArnEquals": {
              "iam:PolicyARN": "arn:aws:iam::aws:policy/AWSDenyAll"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:DetachRolePolicy"
          ],
          "Resource": "arn:aws:iam::*:role/AWSIQPermission-*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-08-22T19:36:29+00:00"
  },
  "AWSIdentitySyncFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ds:AuthorizeApplication",
            "ds:UnauthorizeApplication"
          ],
          "Resource": "arn:*:ds:*:*:*/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "identity-sync:DeleteSyncProfile",
            "identity-sync:CreateSyncProfile",
            "identity-sync:GetSyncProfile",
            "identity-sync:StartSync",
            "identity-sync:StopSync",
            "identity-sync:CreateSyncFilter",
            "identity-sync:DeleteSyncFilter",
            "identity-sync:ListSyncFilters",
            "identity-sync:CreateSyncTarget",
            "identity-sync:DeleteSyncTarget",
            "identity-sync:GetSyncTarget",
            "identity-sync:UpdateSyncTarget"
          ],
          "Resource": "arn:*:identity-sync:*:*:*/*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-03-23T23:29:33+00:00"
  },
  "AWSIdentitySyncReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "identity-sync:GetSyncProfile",
            "identity-sync:ListSyncFilters",
            "identity-sync:GetSyncTarget"
          ],
          "Resource": "arn:*:identity-sync:*:*:*/*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-03-23T23:29:52+00:00"
  },
  "AWSImageBuilderFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "imagebuilder:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sns:ListTopics"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sns:Publish"
          ],
          "Resource": "arn:aws:sns:*:*:*imagebuilder*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "license-manager:ListLicenseConfigurations",
            "license-manager:ListLicenseSpecificationsForResource"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:GetRole"
          ],
          "Resource": "arn:aws:iam::*:role/aws-service-role/imagebuilder.amazonaws.com/AWSServiceRoleForImageBuilder"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:GetInstanceProfile"
          ],
          "Resource": "arn:aws:iam::*:instance-profile/*imagebuilder*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:ListInstanceProfiles",
            "iam:ListRoles"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": [
            "arn:aws:iam::*:instance-profile/*imagebuilder*",
            "arn:aws:iam::*:role/*imagebuilder*"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "ec2.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListAllMyBuckets",
            "s3:GetBucketLocation"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListBucket"
          ],
          "Resource": "arn:aws:s3::*:*imagebuilder*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/imagebuilder.amazonaws.com/AWSServiceRoleForImageBuilder",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "imagebuilder.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeImages",
            "ec2:DescribeSnapshots",
            "ec2:DescribeVpcs",
            "ec2:DescribeRegions",
            "ec2:DescribeVolumes",
            "ec2:DescribeSubnets",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeInstanceTypeOfferings",
            "ec2:DescribeLaunchTemplates"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2021-04-13T17:33:42+00:00"
  },
  "AWSImageBuilderReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "imagebuilder:Get*",
            "imagebuilder:List*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:GetRole"
          ],
          "Resource": "arn:aws:iam::*:role/aws-service-role/imagebuilder.amazonaws.com/AWSServiceRoleForImageBuilder"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-12-19T22:29:23+00:00"
  },
  "AWSImportExportFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "importexport:*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:40:43+00:00"
  },
  "AWSImportExportReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "importexport:ListJobs",
            "importexport:GetStatus"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:40:42+00:00"
  },
  "AWSIncidentManagerIncidentAccessServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "IncidentAccessPermissions",
          "Effect": "Allow",
          "Action": [
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStackResources",
            "codedeploy:BatchGetDeployments",
            "codedeploy:ListDeployments",
            "codedeploy:ListDeploymentTargets"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-13T00:01:23+00:00"
  },
  "AWSIncidentManagerResolverAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "StartIncidentPermissions",
          "Effect": "Allow",
          "Action": [
            "ssm-incidents:StartIncident"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ResponsePlanReadOnlyPermissions",
          "Effect": "Allow",
          "Action": [
            "ssm-incidents:ListResponsePlans",
            "ssm-incidents:GetResponsePlan"
          ],
          "Resource": "*"
        },
        {
          "Sid": "IncidentRecordResolverPermissions",
          "Effect": "Allow",
          "Action": [
            "ssm-incidents:ListIncidentRecords",
            "ssm-incidents:GetIncidentRecord",
            "ssm-incidents:UpdateIncidentRecord",
            "ssm-incidents:ListTimelineEvents",
            "ssm-incidents:CreateTimelineEvent",
            "ssm-incidents:GetTimelineEvent",
            "ssm-incidents:UpdateTimelineEvent",
            "ssm-incidents:DeleteTimelineEvent",
            "ssm-incidents:ListRelatedItems",
            "ssm-incidents:UpdateRelatedItems"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-05-10T06:12:34+00:00"
  },
  "AWSIncidentManagerServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "UpdateIncidentRecordPermissions",
          "Effect": "Allow",
          "Action": [
            "ssm-incidents:ListIncidentRecords",
            "ssm-incidents:CreateTimelineEvent"
          ],
          "Resource": "*"
        },
        {
          "Sid": "RelatedOpsItemPermissions",
          "Effect": "Allow",
          "Action": [
            "ssm:CreateOpsItem",
            "ssm:AssociateOpsItemRelatedItem"
          ],
          "Resource": "*"
        },
        {
          "Sid": "IncidentEngagementPermissions",
          "Effect": "Allow",
          "Action": "ssm-contacts:StartEngagement",
          "Resource": "*"
        },
        {
          "Sid": "PutMetricDataPermission",
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricData"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": "AWS/IncidentManager"
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-12-05T02:11:58+00:00"
  },
  "AWSIoT1ClickFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "iot1click:*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-05-11T22:10:14+00:00"
  },
  "AWSIoT1ClickReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "iot1click:Describe*",
            "iot1click:Get*",
            "iot1click:List*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-05-11T21:49:24+00:00"
  },
  "AWSIoTAnalyticsFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iotanalytics:*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-06-18T23:02:45+00:00"
  },
  "AWSIoTAnalyticsReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iotanalytics:Describe*",
            "iotanalytics:List*",
            "iotanalytics:Get*",
            "iotanalytics:SampleChannelData"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-06-18T21:37:49+00:00"
  },
  "AWSIoTConfigAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iot:AcceptCertificateTransfer",
            "iot:AddThingToThingGroup",
            "iot:AssociateTargetsWithJob",
            "iot:AttachPolicy",
            "iot:AttachPrincipalPolicy",
            "iot:AttachThingPrincipal",
            "iot:CancelCertificateTransfer",
            "iot:CancelJob",
            "iot:CancelJobExecution",
            "iot:ClearDefaultAuthorizer",
            "iot:CreateAuthorizer",
            "iot:CreateCertificateFromCsr",
            "iot:CreateJob",
            "iot:CreateKeysAndCertificate",
            "iot:CreateOTAUpdate",
            "iot:CreatePolicy",
            "iot:CreatePolicyVersion",
            "iot:CreateRoleAlias",
            "iot:CreateStream",
            "iot:CreateThing",
            "iot:CreateThingGroup",
            "iot:CreateThingType",
            "iot:CreateTopicRule",
            "iot:DeleteAuthorizer",
            "iot:DeleteCACertificate",
            "iot:DeleteCertificate",
            "iot:DeleteJob",
            "iot:DeleteJobExecution",
            "iot:DeleteOTAUpdate",
            "iot:DeletePolicy",
            "iot:DeletePolicyVersion",
            "iot:DeleteRegistrationCode",
            "iot:DeleteRoleAlias",
            "iot:DeleteStream",
            "iot:DeleteThing",
            "iot:DeleteThingGroup",
            "iot:DeleteThingType",
            "iot:DeleteTopicRule",
            "iot:DeleteV2LoggingLevel",
            "iot:DeprecateThingType",
            "iot:DescribeAuthorizer",
            "iot:DescribeCACertificate",
            "iot:DescribeCertificate",
            "iot:DescribeDefaultAuthorizer",
            "iot:DescribeEndpoint",
            "iot:DescribeEventConfigurations",
            "iot:DescribeIndex",
            "iot:DescribeJob",
            "iot:DescribeJobExecution",
            "iot:DescribeRoleAlias",
            "iot:DescribeStream",
            "iot:DescribeThing",
            "iot:DescribeThingGroup",
            "iot:DescribeThingRegistrationTask",
            "iot:DescribeThingType",
            "iot:DetachPolicy",
            "iot:DetachPrincipalPolicy",
            "iot:DetachThingPrincipal",
            "iot:DisableTopicRule",
            "iot:EnableTopicRule",
            "iot:GetEffectivePolicies",
            "iot:GetIndexingConfiguration",
            "iot:GetJobDocument",
            "iot:GetLoggingOptions",
            "iot:GetOTAUpdate",
            "iot:GetPolicy",
            "iot:GetPolicyVersion",
            "iot:GetRegistrationCode",
            "iot:GetTopicRule",
            "iot:GetV2LoggingOptions",
            "iot:ListAttachedPolicies",
            "iot:ListAuthorizers",
            "iot:ListCACertificates",
            "iot:ListCertificates",
            "iot:ListCertificatesByCA",
            "iot:ListIndices",
            "iot:ListJobExecutionsForJob",
            "iot:ListJobExecutionsForThing",
            "iot:ListJobs",
            "iot:ListOTAUpdates",
            "iot:ListOutgoingCertificates",
            "iot:ListPolicies",
            "iot:ListPolicyPrincipals",
            "iot:ListPolicyVersions",
            "iot:ListPrincipalPolicies",
            "iot:ListPrincipalThings",
            "iot:ListRoleAliases",
            "iot:ListStreams",
            "iot:ListTargetsForPolicy",
            "iot:ListThingGroups",
            "iot:ListThingGroupsForThing",
            "iot:ListThingPrincipals",
            "iot:ListThingRegistrationTaskReports",
            "iot:ListThingRegistrationTasks",
            "iot:ListThings",
            "iot:ListThingsInThingGroup",
            "iot:ListThingTypes",
            "iot:ListTopicRules",
            "iot:ListV2LoggingLevels",
            "iot:RegisterCACertificate",
            "iot:RegisterCertificate",
            "iot:RegisterThing",
            "iot:RejectCertificateTransfer",
            "iot:RemoveThingFromThingGroup",
            "iot:ReplaceTopicRule",
            "iot:SearchIndex",
            "iot:SetDefaultAuthorizer",
            "iot:SetDefaultPolicyVersion",
            "iot:SetLoggingOptions",
            "iot:SetV2LoggingLevel",
            "iot:SetV2LoggingOptions",
            "iot:StartThingRegistrationTask",
            "iot:StopThingRegistrationTask",
            "iot:TestAuthorization",
            "iot:TestInvokeAuthorizer",
            "iot:TransferCertificate",
            "iot:UpdateAuthorizer",
            "iot:UpdateCACertificate",
            "iot:UpdateCertificate",
            "iot:UpdateEventConfigurations",
            "iot:UpdateIndexingConfiguration",
            "iot:UpdateRoleAlias",
            "iot:UpdateStream",
            "iot:UpdateThing",
            "iot:UpdateThingGroup",
            "iot:UpdateThingGroupsForThing",
            "iot:UpdateAccountAuditConfiguration",
            "iot:DescribeAccountAuditConfiguration",
            "iot:DeleteAccountAuditConfiguration",
            "iot:StartOnDemandAuditTask",
            "iot:CancelAuditTask",
            "iot:DescribeAuditTask",
            "iot:ListAuditTasks",
            "iot:CreateScheduledAudit",
            "iot:UpdateScheduledAudit",
            "iot:DeleteScheduledAudit",
            "iot:DescribeScheduledAudit",
            "iot:ListScheduledAudits",
            "iot:ListAuditFindings",
            "iot:CreateSecurityProfile",
            "iot:DescribeSecurityProfile",
            "iot:UpdateSecurityProfile",
            "iot:DeleteSecurityProfile",
            "iot:AttachSecurityProfile",
            "iot:DetachSecurityProfile",
            "iot:ListSecurityProfiles",
            "iot:ListSecurityProfilesForTarget",
            "iot:ListTargetsForSecurityProfile",
            "iot:ListActiveViolations",
            "iot:ListViolationEvents",
            "iot:ValidateSecurityProfileBehaviors"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v9",
    "IsDefaultVersion": true,
    "CreateDate": "2019-09-27T20:48:00+00:00"
  },
  "AWSIoTConfigReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iot:DescribeAuthorizer",
            "iot:DescribeCACertificate",
            "iot:DescribeCertificate",
            "iot:DescribeDefaultAuthorizer",
            "iot:DescribeEndpoint",
            "iot:DescribeEventConfigurations",
            "iot:DescribeIndex",
            "iot:DescribeJob",
            "iot:DescribeJobExecution",
            "iot:DescribeRoleAlias",
            "iot:DescribeStream",
            "iot:DescribeThing",
            "iot:DescribeThingGroup",
            "iot:DescribeThingRegistrationTask",
            "iot:DescribeThingType",
            "iot:GetEffectivePolicies",
            "iot:GetIndexingConfiguration",
            "iot:GetJobDocument",
            "iot:GetLoggingOptions",
            "iot:GetOTAUpdate",
            "iot:GetPolicy",
            "iot:GetPolicyVersion",
            "iot:GetRegistrationCode",
            "iot:GetTopicRule",
            "iot:GetV2LoggingOptions",
            "iot:ListAttachedPolicies",
            "iot:ListAuthorizers",
            "iot:ListCACertificates",
            "iot:ListCertificates",
            "iot:ListCertificatesByCA",
            "iot:ListIndices",
            "iot:ListJobExecutionsForJob",
            "iot:ListJobExecutionsForThing",
            "iot:ListJobs",
            "iot:ListOTAUpdates",
            "iot:ListOutgoingCertificates",
            "iot:ListPolicies",
            "iot:ListPolicyPrincipals",
            "iot:ListPolicyVersions",
            "iot:ListPrincipalPolicies",
            "iot:ListPrincipalThings",
            "iot:ListRoleAliases",
            "iot:ListStreams",
            "iot:ListTargetsForPolicy",
            "iot:ListThingGroups",
            "iot:ListThingGroupsForThing",
            "iot:ListThingPrincipals",
            "iot:ListThingRegistrationTaskReports",
            "iot:ListThingRegistrationTasks",
            "iot:ListThings",
            "iot:ListThingsInThingGroup",
            "iot:ListThingTypes",
            "iot:ListTopicRules",
            "iot:ListV2LoggingLevels",
            "iot:SearchIndex",
            "iot:TestAuthorization",
            "iot:TestInvokeAuthorizer",
            "iot:DescribeAccountAuditConfiguration",
            "iot:DescribeAuditTask",
            "iot:ListAuditTasks",
            "iot:DescribeScheduledAudit",
            "iot:ListScheduledAudits",
            "iot:ListAuditFindings",
            "iot:DescribeSecurityProfile",
            "iot:ListSecurityProfiles",
            "iot:ListSecurityProfilesForTarget",
            "iot:ListTargetsForSecurityProfile",
            "iot:ListActiveViolations",
            "iot:ListViolationEvents",
            "iot:ValidateSecurityProfileBehaviors"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v8",
    "IsDefaultVersion": true,
    "CreateDate": "2019-09-27T20:52:40+00:00"
  },
  "AWSIoTDataAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iot:Connect",
            "iot:Publish",
            "iot:Subscribe",
            "iot:Receive",
            "iot:GetThingShadow",
            "iot:UpdateThingShadow",
            "iot:DeleteThingShadow",
            "iot:ListNamedShadowsForThing"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2021-06-23T21:34:47+00:00"
  },
  "AWSIoTDeviceDefenderAddThingsToThingGroupMitigationAction": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iot:ListPrincipalThings",
            "iot:AddThingToThingGroup"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-08-07T17:55:37+00:00"
  },
  "AWSIoTDeviceDefenderAudit": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iot:GetLoggingOptions",
            "iot:GetV2LoggingOptions",
            "iot:ListCACertificates",
            "iot:ListCertificates",
            "iot:DescribeCACertificate",
            "iot:DescribeCertificate",
            "iot:ListPolicies",
            "iot:GetPolicy",
            "iot:GetEffectivePolicies",
            "iot:ListRoleAliases",
            "iot:DescribeRoleAlias",
            "cognito-identity:GetIdentityPoolRoles",
            "iam:ListRolePolicies",
            "iam:ListAttachedRolePolicies",
            "iam:GetRole",
            "iam:GetPolicy",
            "iam:GetPolicyVersion",
            "iam:GetRolePolicy",
            "iam:GenerateServiceLastAccessedDetails",
            "iam:GetServiceLastAccessedDetails"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2019-11-25T23:52:43+00:00"
  },
  "AWSIoTDeviceDefenderEnableIoTLoggingMitigationAction": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iot:SetV2LoggingOptions"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "iot.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-08-07T17:04:07+00:00"
  },
  "AWSIoTDeviceDefenderPublishFindingsToSNSMitigationAction": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "sns:Publish"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-08-07T17:04:37+00:00"
  },
  "AWSIoTDeviceDefenderReplaceDefaultPolicyMitigationAction": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iot:CreatePolicyVersion"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-08-07T17:04:57+00:00"
  },
  "AWSIoTDeviceDefenderUpdateCACertMitigationAction": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iot:UpdateCACertificate"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-08-07T17:05:49+00:00"
  },
  "AWSIoTDeviceDefenderUpdateDeviceCertMitigationAction": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iot:UpdateCertificate"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-08-07T17:06:00+00:00"
  },
  "AWSIoTDeviceTesterForFreeRTOSFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "VisualEditor0",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/idt-*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "iot.amazonaws.com"
            }
          }
        },
        {
          "Sid": "VisualEditor1",
          "Effect": "Allow",
          "Action": [
            "iot:DeleteThing",
            "iot:AttachThingPrincipal",
            "iot:DeleteCertificate",
            "iot:GetRegistrationCode",
            "iot:CreatePolicy",
            "iot:UpdateCACertificate",
            "s3:ListBucket",
            "iot:DescribeEndpoint",
            "iot:CreateOTAUpdate",
            "iot:CreateStream",
            "signer:ListSigningJobs",
            "acm:ListCertificates",
            "iot:CreateKeysAndCertificate",
            "iot:UpdateCertificate",
            "iot:CreateCertificateFromCsr",
            "iot:DetachThingPrincipal",
            "iot:RegisterCACertificate",
            "iot:CreateThing",
            "iam:ListRoles",
            "iot:RegisterCertificate",
            "iot:DeleteCACertificate",
            "signer:PutSigningProfile",
            "s3:ListAllMyBuckets",
            "signer:ListSigningPlatforms",
            "iot-device-tester:SendMetrics",
            "iot-device-tester:SupportedVersion",
            "iot-device-tester:LatestIdt",
            "iot-device-tester:CheckVersion",
            "iot-device-tester:DownloadTestSuite"
          ],
          "Resource": "*"
        },
        {
          "Sid": "VisualEditor2",
          "Effect": "Allow",
          "Action": [
            "iam:GetRole",
            "signer:StartSigningJob",
            "acm:GetCertificate",
            "signer:DescribeSigningJob",
            "s3:CreateBucket",
            "execute-api:Invoke",
            "s3:DeleteBucket",
            "s3:PutBucketVersioning",
            "signer:CancelSigningProfile"
          ],
          "Resource": [
            "arn:aws:execute-api:us-east-1:098862408343:9xpmnvs5h4/prod/POST/metrics",
            "arn:aws:signer:*:*:/signing-profiles/*",
            "arn:aws:signer:*:*:/signing-jobs/*",
            "arn:aws:iam::*:role/idt-*",
            "arn:aws:acm:*:*:certificate/*",
            "arn:aws:s3:::idt-*",
            "arn:aws:s3:::afr-ota*"
          ]
        },
        {
          "Sid": "VisualEditor3",
          "Effect": "Allow",
          "Action": [
            "iot:DeleteStream",
            "iot:DeleteCertificate",
            "iot:AttachPolicy",
            "iot:DetachPolicy",
            "iot:DeletePolicy",
            "s3:ListBucketVersions",
            "iot:UpdateCertificate",
            "iot:GetOTAUpdate",
            "iot:DeleteOTAUpdate",
            "iot:DescribeJobExecution"
          ],
          "Resource": [
            "arn:aws:s3:::afr-ota*",
            "arn:aws:iot:*:*:thinggroup/idt*",
            "arn:aws:iam::*:role/idt-*"
          ]
        },
        {
          "Sid": "VisualEditor4",
          "Effect": "Allow",
          "Action": [
            "iot:DeleteCertificate",
            "iot:AttachPolicy",
            "iot:DetachPolicy",
            "s3:DeleteObjectVersion",
            "iot:DeleteOTAUpdate",
            "s3:PutObject",
            "s3:GetObject",
            "iot:DeleteStream",
            "iot:DeletePolicy",
            "s3:DeleteObject",
            "iot:UpdateCertificate",
            "iot:GetOTAUpdate",
            "s3:GetObjectVersion",
            "iot:DescribeJobExecution"
          ],
          "Resource": [
            "arn:aws:s3:::afr-ota*/*",
            "arn:aws:s3:::idt-*/*",
            "arn:aws:iot:*:*:policy/idt*",
            "arn:aws:iam::*:role/idt-*",
            "arn:aws:iot:*:*:otaupdate/idt*",
            "arn:aws:iot:*:*:thing/idt*",
            "arn:aws:iot:*:*:cert/*",
            "arn:aws:iot:*:*:job/*",
            "arn:aws:iot:*:*:stream/*"
          ]
        },
        {
          "Sid": "VisualEditor5",
          "Effect": "Allow",
          "Action": [
            "s3:PutObject",
            "s3:GetObject"
          ],
          "Resource": [
            "arn:aws:s3:::afr-ota*/*",
            "arn:aws:s3:::idt-*/*"
          ]
        },
        {
          "Sid": "VisualEditor6",
          "Effect": "Allow",
          "Action": [
            "iot:CancelJobExecution"
          ],
          "Resource": [
            "arn:aws:iot:*:*:job/*",
            "arn:aws:iot:*:*:thing/idt*"
          ]
        },
        {
          "Sid": "VisualEditor7",
          "Effect": "Allow",
          "Action": [
            "ec2:TerminateInstances"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "StringEquals": {
              "ec2:ResourceTag/Owner": "IoTDeviceTester"
            }
          }
        },
        {
          "Sid": "VisualEditor8",
          "Effect": "Allow",
          "Action": [
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:DeleteSecurityGroup"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:security-group/*"
          ],
          "Condition": {
            "StringEquals": {
              "ec2:ResourceTag/Owner": "IoTDeviceTester"
            }
          }
        },
        {
          "Sid": "VisualEditor9",
          "Effect": "Allow",
          "Action": [
            "ec2:RunInstances"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/Owner": "IoTDeviceTester"
            }
          }
        },
        {
          "Sid": "VisualEditor10",
          "Effect": "Allow",
          "Action": [
            "ec2:RunInstances"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:image/*",
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:volume/*",
            "arn:aws:ec2:*:*:key-pair/*",
            "arn:aws:ec2:*:*:placement-group/*",
            "arn:aws:ec2:*:*:snapshot/*",
            "arn:aws:ec2:*:*:network-interface/*",
            "arn:aws:ec2:*:*:subnet/*"
          ]
        },
        {
          "Sid": "VisualEditor11",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSecurityGroup"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:security-group/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/Owner": "IoTDeviceTester"
            }
          }
        },
        {
          "Sid": "VisualEditor12",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstances",
            "ec2:DescribeSecurityGroups",
            "ssm:DescribeParameters",
            "ssm:GetParameters"
          ],
          "Resource": "*"
        },
        {
          "Sid": "VisualEditor13",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:TagKeys": [
                "Owner"
              ]
            },
            "StringEquals": {
              "ec2:CreateAction": [
                "RunInstances",
                "CreateSecurityGroup"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v7",
    "IsDefaultVersion": true,
    "CreateDate": "2023-08-10T20:30:07+00:00"
  },
  "AWSIoTDeviceTesterForGreengrassFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "VisualEditor1",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/idt-*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "iot.amazonaws.com",
                "lambda.amazonaws.com",
                "greengrass.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "VisualEditor2",
          "Effect": "Allow",
          "Action": [
            "lambda:CreateFunction",
            "iot:DeleteCertificate",
            "lambda:DeleteFunction",
            "execute-api:Invoke",
            "iot:UpdateCertificate"
          ],
          "Resource": [
            "arn:aws:execute-api:us-east-1:098862408343:9xpmnvs5h4/prod/POST/metrics",
            "arn:aws:lambda:*:*:function:idt-*",
            "arn:aws:iot:*:*:cert/*"
          ]
        },
        {
          "Sid": "VisualEditor3",
          "Effect": "Allow",
          "Action": [
            "iot:CreateThing",
            "iot:DeleteThing"
          ],
          "Resource": [
            "arn:aws:iot:*:*:thing/idt-*",
            "arn:aws:iot:*:*:cert/*"
          ]
        },
        {
          "Sid": "VisualEditor4",
          "Effect": "Allow",
          "Action": [
            "iot:AttachPolicy",
            "iot:DetachPolicy",
            "iot:DeletePolicy"
          ],
          "Resource": [
            "arn:aws:iot:*:*:policy/idt-*",
            "arn:aws:iot:*:*:cert/*"
          ]
        },
        {
          "Sid": "VisualEditor5",
          "Effect": "Allow",
          "Action": [
            "iot:CreateJob",
            "iot:DescribeJob",
            "iot:DescribeJobExecution",
            "iot:DeleteJob"
          ],
          "Resource": [
            "arn:aws:iot:*:*:thing/idt-*",
            "arn:aws:iot:*:*:job/*"
          ]
        },
        {
          "Sid": "VisualEditor6",
          "Effect": "Allow",
          "Action": [
            "iot:DescribeEndpoint",
            "greengrass:*",
            "iam:ListAttachedRolePolicies",
            "iot:CreatePolicy",
            "iot:GetThingShadow",
            "iot:CreateKeysAndCertificate",
            "iot:ListThings",
            "iot:UpdateThingShadow",
            "iot:CreateCertificateFromCsr",
            "iot-device-tester:SendMetrics",
            "iot-device-tester:SupportedVersion",
            "iot-device-tester:LatestIdt",
            "iot-device-tester:CheckVersion",
            "iot-device-tester:DownloadTestSuite"
          ],
          "Resource": "*"
        },
        {
          "Sid": "VisualEditor7",
          "Effect": "Allow",
          "Action": [
            "iot:DetachThingPrincipal",
            "iot:AttachThingPrincipal"
          ],
          "Resource": [
            "arn:aws:iot:*:*:thing/idt-*",
            "arn:aws:iot:*:*:cert/*"
          ]
        },
        {
          "Sid": "VisualEditor8",
          "Effect": "Allow",
          "Action": [
            "s3:PutObject",
            "s3:DeleteObjectVersion",
            "s3:ListBucketVersions",
            "s3:CreateBucket",
            "s3:DeleteObject",
            "s3:DeleteBucket"
          ],
          "Resource": "arn:aws:s3:::idt*"
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2020-06-25T17:01:56+00:00"
  },
  "AWSIoTEventsFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iotevents:*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-01-10T22:51:57+00:00"
  },
  "AWSIoTEventsReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iotevents:Describe*",
            "iotevents:List*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2019-09-23T17:22:04+00:00"
  },
  "AWSIoTFleetHubFederationAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iot:DescribeIndex",
            "iot:DescribeThingGroup",
            "iot:GetBucketsAggregation",
            "iot:GetCardinality",
            "iot:GetIndexingConfiguration",
            "iot:GetPercentiles",
            "iot:GetStatistics",
            "iot:SearchIndex",
            "iot:CreateFleetMetric",
            "iot:ListFleetMetrics",
            "iot:DeleteFleetMetric",
            "iot:DescribeFleetMetric",
            "iot:UpdateFleetMetric",
            "iot:DescribeCustomMetric",
            "iot:ListCustomMetrics",
            "iot:ListDimensions",
            "iot:ListMetricValues",
            "iot:ListThingGroups",
            "iot:ListThingsInThingGroup",
            "iot:ListJobTemplates",
            "iot:DescribeJobTemplate",
            "iot:ListJobs",
            "iot:CreateJob",
            "iot:CancelJob",
            "iot:DescribeJob",
            "iot:ListJobExecutionsForJob",
            "iot:ListJobExecutionsForThing",
            "iot:DescribeJobExecution",
            "iot:ListSecurityProfiles",
            "iot:DescribeSecurityProfile",
            "iot:ListActiveViolations",
            "iot:GetThingShadow",
            "iot:ListNamedShadowsForThing",
            "iot:CancelJobExecution",
            "iot:DescribeEndpoint",
            "iotfleethub:DescribeApplication",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricData",
            "cloudwatch:ListMetrics",
            "sns:ListTopics"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sns:CreateTopic",
            "sns:DeleteTopic",
            "sns:ListSubscriptionsByTopic",
            "sns:Subscribe",
            "sns:Unsubscribe"
          ],
          "Resource": "arn:aws:sns:*:*:iotfleethub*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarmHistory"
          ],
          "Resource": "arn:aws:cloudwatch:*:*:iotfleethub*"
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2022-04-04T18:03:01+00:00"
  },
  "AWSIoTFleetwiseServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricData"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": [
                "AWS/IoTFleetWise"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-09-21T23:27:48+00:00"
  },
  "AWSIoTFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iot:*",
            "iotjobsdata:*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-05-19T21:39:11+00:00"
  },
  "AWSIoTLogging": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "logs:PutMetricFilter",
            "logs:PutRetentionPolicy",
            "logs:GetLogEvents",
            "logs:DeleteLogStream"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-10-08T15:17:25+00:00"
  },
  "AWSIoTOTAUpdate": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": {
        "Effect": "Allow",
        "Action": [
          "iot:CreateJob",
          "signer:DescribeSigningJob"
        ],
        "Resource": "*"
      }
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2017-12-20T20:36:53+00:00"
  },
  "AWSIoTRuleActions": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": {
        "Effect": "Allow",
        "Action": [
          "dynamodb:PutItem",
          "kinesis:PutRecord",
          "iot:Publish",
          "s3:PutObject",
          "sns:Publish",
          "sqs:SendMessage*",
          "cloudwatch:SetAlarmState",
          "cloudwatch:PutMetricData",
          "es:ESHttpPut",
          "firehose:PutRecord"
        ],
        "Resource": "*"
      }
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2018-01-16T19:28:19+00:00"
  },
  "AWSIoTSiteWiseConsoleFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": "iotsitewise:*",
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "iotanalytics:List*",
            "iotanalytics:Describe*",
            "iotanalytics:Create*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "iot:DescribeEndpoint",
            "iot:GetThingShadow"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "greengrass:GetGroup",
            "greengrass:GetGroupVersion",
            "greengrass:GetCoreDefinitionVersion",
            "greengrass:ListGroups"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "secretsmanager:ListSecrets",
            "secretsmanager:CreateSecret"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "secretsmanager:UpdateSecret"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:secretsmanager:*:*:secret:greengrass-*"
        },
        {
          "Action": [
            "tag:GetResources"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:iam::*:role/aws-service-role/iotsitewise.amazonaws.com/AWSServiceRoleForIoTSiteWise*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "iotsitewise.amazonaws.com"
            }
          }
        },
        {
          "Action": [
            "iam:PassRole"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:iam::*:role/aws-service-role/iotsitewise.amazonaws.com/AWSServiceRoleForIoTSiteWise*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "iotsitewise.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-05-31T21:37:49+00:00"
  },
  "AWSIoTSiteWiseFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iotsitewise:*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-12-04T20:53:39+00:00"
  },
  "AWSIoTSiteWiseMonitorPortalAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iotsitewise:CreateProject",
            "iotsitewise:DescribeProject",
            "iotsitewise:UpdateProject",
            "iotsitewise:DeleteProject",
            "iotsitewise:ListProjects",
            "iotsitewise:BatchAssociateProjectAssets",
            "iotsitewise:BatchDisassociateProjectAssets",
            "iotsitewise:ListProjectAssets",
            "iotsitewise:CreateDashboard",
            "iotsitewise:DescribeDashboard",
            "iotsitewise:UpdateDashboard",
            "iotsitewise:DeleteDashboard",
            "iotsitewise:ListDashboards",
            "iotsitewise:CreateAccessPolicy",
            "iotsitewise:DescribeAccessPolicy",
            "iotsitewise:UpdateAccessPolicy",
            "iotsitewise:DeleteAccessPolicy",
            "iotsitewise:ListAccessPolicies",
            "iotsitewise:DescribeAsset",
            "iotsitewise:ListAssets",
            "iotsitewise:ListAssociatedAssets",
            "iotsitewise:DescribeAssetProperty",
            "iotsitewise:GetAssetPropertyValue",
            "iotsitewise:GetAssetPropertyValueHistory",
            "iotsitewise:GetAssetPropertyAggregates",
            "sso-directory:DescribeUsers"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-05-19T20:01:21+00:00"
  },
  "AWSIoTSiteWiseMonitorServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iotsitewise:CreateProject",
            "iotsitewise:DescribeProject",
            "iotsitewise:UpdateProject",
            "iotsitewise:DeleteProject",
            "iotsitewise:ListProjects",
            "iotsitewise:BatchAssociateProjectAssets",
            "iotsitewise:BatchDisassociateProjectAssets",
            "iotsitewise:ListProjectAssets",
            "iotsitewise:CreateDashboard",
            "iotsitewise:DescribeDashboard",
            "iotsitewise:UpdateDashboard",
            "iotsitewise:DeleteDashboard",
            "iotsitewise:ListDashboards",
            "iotsitewise:CreateAccessPolicy",
            "iotsitewise:DescribeAccessPolicy",
            "iotsitewise:UpdateAccessPolicy",
            "iotsitewise:DeleteAccessPolicy",
            "iotsitewise:ListAccessPolicies",
            "iotsitewise:DescribeAsset",
            "iotsitewise:ListAssets",
            "iotsitewise:ListAssociatedAssets",
            "iotsitewise:DescribeAssetProperty",
            "iotsitewise:GetAssetPropertyValue",
            "iotsitewise:GetAssetPropertyValueHistory",
            "iotsitewise:GetAssetPropertyAggregates",
            "sso-directory:DescribeUsers"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2019-12-13T22:19:25+00:00"
  },
  "AWSIoTSiteWiseReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iotsitewise:Describe*",
            "iotsitewise:List*",
            "iotsitewise:Get*",
            "iotsitewise:BatchGet*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-09-16T19:05:20+00:00"
  },
  "AWSIoTThingsRegistration": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iot:AddThingToThingGroup",
            "iot:AttachPolicy",
            "iot:AttachPrincipalPolicy",
            "iot:AttachThingPrincipal",
            "iot:CreateCertificateFromCsr",
            "iot:CreatePolicy",
            "iot:CreateThing",
            "iot:DescribeCertificate",
            "iot:DescribeThing",
            "iot:DescribeThingGroup",
            "iot:DescribeThingType",
            "iot:DetachPolicy",
            "iot:DetachThingPrincipal",
            "iot:GetPolicy",
            "iot:ListAttachedPolicies",
            "iot:ListPolicyPrincipals",
            "iot:ListPrincipalPolicies",
            "iot:ListPrincipalThings",
            "iot:ListTargetsForPolicy",
            "iot:ListThingGroupsForThing",
            "iot:ListThingPrincipals",
            "iot:RegisterCertificate",
            "iot:RegisterThing",
            "iot:RemoveThingFromThingGroup",
            "iot:UpdateCertificate",
            "iot:UpdateThing",
            "iot:UpdateThingGroupsForThing",
            "iot:AddThingToBillingGroup",
            "iot:DescribeBillingGroup",
            "iot:RemoveThingFromBillingGroup"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2020-10-05T19:20:12+00:00"
  },
  "AWSIoTTwinMakerServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "SiteWiseAssetReadAccess",
          "Effect": "Allow",
          "Action": [
            "iotsitewise:DescribeAsset"
          ],
          "Resource": [
            "arn:aws:iotsitewise:*:*:asset/*"
          ]
        },
        {
          "Sid": "SiteWiseAssetModelReadAccess",
          "Effect": "Allow",
          "Action": [
            "iotsitewise:DescribeAssetModel"
          ],
          "Resource": [
            "arn:aws:iotsitewise:*:*:asset-model/*"
          ]
        },
        {
          "Sid": "SiteWiseAssetModelAndAssetListAccess",
          "Effect": "Allow",
          "Action": [
            "iotsitewise:ListAssets",
            "iotsitewise:ListAssetModels"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "TwinMakerAccess",
          "Effect": "Allow",
          "Action": [
            "iottwinmaker:GetEntity",
            "iottwinmaker:CreateEntity",
            "iottwinmaker:UpdateEntity",
            "iottwinmaker:DeleteEntity",
            "iottwinmaker:ListEntities",
            "iottwinmaker:GetComponentType",
            "iottwinmaker:CreateComponentType",
            "iottwinmaker:UpdateComponentType",
            "iottwinmaker:DeleteComponentType",
            "iottwinmaker:ListComponentTypes"
          ],
          "Resource": [
            "arn:aws:iottwinmaker:*:*:workspace/*"
          ],
          "Condition": {
            "ForAnyValue:StringEquals": {
              "iottwinmaker:linkedServices": [
                "IOTSITEWISE"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-13T18:59:42+00:00"
  },
  "AWSIoTWirelessDataAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iotwireless:SendDataToWirelessDevice"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-15T15:31:39+00:00"
  },
  "AWSIoTWirelessFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iotwireless:*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-15T15:27:57+00:00"
  },
  "AWSIoTWirelessFullPublishAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iot:DescribeEndpoint",
            "iot:Publish"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-15T15:29:59+00:00"
  },
  "AWSIoTWirelessGatewayCertManager": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "IoTWirelessGatewayCertManager",
          "Effect": "Allow",
          "Action": [
            "iot:CreateKeysAndCertificate",
            "iot:DescribeCertificate",
            "iot:ListCertificates"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-15T15:30:48+00:00"
  },
  "AWSIoTWirelessLogging": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/iotwireless*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-15T15:32:40+00:00"
  },
  "AWSIoTWirelessReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iotwireless:List*",
            "iotwireless:Get*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-15T15:28:56+00:00"
  },
  "AWSIotRoboRunnerFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "iotroborunner:*",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/iotroborunner.amazonaws.com/AWSServiceRoleForIoTRoboRunner",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "iotroborunner.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-02-23T18:34:44+00:00"
  },
  "AWSIotRoboRunnerReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iotroborunner:GetSite",
            "iotroborunner:GetWorker",
            "iotroborunner:ListWorkerFleets",
            "iotroborunner:ListSites",
            "iotroborunner:ListWorkers",
            "iotroborunner:GetDestination",
            "iotroborunner:GetWorkerFleet",
            "iotroborunner:ListDestinations"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-16T20:51:43+00:00"
  },
  "AWSIotRoboRunnerServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": "*",
        "Condition": {
          "StringEquals": {
            "cloudwatch:namespace": [
              "AWS/Usage"
            ]
          }
        }
      }
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-02-21T16:56:31+00:00"
  },
  "AWSKeyManagementServiceCustomKeyStoresServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudhsm:Describe*",
            "ec2:CreateNetworkInterface",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateSecurityGroup",
            "ec2:DescribeSecurityGroups",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:DeleteSecurityGroup",
            "ec2:DescribeVpcs",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeNetworkInterfaces"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-10T19:03:34+00:00"
  },
  "AWSKeyManagementServiceMultiRegionKeysServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "kms:SynchronizeMultiRegionKey"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-06-16T15:37:37+00:00"
  },
  "AWSKeyManagementServicePowerUser": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "kms:CreateAlias",
            "kms:CreateKey",
            "kms:DeleteAlias",
            "kms:Describe*",
            "kms:GenerateRandom",
            "kms:Get*",
            "kms:List*",
            "kms:TagResource",
            "kms:UntagResource",
            "iam:ListGroups",
            "iam:ListRoles",
            "iam:ListUsers"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2017-03-07T00:55:11+00:00"
  },
  "AWSLakeFormationCrossAccountManager": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ram:CreateResourceShare"
          ],
          "Resource": "*",
          "Condition": {
            "StringLikeIfExists": {
              "ram:RequestedResourceType": [
                "glue:Table",
                "glue:Database",
                "glue:Catalog"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ram:UpdateResourceShare",
            "ram:DeleteResourceShare",
            "ram:AssociateResourceShare",
            "ram:DisassociateResourceShare",
            "ram:GetResourceShares"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "ram:ResourceShareName": [
                "LakeFormation*"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ram:AssociateResourceSharePermission"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "ram:PermissionArn": [
                "arn:aws:ram::aws:permission/AWSRAMLFEnabled*"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "glue:PutResourcePolicy",
            "glue:DeleteResourcePolicy",
            "organizations:DescribeOrganization",
            "organizations:DescribeAccount",
            "ram:Get*",
            "ram:List*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "organizations:ListRoots",
            "organizations:ListAccountsForParent",
            "organizations:ListOrganizationalUnitsForParent"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-01T00:50:49+00:00"
  },
  "AWSLakeFormationDataAdmin": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "lakeformation:*",
            "cloudtrail:DescribeTrails",
            "cloudtrail:LookupEvents",
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:CreateDatabase",
            "glue:UpdateDatabase",
            "glue:DeleteDatabase",
            "glue:GetConnections",
            "glue:SearchTables",
            "glue:GetTable",
            "glue:CreateTable",
            "glue:UpdateTable",
            "glue:DeleteTable",
            "glue:GetTableVersions",
            "glue:GetPartitions",
            "glue:GetTables",
            "glue:GetWorkflow",
            "glue:ListWorkflows",
            "glue:BatchGetWorkflows",
            "glue:DeleteWorkflow",
            "glue:GetWorkflowRuns",
            "glue:StartWorkflowRun",
            "glue:GetWorkflow",
            "s3:ListBucket",
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets",
            "s3:GetBucketAcl",
            "iam:ListUsers",
            "iam:ListRoles",
            "iam:GetRole",
            "iam:GetRolePolicy"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Deny",
          "Action": [
            "lakeformation:PutDataLakeSettings"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2019-12-16T22:41:40+00:00"
  },
  "AWSLambdaBasicExecutionRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-04-09T15:03:43+00:00"
  },
  "AWSLambdaDynamoDBExecutionRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:DescribeStream",
            "dynamodb:GetRecords",
            "dynamodb:GetShardIterator",
            "dynamodb:ListStreams",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-04-09T15:09:29+00:00"
  },
  "AWSLambdaENIManagementAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DeleteNetworkInterface",
            "ec2:AssignPrivateIpAddresses",
            "ec2:UnassignPrivateIpAddresses"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2020-10-01T20:07:26+00:00"
  },
  "AWSLambdaExecute": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "logs:*"
          ],
          "Resource": "arn:aws:logs:*:*:*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:PutObject"
          ],
          "Resource": "arn:aws:s3:::*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:40:46+00:00"
  },
  "AWSLambdaInvocation-DynamoDB": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "lambda:InvokeFunction"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:DescribeStream",
            "dynamodb:GetRecords",
            "dynamodb:GetShardIterator",
            "dynamodb:ListStreams"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:40:47+00:00"
  },
  "AWSLambdaKinesisExecutionRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "kinesis:DescribeStream",
            "kinesis:DescribeStreamSummary",
            "kinesis:GetRecords",
            "kinesis:GetShardIterator",
            "kinesis:ListShards",
            "kinesis:ListStreams",
            "kinesis:SubscribeToShard",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2018-11-19T20:09:24+00:00"
  },
  "AWSLambdaMSKExecutionRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "kafka:DescribeCluster",
            "kafka:DescribeClusterV2",
            "kafka:GetBootstrapBrokers",
            "ec2:CreateNetworkInterface",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeVpcs",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeSubnets",
            "ec2:DescribeSecurityGroups",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-08-02T20:08:02+00:00"
  },
  "AWSLambdaReplicator": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "LambdaCreateDeletePermission",
          "Effect": "Allow",
          "Action": [
            "lambda:CreateFunction",
            "lambda:DeleteFunction",
            "lambda:DisableReplication"
          ],
          "Resource": [
            "arn:aws:lambda:*:*:function:*"
          ]
        },
        {
          "Sid": "IamPassRolePermission",
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringLikeIfExists": {
              "iam:PassedToService": "lambda.amazonaws.com"
            }
          }
        },
        {
          "Sid": "CloudFrontListDistributions",
          "Effect": "Allow",
          "Action": [
            "cloudfront:ListDistributionsByLambdaFunction"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2017-12-08T00:17:54+00:00"
  },
  "AWSLambdaRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "lambda:InvokeFunction"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:41:28+00:00"
  },
  "AWSLambdaSQSQueueExecutionRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "sqs:ReceiveMessage",
            "sqs:DeleteMessage",
            "sqs:GetQueueAttributes",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-06-14T21:50:45+00:00"
  },
  "AWSLambdaVPCAccessExecutionRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "ec2:CreateNetworkInterface",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DeleteNetworkInterface",
            "ec2:AssignPrivateIpAddresses",
            "ec2:UnassignPrivateIpAddresses"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2020-10-15T22:53:03+00:00"
  },
  "AWSLambda_FullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:DescribeStacks",
            "cloudformation:ListStackResources",
            "cloudwatch:ListMetrics",
            "cloudwatch:GetMetricData",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "kms:ListAliases",
            "iam:GetPolicy",
            "iam:GetPolicyVersion",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:ListAttachedRolePolicies",
            "iam:ListRolePolicies",
            "iam:ListRoles",
            "lambda:*",
            "logs:DescribeLogGroups",
            "states:DescribeStateMachine",
            "states:ListStateMachines",
            "tag:GetResources",
            "xray:GetTraceSummaries",
            "xray:BatchGetTraces"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "lambda.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "logs:FilterLogEvents"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/lambda/*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-11-17T21:14:08+00:00"
  },
  "AWSLambda_ReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:DescribeStacks",
            "cloudformation:ListStacks",
            "cloudformation:ListStackResources",
            "cloudwatch:GetMetricData",
            "cloudwatch:ListMetrics",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "kms:ListAliases",
            "iam:GetPolicy",
            "iam:GetPolicyVersion",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:ListAttachedRolePolicies",
            "iam:ListRolePolicies",
            "iam:ListRoles",
            "logs:DescribeLogGroups",
            "lambda:Get*",
            "lambda:List*",
            "states:DescribeStateMachine",
            "states:ListStateMachines",
            "tag:GetResources",
            "xray:GetTraceSummaries",
            "xray:BatchGetTraces"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "logs:FilterLogEvents",
            "logs:StartQuery",
            "logs:StopQuery",
            "logs:DescribeQueries",
            "logs:GetLogGroupFields",
            "logs:GetLogRecord",
            "logs:GetQueryResults"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/lambda/*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-07-27T17:32:05+00:00"
  },
  "AWSLicenseManagerConsumptionPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": {
        "Effect": "Allow",
        "Action": [
          "license-manager:CheckoutLicense",
          "license-manager:CheckInLicense",
          "license-manager:ExtendLicenseConsumption",
          "license-manager:GetLicense"
        ],
        "Resource": "*"
      }
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-08-11T23:18:08+00:00"
  },
  "AWSLicenseManagerLinuxSubscriptionsServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "EC2Permissions",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstances",
            "ec2:DescribeRegions"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "OrganizationPermissions",
          "Effect": "Allow",
          "Action": [
            "organizations:DescribeOrganization",
            "organizations:ListAccounts",
            "organizations:DescribeAccount",
            "organizations:ListChildren",
            "organizations:ListParents",
            "organizations:ListAccountsForParent",
            "organizations:ListRoots",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListDelegatedAdministrators"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-12-20T18:54:54+00:00"
  },
  "AWSLicenseManagerMasterAccountRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "S3BucketPermissions",
          "Effect": "Allow",
          "Action": [
            "s3:GetBucketLocation",
            "s3:ListBucket",
            "s3:GetLifecycleConfiguration",
            "s3:PutLifecycleConfiguration",
            "s3:GetBucketPolicy",
            "s3:PutBucketPolicy"
          ],
          "Resource": [
            "arn:aws:s3:::aws-license-manager-service-*"
          ]
        },
        {
          "Sid": "S3ObjectPermissions1",
          "Effect": "Allow",
          "Action": [
            "s3:AbortMultipartUpload",
            "s3:PutObject",
            "s3:GetObject",
            "s3:ListBucketMultipartUploads",
            "s3:ListMultipartUploadParts"
          ],
          "Resource": [
            "arn:aws:s3:::aws-license-manager-service-*"
          ]
        },
        {
          "Sid": "S3ObjectPermissions2",
          "Effect": "Allow",
          "Action": [
            "s3:DeleteObject"
          ],
          "Resource": [
            "arn:aws:s3:::aws-license-manager-service-*/resource_sync/*"
          ]
        },
        {
          "Sid": "AthenaPermissions",
          "Effect": "Allow",
          "Action": [
            "athena:GetQueryExecution",
            "athena:GetQueryResults",
            "athena:StartQueryExecution"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "GluePermissions",
          "Effect": "Allow",
          "Action": [
            "glue:GetTable",
            "glue:GetPartition",
            "glue:GetPartitions"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "OrganizationPermissions",
          "Effect": "Allow",
          "Action": [
            "organizations:DescribeOrganization",
            "organizations:ListAccounts",
            "organizations:DescribeAccount",
            "organizations:ListChildren",
            "organizations:ListParents",
            "organizations:ListAccountsForParent",
            "organizations:ListRoots",
            "organizations:ListAWSServiceAccessForOrganization"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "RAMPermissions1",
          "Effect": "Allow",
          "Action": [
            "ram:GetResourceShares",
            "ram:GetResourceShareAssociations",
            "ram:TagResource"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "RAMPermissions2",
          "Effect": "Allow",
          "Action": [
            "ram:CreateResourceShare"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/Service": "LicenseManager"
            }
          }
        },
        {
          "Sid": "RAMPermissions3",
          "Effect": "Allow",
          "Action": [
            "ram:AssociateResourceShare",
            "ram:DisassociateResourceShare",
            "ram:UpdateResourceShare",
            "ram:DeleteResourceShare"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/Service": "LicenseManager"
            }
          }
        },
        {
          "Sid": "IAMGetRoles",
          "Effect": "Allow",
          "Action": [
            "iam:GetRole"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "IAMPassRoles",
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/LicenseManagerServiceResourceDataSyncRole*"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "cloudformation.amazonaws.com",
                "glue.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "CloudformationPermission",
          "Effect": "Allow",
          "Action": [
            "cloudformation:UpdateStack",
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeStacks"
          ],
          "Resource": [
            "arn:aws:cloudformation:*:*:stack/LicenseManagerCrossAccountCloudDiscoveryStack/*"
          ]
        },
        {
          "Sid": "GlueUpdatePermissions",
          "Effect": "Allow",
          "Action": [
            "glue:CreateTable",
            "glue:UpdateTable",
            "glue:DeleteTable",
            "glue:UpdateJob",
            "glue:UpdateCrawler"
          ],
          "Resource": [
            "arn:aws:glue:*:*:catalog",
            "arn:aws:glue:*:*:crawler/LicenseManagerResourceSynDataCrawler",
            "arn:aws:glue:*:*:job/LicenseManagerResourceSynDataProcessJob",
            "arn:aws:glue:*:*:table/license_manager_resource_inventory_db/*",
            "arn:aws:glue:*:*:table/license_manager_resource_sync/*",
            "arn:aws:glue:*:*:database/license_manager_resource_inventory_db",
            "arn:aws:glue:*:*:database/license_manager_resource_sync"
          ]
        },
        {
          "Sid": "RGPermissions",
          "Effect": "Allow",
          "Action": [
            "resource-groups:PutGroupPolicy"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "ram.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2022-05-31T20:50:26+00:00"
  },
  "AWSLicenseManagerMemberAccountRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "LicenseManagerPermissions",
          "Effect": "Allow",
          "Action": [
            "license-manager:UpdateLicenseSpecificationsForResource",
            "license-manager:GetLicenseConfiguration"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "SSMPermissions",
          "Effect": "Allow",
          "Action": [
            "ssm:ListInventoryEntries",
            "ssm:GetInventory",
            "ssm:CreateAssociation",
            "ssm:CreateResourceDataSync",
            "ssm:DeleteResourceDataSync",
            "ssm:ListResourceDataSync",
            "ssm:ListAssociations"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "RAMPermissions",
          "Effect": "Allow",
          "Action": [
            "ram:AcceptResourceShareInvitation",
            "ram:GetResourceShareInvitations"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2019-11-15T22:09:32+00:00"
  },
  "AWSLicenseManagerServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "IAMPermissions",
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/aws-service-role/license-management.marketplace.amazonaws.com/AWSServiceRoleForMarketplaceLicenseManagement"
          ],
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "license-management.marketplace.amazonaws.com"
            }
          }
        },
        {
          "Sid": "IAMPermissionsForCreatingMemberSLR",
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": [
            "arn:*:iam::*:role/aws-service-role/license-manager.member-account.amazonaws.com/AWSServiceRoleForAWSLicenseManagerMemberAccountRole"
          ],
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "license-manager.member-account.amazonaws.com"
            }
          }
        },
        {
          "Sid": "S3BucketPermissions1",
          "Effect": "Allow",
          "Action": [
            "s3:GetBucketLocation",
            "s3:ListBucket"
          ],
          "Resource": [
            "arn:aws:s3:::aws-license-manager-service-*"
          ]
        },
        {
          "Sid": "S3BucketPermissions2",
          "Effect": "Allow",
          "Action": [
            "s3:ListAllMyBuckets"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "S3ObjectPermissions",
          "Effect": "Allow",
          "Action": [
            "s3:PutObject"
          ],
          "Resource": [
            "arn:aws:s3:::aws-license-manager-service-*"
          ]
        },
        {
          "Sid": "SNSAccountPermissions",
          "Effect": "Allow",
          "Action": [
            "sns:Publish"
          ],
          "Resource": [
            "arn:aws:sns:*:*:aws-license-manager-service-*"
          ]
        },
        {
          "Sid": "SNSTopicPermissions",
          "Effect": "Allow",
          "Action": [
            "sns:ListTopics"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "EC2Permissions",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstances",
            "ec2:DescribeImages",
            "ec2:DescribeHosts"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "SSMPermissions",
          "Effect": "Allow",
          "Action": [
            "ssm:ListInventoryEntries",
            "ssm:GetInventory",
            "ssm:CreateAssociation"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "OrganizationPermissions",
          "Effect": "Allow",
          "Action": [
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:DescribeOrganization",
            "organizations:ListDelegatedAdministrators"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "LicenseManagerPermissions",
          "Effect": "Allow",
          "Action": [
            "license-manager:GetServiceSettings",
            "license-manager:GetLicense*",
            "license-manager:UpdateLicenseSpecificationsForResource",
            "license-manager:List*"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v7",
    "IsDefaultVersion": true,
    "CreateDate": "2021-07-30T01:43:19+00:00"
  },
  "AWSLicenseManagerUserSubscriptionsServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "DSReadPermissions",
          "Effect": "Allow",
          "Action": [
            "ds:DescribeDirectories",
            "ds:GetAuthorizedApplicationDetails"
          ],
          "Resource": "*"
        },
        {
          "Sid": "SSMReadPermissions",
          "Effect": "Allow",
          "Action": [
            "ssm:GetInventory",
            "ssm:GetCommandInvocation",
            "ssm:ListCommandInvocations",
            "ssm:DescribeInstanceInformation"
          ],
          "Resource": "*"
        },
        {
          "Sid": "EC2ReadPermissions",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstances",
            "ec2:DescribeVpcPeeringConnections"
          ],
          "Resource": "*"
        },
        {
          "Sid": "EC2WritePermissions",
          "Effect": "Allow",
          "Action": [
            "ec2:TerminateInstances",
            "ec2:CreateTags"
          ],
          "Condition": {
            "StringEquals": {
              "ec2:productCode": [
                "bz0vcy31ooqlzk5tsash4r1ik",
                "d44g89hc0gp9jdzm99rznthpw",
                "77yzkpa7kvee1y1tt7wnsdwoc"
              ]
            }
          },
          "Resource": [
            "arn:aws:ec2:*:*:instance/*"
          ]
        },
        {
          "Sid": "SSMDocumentExecutionPermissions",
          "Effect": "Allow",
          "Action": [
            "ssm:SendCommand"
          ],
          "Resource": [
            "arn:aws:ssm:*::document/AWS-RunPowerShellScript"
          ]
        },
        {
          "Sid": "SSMInstanceExecutionPermissions",
          "Effect": "Allow",
          "Action": [
            "ssm:SendCommand"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/AWSLicenseManager": "UserSubscriptions"
            }
          }
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-21T19:51:42+00:00"
  },
  "AWSM2ServicePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeSubnets",
            "ec2:CreateNetworkInterface",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeNetworkInterfaces",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:ModifyNetworkInterfaceAttribute"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticfilesystem:DescribeMountTargets"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:RegisterTargets",
            "elasticloadbalancing:DeregisterTargets"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "fsx:DescribeFileSystems"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricData"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": [
                "AWS/M2"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-06-07T20:26:39+00:00"
  },
  "AWSManagedServicesDeploymentToolkitPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:DeleteBucketPolicy",
            "s3:DeleteObject",
            "s3:DeleteObjectTagging",
            "s3:DeleteObjectVersion",
            "s3:DeleteObjectVersionTagging",
            "s3:GetBucketLocation",
            "s3:GetBucketLogging",
            "s3:GetBucketPolicy",
            "s3:GetBucketVersioning",
            "s3:GetLifecycleConfiguration",
            "s3:GetObject",
            "s3:GetObjectAcl",
            "s3:GetObjectAttributes",
            "s3:GetObjectLegalHold",
            "s3:GetObjectRetention",
            "s3:GetObjectTagging",
            "s3:GetObjectVersion",
            "s3:GetObjectVersionAcl",
            "s3:GetObjectVersionAttributes",
            "s3:GetObjectVersionForReplication",
            "s3:GetObjectVersionTagging",
            "s3:GetObjectVersionTorrent",
            "s3:ListBucket",
            "s3:ListBucketVersions",
            "s3:PutBucketAcl",
            "s3:PutBucketLogging",
            "s3:PutBucketObjectLockConfiguration",
            "s3:PutBucketPolicy",
            "s3:PutBucketPublicAccessBlock",
            "s3:PutBucketTagging",
            "s3:PutBucketVersioning",
            "s3:PutEncryptionConfiguration",
            "s3:PutLifecycleConfiguration"
          ],
          "Resource": "arn:aws:s3:::ams-cdktoolkit*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:CreateChangeSet",
            "cloudformation:DeleteChangeSet",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeChangeSet",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStackResources",
            "cloudformation:DescribeStacks",
            "cloudformation:ExecuteChangeSet",
            "cloudformation:GetTemplate",
            "cloudformation:GetTemplateSummary",
            "cloudformation:TagResource",
            "cloudformation:UntagResource",
            "cloudformation:UpdateTerminationProtection"
          ],
          "Resource": "arn:aws:cloudformation:*:*:stack/ams-cdk-toolkit*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ecr:CreateRepository",
            "ecr:DeleteLifecyclePolicy",
            "ecr:DeleteRepository",
            "ecr:DeleteRepositoryPolicy",
            "ecr:DescribeRepositories",
            "ecr:GetLifecyclePolicy",
            "ecr:ListTagsForResource",
            "ecr:PutImageTagMutability",
            "ecr:PutLifecyclePolicy",
            "ecr:SetRepositoryPolicy",
            "ecr:TagResource",
            "ecr:UntagResource"
          ],
          "Resource": "arn:aws:ecr:*:*:repository/ams-cdktoolkit*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-05-10T17:48:44+00:00"
  },
  "AWSManagedServices_ContactsServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iam:ListRoleTags",
            "iam:ListUserTags",
            "tag:GetResources",
            "ec2:DescribeTags"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "s3:GetBucketTagging",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "s3:authType": "REST-HEADER",
              "s3:signatureversion": "AWS4-HMAC-SHA256"
            },
            "NumericGreaterThanEquals": {
              "s3:TlsVersion": "1.2"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-23T17:07:46+00:00"
  },
  "AWSManagedServices_DetectiveControlsConfig_ServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:UpdateTermination*",
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeStackResources",
            "cloudformation:CreateChangeSet",
            "cloudformation:DescribeChangeSet",
            "cloudformation:ExecuteChangeSet",
            "cloudformation:GetTemplateSummary",
            "cloudformation:DescribeStacks"
          ],
          "Resource": [
            "arn:aws:cloudformation:*:*:stack/ams-detective-controls-config-recorder",
            "arn:aws:cloudformation:*:*:stack/ams-detective-controls-config-rules-cdk",
            "arn:aws:cloudformation:*:*:stack/ams-detective-controls-infrastructure-cdk"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "config:DescribeAggregationAuthorizations",
            "config:PutAggregationAuthorization",
            "config:TagResource",
            "config:PutConfigRule"
          ],
          "Resource": [
            "arn:aws:config:*:*:aggregation-authorization/540708452589/*",
            "arn:aws:config:*:*::config-rule/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetBucketPolicy",
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:DeleteBucketPolicy",
            "s3:DeleteObject",
            "s3:ListBucket",
            "s3:ListBucketVersions",
            "s3:GetBucketAcl",
            "s3:PutObject",
            "s3:PutBucketAcl",
            "s3:PutBucketLogging",
            "s3:PutBucketObjectLockConfiguration",
            "s3:PutBucketPolicy",
            "s3:PutBucketPublicAccessBlock",
            "s3:PutBucketTagging",
            "s3:PutBucketVersioning",
            "s3:PutEncryptionConfiguration"
          ],
          "Resource": "arn:aws:s3:::ams-config-record-bucket-*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-12-19T23:11:17+00:00"
  },
  "AWSManagedServices_EventsServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "events:DeleteRule",
            "events:PutTargets",
            "events:PutRule",
            "events:RemoveTargets"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "events:ManagedBy": "events.managedservices.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "events:DescribeRule",
            "events:ListTargetsByRule"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-02-07T18:41:22+00:00"
  },
  "AWSMarketplaceAmiIngestion": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "ec2:ModifySnapshotAttribute"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:ec2:us-east-1::snapshot/snap-*"
        },
        {
          "Action": [
            "ec2:DescribeImageAttribute",
            "ec2:DescribeImages",
            "ec2:DescribeSnapshotAttribute",
            "ec2:ModifyImageAttribute"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-09-25T20:55:10+00:00"
  },
  "AWSMarketplaceDeploymentServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "ManageMarketplaceDeploymentSecrets",
          "Effect": "Allow",
          "Action": [
            "secretsmanager:CreateSecret",
            "secretsmanager:PutSecretValue",
            "secretsmanager:DescribeSecret",
            "secretsmanager:DeleteSecret",
            "secretsmanager:RemoveRegionsFromReplication"
          ],
          "Resource": [
            "arn:aws:secretsmanager:*:*:secret:marketplace-deployment*!*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        },
        {
          "Sid": "ListSecrets",
          "Effect": "Allow",
          "Action": [
            "secretsmanager:ListSecrets"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "TagMarketplaceDeploymentSecrets",
          "Effect": "Allow",
          "Action": [
            "secretsmanager:TagResource"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:secret:marketplace-deployment!*",
          "Condition": {
            "Null": {
              "aws:RequestTag/expirationDate": "false"
            },
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "expirationDate"
              ]
            },
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-15T23:34:33+00:00"
  },
  "AWSMarketplaceFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "aws-marketplace:*",
            "cloudformation:CreateStack",
            "cloudformation:DescribeStackResource",
            "cloudformation:DescribeStackResources",
            "cloudformation:DescribeStacks",
            "cloudformation:List*",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DeleteSecurityGroup",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeImages",
            "ec2:DescribeInstances",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:DescribeVpcs",
            "ec2:RunInstances",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CopyImage",
            "ec2:DeregisterImage",
            "ec2:DescribeSnapshots",
            "ec2:DeleteSnapshot",
            "ec2:CreateImage",
            "ec2:DescribeInstanceStatus",
            "ssm:GetAutomationExecution",
            "ssm:ListDocuments",
            "ssm:DescribeDocument",
            "sns:ListTopics",
            "sns:GetTopicAttributes",
            "sns:CreateTopic",
            "iam:GetRole",
            "iam:GetInstanceProfile",
            "iam:ListRoles",
            "iam:ListInstanceProfiles"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListBucket",
            "s3:GetObject"
          ],
          "Resource": [
            "arn:aws:s3:::*image-build*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "sns:Publish",
            "sns:setTopicAttributes"
          ],
          "Resource": "arn:aws:sns:*:*:*image-build*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringLike": {
              "iam:PassedToService": [
                "ec2.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:StartAutomationExecution"
          ],
          "Resource": [
            "arn:aws:ssm:eu-central-1:906690553262:automation-definition/*",
            "arn:aws:ssm:us-east-1:058657716661:automation-definition/*",
            "arn:aws:ssm:ap-northeast-1:340648487307:automation-definition/*",
            "arn:aws:ssm:eu-west-1:564714592864:automation-definition/*",
            "arn:aws:ssm:us-west-2:243045473901:automation-definition/*",
            "arn:aws:ssm:ap-southeast-2:362149219987:automation-definition/*",
            "arn:aws:ssm:eu-west-2:587945719687:automation-definition/*",
            "arn:aws:ssm:us-east-2:134937423163:automation-definition/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringLike": {
              "iam:PassedToService": [
                "ssm.amazonaws.com"
              ],
              "iam:AssociatedResourceARN": [
                "arn:aws:ssm:eu-central-1:906690553262:automation-definition/*",
                "arn:aws:ssm:us-east-1:058657716661:automation-definition/*",
                "arn:aws:ssm:ap-northeast-1:340648487307:automation-definition/*",
                "arn:aws:ssm:eu-west-1:564714592864:automation-definition/*",
                "arn:aws:ssm:us-west-2:243045473901:automation-definition/*",
                "arn:aws:ssm:ap-southeast-2:362149219987:automation-definition/*",
                "arn:aws:ssm:eu-west-2:587945719687:automation-definition/*",
                "arn:aws:ssm:us-east-2:134937423163:automation-definition/*"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2022-03-04T17:04:00+00:00"
  },
  "AWSMarketplaceGetEntitlements": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "aws-marketplace:GetEntitlements"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2017-03-27T19:37:24+00:00"
  },
  "AWSMarketplaceImageBuildFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "aws-marketplace:ListBuilds",
            "aws-marketplace:StartBuild",
            "aws-marketplace:DescribeBuilds"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "ec2:TerminateInstances",
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/marketplace-image-build:build-id": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": [
            "arn:aws:iam::*:role/*Automation*",
            "arn:aws:iam::*:role/*Instance*"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "ec2.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:GetAutomationExecution",
            "ssm:ListDocuments",
            "ssm:DescribeDocument",
            "ec2:DeregisterImage",
            "ec2:CopyImage",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeImages",
            "ec2:DescribeSubnets",
            "ec2:DeleteSnapshot",
            "ec2:CreateImage",
            "ec2:RunInstances",
            "ec2:DescribeInstanceStatus",
            "sns:GetTopicAttributes",
            "iam:GetRole",
            "iam:GetInstanceProfile"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:ListBucket"
          ],
          "Resource": [
            "arn:aws:s3:::*image-build*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": [
            "arn:aws:ec2:*::image/*",
            "arn:aws:ec2:*:*:instance/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "sns:Publish"
          ],
          "Resource": [
            "arn:aws:sns:*:*:*image-build*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:StartAutomationExecution"
          ],
          "Resource": [
            "arn:aws:ssm:eu-central-1:906690553262:automation-definition/*",
            "arn:aws:ssm:us-east-1:058657716661:automation-definition/*",
            "arn:aws:ssm:ap-northeast-1:340648487307:automation-definition/*",
            "arn:aws:ssm:eu-west-1:564714592864:automation-definition/*",
            "arn:aws:ssm:us-west-2:243045473901:automation-definition/*",
            "arn:aws:ssm:ap-southeast-2:362149219987:automation-definition/*",
            "arn:aws:ssm:eu-west-2:587945719687:automation-definition/*",
            "arn:aws:ssm:us-east-2:134937423163:automation-definition/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringLike": {
              "iam:PassedToService": [
                "ssm.amazonaws.com"
              ],
              "iam:AssociatedResourceARN": [
                "arn:aws:ssm:eu-central-1:906690553262:automation-definition/*",
                "arn:aws:ssm:us-east-1:058657716661:automation-definition/*",
                "arn:aws:ssm:ap-northeast-1:340648487307:automation-definition/*",
                "arn:aws:ssm:eu-west-1:564714592864:automation-definition/*",
                "arn:aws:ssm:us-west-2:243045473901:automation-definition/*",
                "arn:aws:ssm:ap-southeast-2:362149219987:automation-definition/*",
                "arn:aws:ssm:eu-west-2:587945719687:automation-definition/*",
                "arn:aws:ssm:us-east-2:134937423163:automation-definition/*"
              ]
            }
          }
        },
        {
          "Effect": "Deny",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "StringLike": {
              "aws:RequestTag/marketplace-image-build:build-id": "*"
            },
            "StringNotEquals": {
              "ec2:CreateAction": "RunInstances"
            }
          }
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2022-03-04T17:05:09+00:00"
  },
  "AWSMarketplaceLicenseManagementServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AllowLicenseManagerActions",
          "Effect": "Allow",
          "Action": [
            "organizations:DescribeOrganization",
            "license-manager:ListReceivedGrants",
            "license-manager:ListDistributedGrants",
            "license-manager:GetGrant",
            "license-manager:CreateGrant",
            "license-manager:CreateGrantVersion",
            "license-manager:DeleteGrant",
            "license-manager:AcceptGrant"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-03T08:33:40+00:00"
  },
  "AWSMarketplaceManageSubscriptions": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "aws-marketplace:ViewSubscriptions",
            "aws-marketplace:Subscribe",
            "aws-marketplace:Unsubscribe"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "aws-marketplace:CreatePrivateMarketplaceRequests",
            "aws-marketplace:ListPrivateMarketplaceRequests",
            "aws-marketplace:DescribePrivateMarketplaceRequests"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "aws-marketplace:ListPrivateListings"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-01-19T23:45:29+00:00"
  },
  "AWSMarketplaceMeteringFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "aws-marketplace:MeterUsage"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2016-03-17T22:39:22+00:00"
  },
  "AWSMarketplaceMeteringRegisterUsage": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "aws-marketplace:RegisterUsage"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-11-21T01:17:54+00:00"
  },
  "AWSMarketplaceProcurementSystemAdminFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "aws-marketplace:PutProcurementSystemConfiguration",
            "aws-marketplace:DescribeProcurementSystemConfiguration",
            "organizations:Describe*",
            "organizations:List*"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-06-25T13:07:47+00:00"
  },
  "AWSMarketplacePurchaseOrdersServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AllowPurchaseOrderActions",
          "Effect": "Allow",
          "Action": [
            "purchase-orders:ViewPurchaseOrders",
            "purchase-orders:ModifyPurchaseOrders"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-10-27T15:12:37+00:00"
  },
  "AWSMarketplaceRead-only": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Resource": "*",
          "Action": [
            "aws-marketplace:ViewSubscriptions",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeImages",
            "ec2:DescribeInstances",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs"
          ],
          "Effect": "Allow"
        },
        {
          "Resource": "*",
          "Effect": "Allow",
          "Action": [
            "aws-marketplace:ListBuilds",
            "aws-marketplace:DescribeBuilds",
            "iam:ListRoles",
            "iam:ListInstanceProfiles",
            "sns:GetTopicAttributes",
            "sns:ListTopics"
          ]
        },
        {
          "Resource": "*",
          "Effect": "Allow",
          "Action": [
            "aws-marketplace:ListPrivateMarketplaceRequests",
            "aws-marketplace:DescribePrivateMarketplaceRequests"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "aws-marketplace:ListPrivateListings"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2023-01-19T23:30:25+00:00"
  },
  "AWSMarketplaceSellerFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "aws-marketplace-management:uploadFiles",
            "aws-marketplace-management:viewMarketing",
            "aws-marketplace-management:viewReports",
            "aws-marketplace-management:viewSupport",
            "aws-marketplace-management:viewSettings",
            "aws-marketplace:ListChangeSets",
            "aws-marketplace:DescribeChangeSet",
            "aws-marketplace:StartChangeSet",
            "aws-marketplace:CancelChangeSet",
            "aws-marketplace:ListEntities",
            "aws-marketplace:DescribeEntity",
            "aws-marketplace:ListTasks",
            "aws-marketplace:DescribeTask",
            "aws-marketplace:UpdateTask",
            "aws-marketplace:CompleteTask",
            "aws-marketplace:GetSellerDashboard",
            "ec2:DescribeImages",
            "ec2:DescribeSnapshots",
            "ec2:ModifyImageAttribute",
            "ec2:ModifySnapshotAttribute"
          ],
          "Resource": "*"
        },
        {
          "Action": [
            "aws-marketplace:SearchAgreements",
            "aws-marketplace:DescribeAgreement",
            "aws-marketplace:GetAgreementTerms"
          ],
          "Effect": "Allow",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws-marketplace:PartyType": "Proposer"
            },
            "ForAllValues:StringEquals": {
              "aws-marketplace:AgreementType": [
                "PurchaseAgreement"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:GetRole"
          ],
          "Resource": "arn:aws:iam::*:role/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "arn:aws:iam::*:role/*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "assets.marketplace.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "vendor-insights:GetDataSource",
            "vendor-insights:ListDataSources",
            "vendor-insights:ListSecurityProfiles",
            "vendor-insights:GetSecurityProfile",
            "vendor-insights:GetSecurityProfileSnapshot",
            "vendor-insights:ListSecurityProfileSnapshots"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "aws-marketplace:TagResource",
            "aws-marketplace:UntagResource",
            "aws-marketplace:ListTagsForResource"
          ],
          "Resource": "arn:aws:aws-marketplace:*:*:AWSMarketplace/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "aws-marketplace-management:GetSellerVerificationDetails",
            "aws-marketplace-management:PutSellerVerificationDetails",
            "aws-marketplace-management:GetBankAccountVerificationDetails",
            "aws-marketplace-management:PutBankAccountVerificationDetails",
            "aws-marketplace-management:GetSecondaryUserVerificationDetails",
            "aws-marketplace-management:PutSecondaryUserVerificationDetails",
            "aws-marketplace-management:GetAdditionalSellerNotificationRecipients",
            "aws-marketplace-management:PutAdditionalSellerNotificationRecipients",
            "payments:GetPaymentInstrument",
            "payments:CreatePaymentInstrument",
            "tax:GetTaxInterview",
            "tax:PutTaxInterview"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "support:CreateCase"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "aws-marketplace:GetResourcePolicy",
            "aws-marketplace:PutResourcePolicy",
            "aws-marketplace:DeleteResourcePolicy"
          ],
          "Resource": "arn:aws:aws-marketplace:*:*:AWSMarketplace/*"
        }
      ]
    },
    "VersionId": "v9",
    "IsDefaultVersion": true,
    "CreateDate": "2023-06-01T17:46:22+00:00"
  },
  "AWSMarketplaceSellerProductsFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "aws-marketplace:ListChangeSets",
            "aws-marketplace:DescribeChangeSet",
            "aws-marketplace:StartChangeSet",
            "aws-marketplace:CancelChangeSet",
            "aws-marketplace:ListEntities",
            "aws-marketplace:DescribeEntity",
            "aws-marketplace:ListTasks",
            "aws-marketplace:DescribeTask",
            "aws-marketplace:UpdateTask",
            "aws-marketplace:CompleteTask",
            "ec2:DescribeImages",
            "ec2:DescribeSnapshots",
            "ec2:ModifyImageAttribute",
            "ec2:ModifySnapshotAttribute"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:GetRole"
          ],
          "Resource": "arn:aws:iam::*:role/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "arn:aws:iam::*:role/*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "assets.marketplace.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "vendor-insights:GetDataSource",
            "vendor-insights:ListDataSources",
            "vendor-insights:ListSecurityProfiles",
            "vendor-insights:GetSecurityProfile",
            "vendor-insights:GetSecurityProfileSnapshot",
            "vendor-insights:ListSecurityProfileSnapshots"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "aws-marketplace:TagResource",
            "aws-marketplace:UntagResource",
            "aws-marketplace:ListTagsForResource"
          ],
          "Resource": "arn:aws:aws-marketplace:*:*:AWSMarketplace/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "aws-marketplace:GetResourcePolicy",
            "aws-marketplace:PutResourcePolicy",
            "aws-marketplace:DeleteResourcePolicy"
          ],
          "Resource": "arn:aws:aws-marketplace:*:*:AWSMarketplace/*"
        }
      ]
    },
    "VersionId": "v7",
    "IsDefaultVersion": true,
    "CreateDate": "2023-07-18T22:19:58+00:00"
  },
  "AWSMarketplaceSellerProductsReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "aws-marketplace:ListChangeSets",
            "aws-marketplace:DescribeChangeSet",
            "aws-marketplace:ListEntities",
            "aws-marketplace:DescribeEntity",
            "aws-marketplace:ListTasks",
            "aws-marketplace:DescribeTask",
            "ec2:DescribeImages",
            "ec2:DescribeSnapshots"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "aws-marketplace:ListTagsForResource"
          ],
          "Resource": "arn:aws:aws-marketplace:*:*:AWSMarketplace/*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-19T00:08:42+00:00"
  },
  "AWSMediaConnectServicePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ecs:UpdateService",
            "ecs:DeleteService",
            "ecs:CreateService",
            "ecs:DescribeServices",
            "ecs:PutAttributes",
            "ecs:DeleteAttributes",
            "ecs:RunTask",
            "ecs:ListTasks",
            "ecs:StartTask",
            "ecs:StopTask",
            "ecs:DescribeTasks",
            "ecs:DescribeContainerInstances",
            "ecs:UpdateContainerInstancesState"
          ],
          "Resource": "*",
          "Condition": {
            "ArnLike": {
              "ecs:cluster": "arn:aws:ecs:*:*:cluster/MediaConnectGateway"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ecs:CreateCluster",
            "ecs:RegisterTaskDefinition"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ecs:UpdateCluster",
            "ecs:UpdateClusterSettings",
            "ecs:ListAttributes",
            "ecs:DescribeClusters",
            "ecs:DeregisterContainerInstance",
            "ecs:ListContainerInstances"
          ],
          "Resource": "arn:aws:ecs:*:*:cluster/MediaConnectGateway"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-04-03T22:11:40+00:00"
  },
  "AWSMediaTailorServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "logs:PutLogEvents",
          "Resource": "arn:aws:logs:*:*:log-group:MediaTailor/*:log-stream:*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:CreateLogGroup",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:MediaTailor/*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-09-17T22:27:10+00:00"
  },
  "AWSMigrationHubDMSAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "mgh:CreateProgressUpdateStream"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:mgh:*:*:progressUpdateStream/DMS"
        },
        {
          "Action": [
            "mgh:AssociateCreatedArtifact",
            "mgh:DescribeMigrationTask",
            "mgh:DisassociateCreatedArtifact",
            "mgh:ImportMigrationTask",
            "mgh:ListCreatedArtifacts",
            "mgh:NotifyMigrationTaskState",
            "mgh:PutResourceAttributes",
            "mgh:NotifyApplicationState",
            "mgh:DescribeApplicationState",
            "mgh:AssociateDiscoveredResource",
            "mgh:DisassociateDiscoveredResource",
            "mgh:ListDiscoveredResources"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:mgh:*:*:progressUpdateStream/DMS/*"
        },
        {
          "Action": [
            "mgh:ListMigrationTasks",
            "mgh:GetHomeRegion"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2019-10-07T17:51:53+00:00"
  },
  "AWSMigrationHubDiscoveryAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "discovery:ListConfigurations",
            "discovery:DescribeConfigurations"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": [
            "arn:aws:ec2:*:*:instance/*",
            "arn:aws:ec2:*:*:image/*",
            "arn:aws:ec2:*:*:volume/*"
          ],
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": "aws:migrationhub:source-id"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "dms:AddTagsToResource",
          "Resource": [
            "arn:aws:dms:*:*:endpoint:*"
          ],
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": "aws:migrationhub:source-id"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstanceAttribute"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2020-08-06T17:34:42+00:00"
  },
  "AWSMigrationHubFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "mgh:*",
            "discovery:*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "iam:GetRole"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/continuousexport.discovery.amazonaws.com/AWSServiceRoleForApplicationDiscoveryServiceContinuousExport*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "continuousexport.discovery.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:DeleteServiceLinkedRole",
            "iam:GetServiceLinkedRoleDeletionStatus"
          ],
          "Resource": "arn:aws:iam::*:role/aws-service-role/continuousexport.discovery.amazonaws.com/AWSServiceRoleForApplicationDiscoveryServiceContinuousExport*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": [
                "migrationhub.amazonaws.com",
                "dmsintegration.migrationhub.amazonaws.com",
                "smsintegration.migrationhub.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2019-06-19T21:14:41+00:00"
  },
  "AWSMigrationHubOrchestratorConsoleFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "migrationhub-orchestrator:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListAllMyBuckets"
          ],
          "Resource": "arn:aws:s3:::*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:GetBucketAcl",
            "s3:GetBucketLocation",
            "s3:ListBucket",
            "s3:ListBucketVersions",
            "s3:PutObject"
          ],
          "Resource": [
            "arn:aws:s3:::migrationhub-orchestrator-*",
            "arn:aws:s3:::migrationhub-orchestrator-*/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:ListSecrets"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "discovery:DescribeConfigurations",
            "discovery:ListConfigurations",
            "discovery:GetDiscoverySummary"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "mgh:GetHomeRegion"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstances"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:ListInstanceProfiles"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "migrationhub-orchestrator.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:GetRole"
          ],
          "Resource": "arn:aws:iam::*:role/aws-service-role/migrationhub-orchestrator.amazonaws.com/AWSServiceRoleForMigrationHubOrchestrator*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-04-20T02:26:28+00:00"
  },
  "AWSMigrationHubOrchestratorInstanceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:GetSecretValue"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:secret:migrationhub-orchestrator-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": [
            "arn:aws:s3:::migrationhub-orchestrator-*",
            "arn:aws:s3:::aws-migrationhub-orchestrator-*/*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-04-20T02:43:50+00:00"
  },
  "AWSMigrationHubOrchestratorPlugin": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:CreateBucket",
            "s3:PutObject",
            "s3:GetObject",
            "s3:GetBucketAcl"
          ],
          "Resource": "arn:aws:s3:::migrationhub-orchestrator-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListAllMyBuckets"
          ],
          "Resource": "arn:aws:s3:::*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "execute-api:Invoke",
            "execute-api:ManageConnections"
          ],
          "Resource": [
            "arn:aws:execute-api:*:*:*/prod/*/put-log-data",
            "arn:aws:execute-api:*:*:*/prod/*/put-metric-data"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "migrationhub-orchestrator:RegisterPlugin",
            "migrationhub-orchestrator:GetMessage",
            "migrationhub-orchestrator:SendMessage"
          ],
          "Resource": "arn:aws:migrationhub-orchestrator:*:*:*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:GetSecretValue"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:secret:migrationhub-orchestrator-*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-04-20T02:25:10+00:00"
  },
  "AWSMigrationHubOrchestratorServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "discovery:DescribeConfigurations",
            "discovery:ListConfigurations"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "launchwizard:ListProvisionedApps",
            "launchwizard:DescribeProvisionedApp"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstances"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateLaunchTemplateVersion",
            "ec2:ModifyLaunchTemplate"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/AWSApplicationMigrationServiceManaged": "mgn.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeLaunchTemplates"
          ],
          "Resource": "*"
        },
        {
          "Action": [
            "mgh:GetHomeRegion"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:SendCommand",
            "ssm:GetCommandInvocation",
            "ssm:CancelCommand"
          ],
          "Resource": [
            "arn:aws:ssm:*::document/AWS-RunRemoteScript",
            "arn:aws:ec2:*:*:instance/*",
            "arn:aws:s3:::aws-migrationhub-orchestrator-*",
            "arn:aws:s3:::migrationhub-orchestrator-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:DescribeInstanceInformation",
            "ssm:GetCommandInvocation"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": [
            "arn:aws:s3:::migrationhub-orchestrator-*",
            "arn:aws:s3:::migrationhub-orchestrator-*/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "events:PutTargets",
            "events:DescribeRule",
            "events:DeleteRule",
            "events:PutRule",
            "events:RemoveTargets"
          ],
          "Resource": "arn:aws:events:*:*:rule/MigrationHubOrchestratorManagedRule*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "mgn:GetReplicationConfiguration",
            "mgn:GetLaunchConfiguration",
            "mgn:StartCutover",
            "mgn:FinalizeCutover",
            "mgn:StartTest",
            "mgn:UpdateReplicationConfiguration",
            "mgn:DescribeSourceServers",
            "mgn:MarkAsArchived",
            "mgn:ChangeServerLifeCycleState"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeImportImageTasks"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "s3:ListBucket",
          "Resource": "arn:aws:s3:::*",
          "Condition": {
            "StringLike": {
              "s3:prefix": "migrationhub-orchestrator-vmie-*"
            }
          }
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-02-24T20:28:36+00:00"
  },
  "AWSMigrationHubRefactorSpaces-EnvironmentsWithoutBridgesFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "RefactorSpaces",
          "Effect": "Allow",
          "Action": [
            "refactor-spaces:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcEndpointServiceConfigurations",
            "ec2:DescribeVpcs",
            "ec2:DescribeTags",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeInternetGateways"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateVpcEndpointServiceConfiguration"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteTags"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/refactor-spaces:environment-id": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:DeleteVpcEndpointServiceConfigurations",
          "Resource": "*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/refactor-spaces:application-id": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:AddTags",
            "elasticloadbalancing:CreateLoadBalancer"
          ],
          "Resource": "arn:*:elasticloadbalancing:*:*:loadbalancer/net/refactor-spaces-nlb-*",
          "Condition": {
            "Null": {
              "aws:RequestTag/refactor-spaces:application-id": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTags",
            "elasticloadbalancing:DescribeTargetHealth",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeListeners"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:RegisterTargets",
            "elasticloadbalancing:CreateLoadBalancerListeners",
            "elasticloadbalancing:CreateListener",
            "elasticloadbalancing:DeleteListener",
            "elasticloadbalancing:DeleteTargetGroup"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/refactor-spaces:route-id": [
                "*"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "elasticloadbalancing:DeleteLoadBalancer",
          "Resource": "arn:*:elasticloadbalancing:*:*:loadbalancer/net/refactor-spaces-nlb-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:AddTags",
            "elasticloadbalancing:CreateListener"
          ],
          "Resource": [
            "arn:*:elasticloadbalancing:*:*:loadbalancer/net/refactor-spaces-nlb-*",
            "arn:*:elasticloadbalancing:*:*:listener/net/refactor-spaces-nlb-*"
          ],
          "Condition": {
            "Null": {
              "aws:RequestTag/refactor-spaces:route-id": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "elasticloadbalancing:DeleteListener",
          "Resource": "arn:*:elasticloadbalancing:*:*:listener/net/refactor-spaces-nlb-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:DeleteTargetGroup",
            "elasticloadbalancing:RegisterTargets"
          ],
          "Resource": "arn:*:elasticloadbalancing:*:*:targetgroup/refactor-spaces-tg-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:AddTags",
            "elasticloadbalancing:CreateTargetGroup"
          ],
          "Resource": "arn:*:elasticloadbalancing:*:*:targetgroup/refactor-spaces-tg-*",
          "Condition": {
            "Null": {
              "aws:RequestTag/refactor-spaces:route-id": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "apigateway:GET",
            "apigateway:DELETE",
            "apigateway:PATCH",
            "apigateway:POST",
            "apigateway:PUT",
            "apigateway:UpdateRestApiPolicy"
          ],
          "Resource": [
            "arn:aws:apigateway:*::/restapis",
            "arn:aws:apigateway:*::/restapis/*",
            "arn:aws:apigateway:*::/vpclinks",
            "arn:aws:apigateway:*::/vpclinks/*",
            "arn:aws:apigateway:*::/tags",
            "arn:aws:apigateway:*::/tags/*"
          ],
          "Condition": {
            "Null": {
              "aws:ResourceTag/refactor-spaces:application-id": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "apigateway:GET",
          "Resource": [
            "arn:aws:apigateway:*::/vpclinks",
            "arn:aws:apigateway:*::/vpclinks/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "organizations:DescribeOrganization"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:CreateStack"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "refactor-spaces.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-07-20T15:39:19+00:00"
  },
  "AWSMigrationHubRefactorSpaces-SSMAutomationPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstances"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:ModifyInstanceAttribute"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/refactor-spaces:ssm:optin": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:ModifyInstanceAttribute"
          ],
          "Resource": "arn:aws:ec2:*:*:security-group/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags",
            "ec2:DeleteTags"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/refactor-spaces:ssm:optin": "true"
            },
            "ForAllValues:StringEquals": {
              "aws:TagKeys": "refactor-spaces:ssm:environment-id"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ssm:GetParameters",
          "Resource": "arn:aws:ssm:*:*:parameter/ManagedByAWSApplicationMigrationService-*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-08-10T15:08:14+00:00"
  },
  "AWSMigrationHubRefactorSpacesFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "RefactorSpaces",
          "Effect": "Allow",
          "Action": [
            "refactor-spaces:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcEndpointServiceConfigurations",
            "ec2:DescribeVpcs",
            "ec2:DescribeTransitGatewayVpcAttachments",
            "ec2:DescribeTransitGateways",
            "ec2:DescribeTags",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeInternetGateways"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTransitGateway",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTransitGatewayVpcAttachment"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "aws:RequestTag/refactor-spaces:environment-id": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTransitGateway",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTransitGatewayVpcAttachment"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/refactor-spaces:environment-id": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateVpcEndpointServiceConfiguration"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteTransitGateway",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteTransitGatewayVpcAttachment",
            "ec2:CreateRoute",
            "ec2:DeleteRoute",
            "ec2:DeleteTags"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/refactor-spaces:environment-id": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:DeleteVpcEndpointServiceConfigurations",
          "Resource": "*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/refactor-spaces:application-id": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:AddTags",
            "elasticloadbalancing:CreateLoadBalancer"
          ],
          "Resource": "arn:*:elasticloadbalancing:*:*:loadbalancer/net/refactor-spaces-nlb-*",
          "Condition": {
            "Null": {
              "aws:RequestTag/refactor-spaces:application-id": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTags",
            "elasticloadbalancing:DescribeTargetHealth",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeListeners"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:RegisterTargets",
            "elasticloadbalancing:CreateLoadBalancerListeners",
            "elasticloadbalancing:CreateListener",
            "elasticloadbalancing:DeleteListener",
            "elasticloadbalancing:DeleteTargetGroup"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/refactor-spaces:route-id": [
                "*"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "elasticloadbalancing:DeleteLoadBalancer",
          "Resource": "arn:*:elasticloadbalancing:*:*:loadbalancer/net/refactor-spaces-nlb-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:AddTags",
            "elasticloadbalancing:CreateListener"
          ],
          "Resource": [
            "arn:*:elasticloadbalancing:*:*:loadbalancer/net/refactor-spaces-nlb-*",
            "arn:*:elasticloadbalancing:*:*:listener/net/refactor-spaces-nlb-*"
          ],
          "Condition": {
            "Null": {
              "aws:RequestTag/refactor-spaces:route-id": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "elasticloadbalancing:DeleteListener",
          "Resource": "arn:*:elasticloadbalancing:*:*:listener/net/refactor-spaces-nlb-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:DeleteTargetGroup",
            "elasticloadbalancing:RegisterTargets"
          ],
          "Resource": "arn:*:elasticloadbalancing:*:*:targetgroup/refactor-spaces-tg-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:AddTags",
            "elasticloadbalancing:CreateTargetGroup"
          ],
          "Resource": "arn:*:elasticloadbalancing:*:*:targetgroup/refactor-spaces-tg-*",
          "Condition": {
            "Null": {
              "aws:RequestTag/refactor-spaces:route-id": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "apigateway:GET",
            "apigateway:DELETE",
            "apigateway:PATCH",
            "apigateway:POST",
            "apigateway:PUT",
            "apigateway:UpdateRestApiPolicy"
          ],
          "Resource": [
            "arn:aws:apigateway:*::/restapis",
            "arn:aws:apigateway:*::/restapis/*",
            "arn:aws:apigateway:*::/vpclinks",
            "arn:aws:apigateway:*::/vpclinks/*",
            "arn:aws:apigateway:*::/tags",
            "arn:aws:apigateway:*::/tags/*"
          ],
          "Condition": {
            "Null": {
              "aws:ResourceTag/refactor-spaces:application-id": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "apigateway:GET",
          "Resource": [
            "arn:aws:apigateway:*::/vpclinks",
            "arn:aws:apigateway:*::/vpclinks/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "organizations:DescribeOrganization"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:CreateStack"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "refactor-spaces.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2023-07-19T19:07:24+00:00"
  },
  "AWSMigrationHubRefactorSpacesServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSubnets",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeVpcEndpointServiceConfigurations",
            "ec2:DescribeTransitGatewayVpcAttachments",
            "elasticloadbalancing:DescribeTargetHealth",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeTargetGroups",
            "ram:GetResourceShareAssociations"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteTransitGatewayVpcAttachment",
            "ec2:CreateRoute",
            "ec2:DeleteRoute",
            "ec2:DeleteTags",
            "ram:DeleteResourceShare",
            "ram:AssociateResourceShare",
            "ram:DisassociateResourceShare"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/refactor-spaces:environment-id": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:DeleteVpcEndpointServiceConfigurations",
          "Resource": "*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/refactor-spaces:application-id": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:RegisterTargets",
            "elasticloadbalancing:CreateLoadBalancerListeners",
            "elasticloadbalancing:CreateListener",
            "elasticloadbalancing:DeleteListener",
            "elasticloadbalancing:DeleteTargetGroup"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/refactor-spaces:route-id": [
                "*"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "apigateway:PUT",
            "apigateway:POST",
            "apigateway:GET",
            "apigateway:PATCH",
            "apigateway:DELETE"
          ],
          "Resource": [
            "arn:aws:apigateway:*::/restapis",
            "arn:aws:apigateway:*::/restapis/*",
            "arn:aws:apigateway:*::/vpclinks/*",
            "arn:aws:apigateway:*::/tags",
            "arn:aws:apigateway:*::/tags/*"
          ],
          "Condition": {
            "Null": {
              "aws:ResourceTag/refactor-spaces:application-id": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "apigateway:GET",
          "Resource": "arn:aws:apigateway:*::/vpclinks/*"
        },
        {
          "Effect": "Allow",
          "Action": "elasticloadbalancing:DeleteLoadBalancer",
          "Resource": "arn:*:elasticloadbalancing:*:*:loadbalancer/net/refactor-spaces-nlb-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:AddTags",
            "elasticloadbalancing:CreateListener"
          ],
          "Resource": [
            "arn:*:elasticloadbalancing:*:*:loadbalancer/net/refactor-spaces-nlb-*",
            "arn:*:elasticloadbalancing:*:*:listener/net/refactor-spaces-nlb-*"
          ],
          "Condition": {
            "Null": {
              "aws:RequestTag/refactor-spaces:route-id": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "elasticloadbalancing:DeleteListener",
          "Resource": "arn:*:elasticloadbalancing:*:*:listener/net/refactor-spaces-nlb-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:DeleteTargetGroup",
            "elasticloadbalancing:RegisterTargets"
          ],
          "Resource": "arn:*:elasticloadbalancing:*:*:targetgroup/refactor-spaces-tg-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:DeregisterTargets"
          ],
          "Resource": "arn:*:elasticloadbalancing:*:*:targetgroup/refactor-spaces-tg-*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/refactor-spaces:route-id": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:AddTags",
            "elasticloadbalancing:CreateTargetGroup"
          ],
          "Resource": "arn:*:elasticloadbalancing:*:*:targetgroup/refactor-spaces-tg-*",
          "Condition": {
            "Null": {
              "aws:RequestTag/refactor-spaces:route-id": "false"
            }
          }
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-07-20T15:57:53+00:00"
  },
  "AWSMigrationHubSMSAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "mgh:CreateProgressUpdateStream"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:mgh:*:*:progressUpdateStream/SMS"
        },
        {
          "Action": [
            "mgh:AssociateCreatedArtifact",
            "mgh:DescribeMigrationTask",
            "mgh:DisassociateCreatedArtifact",
            "mgh:ImportMigrationTask",
            "mgh:ListCreatedArtifacts",
            "mgh:NotifyMigrationTaskState",
            "mgh:PutResourceAttributes",
            "mgh:NotifyApplicationState",
            "mgh:DescribeApplicationState",
            "mgh:AssociateDiscoveredResource",
            "mgh:DisassociateDiscoveredResource",
            "mgh:ListDiscoveredResources"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:mgh:*:*:progressUpdateStream/SMS/*"
        },
        {
          "Action": [
            "mgh:ListMigrationTasks",
            "mgh:GetHomeRegion"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2019-10-07T18:01:22+00:00"
  },
  "AWSMigrationHubStrategyCollector": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "MHSRAllowS3Resources",
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:PutObject",
            "s3:GetBucketAcl",
            "s3:CreateBucket",
            "s3:PutEncryptionConfiguration",
            "s3:PutBucketPublicAccessBlock",
            "s3:PutBucketVersioning",
            "s3:PutLifecycleConfiguration"
          ],
          "Resource": "arn:aws:s3:::migrationhub-strategy-*"
        },
        {
          "Sid": "MHSRAllowS3ListBucket",
          "Effect": "Allow",
          "Action": [
            "s3:ListAllMyBuckets"
          ],
          "Resource": "arn:aws:s3:::*"
        },
        {
          "Sid": "MHSRAllowExecuteAPI",
          "Effect": "Allow",
          "Action": [
            "execute-api:Invoke",
            "execute-api:ManageConnections"
          ],
          "Resource": [
            "arn:aws:execute-api:*:*:*/prod/*/put-log-data",
            "arn:aws:execute-api:*:*:*/prod/*/put-metric-data"
          ]
        },
        {
          "Sid": "MHSRAllowCollectorAPI",
          "Effect": "Allow",
          "Action": [
            "migrationhub-strategy:RegisterCollector",
            "migrationhub-strategy:GetAntiPattern",
            "migrationhub-strategy:GetMessage",
            "migrationhub-strategy:SendMessage",
            "migrationhub-strategy:ListAntiPatterns",
            "migrationhub-strategy:ListJarArtifacts",
            "migrationhub-strategy:UpdateCollectorConfiguration"
          ],
          "Resource": "arn:aws:migrationhub-strategy:*:*:*"
        },
        {
          "Sid": "MHSRAllowSecretsManager",
          "Effect": "Allow",
          "Action": [
            "secretsmanager:GetSecretValue"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:secret:migrationhub-strategy-*"
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2023-10-12T16:44:29+00:00"
  },
  "AWSMigrationHubStrategyConsoleFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "migrationhub-strategy:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListAllMyBuckets"
          ],
          "Resource": "arn:aws:s3:::*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:CreateBucket",
            "s3:PutEncryptionConfiguration",
            "s3:PutBucketPublicAccessBlock",
            "s3:PutBucketPolicy",
            "s3:PutBucketVersioning",
            "s3:PutLifecycleConfiguration"
          ],
          "Resource": "arn:aws:s3:::migrationhub-strategy-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:ListSecrets"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "discovery:GetDiscoverySummary",
            "discovery:DescribeTags",
            "discovery:DescribeConfigurations",
            "discovery:ListConfigurations"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "migrationhub-strategy.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:GetRole"
          ],
          "Resource": "arn:aws:iam::*:role/aws-service-role/migrationhub-strategy.amazonaws.com/AWSMigrationHubStrategyServiceRolePolicy*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-09T00:00:06+00:00"
  },
  "AWSMigrationHubStrategyServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "permissionsForAds",
          "Effect": "Allow",
          "Action": [
            "discovery:ListConfigurations",
            "discovery:DescribeConfigurations",
            "mgh:GetHomeRegion"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListAllMyBuckets"
          ],
          "Resource": "arn:aws:s3:::*"
        },
        {
          "Sid": "permissionsForS3",
          "Effect": "Allow",
          "Action": [
            "s3:GetBucketAcl",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:PutObject",
            "s3:PutObjectAcl"
          ],
          "Resource": "arn:aws:s3:::migrationhub-strategy-*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-10-19T20:02:37+00:00"
  },
  "AWSMobileHub_FullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "apigateway:GET",
            "apigateway:POST",
            "cloudfront:GetDistribution",
            "devicefarm:CreateProject",
            "devicefarm:ListJobs",
            "devicefarm:ListRuns",
            "devicefarm:GetProject",
            "devicefarm:GetRun",
            "devicefarm:ListArtifacts",
            "devicefarm:ListProjects",
            "devicefarm:ScheduleRun",
            "dynamodb:DescribeTable",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "iam:ListSAMLProviders",
            "lambda:ListFunctions",
            "sns:ListTopics",
            "lex:GetIntent",
            "lex:GetIntents",
            "lex:GetSlotType",
            "lex:GetSlotTypes",
            "lex:GetBot",
            "lex:GetBots",
            "lex:GetBotAlias",
            "lex:GetBotAliases",
            "mobilehub:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": "arn:aws:s3:::*/aws-my-sample-app*.zip"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:PutObject"
          ],
          "Resource": "arn:aws:s3:::*-mobilehub-*/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListBucket"
          ],
          "Resource": "arn:aws:s3:::*-mobilehub-*"
        }
      ]
    },
    "VersionId": "v14",
    "IsDefaultVersion": true,
    "CreateDate": "2019-12-19T23:15:52+00:00"
  },
  "AWSMobileHub_ReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:DescribeTable",
            "iam:ListSAMLProviders",
            "lambda:ListFunctions",
            "sns:ListTopics",
            "lex:GetIntent",
            "lex:GetIntents",
            "lex:GetSlotType",
            "lex:GetSlotTypes",
            "lex:GetBot",
            "lex:GetBots",
            "lex:GetBotAlias",
            "lex:GetBotAliases",
            "mobilehub:ExportProject",
            "mobilehub:GenerateProjectParameters",
            "mobilehub:GetProject",
            "mobilehub:SynchronizeProject",
            "mobilehub:GetProjectSnapshot",
            "mobilehub:ListProjectSnapshots",
            "mobilehub:ListAvailableConnectors",
            "mobilehub:ListAvailableFeatures",
            "mobilehub:ListAvailableRegions",
            "mobilehub:ListProjects",
            "mobilehub:ValidateProject",
            "mobilehub:VerifyServiceRole",
            "mobilehub:DescribeBundle",
            "mobilehub:ExportBundle",
            "mobilehub:ListBundles"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": "arn:aws:s3:::*/aws-my-sample-app*.zip"
        }
      ]
    },
    "VersionId": "v10",
    "IsDefaultVersion": true,
    "CreateDate": "2018-07-23T21:59:05+00:00"
  },
  "AWSNetworkFirewallServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:CreateVpcEndpoint",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeInstances",
            "ec2:DescribeNetworkInterfaces"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "acm:DescribeCertificate",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "resource-groups:ListGroupResources",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "tag:GetResources",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:CalledViaLast": "resource-groups.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "CreateVpcEndpoint",
              "aws:RequestTag/AWSNetworkFirewallManaged": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteVpcEndpoints"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/AWSNetworkFirewallManaged": "true"
            }
          }
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-30T17:19:09+00:00"
  },
  "AWSNetworkManagerCloudWANServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTransitGatewayRouteTableAnnouncement",
            "ec2:DeleteTransitGatewayRouteTableAnnouncement",
            "ec2:EnableTransitGatewayRouteTablePropagation",
            "ec2:DisableTransitGatewayRouteTablePropagation"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-07-12T12:17:49+00:00"
  },
  "AWSNetworkManagerFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "networkmanager:*",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": [
                "networkmanager.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-12-03T17:37:58+00:00"
  },
  "AWSNetworkManagerReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "networkmanager:Describe*",
            "networkmanager:Get*",
            "networkmanager:List*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-12-03T17:35:05+00:00"
  },
  "AWSNetworkManagerServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "directconnect:DescribeDirectConnectGateways",
            "directconnect:DescribeConnections",
            "directconnect:DescribeDirectConnectGatewayAttachments",
            "directconnect:DescribeLocations",
            "directconnect:DescribeVirtualInterfaces",
            "ec2:DescribeCustomerGateways",
            "ec2:DescribeTransitGatewayAttachments",
            "ec2:DescribeTransitGatewayRouteTables",
            "ec2:DescribeTransitGateways",
            "ec2:DescribeVpnConnections",
            "ec2:DescribeVpcs",
            "ec2:GetTransitGatewayRouteTableAssociations",
            "ec2:GetTransitGatewayRouteTablePropagations",
            "ec2:SearchTransitGatewayRoutes",
            "ec2:DescribeTransitGatewayPeeringAttachments",
            "ec2:DescribeTransitGatewayConnects",
            "ec2:DescribeTransitGatewayConnectPeers",
            "ec2:DescribeRegions",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAccounts",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListDelegatedAdministrators",
            "ec2:DescribeTransitGatewayRouteTableAnnouncements",
            "ec2:DescribeTransitGatewayPolicyTables",
            "ec2:GetTransitGatewayPolicyTableAssociations",
            "ec2:GetTransitGatewayPolicyTableEntries"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v8",
    "IsDefaultVersion": true,
    "CreateDate": "2022-07-27T19:41:29+00:00"
  },
  "AWSOpsWorksCMInstanceProfileRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "cloudformation:DescribeStackResource",
            "cloudformation:SignalResource"
          ],
          "Effect": "Allow",
          "Resource": [
            "*"
          ]
        },
        {
          "Action": [
            "s3:AbortMultipartUpload",
            "s3:DeleteObject",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ListMultipartUploadParts",
            "s3:PutObject"
          ],
          "Resource": "arn:aws:s3:::aws-opsworks-cm-*",
          "Effect": "Allow"
        },
        {
          "Action": "acm:GetCertificate",
          "Resource": "*",
          "Effect": "Allow"
        },
        {
          "Action": "secretsmanager:GetSecretValue",
          "Resource": "arn:aws:secretsmanager:*:*:opsworks-cm!aws-opsworks-cm-secrets-*",
          "Effect": "Allow"
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2021-04-23T17:34:03+00:00"
  },
  "AWSOpsWorksCMServiceRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Resource": [
            "arn:aws:s3:::aws-opsworks-cm-*"
          ],
          "Action": [
            "s3:CreateBucket",
            "s3:DeleteObject",
            "s3:DeleteBucket",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:PutBucketPolicy",
            "s3:PutObject",
            "s3:GetBucketTagging",
            "s3:PutBucketTagging"
          ]
        },
        {
          "Effect": "Allow",
          "Resource": [
            "*"
          ],
          "Action": [
            "tag:UntagResources",
            "tag:TagResources"
          ]
        },
        {
          "Effect": "Allow",
          "Resource": [
            "*"
          ],
          "Action": [
            "ssm:DescribeInstanceInformation",
            "ssm:GetCommandInvocation",
            "ssm:ListCommandInvocations",
            "ssm:ListCommands"
          ]
        },
        {
          "Effect": "Allow",
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringLike": {
              "ssm:resourceTag/aws:cloudformation:stack-name": "aws-opsworks-cm-*"
            }
          },
          "Action": [
            "ssm:SendCommand"
          ]
        },
        {
          "Effect": "Allow",
          "Resource": [
            "arn:aws:ssm:*::document/*",
            "arn:aws:s3:::aws-opsworks-cm-*"
          ],
          "Action": [
            "ssm:SendCommand"
          ]
        },
        {
          "Effect": "Allow",
          "Resource": [
            "*"
          ],
          "Action": [
            "ec2:AllocateAddress",
            "ec2:AssociateAddress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateImage",
            "ec2:CreateSecurityGroup",
            "ec2:CreateSnapshot",
            "ec2:CreateTags",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteSnapshot",
            "ec2:DeregisterImage",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstances",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSubnets",
            "ec2:DisassociateAddress",
            "ec2:ReleaseAddress",
            "ec2:RunInstances",
            "ec2:StopInstances"
          ]
        },
        {
          "Effect": "Allow",
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/aws:cloudformation:stack-name": "aws-opsworks-cm-*"
            }
          },
          "Action": [
            "ec2:TerminateInstances",
            "ec2:RebootInstances"
          ]
        },
        {
          "Effect": "Allow",
          "Resource": [
            "arn:aws:opsworks-cm:*:*:server/*"
          ],
          "Action": [
            "opsworks-cm:DeleteServer",
            "opsworks-cm:StartMaintenance"
          ]
        },
        {
          "Effect": "Allow",
          "Resource": [
            "arn:aws:cloudformation:*:*:stack/aws-opsworks-cm-*"
          ],
          "Action": [
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStackResources",
            "cloudformation:DescribeStacks",
            "cloudformation:UpdateStack"
          ]
        },
        {
          "Effect": "Allow",
          "Resource": [
            "arn:aws:iam::*:role/aws-opsworks-cm-*",
            "arn:aws:iam::*:role/service-role/aws-opsworks-cm-*"
          ],
          "Action": [
            "iam:PassRole"
          ]
        },
        {
          "Effect": "Allow",
          "Resource": "*",
          "Action": [
            "acm:DeleteCertificate",
            "acm:ImportCertificate"
          ]
        },
        {
          "Effect": "Allow",
          "Resource": "arn:aws:secretsmanager:*:*:opsworks-cm!aws-opsworks-cm-secrets-*",
          "Action": [
            "secretsmanager:CreateSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:UpdateSecret",
            "secretsmanager:DeleteSecret",
            "secretsmanager:TagResource",
            "secretsmanager:UntagResource"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "ec2:DeleteTags",
          "Resource": [
            "arn:aws:ec2:*:*:instance/*",
            "arn:aws:ec2:*:*:elastic-ip/*",
            "arn:aws:ec2:*:*:security-group/*"
          ]
        }
      ]
    },
    "VersionId": "v14",
    "IsDefaultVersion": true,
    "CreateDate": "2021-04-23T17:32:13+00:00"
  },
  "AWSOpsWorksCloudWatchLogs": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "logs:DescribeLogStreams"
          ],
          "Resource": [
            "arn:aws:logs:*:*:*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2017-03-30T17:47:19+00:00"
  },
  "AWSOpsWorksInstanceRegistration": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "opsworks:DescribeStackProvisioningParameters",
            "opsworks:DescribeStacks",
            "opsworks:RegisterInstance"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2016-06-03T14:23:15+00:00"
  },
  "AWSOpsWorksRegisterCLI_EC2": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "opsworks:AssignInstance",
            "opsworks:CreateLayer",
            "opsworks:DeregisterInstance",
            "opsworks:DescribeInstances",
            "opsworks:DescribeStackProvisioningParameters",
            "opsworks:DescribeStacks",
            "opsworks:UnassignInstance"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstances"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-06-18T15:56:17+00:00"
  },
  "AWSOpsWorksRegisterCLI_OnPremises": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "opsworks:AssignInstance",
            "opsworks:CreateLayer",
            "opsworks:DeregisterInstance",
            "opsworks:DescribeInstances",
            "opsworks:DescribeStackProvisioningParameters",
            "opsworks:DescribeStacks",
            "opsworks:UnassignInstance"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstances"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateGroup",
            "iam:AddUserToGroup"
          ],
          "Resource": [
            "arn:aws:iam::*:group/AWS/OpsWorks/OpsWorks-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateUser",
            "iam:CreateAccessKey"
          ],
          "Resource": [
            "arn:aws:iam::*:user/AWS/OpsWorks/OpsWorks-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:AttachUserPolicy"
          ],
          "Resource": [
            "arn:aws:iam::*:user/AWS/OpsWorks/OpsWorks-*"
          ],
          "Condition": {
            "ArnEquals": {
              "iam:PolicyARN": "arn:aws:iam::aws:policy/AWSOpsWorksInstanceRegistration"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-06-18T15:33:16+00:00"
  },
  "AWSOpsWorks_FullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:GetMetricStatistics",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeInstances",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "elasticloadbalancing:DescribeInstanceHealth",
            "elasticloadbalancing:DescribeLoadBalancers",
            "iam:GetRolePolicy",
            "iam:ListInstanceProfiles",
            "iam:ListRoles",
            "iam:ListUsers",
            "opsworks:*"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "opsworks.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-01-22T16:29:08+00:00"
  },
  "AWSOrganizationsFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "organizations:*",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "account:PutAlternateContact",
            "account:DeleteAlternateContact",
            "account:GetAlternateContact",
            "account:GetContactInformation",
            "account:PutContactInformation",
            "account:ListRegions",
            "account:EnableRegion",
            "account:DisableRegion"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "organizations.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2022-12-22T18:22:12+00:00"
  },
  "AWSOrganizationsReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "organizations:Describe*",
            "organizations:List*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "account:GetAlternateContact",
            "account:GetContactInformation",
            "account:ListRegions"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2022-12-22T18:08:03+00:00"
  },
  "AWSOrganizationsServiceTrustPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AllowDeletionOfServiceLinkedRoleForOrganizations",
          "Effect": "Allow",
          "Action": [
            "iam:DeleteRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/aws-service-role/organizations.amazonaws.com/*"
          ]
        },
        {
          "Sid": "AllowCreationOfServiceLinkedRoles",
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2017-11-01T06:01:18+00:00"
  },
  "AWSOutpostsAuthorizeServerPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "outposts:StartConnection",
            "outposts:GetConnection"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-01-04T19:23:22+00:00"
  },
  "AWSOutpostsServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:CreateNetworkInterface",
            "ec2:CreateSecurityGroup"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-11-09T22:55:56+00:00"
  },
  "AWSPanoramaApplianceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "PanoramaDeviceCreateLogStream",
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/panorama_device*:log-stream:*"
        },
        {
          "Sid": "PanoramaDeviceCreateLogGroup",
          "Effect": "Allow",
          "Action": "logs:CreateLogGroup",
          "Resource": "arn:aws:logs:*:*:log-group:/aws/panorama_device*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-01T13:13:18+00:00"
  },
  "AWSPanoramaApplianceServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "PanoramaDeviceCreateLogStream",
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/panorama_device*:log-stream:*",
            "arn:aws:logs:*:*:log-group:/aws/panorama/devices/*"
          ]
        },
        {
          "Sid": "PanoramaDeviceCreateLogGroup",
          "Effect": "Allow",
          "Action": "logs:CreateLogGroup",
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/panorama_device*",
            "arn:aws:logs:*:*:log-group:/aws/panorama/devices/*"
          ]
        },
        {
          "Sid": "PanoramaDevicePutMetric",
          "Effect": "Allow",
          "Action": "cloudwatch:PutMetricData",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": "PanoramaDeviceMetrics"
            }
          }
        },
        {
          "Sid": "PanoramaDeviceS3Access",
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:ListBucket",
            "s3:GetObjectVersion"
          ],
          "Resource": [
            "arn:aws:s3:::*-nodepackage-store-*",
            "arn:aws:s3:::*-application-payload-store-*",
            "arn:aws:s3:*:*:accesspoint/panorama*"
          ],
          "Condition": {
            "StringLike": {
              "s3:DataAccessPointArn": "arn:aws:s3:*:*:accesspoint/panorama*"
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-01-17T21:32:36+00:00"
  },
  "AWSPanoramaFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "panorama:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:PutObject",
            "s3:PutObjectAcl",
            "s3:DeleteObject",
            "s3:GetObject",
            "s3:ListBucket"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "s3:DataAccessPointArn": "arn:aws:s3:*:*:accesspoint/panorama*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:GetSecretValue",
            "secretsmanager:DescribeSecret",
            "secretsmanager:ListSecretVersionIds",
            "secretsmanager:PutSecretValue",
            "secretsmanager:UpdateSecret"
          ],
          "Resource": [
            "arn:aws:secretsmanager:*:*:secret:panorama*",
            "arn:aws:secretsmanager:*:*:secret:Panorama*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "panorama.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:Describe*",
            "logs:Get*",
            "logs:List*",
            "logs:StartQuery",
            "logs:StopQuery",
            "logs:TestMetricFilter",
            "logs:FilterLogEvents"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/panorama_device*:log-stream:*",
            "arn:aws:logs:*:*:log-group:/aws/panorama/devices/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:DescribeLogGroups"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:ListMetrics",
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:ListRoles",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "panorama.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2022-01-12T21:21:04+00:00"
  },
  "AWSPanoramaGreengrassGroupRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "PanoramaS3Access",
          "Effect": "Allow",
          "Action": [
            "s3:ListBucket",
            "s3:GetBucket*",
            "s3:GetObject",
            "s3:PutObject"
          ],
          "Resource": [
            "arn:aws:s3:::*aws-panorama*"
          ]
        },
        {
          "Sid": "PanoramaCLoudWatchPutDashboard",
          "Effect": "Allow",
          "Action": "cloudwatch:PutDashboard",
          "Resource": [
            "arn:aws:cloudwatch::*:dashboard/panorama*"
          ]
        },
        {
          "Sid": "PanoramaCloudWatchPutMetricData",
          "Effect": "Allow",
          "Action": "cloudwatch:PutMetricData",
          "Resource": "*"
        },
        {
          "Sid": "PanoramaGreenGrassCloudWatchAccess",
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "logs:CreateLogGroup"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/greengrass/*"
        },
        {
          "Sid": "PanoramaAccess",
          "Effect": "Allow",
          "Action": [
            "panorama:*"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2021-01-06T19:30:35+00:00"
  },
  "AWSPanoramaSageMakerRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "PanoramaSageMakerS3Access",
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:PutObject",
            "s3:GetBucket*"
          ],
          "Resource": [
            "arn:aws:s3:::*aws-panorama*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-01T13:13:54+00:00"
  },
  "AWSPanoramaServiceLinkedRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "PanoramaIoTThingAccess",
          "Effect": "Allow",
          "Action": [
            "iot:CreateThing",
            "iot:DeleteThing",
            "iot:DeleteThingShadow",
            "iot:DescribeThing",
            "iot:GetThingShadow",
            "iot:UpdateThing",
            "iot:UpdateThingShadow"
          ],
          "Resource": [
            "arn:aws:iot:*:*:thing/panorama*"
          ]
        },
        {
          "Sid": "PanoramaIoTCertificateAccess",
          "Effect": "Allow",
          "Action": [
            "iot:AttachThingPrincipal",
            "iot:DetachThingPrincipal",
            "iot:UpdateCertificate",
            "iot:DeleteCertificate",
            "iot:AttachPrincipalPolicy",
            "iot:DetachPrincipalPolicy"
          ],
          "Resource": [
            "arn:aws:iot:*:*:thing/panorama*",
            "arn:aws:iot:*:*:cert/*"
          ]
        },
        {
          "Sid": "PanoramaIoTCreateCertificateAccess",
          "Effect": "Allow",
          "Action": [
            "iot:CreateKeysAndCertificate"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "PanoramaIoTCreatePolicyAndVersionAccess",
          "Effect": "Allow",
          "Action": [
            "iot:CreatePolicy",
            "iot:CreatePolicyVersion",
            "iot:AttachPolicy"
          ],
          "Resource": [
            "arn:aws:iot:*:*:policy/panorama*"
          ]
        },
        {
          "Sid": "PanoramaIoTJobAccess",
          "Effect": "Allow",
          "Action": [
            "iot:DescribeJobExecution",
            "iot:CreateJob",
            "iot:DeleteJob"
          ],
          "Resource": [
            "arn:aws:iot:*:*:job/panorama*",
            "arn:aws:iot:*:*:thing/panorama*"
          ]
        },
        {
          "Sid": "PanoramaIoTEndpointAccess",
          "Effect": "Allow",
          "Action": [
            "iot:DescribeEndpoint"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "PanoramaReadOnlyAccess",
          "Effect": "Allow",
          "Action": [
            "panorama:Describe*",
            "panorama:List*"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "SecretsManagerPermissions",
          "Effect": "Allow",
          "Action": [
            "secretsmanager:GetSecretValue",
            "secretsmanager:DescribeSecret",
            "secretsmanager:CreateSecret",
            "secretsmanager:ListSecretVersionIds",
            "secretsmanager:DeleteSecret"
          ],
          "Resource": [
            "arn:aws:secretsmanager:*:*:secret:panorama*",
            "arn:aws:secretsmanager:*:*:secret:Panorama*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-10-20T12:12:50+00:00"
  },
  "AWSPanoramaServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "PanoramaIoTThingAccess",
          "Effect": "Allow",
          "Action": [
            "iot:CreateThing",
            "iot:DeleteThing",
            "iot:DeleteThingShadow",
            "iot:DescribeThing",
            "iot:GetThingShadow",
            "iot:UpdateThing",
            "iot:UpdateThingShadow"
          ],
          "Resource": [
            "arn:aws:iot:*:*:thing/panorama*"
          ]
        },
        {
          "Sid": "PanoramaIoTCertificateAccess",
          "Effect": "Allow",
          "Action": [
            "iot:AttachThingPrincipal",
            "iot:DetachThingPrincipal",
            "iot:UpdateCertificate",
            "iot:DeleteCertificate",
            "iot:AttachPrincipalPolicy",
            "iot:DetachPrincipalPolicy"
          ],
          "Resource": [
            "arn:aws:iot:*:*:thing/panorama*",
            "arn:aws:iot:*:*:cert/*"
          ]
        },
        {
          "Sid": "PanoramaIoTCreateCertificateAndPolicyAccess",
          "Effect": "Allow",
          "Action": [
            "iot:CreateKeysAndCertificate",
            "iot:CreatePolicy"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "PanoramaIoTCreatePolicyVersionAccess",
          "Effect": "Allow",
          "Action": [
            "iot:CreatePolicyVersion"
          ],
          "Resource": [
            "arn:aws:iot:*:*:policy/panorama*"
          ]
        },
        {
          "Sid": "PanoramaIoTJobAccess",
          "Effect": "Allow",
          "Action": [
            "iot:DescribeJobExecution",
            "iot:CreateJob",
            "iot:DeleteJob"
          ],
          "Resource": [
            "arn:aws:iot:*:*:job/panorama*",
            "arn:aws:iot:*:*:thing/panorama*"
          ]
        },
        {
          "Sid": "PanoramaIoTEndpointAccess",
          "Effect": "Allow",
          "Action": [
            "iot:DescribeEndpoint"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "PanoramaAccess",
          "Effect": "Allow",
          "Action": [
            "panorama:Describe*",
            "panorama:List*",
            "panorama:Get*"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "PanoramaS3Access",
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:PutObject",
            "s3:DeleteObject",
            "s3:DeleteBucket",
            "s3:ListBucket",
            "s3:GetBucket*",
            "s3:CreateBucket"
          ],
          "Resource": [
            "arn:aws:s3:::*aws-panorama*"
          ]
        },
        {
          "Sid": "PanoramaIAMPassSageMakerRoleAccess",
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/AWSPanoramaSageMakerRole",
            "arn:aws:iam::*:role/service-role/AWSPanoramaSageMakerRole"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "sagemaker.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "PanoramaIAMPassGreengrassRoleAccess",
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/AWSPanoramaGreengrassGroupRole",
            "arn:aws:iam::*:role/service-role/AWSPanoramaGreengrassGroupRole",
            "arn:aws:iam::*:role/AWSPanoramaGreengrassRole",
            "arn:aws:iam::*:role/service-role/AWSPanoramaGreengrassRole"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "greengrass.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "PanoramaIAMPassIoTRoleAccess",
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/AWSPanoramaApplianceRole",
            "arn:aws:iam::*:role/service-role/AWSPanoramaApplianceRole"
          ],
          "Condition": {
            "StringEqualsIfExists": {
              "iam:PassedToService": "iot.amazonaws.com"
            }
          }
        },
        {
          "Sid": "PanoramaGreenGrassAccess",
          "Effect": "Allow",
          "Action": [
            "greengrass:AssociateRoleToGroup",
            "greengrass:AssociateServiceRoleToAccount",
            "greengrass:CreateResourceDefinition",
            "greengrass:CreateResourceDefinitionVersion",
            "greengrass:CreateCoreDefinition",
            "greengrass:CreateCoreDefinitionVersion",
            "greengrass:CreateDeployment",
            "greengrass:CreateFunctionDefinition",
            "greengrass:CreateFunctionDefinitionVersion",
            "greengrass:CreateGroup",
            "greengrass:CreateGroupCertificateAuthority",
            "greengrass:CreateGroupVersion",
            "greengrass:CreateLoggerDefinition",
            "greengrass:CreateLoggerDefinitionVersion",
            "greengrass:CreateSubscriptionDefinition",
            "greengrass:CreateSubscriptionDefinitionVersion",
            "greengrass:DeleteCoreDefinition",
            "greengrass:DeleteFunctionDefinition",
            "greengrass:DeleteResourceDefinition",
            "greengrass:DeleteGroup",
            "greengrass:DeleteLoggerDefinition",
            "greengrass:DeleteSubscriptionDefinition",
            "greengrass:DisassociateRoleFromGroup",
            "greengrass:DisassociateServiceRoleFromAccount",
            "greengrass:GetAssociatedRole",
            "greengrass:GetConnectivityInfo",
            "greengrass:GetCoreDefinition",
            "greengrass:GetCoreDefinitionVersion",
            "greengrass:GetDeploymentStatus",
            "greengrass:GetDeviceDefinition",
            "greengrass:GetDeviceDefinitionVersion",
            "greengrass:GetFunctionDefinition",
            "greengrass:GetFunctionDefinitionVersion",
            "greengrass:GetGroup",
            "greengrass:GetGroupCertificateAuthority",
            "greengrass:GetGroupCertificateConfiguration",
            "greengrass:GetGroupVersion",
            "greengrass:GetLoggerDefinition",
            "greengrass:GetLoggerDefinitionVersion",
            "greengrass:GetResourceDefinition",
            "greengrass:GetServiceRoleForAccount",
            "greengrass:GetSubscriptionDefinition",
            "greengrass:GetSubscriptionDefinitionVersion",
            "greengrass:ListCoreDefinitionVersions",
            "greengrass:ListCoreDefinitions",
            "greengrass:ListDeployments",
            "greengrass:ListDeviceDefinitionVersions",
            "greengrass:ListDeviceDefinitions",
            "greengrass:ListFunctionDefinitionVersions",
            "greengrass:ListFunctionDefinitions",
            "greengrass:ListGroupCertificateAuthorities",
            "greengrass:ListGroupVersions",
            "greengrass:ListGroups",
            "greengrass:ListLoggerDefinitionVersions",
            "greengrass:ListLoggerDefinitions",
            "greengrass:ListSubscriptionDefinitionVersions",
            "greengrass:ListSubscriptionDefinitions",
            "greengrass:ResetDeployments",
            "greengrass:UpdateConnectivityInfo",
            "greengrass:UpdateCoreDefinition",
            "greengrass:UpdateDeviceDefinition",
            "greengrass:UpdateFunctionDefinition",
            "greengrass:UpdateGroup",
            "greengrass:UpdateGroupCertificateConfiguration",
            "greengrass:UpdateLoggerDefinition",
            "greengrass:UpdateSubscriptionDefinition",
            "greengrass:UpdateResourceDefinition"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "PanoramaLambdaUsersFunctionAccess",
          "Effect": "Allow",
          "Action": [
            "lambda:GetFunction",
            "lambda:GetFunctionConfiguration",
            "lambda:ListFunctions",
            "lambda:ListVersionsByFunction"
          ],
          "Resource": [
            "arn:aws:lambda:*:*:function:*"
          ]
        },
        {
          "Sid": "PanoramaSageMakerWriteAccess",
          "Effect": "Allow",
          "Action": [
            "sagemaker:CreateTrainingJob",
            "sagemaker:StopTrainingJob",
            "sagemaker:CreateCompilationJob",
            "sagemaker:DescribeCompilationJob",
            "sagemaker:StopCompilationJob"
          ],
          "Resource": [
            "arn:aws:sagemaker:*:*:training-job/panorama*",
            "arn:aws:sagemaker:*:*:compilation-job/panorama*"
          ]
        },
        {
          "Sid": "PanoramaSageMakerListAccess",
          "Effect": "Allow",
          "Action": [
            "sagemaker:ListCompilationJobs"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "PanoramaSageMakerReadAccess",
          "Effect": "Allow",
          "Action": [
            "sagemaker:DescribeTrainingJob"
          ],
          "Resource": [
            "arn:aws:sagemaker:*:*:training-job/*"
          ]
        },
        {
          "Sid": "PanoramaCWLogsAccess",
          "Effect": "Allow",
          "Action": [
            "iot:AttachPolicy",
            "iot:CreateRoleAlias"
          ],
          "Resource": [
            "arn:aws:iot:*:*:policy/panorama*",
            "arn:aws:iot:*:*:rolealias/panorama*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-01T13:14:43+00:00"
  },
  "AWSPriceListServiceFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "pricing:*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2017-11-22T00:36:27+00:00"
  },
  "AWSPrivateCAAuditor": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "acm-pca:CreateCertificateAuthorityAuditReport",
            "acm-pca:DescribeCertificateAuthority",
            "acm-pca:DescribeCertificateAuthorityAuditReport",
            "acm-pca:GetCertificateAuthorityCsr",
            "acm-pca:GetCertificateAuthorityCertificate",
            "acm-pca:GetCertificate",
            "acm-pca:GetPolicy",
            "acm-pca:ListPermissions",
            "acm-pca:ListTags"
          ],
          "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "acm-pca:ListCertificateAuthorities"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-02-14T18:33:44+00:00"
  },
  "AWSPrivateCAFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "acm-pca:*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-02-14T18:20:59+00:00"
  },
  "AWSPrivateCAPrivilegedUser": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "acm-pca:IssueCertificate"
          ],
          "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*",
          "Condition": {
            "StringLike": {
              "acm-pca:TemplateArn": [
                "arn:aws:acm-pca:::template/*CACertificate*/V*"
              ]
            }
          }
        },
        {
          "Effect": "Deny",
          "Action": [
            "acm-pca:IssueCertificate"
          ],
          "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*",
          "Condition": {
            "StringNotLike": {
              "acm-pca:TemplateArn": [
                "arn:aws:acm-pca:::template/*CACertificate*/V*"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "acm-pca:RevokeCertificate",
            "acm-pca:GetCertificate",
            "acm-pca:ListPermissions"
          ],
          "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "acm-pca:ListCertificateAuthorities"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-02-14T18:26:02+00:00"
  },
  "AWSPrivateCAReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": {
        "Effect": "Allow",
        "Action": [
          "acm-pca:DescribeCertificateAuthority",
          "acm-pca:DescribeCertificateAuthorityAuditReport",
          "acm-pca:ListCertificateAuthorities",
          "acm-pca:GetCertificateAuthorityCsr",
          "acm-pca:GetCertificateAuthorityCertificate",
          "acm-pca:GetCertificate",
          "acm-pca:GetPolicy",
          "acm-pca:ListPermissions",
          "acm-pca:ListTags"
        ],
        "Resource": "*"
      }
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-02-14T18:30:50+00:00"
  },
  "AWSPrivateCAUser": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "acm-pca:IssueCertificate"
          ],
          "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*",
          "Condition": {
            "StringLike": {
              "acm-pca:TemplateArn": [
                "arn:aws:acm-pca:::template/EndEntityCertificate/V*"
              ]
            }
          }
        },
        {
          "Effect": "Deny",
          "Action": [
            "acm-pca:IssueCertificate"
          ],
          "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*",
          "Condition": {
            "StringNotLike": {
              "acm-pca:TemplateArn": [
                "arn:aws:acm-pca:::template/EndEntityCertificate/V*"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "acm-pca:RevokeCertificate",
            "acm-pca:GetCertificate",
            "acm-pca:ListPermissions"
          ],
          "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "acm-pca:ListCertificateAuthorities"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-02-14T18:16:08+00:00"
  },
  "AWSPrivateMarketplaceAdminFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "aws-marketplace:AssociateProductsWithPrivateMarketplace",
            "aws-marketplace:DisassociateProductsFromPrivateMarketplace",
            "aws-marketplace:ListPrivateMarketplaceRequests",
            "aws-marketplace:DescribePrivateMarketplaceRequests"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "aws-marketplace:ListEntities",
            "aws-marketplace:DescribeEntity",
            "aws-marketplace:StartChangeSet",
            "aws-marketplace:ListChangeSets",
            "aws-marketplace:DescribeChangeSet",
            "aws-marketplace:CancelChangeSet"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "aws-marketplace:TagResource",
            "aws-marketplace:UntagResource",
            "aws-marketplace:ListTagsForResource"
          ],
          "Resource": "arn:aws:aws-marketplace:*:*:AWSMarketplace/*"
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2022-12-07T20:02:37+00:00"
  },
  "AWSPrivateMarketplaceRequests": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "aws-marketplace:CreatePrivateMarketplaceRequests",
            "aws-marketplace:ListPrivateMarketplaceRequests",
            "aws-marketplace:DescribePrivateMarketplaceRequests"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-10-28T21:44:03+00:00"
  },
  "AWSPrivateNetworksServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricData"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": "AWS/Private5G"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-12-16T23:17:46+00:00"
  },
  "AWSProtonCodeBuildProvisioningBasicAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:CreateLogGroup",
            "logs:PutLogEvents"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/codebuild/AWSProton-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "proton:NotifyResourceDeploymentStatusChange",
          "Resource": "arn:aws:proton:*:*:*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-09T21:04:16+00:00"
  },
  "AWSProtonCodeBuildProvisioningServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:CreateStack",
            "cloudformation:CreateChangeSet",
            "cloudformation:DeleteChangeSet",
            "cloudformation:DeleteStack",
            "cloudformation:UpdateStack",
            "cloudformation:DescribeStacks",
            "cloudformation:DescribeStackEvents",
            "cloudformation:ListStackResources"
          ],
          "Resource": [
            "arn:aws:cloudformation:*:*:stack/AWSProton-CodeBuild-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "codebuild:CreateProject",
            "codebuild:DeleteProject",
            "codebuild:UpdateProject",
            "codebuild:StartBuild",
            "codebuild:StopBuild",
            "codebuild:RetryBuild",
            "codebuild:BatchGetBuilds",
            "codebuild:BatchGetProjects"
          ],
          "Resource": "arn:aws:codebuild:*:*:project/AWSProton*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "*",
          "Condition": {
            "StringEqualsIfExists": {
              "iam:PassedToService": "codebuild.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "servicequotas:GetServiceQuota"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-05-17T16:11:40+00:00"
  },
  "AWSProtonDeveloperAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "codecommit:ListRepositories",
            "codepipeline:GetPipeline",
            "codepipeline:GetPipelineExecution",
            "codepipeline:GetPipelineState",
            "codepipeline:ListPipelineExecutions",
            "codepipeline:ListPipelines",
            "codestar-connections:ListConnections",
            "codestar-connections:UseConnection",
            "proton:CancelServiceInstanceDeployment",
            "proton:CancelServicePipelineDeployment",
            "proton:CreateService",
            "proton:DeleteService",
            "proton:GetAccountRoles",
            "proton:GetAccountSettings",
            "proton:GetEnvironment",
            "proton:GetEnvironmentAccountConnection",
            "proton:GetEnvironmentTemplate",
            "proton:GetEnvironmentTemplateMajorVersion",
            "proton:GetEnvironmentTemplateMinorVersion",
            "proton:GetEnvironmentTemplateVersion",
            "proton:GetRepository",
            "proton:GetRepositorySyncStatus",
            "proton:GetResourcesSummary",
            "proton:GetService",
            "proton:GetServiceInstance",
            "proton:GetServiceTemplate",
            "proton:GetServiceTemplateMajorVersion",
            "proton:GetServiceTemplateMinorVersion",
            "proton:GetServiceTemplateVersion",
            "proton:GetTemplateSyncConfig",
            "proton:GetTemplateSyncStatus",
            "proton:ListEnvironmentAccountConnections",
            "proton:ListEnvironmentOutputs",
            "proton:ListEnvironmentProvisionedResources",
            "proton:ListEnvironments",
            "proton:ListEnvironmentTemplateMajorVersions",
            "proton:ListEnvironmentTemplateMinorVersions",
            "proton:ListEnvironmentTemplates",
            "proton:ListEnvironmentTemplateVersions",
            "proton:ListRepositories",
            "proton:ListRepositorySyncDefinitions",
            "proton:ListServiceInstanceOutputs",
            "proton:ListServiceInstanceProvisionedResources",
            "proton:ListServiceInstances",
            "proton:ListServicePipelineOutputs",
            "proton:ListServicePipelineProvisionedResources",
            "proton:ListServices",
            "proton:ListServiceTemplateMajorVersions",
            "proton:ListServiceTemplateMinorVersions",
            "proton:ListServiceTemplates",
            "proton:ListServiceTemplateVersions",
            "proton:ListTagsForResource",
            "proton:UpdateService",
            "proton:UpdateServiceInstance",
            "proton:UpdateServicePipeline",
            "s3:ListAllMyBuckets",
            "s3:ListBucket"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "codestar-connections:PassConnection",
          "Resource": "arn:aws:codestar-connections:*:*:connection/*",
          "Condition": {
            "StringEquals": {
              "codestar-connections:PassedToService": "proton.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-18T18:35:07+00:00"
  },
  "AWSProtonFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "proton:*",
            "codestar-connections:ListConnections",
            "kms:ListAliases",
            "kms:DescribeKey"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:CreateGrant"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "kms:ViaService": "proton.*.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "proton.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/sync.proton.amazonaws.com/AWSServiceRoleForProtonSync",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "sync.proton.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "codestar-connections:PassConnection"
          ],
          "Resource": "arn:aws:codestar-connections:*:*:connection/*",
          "Condition": {
            "StringEquals": {
              "codestar-connections:PassedToService": "proton.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-06-20T12:36:26+00:00"
  },
  "AWSProtonReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "codepipeline:ListPipelineExecutions",
            "codepipeline:ListPipelines",
            "codepipeline:GetPipeline",
            "codepipeline:GetPipelineState",
            "codepipeline:GetPipelineExecution",
            "proton:GetAccountRoles",
            "proton:GetAccountSettings",
            "proton:GetEnvironment",
            "proton:GetEnvironmentAccountConnection",
            "proton:GetEnvironmentTemplate",
            "proton:GetEnvironmentTemplateMajorVersion",
            "proton:GetEnvironmentTemplateMinorVersion",
            "proton:GetEnvironmentTemplateVersion",
            "proton:GetRepository",
            "proton:GetRepositorySyncStatus",
            "proton:GetResourcesSummary",
            "proton:GetService",
            "proton:GetServiceInstance",
            "proton:GetServiceTemplate",
            "proton:GetServiceTemplateMajorVersion",
            "proton:GetServiceTemplateMinorVersion",
            "proton:GetServiceTemplateVersion",
            "proton:GetTemplateSyncConfig",
            "proton:GetTemplateSyncStatus",
            "proton:ListEnvironmentAccountConnections",
            "proton:ListEnvironmentOutputs",
            "proton:ListEnvironmentProvisionedResources",
            "proton:ListEnvironments",
            "proton:ListEnvironmentTemplateMajorVersions",
            "proton:ListEnvironmentTemplateMinorVersions",
            "proton:ListEnvironmentTemplates",
            "proton:ListEnvironmentTemplateVersions",
            "proton:ListRepositories",
            "proton:ListRepositorySyncDefinitions",
            "proton:ListServiceInstanceOutputs",
            "proton:ListServiceInstanceProvisionedResources",
            "proton:ListServiceInstances",
            "proton:ListServicePipelineOutputs",
            "proton:ListServicePipelineProvisionedResources",
            "proton:ListServices",
            "proton:ListServiceTemplateMajorVersions",
            "proton:ListServiceTemplateMinorVersions",
            "proton:ListServiceTemplates",
            "proton:ListServiceTemplateVersions",
            "proton:ListTagsForResource"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-18T18:28:24+00:00"
  },
  "AWSProtonServiceGitSyncServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "ProtonServiceSync",
          "Effect": "Allow",
          "Action": [
            "proton:GetService",
            "proton:UpdateService",
            "proton:UpdateServicePipeline",
            "proton:GetServiceInstance",
            "proton:CreateServiceInstance",
            "proton:UpdateServiceInstance",
            "proton:ListServiceInstances",
            "proton:GetComponent",
            "proton:CreateComponent",
            "proton:ListComponents",
            "proton:UpdateComponent",
            "proton:GetEnvironment",
            "proton:CreateEnvironment",
            "proton:ListEnvironments",
            "proton:UpdateEnvironment"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-04-04T15:55:48+00:00"
  },
  "AWSProtonSyncServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "SyncToProton",
          "Effect": "Allow",
          "Action": [
            "proton:UpdateServiceTemplateVersion",
            "proton:UpdateServiceTemplate",
            "proton:UpdateEnvironmentTemplateVersion",
            "proton:UpdateEnvironmentTemplate",
            "proton:GetServiceTemplateVersion",
            "proton:GetServiceTemplate",
            "proton:GetEnvironmentTemplateVersion",
            "proton:GetEnvironmentTemplate",
            "proton:DeleteServiceTemplateVersion",
            "proton:DeleteEnvironmentTemplateVersion",
            "proton:CreateServiceTemplateVersion",
            "proton:CreateServiceTemplate",
            "proton:CreateEnvironmentTemplateVersion",
            "proton:CreateEnvironmentTemplate",
            "proton:ListEnvironmentTemplateVersions",
            "proton:ListServiceTemplateVersions",
            "proton:CreateEnvironmentTemplateMajorVersion",
            "proton:CreateServiceTemplateMajorVersion"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AccessGitRepos",
          "Effect": "Allow",
          "Action": [
            "codestar-connections:UseConnection"
          ],
          "Resource": "arn:aws:codestar-connections:*:*:connection/*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-11-23T21:14:36+00:00"
  },
  "AWSPurchaseOrdersServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "account:GetAccountInformation",
            "account:GetContactInformation",
            "aws-portal:*Billing",
            "consolidatedbilling:GetAccountBillingRole",
            "invoicing:GetInvoicePDF",
            "payments:GetPaymentInstrument",
            "payments:ListPaymentPreferences",
            "purchase-orders:AddPurchaseOrder",
            "purchase-orders:DeletePurchaseOrder",
            "purchase-orders:GetPurchaseOrder",
            "purchase-orders:ListPurchaseOrderInvoices",
            "purchase-orders:ListPurchaseOrders",
            "purchase-orders:ListTagsForResource",
            "purchase-orders:ModifyPurchaseOrders",
            "purchase-orders:TagResource",
            "purchase-orders:UntagResource",
            "purchase-orders:UpdatePurchaseOrder",
            "purchase-orders:UpdatePurchaseOrderStatus",
            "purchase-orders:ViewPurchaseOrders",
            "tax:ListTaxRegistrations"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2023-07-17T18:59:18+00:00"
  },
  "AWSQuickSightDescribeRDS": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "rds:Describe*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-11-10T23:24:50+00:00"
  },
  "AWSQuickSightDescribeRedshift": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "redshift:Describe*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-11-10T23:25:01+00:00"
  },
  "AWSQuickSightElasticsearchPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "es:ESHttpGet"
          ],
          "Resource": [
            "arn:aws:es:*:*:domain/*/",
            "arn:aws:es:*:*:domain/*/_cluster/settings",
            "arn:aws:es:*:*:domain/*/_cat/indices"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "es:ListDomainNames",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "es:DescribeElasticsearchDomain",
            "es:DescribeDomain"
          ],
          "Resource": [
            "arn:aws:es:*:*:domain/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "es:ESHttpPost",
            "es:ESHttpGet"
          ],
          "Resource": [
            "arn:aws:es:*:*:domain/*/_opendistro/_sql",
            "arn:aws:es:*:*:domain/*/_plugin/_sql"
          ]
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2021-09-07T23:25:55+00:00"
  },
  "AWSQuickSightIoTAnalyticsAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "iotanalytics:ListDatasets",
            "iotanalytics:DescribeDataset",
            "iotanalytics:GetDatasetContent"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2017-11-29T17:00:54+00:00"
  },
  "AWSQuickSightListIAM": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iam:List*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-11-10T23:25:07+00:00"
  },
  "AWSQuickSightSageMakerPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "SageMakerTransformJobAccess",
          "Effect": "Allow",
          "Action": [
            "sagemaker:DescribeTransformJob",
            "sagemaker:StopTransformJob",
            "sagemaker:CreateTransformJob"
          ],
          "Resource": "arn:aws:sagemaker:*:*:transform-job/quicksight-auto-generated-*"
        },
        {
          "Sid": "SageMakerModelReadAccess",
          "Effect": "Allow",
          "Action": [
            "sagemaker:ListModels",
            "sagemaker:DescribeModel"
          ],
          "Resource": "*"
        },
        {
          "Sid": "S3ObjectReadAccess",
          "Effect": "Allow",
          "Action": "s3:GetObject",
          "Resource": [
            "arn:aws:s3:::quicksight-ml.*",
            "arn:aws:s3:::sagemaker*"
          ]
        },
        {
          "Sid": "S3ObjectUpdateAccess",
          "Effect": "Allow",
          "Action": "s3:PutObject",
          "Resource": "arn:aws:s3:::sagemaker*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        },
        {
          "Sid": "S3BucketReadAccess",
          "Effect": "Allow",
          "Action": "s3:ListBucket",
          "Resource": "arn:aws:s3:::sagemaker*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-10-30T17:57:43+00:00"
  },
  "AWSQuickSightTimestreamPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "timestream:Select",
            "timestream:CancelQuery",
            "timestream:ListTables",
            "timestream:ListDatabases",
            "timestream:ListMeasures",
            "timestream:DescribeTable",
            "timestream:DescribeDatabase",
            "timestream:SelectValues",
            "timestream:DescribeEndpoints"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-09-30T21:47:03+00:00"
  },
  "AWSQuicksightAthenaAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "athena:BatchGetQueryExecution",
            "athena:CancelQueryExecution",
            "athena:GetCatalogs",
            "athena:GetExecutionEngine",
            "athena:GetExecutionEngines",
            "athena:GetNamespace",
            "athena:GetNamespaces",
            "athena:GetQueryExecution",
            "athena:GetQueryExecutions",
            "athena:GetQueryResults",
            "athena:GetQueryResultsStream",
            "athena:GetTable",
            "athena:GetTables",
            "athena:ListQueryExecutions",
            "athena:RunQuery",
            "athena:StartQueryExecution",
            "athena:StopQueryExecution",
            "athena:ListWorkGroups",
            "athena:ListEngineVersions",
            "athena:GetWorkGroup",
            "athena:GetDataCatalog",
            "athena:GetDatabase",
            "athena:GetTableMetadata",
            "athena:ListDataCatalogs",
            "athena:ListDatabases",
            "athena:ListTableMetadata"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "glue:CreateDatabase",
            "glue:DeleteDatabase",
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:UpdateDatabase",
            "glue:CreateTable",
            "glue:DeleteTable",
            "glue:BatchDeleteTable",
            "glue:UpdateTable",
            "glue:GetTable",
            "glue:GetTables",
            "glue:BatchCreatePartition",
            "glue:CreatePartition",
            "glue:DeletePartition",
            "glue:BatchDeletePartition",
            "glue:UpdatePartition",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:BatchGetPartition"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:ListBucketMultipartUploads",
            "s3:ListMultipartUploadParts",
            "s3:AbortMultipartUpload",
            "s3:CreateBucket",
            "s3:PutObject",
            "s3:PutBucketPublicAccessBlock"
          ],
          "Resource": [
            "arn:aws:s3:::aws-athena-query-results-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "lakeformation:GetDataAccess"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v10",
    "IsDefaultVersion": true,
    "CreateDate": "2021-07-07T20:09:06+00:00"
  },
  "AWSQuicksightOpenSearchPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "es:ESHttpGet"
          ],
          "Resource": [
            "arn:aws:es:*:*:domain/*/",
            "arn:aws:es:*:*:domain/*/_cluster/settings",
            "arn:aws:es:*:*:domain/*/_cat/indices"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "es:ListDomainNames",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "es:DescribeDomain"
          ],
          "Resource": [
            "arn:aws:es:*:*:domain/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "es:ESHttpPost",
            "es:ESHttpGet"
          ],
          "Resource": [
            "arn:aws:es:*:*:domain/*/_opendistro/_sql",
            "arn:aws:es:*:*:domain/*/_plugin/_sql"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-09-07T23:26:19+00:00"
  },
  "AWSReachabilityAnalyzerServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:DescribeStacks",
            "cloudformation:ListStackResources",
            "directconnect:DescribeConnections",
            "directconnect:DescribeDirectConnectGatewayAssociations",
            "directconnect:DescribeDirectConnectGatewayAttachments",
            "directconnect:DescribeDirectConnectGateways",
            "directconnect:DescribeVirtualGateways",
            "directconnect:DescribeVirtualInterfaces",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeCustomerGateways",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeManagedPrefixLists",
            "ec2:DescribeNatGateways",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePrefixLists",
            "ec2:DescribeRegions",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeTransitGatewayAttachments",
            "ec2:DescribeTransitGatewayConnects",
            "ec2:DescribeTransitGatewayPeeringAttachments",
            "ec2:DescribeTransitGatewayRouteTables",
            "ec2:DescribeTransitGatewayVpcAttachments",
            "ec2:DescribeTransitGateways",
            "ec2:DescribeVpcEndpointServiceConfigurations",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcPeeringConnections",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpnConnections",
            "ec2:DescribeVpnGateways",
            "ec2:GetManagedPrefixListEntries",
            "ec2:GetTransitGatewayRouteTablePropagations",
            "ec2:SearchTransitGatewayRoutes",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancerAttributes",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeRules",
            "elasticloadbalancing:DescribeTags",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "globalaccelerator:ListAccelerators",
            "globalaccelerator:ListCustomRoutingAccelerators",
            "globalaccelerator:ListCustomRoutingEndpointGroups",
            "globalaccelerator:ListCustomRoutingListeners",
            "globalaccelerator:ListCustomRoutingPortMappings",
            "globalaccelerator:ListEndpointGroups",
            "globalaccelerator:ListListeners",
            "network-firewall:DescribeFirewall",
            "network-firewall:DescribeFirewallPolicy",
            "network-firewall:DescribeResourcePolicy",
            "network-firewall:DescribeRuleGroup",
            "network-firewall:ListFirewallPolicies",
            "network-firewall:ListFirewalls",
            "network-firewall:ListRuleGroups",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListDelegatedAdministrators",
            "resource-groups:ListGroups",
            "resource-groups:ListGroupResources",
            "tag:GetResources",
            "tiros:CreateQuery",
            "tiros:ExtendQuery",
            "tiros:GetQueryAnswer",
            "tiros:GetQueryExplanation",
            "tiros:GetQueryExtensionAccounts"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "apigateway:GET"
          ],
          "Resource": [
            "arn:aws:apigateway:*::/restapis",
            "arn:aws:apigateway:*::/restapis/*/stages",
            "arn:aws:apigateway:*::/restapis/*/stages/*",
            "arn:aws:apigateway:*::/vpclinks"
          ]
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-06-23T21:04:06+00:00"
  },
  "AWSRefactoringToolkitFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "App2ContainerAccess",
          "Effect": "Allow",
          "Action": [
            "a2c:GetContainerizationJobDetails",
            "a2c:GetDeploymentJobDetails",
            "a2c:StartContainerizationJob",
            "a2c:StartDeploymentJob"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CloudformationExecutionAccess",
          "Effect": "Allow",
          "Action": [
            "cloudformation:CreateChangeSet",
            "cloudformation:CreateStack",
            "cloudformation:DescribeChangeSet",
            "cloudformation:DescribeStackEvents",
            "cloudformation:ExecuteChangeSet",
            "cloudformation:UpdateStack"
          ],
          "Resource": [
            "arn:*:cloudformation:*:*:stack/a2c-app-*",
            "arn:*:cloudformation:*:*:stack/a2c-build-*",
            "arn:*:cloudformation:*:*:stack/application-transformation-app-*"
          ]
        },
        {
          "Sid": "CodeBuildCreateAccess",
          "Effect": "Allow",
          "Action": [
            "codebuild:CreateProject",
            "codebuild:UpdateProject"
          ],
          "Resource": "arn:aws:codebuild:*:*:project/*",
          "Condition": {
            "Null": {
              "aws:RequestTag/a2c-generated": "false"
            }
          }
        },
        {
          "Sid": "CodeBuildExecutionAccess",
          "Effect": "Allow",
          "Action": [
            "codebuild:StartBuild"
          ],
          "Resource": "arn:aws:codebuild:*:*:project/*"
        },
        {
          "Sid": "CreateSecurityGroupAccess",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSecurityGroup"
          ],
          "Resource": "*"
        },
        {
          "Sid": "Ec2CreateAccess",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateInternetGateway",
            "ec2:CreateKeyPair",
            "ec2:CreateRoute",
            "ec2:CreateRouteTable",
            "ec2:CreateSubnet",
            "ec2:CreateTags",
            "ec2:CreateVpc",
            "ec2:AuthorizeSecurityGroupIngress"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "aws:RequestTag/a2c-generated": "false"
            }
          }
        },
        {
          "Sid": "Ec2CreateAccessATS",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateInternetGateway",
            "ec2:CreateKeyPair",
            "ec2:CreateRoute",
            "ec2:CreateRouteTable",
            "ec2:CreateSubnet",
            "ec2:CreateTags",
            "ec2:CreateVpc",
            "ec2:AuthorizeSecurityGroupIngress"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "aws:RequestTag/application-transformation": "false"
            }
          }
        },
        {
          "Sid": "Ec2ModifyAccess",
          "Effect": "Allow",
          "Action": [
            "ec2:AssociateRouteTable",
            "ec2:AttachInternetGateway",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:DeleteTags",
            "ec2:ModifySubnetAttribute",
            "ec2:ModifyVpcAttribute",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:CreateSubnet",
            "ec2:CreateRoute",
            "ec2:CreateRouteTable"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/a2c-generated": "false"
            }
          }
        },
        {
          "Sid": "Ec2ModifyAccessATS",
          "Effect": "Allow",
          "Action": [
            "ec2:AssociateRouteTable",
            "ec2:AttachInternetGateway",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:DeleteTags",
            "ec2:ModifySubnetAttribute",
            "ec2:ModifyVpcAttribute",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:CreateSubnet",
            "ec2:CreateRoute",
            "ec2:CreateRouteTable"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/application-transformation": "false"
            }
          }
        },
        {
          "Sid": "EcrCreateAccess",
          "Effect": "Allow",
          "Action": [
            "ecr:CreateRepository",
            "ecr:TagResource"
          ],
          "Resource": "arn:*:ecr:*:*:repository/*",
          "Condition": {
            "Null": {
              "aws:RequestTag/a2c-generated": "false"
            }
          }
        },
        {
          "Sid": "EcrCreateAccessATS",
          "Effect": "Allow",
          "Action": [
            "ecr:CreateRepository",
            "ecr:TagResource"
          ],
          "Resource": "arn:*:ecr:*:*:repository/*",
          "Condition": {
            "Null": {
              "aws:RequestTag/application-transformation": "false"
            }
          }
        },
        {
          "Sid": "EcrModifyAccess",
          "Effect": "Allow",
          "Action": [
            "ecr:GetLifecyclePolicy",
            "ecr:GetRepositoryPolicy",
            "ecr:ListImages",
            "ecr:ListTagsForResource",
            "ecr:TagResource",
            "ecr:UntagResource"
          ],
          "Resource": "arn:*:ecr:*:*:repository/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/a2c-generated": "false"
            }
          }
        },
        {
          "Sid": "EcrModifyAccessATS",
          "Effect": "Allow",
          "Action": [
            "ecr:GetLifecyclePolicy",
            "ecr:GetRepositoryPolicy",
            "ecr:ListImages",
            "ecr:ListTagsForResource",
            "ecr:TagResource",
            "ecr:UntagResource"
          ],
          "Resource": "arn:*:ecr:*:*:repository/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/application-transformation": "false"
            }
          }
        },
        {
          "Sid": "EcsCreateAccess",
          "Effect": "Allow",
          "Action": [
            "ecs:CreateCluster",
            "ecs:CreateService",
            "ecs:RegisterTaskDefinition",
            "ecs:TagResource"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "aws:RequestTag/a2c-generated": "false"
            }
          }
        },
        {
          "Sid": "EcsCreateAccessATS",
          "Effect": "Allow",
          "Action": [
            "ecs:CreateCluster",
            "ecs:CreateService",
            "ecs:RegisterTaskDefinition",
            "ecs:TagResource"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "aws:RequestTag/application-transformation": "false"
            }
          }
        },
        {
          "Sid": "EcsModifyAccess",
          "Effect": "Allow",
          "Action": [
            "ecs:UpdateService",
            "ecs:TagResource",
            "ecs:UntagResource"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/a2c-generated": "false"
            }
          }
        },
        {
          "Sid": "EcsModifyAccessATS",
          "Effect": "Allow",
          "Action": [
            "ecs:UpdateService",
            "ecs:TagResource",
            "ecs:UntagResource"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/application-transformation": "false"
            }
          }
        },
        {
          "Sid": "EcsReadTaskDefinitionAccess",
          "Effect": "Allow",
          "Action": [
            "ecs:DescribeTaskDefinition"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "cloudformation.amazonaws.com"
            }
          }
        },
        {
          "Sid": "EcsExecuteCommandInSidecar",
          "Effect": "Allow",
          "Action": [
            "ecs:ExecuteCommand"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "ecs:container-name": "a2c-sidecar"
            }
          }
        },
        {
          "Sid": "EcsExecuteCommandInSidecarATS",
          "Effect": "Allow",
          "Action": [
            "ecs:ExecuteCommand"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "ecs:container-name": "application-transformation-sidecar"
            }
          }
        },
        {
          "Sid": "CreateEcsServiceLinkedRoleAccess",
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "ecs.amazonaws.com"
            }
          }
        },
        {
          "Sid": "CloudwatchCreateAccess",
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:TagResource"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/codebuild/*:*",
            "arn:aws:logs:*:*:log-group:/aws/ecs/containerinsights/*:*",
            "arn:aws:logs:*:*:log-group:/aws/ecs/container-logs/*:*"
          ],
          "Condition": {
            "Null": {
              "aws:RequestTag/a2c-generated": "false"
            },
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "a2c-generated"
              ]
            }
          }
        },
        {
          "Sid": "CloudwatchCreateAccessATS",
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:TagResource"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/ecs/containerinsights/*:*",
            "arn:aws:logs:*:*:log-group:/aws/ecs/container-logs/*:*"
          ],
          "Condition": {
            "Null": {
              "aws:RequestTag/application-transformation": "false"
            },
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "application-transformation"
              ]
            }
          }
        },
        {
          "Sid": "CloudwatchGetAccess",
          "Effect": "Allow",
          "Action": [
            "logs:GetLogEvents"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/codebuild/*:*",
            "arn:aws:logs:*:*:log-group:/aws/ecs/containerinsights/*:*",
            "arn:aws:logs:*:*:log-group:/aws/ecs/container-logs/*:*"
          ],
          "Condition": {
            "Null": {
              "aws:ResourceTag/a2c-generated": "false"
            }
          }
        },
        {
          "Sid": "CloudwatchGetAccessATS",
          "Effect": "Allow",
          "Action": [
            "logs:GetLogEvents"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/ecs/containerinsights/*:*",
            "arn:aws:logs:*:*:log-group:/aws/ecs/container-logs/*:*"
          ],
          "Condition": {
            "Null": {
              "aws:ResourceTag/application-transformation": "false"
            }
          }
        },
        {
          "Sid": "SsmParameterAccess",
          "Effect": "Allow",
          "Action": [
            "ssm:AddTagsToResource",
            "ssm:GetParameters",
            "ssm:PutParameter",
            "ssm:RemoveTagsFromResource"
          ],
          "Resource": "arn:aws:ssm:*:*:parameter/a2c-generated-check-ecs-slr-*"
        },
        {
          "Sid": "SsmMessagesAccess",
          "Effect": "Allow",
          "Action": [
            "ssm:DescribeSessions",
            "ssmmessages:CreateControlChannel",
            "ssmmessages:CreateDataChannel",
            "ssmmessages:OpenControlChannel",
            "ssmmessages:OpenDataChannel"
          ],
          "Resource": "*"
        },
        {
          "Sid": "S3ObjectAccess",
          "Effect": "Allow",
          "Action": [
            "s3:DeleteObject",
            "s3:GetObject",
            "s3:PutObject"
          ],
          "Resource": [
            "arn:aws:s3:::*/refactoringtoolkit*",
            "arn:aws:s3:::*/a2c-generated*",
            "arn:aws:s3:::*/application-transformation*"
          ]
        },
        {
          "Sid": "S3ListAccess",
          "Effect": "Allow",
          "Action": [
            "s3:ListBucket"
          ],
          "Resource": "arn:aws:s3:::*",
          "Condition": {
            "StringLike": {
              "s3:prefix": [
                "application-transformation",
                "refactoringtoolkit"
              ]
            }
          }
        },
        {
          "Sid": "ReadOnlyAccess",
          "Effect": "Allow",
          "Action": [
            "cloudformation:DescribeStacks",
            "cloudformation:ListStacks",
            "clouddirectory:ListDirectories",
            "codebuild:BatchGetProjects",
            "codebuild:BatchGetBuilds",
            "ds:DescribeDirectories",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeImages",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:DescribeRegions",
            "ecr:DescribeImages",
            "ecr:DescribeRepositories",
            "ecs:DescribeClusters",
            "ecs:DescribeServices",
            "ecs:DescribeTasks",
            "ecs:ListTagsForResource",
            "ecs:ListTasks",
            "iam:ListRoles",
            "s3:GetBucketLocation",
            "s3:GetBucketVersioning",
            "s3:ListAllMyBuckets",
            "secretsmanager:ListSecrets"
          ],
          "Resource": "*"
        },
        {
          "Sid": "GetECSSLR",
          "Effect": "Allow",
          "Action": "iam:GetRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS"
        },
        {
          "Sid": "PortingAssistantFullAccess",
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": [
            "arn:aws:s3:::aws.portingassistant.dotnet.datastore",
            "arn:aws:s3:::aws.portingassistant.dotnet.datastore/*"
          ]
        },
        {
          "Sid": "ApplicationTransformationAccess",
          "Effect": "Allow",
          "Action": [
            "application-transformation:StartPortingCompatibilityAssessment",
            "application-transformation:GetPortingCompatibilityAssessment",
            "application-transformation:StartPortingRecommendationAssessment",
            "application-transformation:GetPortingRecommendationAssessment",
            "application-transformation:PutLogData",
            "application-transformation:PutMetricData",
            "application-transformation:StartContainerization",
            "application-transformation:GetContainerization",
            "application-transformation:StartDeployment",
            "application-transformation:GetDeployment"
          ],
          "Resource": "*"
        },
        {
          "Sid": "KmsAccess",
          "Effect": "Allow",
          "Action": [
            "kms:Decrypt",
            "kms:Encrypt",
            "kms:DescribeKey",
            "kms:GenerateDataKey"
          ],
          "Resource": "arn:aws:kms:*::*",
          "Condition": {
            "ForAnyValue:StringLike": {
              "kms:ResourceAliases": "alias/application-transformation*"
            }
          }
        },
        {
          "Sid": "EcrPushAccess",
          "Effect": "Allow",
          "Action": [
            "ecr:InitiateLayerUpload",
            "ecr:PutImage",
            "ecr:UploadLayerPart",
            "ecr:CompleteLayerUpload",
            "ecr:BatchCheckLayerAvailability",
            "ecr:GetDownloadUrlForLayer"
          ],
          "Resource": "arn:*:ecr:*:*:repository/*",
          "Condition": {
            "Null": {
              "ecr:ResourceTag/application-transformation": "false"
            }
          }
        },
        {
          "Sid": "EcrAuthAccess",
          "Effect": "Allow",
          "Action": [
            "ecr:GetAuthorizationToken"
          ],
          "Resource": "*"
        },
        {
          "Sid": "KmsCreateGrantAccess",
          "Effect": "Allow",
          "Action": [
            "kms:CreateGrant"
          ],
          "Resource": "arn:aws:kms:*::*",
          "Condition": {
            "Bool": {
              "kms:GrantIsForAWSResource": true
            },
            "ForAnyValue:StringLike": {
              "kms:ResourceAliases": "alias/application-transformation*"
            }
          }
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-18T00:37:27+00:00"
  },
  "AWSRefactoringToolkitSidecarPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "SsmMessagesAccess",
          "Effect": "Allow",
          "Action": [
            "ssmmessages:OpenControlChannel",
            "ssmmessages:CreateControlChannel",
            "ssmmessages:OpenDataChannel",
            "ssmmessages:CreateDataChannel"
          ],
          "Resource": "*"
        },
        {
          "Sid": "S3GetObjectAccess",
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": "arn:aws:s3:::*/refactoringtoolkit*"
        },
        {
          "Sid": "S3ListBucketAccess",
          "Effect": "Allow",
          "Action": [
            "s3:ListBucket"
          ],
          "Resource": "arn:aws:s3:::*",
          "Condition": {
            "StringLike": {
              "s3:prefix": "refactoringtoolkit*"
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-10-29T22:15:51+00:00"
  },
  "AWSResilienceHubAsssessmentExecutionPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AWSResilienceHubFullResourceStatement",
          "Effect": "Allow",
          "Action": [
            "application-autoscaling:DescribeScalableTargets",
            "autoscaling:DescribeAutoScalingGroups",
            "backup:DescribeBackupVault",
            "backup:GetBackupPlan",
            "backup:GetBackupSelection",
            "backup:ListBackupPlans",
            "backup:ListBackupSelections",
            "cloudformation:DescribeStacks",
            "cloudformation:ListStackResources",
            "cloudformation:ValidateTemplate",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "devops-guru:ListMonitoredResources",
            "dlm:GetLifecyclePolicies",
            "dlm:GetLifecyclePolicy",
            "drs:DescribeJobs",
            "drs:DescribeSourceServers",
            "drs:GetReplicationConfiguration",
            "dynamodb:DescribeContinuousBackups",
            "dynamodb:DescribeGlobalTable",
            "dynamodb:DescribeLimits",
            "dynamodb:DescribeTable",
            "dynamodb:ListGlobalTables",
            "dynamodb:ListTagsOfResource",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeFastSnapshotRestores",
            "ec2:DescribeFleets",
            "ec2:DescribeHosts",
            "ec2:DescribeInstances",
            "ec2:DescribeNatGateways",
            "ec2:DescribePlacementGroups",
            "ec2:DescribeRegions",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:DescribeVolumes",
            "ec2:DescribeVpcEndpoints",
            "ecr:DescribeRegistry",
            "ecs:DescribeCapacityProviders",
            "ecs:DescribeClusters",
            "ecs:DescribeContainerInstances",
            "ecs:DescribeServices",
            "ecs:DescribeTaskDefinition",
            "ecs:ListContainerInstances",
            "ecs:ListServices",
            "eks:DescribeCluster",
            "eks:DescribeFargateProfile",
            "eks:DescribeNodegroup",
            "eks:ListFargateProfiles",
            "eks:ListNodegroups",
            "elasticache:DescribeCacheClusters",
            "elasticache:DescribeGlobalReplicationGroups",
            "elasticache:DescribeReplicationGroups",
            "elasticache:DescribeSnapshots",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DescribeLifecycleConfiguration",
            "elasticfilesystem:DescribeMountTargets",
            "elasticfilesystem:DescribeReplicationConfigurations",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "fis:GetExperimentTemplate",
            "fis:ListExperimentTemplates",
            "fis:ListExperiments",
            "lambda:GetFunctionConcurrency",
            "lambda:GetFunctionConfiguration",
            "lambda:ListAliases",
            "lambda:ListVersionsByFunction",
            "rds:DescribeDBClusterSnapshots",
            "rds:DescribeDBClusters",
            "rds:DescribeDBInstanceAutomatedBackups",
            "rds:DescribeDBInstances",
            "rds:DescribeDBProxies",
            "rds:DescribeDBProxyTargets",
            "rds:DescribeDBSnapshots",
            "rds:DescribeGlobalClusters",
            "resource-groups:GetGroup",
            "resource-groups:ListGroupResources",
            "route53-recovery-control-config:ListClusters",
            "route53-recovery-control-config:ListControlPanels",
            "route53-recovery-control-config:ListRoutingControls",
            "route53-recovery-readiness:GetReadinessCheckStatus",
            "route53-recovery-readiness:GetResourceSet",
            "route53-recovery-readiness:ListReadinessChecks",
            "route53:GetHealthCheck",
            "route53:ListHealthChecks",
            "route53:ListHostedZones",
            "route53:ListResourceRecordSets",
            "s3:GetBucketLocation",
            "s3:GetBucketObjectLockConfiguration",
            "s3:GetBucketPolicyStatus",
            "s3:GetBucketTagging",
            "s3:GetBucketVersioning",
            "s3:GetMultiRegionAccessPointRoutes",
            "s3:GetReplicationConfiguration",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ListMultiRegionAccessPoints",
            "servicecatalog:GetApplication",
            "servicecatalog:ListAssociatedResources",
            "sns:GetSubscriptionAttributes",
            "sns:GetTopicAttributes",
            "sns:ListSubscriptionsByTopic",
            "sqs:GetQueueAttributes",
            "sqs:GetQueueUrl",
            "ssm:DescribeAutomationExecutions",
            "states:DescribeStateMachine",
            "states:ListStateMachineVersions",
            "states:ListStateMachineAliases",
            "tag:GetResources"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AWSResilienceHubApiGatewayStatement",
          "Effect": "Allow",
          "Action": [
            "apigateway:GET"
          ],
          "Resource": [
            "arn:aws:apigateway:*::/apis/*",
            "arn:aws:apigateway:*::/restapis/*",
            "arn:aws:apigateway:*::/usageplans"
          ]
        },
        {
          "Sid": "AWSResilienceHubS3Statement",
          "Effect": "Allow",
          "Action": [
            "s3:CreateBucket",
            "s3:PutObject",
            "s3:GetObject"
          ],
          "Resource": "arn:aws:s3:::aws-resilience-hub-artifacts-*"
        },
        {
          "Sid": "AWSResilienceHubCloudWatchStatement",
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricData"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": "ResilienceHub"
            }
          }
        },
        {
          "Sid": "AWSResilienceHubSSMStatement",
          "Effect": "Allow",
          "Action": [
            "ssm:GetParametersByPath"
          ],
          "Resource": "arn:aws:ssm:*:*:parameter/ResilienceHub/*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-10-29T16:17:40+00:00"
  },
  "AWSResourceAccessManagerFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "ram:*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-06-04T17:28:22+00:00"
  },
  "AWSResourceAccessManagerReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "ram:Get*",
            "ram:List*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-12-09T20:58:37+00:00"
  },
  "AWSResourceAccessManagerResourceShareParticipantAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "ram:AcceptResourceShareInvitation",
            "ram:GetResourcePolicies",
            "ram:GetResourceShareInvitations",
            "ram:GetResourceShares",
            "ram:ListPendingInvitationResources",
            "ram:ListPrincipals",
            "ram:ListResources",
            "ram:RejectResourceShareInvitation"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-12-09T20:41:37+00:00"
  },
  "AWSResourceAccessManagerServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:ListAccounts",
            "organizations:ListAccountsForParent",
            "organizations:ListChildren",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListParents",
            "organizations:ListRoots"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AllowDeletionOfServiceLinkedRoleForResourceAccessManager",
          "Effect": "Allow",
          "Action": [
            "iam:DeleteRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/aws-service-role/ram.amazonaws.com/*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-11-14T19:28:28+00:00"
  },
  "AWSResourceExplorerFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "ResourceExplorerConsoleFullAccess",
          "Effect": "Allow",
          "Action": [
            "resource-explorer-2:*",
            "ec2:DescribeRegions",
            "ram:ListResources",
            "ram:GetResourceShares",
            "organizations:DescribeOrganization"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ResourceExplorerSLRAccess",
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": [
                "resource-explorer-2.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-14T16:53:46+00:00"
  },
  "AWSResourceExplorerOrganizationsAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "ReadOnlyAccess",
          "Effect": "Allow",
          "Action": [
            "resource-explorer-2:*",
            "ec2:DescribeRegions",
            "ram:ListResources",
            "ram:GetResourceShares",
            "organizations:ListAccounts",
            "organizations:ListRoots",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListAccountsForParent",
            "organizations:ListDelegatedAdministrators",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:DescribeOrganization"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ResourceExplorerGetSLRAccess",
          "Effect": "Allow",
          "Action": [
            "iam:GetRole"
          ],
          "Resource": "arn:aws:iam::*:role/aws-service-role/resource-explorer-2.amazonaws.com/AWSServiceRoleForResourceExplorer"
        },
        {
          "Sid": "ResourceExplorerCreateSLRAccess",
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": [
                "resource-explorer-2.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "OrganizationsAdministratorAccess",
          "Effect": "Allow",
          "Action": [
            "organizations:EnableAWSServiceAccess",
            "organizations:DisableAWSServiceAccess",
            "organizations:RegisterDelegatedAdministrator",
            "organizations:DeregisterDelegatedAdministrator"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "organizations:ServicePrincipal": [
                "resource-explorer-2.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-14T17:01:12+00:00"
  },
  "AWSResourceExplorerReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "ResourceExplorerReadOnlyAccess",
          "Effect": "Allow",
          "Action": [
            "resource-explorer-2:Get*",
            "resource-explorer-2:List*",
            "resource-explorer-2:Search",
            "resource-explorer-2:BatchGetView",
            "ec2:DescribeRegions",
            "ram:ListResources",
            "ram:GetResourceShares",
            "organizations:DescribeOrganization"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-14T16:43:41+00:00"
  },
  "AWSResourceExplorerServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "CloudTrailEventsAccess",
          "Effect": "Allow",
          "Action": [
            "cloudtrail:CreateServiceLinkedChannel"
          ],
          "Resource": [
            "arn:aws:cloudtrail:*:*:channel/aws-service-channel/resource-explorer-2/*"
          ]
        },
        {
          "Sid": "ApiGatewayAccess",
          "Action": [
            "apigateway:GET"
          ],
          "Effect": "Allow",
          "Resource": [
            "arn:aws:apigateway:*::/restapis",
            "arn:aws:apigateway:*::/restapis/*/deployments"
          ]
        },
        {
          "Sid": "ResourceInventoryAccess",
          "Effect": "Allow",
          "Action": [
            "access-analyzer:ListAnalyzers",
            "acm-pca:ListCertificateAuthorities",
            "amplify:ListApps",
            "amplify:ListBackendEnvironments",
            "amplify:ListBranches",
            "amplify:ListDomainAssociations",
            "amplifyuibuilder:ListComponents",
            "amplifyuibuilder:ListThemes",
            "app-integrations:ListEventIntegrations",
            "apprunner:ListServices",
            "appstream:DescribeAppBlocks",
            "appstream:DescribeApplications",
            "appstream:DescribeFleets",
            "appstream:DescribeImageBuilders",
            "appstream:DescribeStacks",
            "appsync:ListGraphqlApis",
            "aps:ListRuleGroupsNamespaces",
            "aps:ListWorkspaces",
            "athena:ListDataCatalogs",
            "athena:ListWorkGroups",
            "autoscaling:DescribeAutoScalingGroups",
            "backup:ListBackupPlans",
            "batch:DescribeComputeEnvironments",
            "batch:DescribeJobQueues",
            "batch:ListSchedulingPolicies",
            "cloudformation:ListStacks",
            "cloudformation:ListStackSets",
            "cloudfront:ListCachePolicies",
            "cloudfront:ListCloudFrontOriginAccessIdentities",
            "cloudfront:ListDistributions",
            "cloudfront:ListFieldLevelEncryptionConfigs",
            "cloudfront:ListFieldLevelEncryptionProfiles",
            "cloudfront:ListFunctions",
            "cloudfront:ListOriginAccessControls",
            "cloudfront:ListOriginRequestPolicies",
            "cloudfront:ListRealtimeLogConfigs",
            "cloudfront:ListResponseHeadersPolicies",
            "cloudtrail:ListTrails",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DescribeInsightRules",
            "cloudwatch:ListDashboards",
            "cloudwatch:ListMetricStreams",
            "codeartifact:ListDomains",
            "codeartifact:ListRepositories",
            "codebuild:ListProjects",
            "codecommit:ListRepositories",
            "codeguru-profiler:ListProfilingGroups",
            "codepipeline:ListPipelines",
            "codestar-connections:ListConnections",
            "cognito-identity:ListIdentityPools",
            "cognito-idp:ListUserPools",
            "databrew:ListDatasets",
            "databrew:ListRecipes",
            "databrew:ListRulesets",
            "detective:ListGraphs",
            "ds:DescribeDirectories",
            "dynamodb:ListStreams",
            "dynamodb:ListTables",
            "ec2:DescribeAddresses",
            "ec2:DescribeCapacityReservationFleets",
            "ec2:DescribeCapacityReservations",
            "ec2:DescribeCarrierGateways",
            "ec2:DescribeClientVpnEndpoints",
            "ec2:DescribeCustomerGateways",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeEgressOnlyInternetGateways",
            "ec2:DescribeElasticGpus",
            "ec2:DescribeExportImageTasks",
            "ec2:DescribeExportTasks",
            "ec2:DescribeFleets",
            "ec2:DescribeFlowLogs",
            "ec2:DescribeFpgaImages",
            "ec2:DescribeHostReservations",
            "ec2:DescribeHosts",
            "ec2:DescribeImages",
            "ec2:DescribeImportImageTasks",
            "ec2:DescribeImportSnapshotTasks",
            "ec2:DescribeInstanceEventWindows",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeIpamPools",
            "ec2:DescribeIpams",
            "ec2:DescribeIpamScopes",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeManagedPrefixLists",
            "ec2:DescribeNatGateways",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeNetworkInsightsAccessScopeAnalyses",
            "ec2:DescribeNetworkInsightsAccessScopes",
            "ec2:DescribeNetworkInsightsAnalyses",
            "ec2:DescribeNetworkInsightsPaths",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePlacementGroups",
            "ec2:DescribePublicIpv4Pools",
            "ec2:DescribeReservedInstances",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroupRules",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSpotFleetRequests",
            "ec2:DescribeSpotInstanceRequests",
            "ec2:DescribeSubnets",
            "ec2:DescribeTrafficMirrorFilters",
            "ec2:DescribeTrafficMirrorSessions",
            "ec2:DescribeTrafficMirrorTargets",
            "ec2:DescribeTransitGatewayAttachments",
            "ec2:DescribeTransitGatewayConnectPeers",
            "ec2:DescribeTransitGatewayMulticastDomains",
            "ec2:DescribeTransitGatewayPolicyTables",
            "ec2:DescribeTransitGatewayRouteTableAnnouncements",
            "ec2:DescribeTransitGatewayRouteTables",
            "ec2:DescribeTransitGateways",
            "ec2:DescribeVerifiedAccessEndpoints",
            "ec2:DescribeVerifiedAccessGroups",
            "ec2:DescribeVerifiedAccessInstances",
            "ec2:DescribeVerifiedAccessTrustProviders",
            "ec2:DescribeVolumes",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcEndpointServices",
            "ec2:DescribeVpcPeeringConnections",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpnConnections",
            "ec2:DescribeVpnGateways",
            "ec2:GetSubnetCidrReservations",
            "ecr:DescribeRepositories",
            "ecr-public:DescribeRepositories",
            "ecs:DescribeCapacityProviders",
            "ecs:DescribeServices",
            "ecs:ListClusters",
            "ecs:ListContainerInstances",
            "ecs:ListServices",
            "ecs:ListTaskDefinitions",
            "ecs:ListTasks",
            "elasticache:DescribeCacheClusters",
            "elasticache:DescribeCacheParameterGroups",
            "elasticache:DescribeCacheSecurityGroups",
            "elasticache:DescribeCacheSubnetGroups",
            "elasticache:DescribeGlobalReplicationGroups",
            "elasticache:DescribeReplicationGroups",
            "elasticache:DescribeReservedCacheNodes",
            "elasticache:DescribeSnapshots",
            "elasticache:DescribeUserGroups",
            "elasticache:DescribeUsers",
            "elasticbeanstalk:DescribeApplications",
            "elasticbeanstalk:DescribeApplicationVersions",
            "elasticbeanstalk:DescribeEnvironments",
            "elasticfilesystem:DescribeAccessPoints",
            "elasticfilesystem:DescribeFileSystems",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeRules",
            "elasticloadbalancing:DescribeTargetGroups",
            "es:ListDomainNames",
            "events:ListRules",
            "evidently:ListExperiments",
            "evidently:ListFeatures",
            "evidently:ListLaunches",
            "evidently:ListProjects",
            "finspace:ListEnvironments",
            "firehose:ListDeliveryStreams",
            "fis:ListExperimentTemplates",
            "forecast:ListDatasetGroups",
            "forecast:ListDatasets",
            "frauddetector:GetDetectors",
            "frauddetector:GetEntityTypes",
            "frauddetector:GetEventTypes",
            "frauddetector:GetLabels",
            "frauddetector:GetOutcomes",
            "frauddetector:GetVariables",
            "gamelift:ListAliases",
            "globalaccelerator:ListAccelerators",
            "globalaccelerator:ListEndpointGroups",
            "globalaccelerator:ListListeners",
            "glue:GetDatabases",
            "glue:GetJobs",
            "glue:GetTables",
            "glue:GetTriggers",
            "greengrass:ListGroups",
            "healthlake:ListFHIRDatastores",
            "iam:ListGroups",
            "iam:ListInstanceProfiles",
            "iam:ListOpenIDConnectProviders",
            "iam:ListPolicies",
            "iam:ListRoles",
            "iam:ListSAMLProviders",
            "iam:ListServerCertificates",
            "iam:ListUsers",
            "iam:ListVirtualMFADevices",
            "imagebuilder:ListComponentBuildVersions",
            "imagebuilder:ListComponents",
            "imagebuilder:ListContainerRecipes",
            "imagebuilder:ListDistributionConfigurations",
            "imagebuilder:ListImageBuildVersions",
            "imagebuilder:ListImagePipelines",
            "imagebuilder:ListImageRecipes",
            "imagebuilder:ListImages",
            "imagebuilder:ListInfrastructureConfigurations",
            "iotanalytics:ListChannels",
            "iotanalytics:ListDatasets",
            "iotanalytics:ListDatastores",
            "iotanalytics:ListPipelines",
            "iotevents:ListAlarmModels",
            "iotevents:ListDetectorModels",
            "iotevents:ListInputs",
            "iot:ListJobTemplates",
            "iot:ListAuthorizers",
            "iot:ListMitigationActions",
            "iot:ListPolicies",
            "iot:ListProvisioningTemplates",
            "iot:ListSecurityProfiles",
            "iot:ListThings",
            "iot:ListTopicRuleDestinations",
            "iot:ListTopicRules",
            "iotsitewise:ListAssetModels",
            "iotsitewise:ListAssets",
            "iotsitewise:ListGateways",
            "iottwinmaker:ListWorkspaces",
            "ivs:ListChannels",
            "ivs:ListStreamKeys",
            "kafka:ListClusters",
            "kinesis:ListStreamConsumers",
            "kinesis:ListStreams",
            "kinesisvideo:ListStreams",
            "lambda:ListAliases",
            "lambda:ListCodeSigningConfigs",
            "lambda:ListEventSourceMappings",
            "lambda:ListFunctions",
            "lambda:ListLayers",
            "lambda:ListLayerVersions",
            "logs:DescribeDestinations",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "lookoutmetrics:ListAlerts",
            "lookoutvision:ListProjects",
            "mediapackage:ListChannels",
            "mediapackage:ListOriginEndpoints",
            "mediatailor:ListPlaybackConfigurations",
            "memorydb:DescribeACLs",
            "memorydb:DescribeClusters",
            "memorydb:DescribeParameterGroups",
            "memorydb:DescribeUsers",
            "mobiletargeting:GetApps",
            "mobiletargeting:GetSegments",
            "mobiletargeting:ListTemplates",
            "network-firewall:ListFirewallPolicies",
            "network-firewall:ListFirewalls",
            "networkmanager:DescribeGlobalNetworks",
            "networkmanager:GetDevices",
            "networkmanager:GetLinks",
            "networkmanager:ListAttachments",
            "networkmanager:ListCoreNetworks",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAccounts",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListDelegatedAdministrators",
            "panorama:ListPackages",
            "qldb:ListJournalKinesisStreamsForLedger",
            "qldb:ListLedgers",
            "rds:DescribeBlueGreenDeployments",
            "rds:DescribeDBClusterEndpoints",
            "rds:DescribeDBClusterParameterGroups",
            "rds:DescribeDBClusters",
            "rds:DescribeDBClusterSnapshots",
            "rds:DescribeDBEngineVersions",
            "rds:DescribeDBInstanceAutomatedBackups",
            "rds:DescribeDBInstances",
            "rds:DescribeDBParameterGroups",
            "rds:DescribeDBProxies",
            "rds:DescribeDBProxyEndpoints",
            "rds:DescribeDBSecurityGroups",
            "rds:DescribeDBSnapshots",
            "rds:DescribeDBSubnetGroups",
            "rds:DescribeEventSubscriptions",
            "rds:DescribeGlobalClusters",
            "rds:DescribeOptionGroups",
            "rds:DescribeReservedDBInstances",
            "redshift:DescribeClusterParameterGroups",
            "redshift:DescribeClusters",
            "redshift:DescribeClusterSnapshots",
            "redshift:DescribeClusterSubnetGroups",
            "redshift:DescribeEventSubscriptions",
            "redshift:DescribeSnapshotCopyGrants",
            "redshift:DescribeSnapshotSchedules",
            "redshift:DescribeUsageLimits",
            "refactor-spaces:ListApplications",
            "refactor-spaces:ListEnvironments",
            "refactor-spaces:ListRoutes",
            "refactor-spaces:ListServices",
            "rekognition:DescribeProjects",
            "resiliencehub:ListApps",
            "resiliencehub:ListResiliencyPolicies",
            "resource-explorer-2:GetIndex",
            "resource-explorer-2:ListIndexes",
            "resource-explorer-2:ListViews",
            "resource-groups:ListGroups",
            "route53-recovery-readiness:ListRecoveryGroups",
            "route53-recovery-readiness:ListResourceSets",
            "route53resolver:ListFirewallDomainLists",
            "route53resolver:ListFirewallRuleGroups",
            "route53resolver:ListResolverEndpoints",
            "route53resolver:ListResolverRules",
            "s3:GetBucketLocation",
            "s3:ListAccessPoints",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ListStorageLensConfigurations",
            "sagemaker:ListModels",
            "sagemaker:ListNotebookInstances",
            "servicecatalog:ListApplications",
            "servicecatalog:ListAttributeGroups",
            "signer:ListSigningProfiles",
            "sns:ListTopics",
            "sqs:ListQueues",
            "ssm:DescribeAutomationExecutions",
            "ssm:DescribeInstanceInformation",
            "ssm:DescribeMaintenanceWindows",
            "ssm:DescribeMaintenanceWindowTargets",
            "ssm:DescribeMaintenanceWindowTasks",
            "ssm:DescribeParameters",
            "ssm:DescribePatchBaselines",
            "ssm-incidents:ListResponsePlans",
            "ssm:ListAssociations",
            "ssm:ListDocuments",
            "ssm:ListInventoryEntries",
            "ssm:ListResourceDataSync",
            "states:ListActivities",
            "states:ListStateMachines",
            "timestream:ListDatabases",
            "wisdom:listAssistantAssociations",
            "wisdom:ListAssistants",
            "wisdom:listKnowledgeBases"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v6",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-07T17:07:44+00:00"
  },
  "AWSResourceGroupsReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "resource-groups:Get*",
            "resource-groups:List*",
            "resource-groups:Search*",
            "tag:Get*",
            "cloudformation:DescribeStacks",
            "cloudformation:ListStackResources",
            "ec2:DescribeInstances",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeVolumes",
            "ec2:DescribeVpcs",
            "elasticache:DescribeCacheClusters",
            "elasticache:DescribeSnapshots",
            "elasticache:ListTagsForResource",
            "elasticbeanstalk:DescribeEnvironments",
            "elasticmapreduce:DescribeCluster",
            "elasticmapreduce:ListClusters",
            "glacier:ListVaults",
            "glacier:DescribeVault",
            "glacier:ListTagsForVault",
            "kinesis:ListStreams",
            "kinesis:DescribeStream",
            "kinesis:ListTagsForStream",
            "opsworks:DescribeStacks",
            "opsworks:ListTags",
            "rds:DescribeDBInstances",
            "rds:DescribeDBSnapshots",
            "rds:ListTagsForResource",
            "redshift:DescribeClusters",
            "redshift:DescribeTags",
            "route53domains:ListDomains",
            "route53:ListHealthChecks",
            "route53:GetHealthCheck",
            "route53:ListHostedZones",
            "route53:GetHostedZone",
            "route53:ListTagsForResource",
            "storagegateway:ListGateways",
            "storagegateway:DescribeGatewayInformation",
            "storagegateway:ListTagsForResource",
            "s3:ListAllMyBuckets",
            "s3:GetBucketTagging",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTags",
            "ssm:ListDocuments"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2019-02-05T17:56:25+00:00"
  },
  "AWSRoboMakerReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "VisualEditor0",
          "Effect": "Allow",
          "Action": [
            "robomaker:List*",
            "robomaker:BatchDescribe*",
            "robomaker:Describe*",
            "robomaker:Get*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2020-08-28T23:10:18+00:00"
  },
  "AWSRoboMakerServicePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:DescribeSecurityGroups",
            "greengrass:CreateDeployment",
            "greengrass:CreateGroupVersion",
            "greengrass:CreateFunctionDefinition",
            "greengrass:CreateFunctionDefinitionVersion",
            "greengrass:GetDeploymentStatus",
            "greengrass:GetGroup",
            "greengrass:GetGroupVersion",
            "greengrass:GetCoreDefinitionVersion",
            "greengrass:GetFunctionDefinitionVersion",
            "greengrass:GetAssociatedRole",
            "lambda:CreateFunction",
            "robomaker:CreateSimulationJob",
            "robomaker:CancelSimulationJob"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "robomaker:TagResource"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:robomaker:*:*:simulation-job/*"
        },
        {
          "Action": [
            "lambda:UpdateFunctionCode",
            "lambda:GetFunction",
            "lambda:UpdateFunctionConfiguration",
            "lambda:DeleteFunction",
            "lambda:ListVersionsByFunction",
            "lambda:GetAlias",
            "lambda:UpdateAlias",
            "lambda:CreateAlias",
            "lambda:DeleteAlias"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:lambda:*:*:function:aws-robomaker-*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "lambda.amazonaws.com",
                "robomaker.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v6",
    "IsDefaultVersion": true,
    "CreateDate": "2021-11-11T22:23:45+00:00"
  },
  "AWSRoboMakerServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:DescribeSecurityGroups",
            "greengrass:CreateDeployment",
            "greengrass:CreateGroupVersion",
            "greengrass:CreateFunctionDefinition",
            "greengrass:CreateFunctionDefinitionVersion",
            "greengrass:GetDeploymentStatus",
            "greengrass:GetGroup",
            "greengrass:GetGroupVersion",
            "greengrass:GetCoreDefinitionVersion",
            "greengrass:GetFunctionDefinitionVersion",
            "greengrass:GetAssociatedRole",
            "lambda:CreateFunction"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "lambda:UpdateFunctionCode",
            "lambda:GetFunction",
            "lambda:UpdateFunctionConfiguration"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:lambda:*:*:function:aws-robomaker-*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "*",
          "Condition": {
            "StringEqualsIfExists": {
              "iam:PassedToService": "lambda.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-11-26T05:33:19+00:00"
  },
  "AWSRoboMaker_FullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "robomaker:*",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "s3:GetObject",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:CalledViaFirst": "robomaker.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ecr:BatchGetImage",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:CalledViaFirst": "robomaker.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ecr-public:DescribeImages",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:CalledViaFirst": "robomaker.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "robomaker.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2021-09-16T21:06:10+00:00"
  },
  "AWSRolesAnywhereServicePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricData"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": [
                "AWS/RolesAnywhere",
                "AWS/Usage"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "acm-pca:GetCertificateAuthorityCertificate",
            "acm-pca:DescribeCertificateAuthority"
          ],
          "Resource": "arn:aws:acm-pca:*:*:*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-07-05T15:26:11+00:00"
  },
  "AWSS3OnOutpostsServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeSubnets",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeVpcs",
            "ec2:DescribeCoipPools",
            "ec2:GetCoipPoolUsage",
            "ec2:DescribeAddresses",
            "ec2:DescribeLocalGatewayRouteTableVpcAssociations"
          ],
          "Resource": "*",
          "Sid": "DescribeVpcResources"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:security-group/*"
          ],
          "Sid": "CreateNetworkInterface"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:network-interface/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/CreatedBy": "S3 On Outposts"
            }
          },
          "Sid": "CreateTagsForCreateNetworkInterface"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AllocateAddress"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:ipv4pool-ec2/*"
          ],
          "Sid": "AllocateIpAddress"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AllocateAddress"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:elastic-ip/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/CreatedBy": "S3 On Outposts"
            }
          },
          "Sid": "CreateTagsForAllocateIpAddress"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DisassociateAddress",
            "ec2:ReleaseAddress",
            "ec2:AssociateAddress"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/CreatedBy": "S3 On Outposts"
            }
          },
          "Sid": "ReleaseVpcResources"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": [
                "CreateNetworkInterface",
                "AllocateAddress"
              ],
              "aws:RequestTag/CreatedBy": [
                "S3 On Outposts"
              ]
            }
          },
          "Sid": "CreateTags"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-10-03T20:32:36+00:00"
  },
  "AWSSSMForSAPServiceLinkedRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "DescribeInstanceActions",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstances",
            "ssm:GetCommandInvocation",
            "ssm:DescribeInstanceInformation"
          ],
          "Resource": "*"
        },
        {
          "Sid": "DescribeInstanceStatus",
          "Effect": "Allow",
          "Action": "ec2:DescribeInstanceStatus",
          "Resource": "*"
        },
        {
          "Sid": "TargetRuleActions",
          "Effect": "Allow",
          "Action": [
            "events:DeleteRule",
            "events:PutTargets",
            "events:DescribeRule",
            "events:PutRule",
            "events:RemoveTargets"
          ],
          "Resource": [
            "arn:*:events:*:*:rule/SSMSAPManagedRule*",
            "arn:*:events:*:*:event-bus/default"
          ]
        },
        {
          "Sid": "DocumentActions",
          "Effect": "Allow",
          "Action": [
            "ssm:DescribeDocument",
            "ssm:SendCommand"
          ],
          "Resource": [
            "arn:*:ssm:*:*:document/AWSSystemsManagerSAP-*",
            "arn:*:ssm:*:*:document/AWSSSMSAP*",
            "arn:*:ssm:*:*:document/AWSSAP*"
          ]
        },
        {
          "Sid": "CustomerSendCommand",
          "Effect": "Allow",
          "Action": "ssm:SendCommand",
          "Resource": "arn:*:ec2:*:*:instance/*",
          "Condition": {
            "StringEqualsIgnoreCase": {
              "ssm:resourceTag/SSMForSAPManaged": "True"
            }
          }
        },
        {
          "Sid": "InstanceTagActions",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags",
            "ec2:DeleteTags"
          ],
          "Resource": "arn:*:ec2:*:*:instance/*",
          "Condition": {
            "Null": {
              "aws:RequestTag/awsApplication": "false"
            },
            "StringEqualsIgnoreCase": {
              "ec2:ResourceTag/SSMForSAPManaged": "True"
            }
          }
        },
        {
          "Sid": "DescribeTag",
          "Effect": "Allow",
          "Action": "ec2:DescribeTags",
          "Resource": "*"
        },
        {
          "Sid": "GetApplication",
          "Effect": "Allow",
          "Action": "servicecatalog:GetApplication",
          "Resource": "arn:*:servicecatalog:*:*:*"
        },
        {
          "Sid": "UpdateOrDeleteApplication",
          "Effect": "Allow",
          "Action": [
            "servicecatalog:DeleteApplication",
            "servicecatalog:UpdateApplication"
          ],
          "Resource": "arn:*:servicecatalog:*:*:*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/SSMForSAPCreated": "True"
            }
          }
        },
        {
          "Sid": "CreateApplication",
          "Effect": "Allow",
          "Action": [
            "servicecatalog:TagResource",
            "servicecatalog:CreateApplication"
          ],
          "Resource": "arn:*:servicecatalog:*:*:*",
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/SSMForSAPCreated": "True"
            }
          }
        },
        {
          "Sid": "CreateServiceLinkedRole",
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:*:iam::*:role/aws-service-role/servicecatalog-appregistry.amazonaws.com/AWSServiceRoleForAWSServiceCatalogAppRegistry",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "servicecatalog-appregistry.amazonaws.com"
            }
          }
        },
        {
          "Sid": "PutMetricData",
          "Effect": "Allow",
          "Action": "cloudwatch:PutMetricData",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": [
                "AWS/Usage",
                "AWS/SSMForSAP"
              ]
            }
          }
        },
        {
          "Sid": "CreateAttributeGroup",
          "Effect": "Allow",
          "Action": "servicecatalog:CreateAttributeGroup",
          "Resource": "arn:*:servicecatalog:*:*:/attribute-groups/*",
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/SSMForSAPCreated": "True"
            }
          }
        },
        {
          "Sid": "GetAttributeGroup",
          "Effect": "Allow",
          "Action": "servicecatalog:GetAttributeGroup",
          "Resource": "arn:*:servicecatalog:*:*:/attribute-groups/*"
        },
        {
          "Sid": "DeleteAttributeGroup",
          "Effect": "Allow",
          "Action": "servicecatalog:DeleteAttributeGroup",
          "Resource": "arn:*:servicecatalog:*:*:/attribute-groups/*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/SSMForSAPCreated": "True"
            }
          }
        },
        {
          "Sid": "AttributeGroupActions",
          "Effect": "Allow",
          "Action": [
            "servicecatalog:AssociateAttributeGroup",
            "servicecatalog:DisassociateAttributeGroup"
          ],
          "Resource": "arn:*:servicecatalog:*:*:*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/SSMForSAPCreated": "True"
            }
          }
        },
        {
          "Sid": "ListAssociatedAttributeGroups",
          "Effect": "Allow",
          "Action": "servicecatalog:ListAssociatedAttributeGroups",
          "Resource": "arn:*:servicecatalog:*:*:*"
        },
        {
          "Sid": "CreateGroup",
          "Effect": "Allow",
          "Action": [
            "resource-groups:CreateGroup",
            "resource-groups:Tag"
          ],
          "Resource": "arn:*:resource-groups:*:*:group/SystemsManagerForSAP-*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/SSMForSAPCreated": "True"
            },
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "SSMForSAPCreated"
              ]
            }
          }
        },
        {
          "Sid": "GetGroup",
          "Effect": "Allow",
          "Action": "resource-groups:GetGroup",
          "Resource": "arn:*:resource-groups:*:*:group/SystemsManagerForSAP-*"
        },
        {
          "Sid": "DeleteGroup",
          "Effect": "Allow",
          "Action": "resource-groups:DeleteGroup",
          "Resource": "arn:*:resource-groups:*:*:group/SystemsManagerForSAP-*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/SSMForSAPCreated": "True"
            }
          }
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-17T21:22:26+00:00"
  },
  "AWSSSMOpsInsightsServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AllowCreateOpsItem",
          "Effect": "Allow",
          "Action": [
            "ssm:CreateOpsItem",
            "ssm:AddTagsToResource"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AllowAccessOpsItem",
          "Effect": "Allow",
          "Action": [
            "ssm:UpdateOpsItem",
            "ssm:GetOpsItem"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/SsmOperationalInsight": "true"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-06-16T20:12:52+00:00"
  },
  "AWSSSODirectoryAdministrator": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AWSSSODirectoryAdministrator",
          "Effect": "Allow",
          "Action": [
            "sso-directory:*",
            "identitystore:*",
            "identitystore-auth:*",
            "sso:ListDirectoryAssociations"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2022-10-20T20:34:07+00:00"
  },
  "AWSSSODirectoryReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AWSSSODirectoryReadOnly",
          "Effect": "Allow",
          "Action": [
            "sso-directory:Search*",
            "sso-directory:Describe*",
            "sso-directory:List*",
            "sso-directory:Get*",
            "identitystore:Describe*",
            "identitystore:List*",
            "identitystore-auth:ListSessions",
            "identitystore-auth:BatchGetSession"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-16T18:17:48+00:00"
  },
  "AWSSSOMasterAccountAdministrator": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AWSSSOCreateSLR",
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/sso.amazonaws.com/AWSServiceRoleForSSO",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "sso.amazonaws.com"
            }
          }
        },
        {
          "Sid": "AWSSSOMasterAccountAdministrator",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/sso.amazonaws.com/AWSServiceRoleForSSO",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": "sso.amazonaws.com"
            }
          }
        },
        {
          "Sid": "AWSSSOMemberAccountAdministrator",
          "Effect": "Allow",
          "Action": [
            "ds:DescribeTrusts",
            "ds:UnauthorizeApplication",
            "ds:DescribeDirectories",
            "ds:AuthorizeApplication",
            "iam:ListPolicies",
            "organizations:EnableAWSServiceAccess",
            "organizations:ListRoots",
            "organizations:ListAccounts",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListAccountsForParent",
            "organizations:DescribeOrganization",
            "organizations:ListChildren",
            "organizations:DescribeAccount",
            "organizations:ListParents",
            "organizations:ListDelegatedAdministrators",
            "sso:*",
            "sso-directory:*",
            "identitystore:*",
            "identitystore-auth:*",
            "ds:CreateAlias",
            "access-analyzer:ValidatePolicy"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AWSSSOManageDelegatedAdministrator",
          "Effect": "Allow",
          "Action": [
            "organizations:RegisterDelegatedAdministrator",
            "organizations:DeregisterDelegatedAdministrator"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "organizations:ServicePrincipal": "sso.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v8",
    "IsDefaultVersion": true,
    "CreateDate": "2022-10-20T20:34:27+00:00"
  },
  "AWSSSOMemberAccountAdministrator": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AWSSSOMemberAccountAdministrator",
          "Effect": "Allow",
          "Action": [
            "ds:DescribeDirectories",
            "ds:AuthorizeApplication",
            "ds:UnauthorizeApplication",
            "ds:DescribeTrusts",
            "iam:ListPolicies",
            "organizations:EnableAWSServiceAccess",
            "organizations:DescribeOrganization",
            "organizations:DescribeAccount",
            "organizations:ListRoots",
            "organizations:ListAccounts",
            "organizations:ListAccountsForParent",
            "organizations:ListParents",
            "organizations:ListChildren",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListDelegatedAdministrators",
            "sso:*",
            "sso-directory:*",
            "identitystore:*",
            "identitystore-auth:*",
            "ds:CreateAlias",
            "access-analyzer:ValidatePolicy"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AWSSSOManageDelegatedAdministrator",
          "Effect": "Allow",
          "Action": [
            "organizations:RegisterDelegatedAdministrator",
            "organizations:DeregisterDelegatedAdministrator"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "organizations:ServicePrincipal": "sso.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v7",
    "IsDefaultVersion": true,
    "CreateDate": "2022-10-20T20:32:45+00:00"
  },
  "AWSSSOReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AWSSSOReadOnly",
          "Effect": "Allow",
          "Action": [
            "ds:DescribeDirectories",
            "ds:DescribeTrusts",
            "iam:ListPolicies",
            "organizations:DescribeOrganization",
            "organizations:DescribeAccount",
            "organizations:ListParents",
            "organizations:ListChildren",
            "organizations:ListAccounts",
            "organizations:ListRoots",
            "organizations:ListAccountsForParent",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListDelegatedAdministrators",
            "sso:Describe*",
            "sso:Get*",
            "sso:List*",
            "sso:Search*",
            "sso-directory:DescribeDirectory",
            "access-analyzer:ValidatePolicy"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v8",
    "IsDefaultVersion": true,
    "CreateDate": "2022-08-22T17:23:28+00:00"
  },
  "AWSSSOServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "IAMRoleProvisioningActions",
          "Effect": "Allow",
          "Action": [
            "iam:AttachRolePolicy",
            "iam:CreateRole",
            "iam:PutRolePolicy",
            "iam:UpdateRole",
            "iam:UpdateRoleDescription",
            "iam:UpdateAssumeRolePolicy",
            "iam:PutRolePermissionsBoundary",
            "iam:DeleteRolePermissionsBoundary"
          ],
          "Resource": [
            "arn:aws:iam::*:role/aws-reserved/sso.amazonaws.com/*"
          ],
          "Condition": {
            "StringNotEquals": {
              "aws:PrincipalOrgMasterAccountId": "${aws:PrincipalAccount}"
            }
          }
        },
        {
          "Sid": "IAMRoleReadActions",
          "Effect": "Allow",
          "Action": [
            "iam:GetRole",
            "iam:ListRoles"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "IAMRoleCleanupActions",
          "Effect": "Allow",
          "Action": [
            "iam:DeleteRole",
            "iam:DeleteRolePolicy",
            "iam:DetachRolePolicy",
            "iam:ListRolePolicies",
            "iam:ListAttachedRolePolicies"
          ],
          "Resource": [
            "arn:aws:iam::*:role/aws-reserved/sso.amazonaws.com/*"
          ]
        },
        {
          "Sid": "IAMSLRCleanupActions",
          "Effect": "Allow",
          "Action": [
            "iam:DeleteServiceLinkedRole",
            "iam:GetServiceLinkedRoleDeletionStatus",
            "iam:DeleteRole",
            "iam:GetRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/aws-service-role/sso.amazonaws.com/AWSServiceRoleForSSO"
          ]
        },
        {
          "Sid": "IAMSAMLProviderCreationAction",
          "Effect": "Allow",
          "Action": [
            "iam:CreateSAMLProvider"
          ],
          "Resource": [
            "arn:aws:iam::*:saml-provider/AWSSSO_*"
          ],
          "Condition": {
            "StringNotEquals": {
              "aws:PrincipalOrgMasterAccountId": "${aws:PrincipalAccount}"
            }
          }
        },
        {
          "Sid": "IAMSAMLProviderUpdateAction",
          "Effect": "Allow",
          "Action": [
            "iam:UpdateSAMLProvider"
          ],
          "Resource": [
            "arn:aws:iam::*:saml-provider/AWSSSO_*"
          ]
        },
        {
          "Sid": "IAMSAMLProviderCleanupActions",
          "Effect": "Allow",
          "Action": [
            "iam:DeleteSAMLProvider",
            "iam:GetSAMLProvider"
          ],
          "Resource": [
            "arn:aws:iam::*:saml-provider/AWSSSO_*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAccounts",
            "organizations:ListDelegatedAdministrators",
            "organizations:ListAWSServiceAccessForOrganization"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "AllowUnauthAppForDirectory",
          "Effect": "Allow",
          "Action": [
            "ds:UnauthorizeApplication"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "AllowDescribeForDirectory",
          "Effect": "Allow",
          "Action": [
            "ds:DescribeDirectories",
            "ds:DescribeTrusts"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "AllowDescribeAndListOperationsOnIdentitySource",
          "Effect": "Allow",
          "Action": [
            "identitystore:DescribeUser",
            "identitystore:DescribeGroup",
            "identitystore:ListGroups",
            "identitystore:ListUsers"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v17",
    "IsDefaultVersion": true,
    "CreateDate": "2022-10-20T20:05:47+00:00"
  },
  "AWSSavingsPlansFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "savingsplans:*",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-11-06T22:45:18+00:00"
  },
  "AWSSavingsPlansReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "savingsplans:Describe*",
            "savingsplans:List*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-11-06T22:45:10+00:00"
  },
  "AWSSecurityHubFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "SecurityHubAllowAll",
          "Effect": "Allow",
          "Action": "securityhub:*",
          "Resource": "*"
        },
        {
          "Sid": "SecurityHubServiceLinkedRole",
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "securityhub.amazonaws.com"
            }
          }
        },
        {
          "Sid": "OtherServicePermission",
          "Effect": "Allow",
          "Action": [
            "guardduty:GetDetector",
            "guardduty:ListDetectors",
            "inspector2:BatchGetAccountStatus"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-16T21:10:53+00:00"
  },
  "AWSSecurityHubOrganizationsAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "OrganizationPermissions",
          "Effect": "Allow",
          "Action": [
            "organizations:ListAccounts",
            "organizations:DescribeOrganization",
            "organizations:ListRoots",
            "organizations:ListDelegatedAdministrators",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListAccountsForParent",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganizationalUnit"
          ],
          "Resource": "*"
        },
        {
          "Sid": "OrganizationPermissionsEnable",
          "Effect": "Allow",
          "Action": "organizations:EnableAWSServiceAccess",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "organizations:ServicePrincipal": "securityhub.amazonaws.com"
            }
          }
        },
        {
          "Sid": "OrganizationPermissionsDelegatedAdmin",
          "Effect": "Allow",
          "Action": [
            "organizations:RegisterDelegatedAdministrator",
            "organizations:DeregisterDelegatedAdministrator"
          ],
          "Resource": "arn:aws:organizations::*:account/o-*/*",
          "Condition": {
            "StringEquals": {
              "organizations:ServicePrincipal": "securityhub.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-16T21:13:44+00:00"
  },
  "AWSSecurityHubReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "securityhub:Get*",
            "securityhub:List*",
            "securityhub:BatchGet*",
            "securityhub:Describe*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2022-04-04T17:46:51+00:00"
  },
  "AWSSecurityHubServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "SecurityHubServiceRolePermissions",
          "Effect": "Allow",
          "Action": [
            "cloudtrail:DescribeTrails",
            "cloudtrail:GetTrailStatus",
            "cloudtrail:GetEventSelectors",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DescribeAlarmsForMetric",
            "logs:DescribeMetricFilters",
            "sns:ListSubscriptionsByTopic",
            "config:DescribeConfigurationRecorders",
            "config:DescribeConfigurationRecorderStatus",
            "config:DescribeConfigRules",
            "config:DescribeConfigRuleEvaluationStatus",
            "config:BatchGetResourceConfig",
            "config:SelectResourceConfig",
            "iam:GenerateCredentialReport",
            "organizations:ListAccounts",
            "config:PutEvaluations",
            "tag:GetResources",
            "iam:GetCredentialReport",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListChildren",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:DescribeOrganizationalUnit",
            "securityhub:BatchDisableStandards",
            "securityhub:BatchEnableStandards",
            "securityhub:BatchUpdateStandardsControlAssociations",
            "securityhub:BatchGetStandardsControlAssociations",
            "securityhub:CreateMembers",
            "securityhub:DeleteMembers",
            "securityhub:DescribeHub",
            "securityhub:DescribeOrganizationConfiguration",
            "securityhub:DescribeStandards",
            "securityhub:DescribeStandardsControls",
            "securityhub:DisassociateMembers",
            "securityhub:DisableSecurityHub",
            "securityhub:EnableSecurityHub",
            "securityhub:GetEnabledStandards",
            "securityhub:ListStandardsControlAssociations",
            "securityhub:ListSecurityControlDefinitions",
            "securityhub:UpdateOrganizationConfiguration",
            "securityhub:UpdateSecurityHubConfiguration",
            "securityhub:UpdateStandardsControl"
          ],
          "Resource": "*"
        },
        {
          "Sid": "SecurityHubServiceRoleConfigPermissions",
          "Effect": "Allow",
          "Action": [
            "config:PutConfigRule",
            "config:DeleteConfigRule",
            "config:GetComplianceDetailsByConfigRule"
          ],
          "Resource": "arn:aws:config:*:*:config-rule/aws-service-rule/*securityhub*"
        },
        {
          "Sid": "SecurityHubServiceRoleOrganizationsPermissions",
          "Effect": "Allow",
          "Action": [
            "organizations:ListDelegatedAdministrators"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "organizations:ServicePrincipal": [
                "securityhub.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v13",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-07T00:53:28+00:00"
  },
  "AWSServiceCatalogAdminFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStacks",
            "cloudformation:SetStackPolicy",
            "cloudformation:UpdateStack",
            "cloudformation:CreateChangeSet",
            "cloudformation:DescribeChangeSet",
            "cloudformation:ExecuteChangeSet",
            "cloudformation:ListChangeSets",
            "cloudformation:DeleteChangeSet",
            "cloudformation:ListStackResources",
            "cloudformation:TagResource",
            "cloudformation:CreateStackSet",
            "cloudformation:CreateStackInstances",
            "cloudformation:UpdateStackSet",
            "cloudformation:UpdateStackInstances",
            "cloudformation:DeleteStackSet",
            "cloudformation:DeleteStackInstances",
            "cloudformation:DescribeStackSet",
            "cloudformation:DescribeStackInstance",
            "cloudformation:DescribeStackSetOperation",
            "cloudformation:ListStackInstances",
            "cloudformation:ListStackSetOperations",
            "cloudformation:ListStackSetOperationResults"
          ],
          "Resource": [
            "arn:aws:cloudformation:*:*:stack/SC-*",
            "arn:aws:cloudformation:*:*:stack/StackSet-SC-*",
            "arn:aws:cloudformation:*:*:changeSet/SC-*",
            "arn:aws:cloudformation:*:*:stackset/SC-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:CreateUploadBucket",
            "cloudformation:GetTemplateSummary",
            "cloudformation:ValidateTemplate",
            "iam:GetGroup",
            "iam:GetRole",
            "iam:GetUser",
            "iam:ListGroups",
            "iam:ListRoles",
            "iam:ListUsers",
            "servicecatalog:Get*",
            "servicecatalog:Scan*",
            "servicecatalog:Search*",
            "servicecatalog:List*",
            "servicecatalog:TagResource",
            "servicecatalog:UntagResource",
            "servicecatalog:SyncResource",
            "ssm:DescribeDocument",
            "ssm:GetAutomationExecution",
            "ssm:ListDocuments",
            "ssm:ListDocumentVersions",
            "config:DescribeConfigurationRecorders",
            "config:DescribeConfigurationRecorderStatus"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "servicecatalog:Accept*",
            "servicecatalog:Associate*",
            "servicecatalog:Batch*",
            "servicecatalog:Copy*",
            "servicecatalog:Create*",
            "servicecatalog:Delete*",
            "servicecatalog:Describe*",
            "servicecatalog:Disable*",
            "servicecatalog:Disassociate*",
            "servicecatalog:Enable*",
            "servicecatalog:Execute*",
            "servicecatalog:Import*",
            "servicecatalog:Provision*",
            "servicecatalog:Put*",
            "servicecatalog:Reject*",
            "servicecatalog:Terminate*",
            "servicecatalog:Update*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "servicecatalog.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/orgsdatasync.servicecatalog.amazonaws.com/AWSServiceRoleForServiceCatalogOrgsDataSync",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "orgsdatasync.servicecatalog.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v8",
    "IsDefaultVersion": true,
    "CreateDate": "2023-04-13T18:43:01+00:00"
  },
  "AWSServiceCatalogAdminReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStacks",
            "cloudformation:DescribeChangeSet",
            "cloudformation:ListChangeSets",
            "cloudformation:ListStackResources",
            "cloudformation:DescribeStackSet",
            "cloudformation:DescribeStackInstance",
            "cloudformation:DescribeStackSetOperation",
            "cloudformation:ListStackInstances",
            "cloudformation:ListStackSetOperations",
            "cloudformation:ListStackSetOperationResults"
          ],
          "Resource": [
            "arn:aws:cloudformation:*:*:stack/SC-*",
            "arn:aws:cloudformation:*:*:stack/StackSet-SC-*",
            "arn:aws:cloudformation:*:*:changeSet/SC-*",
            "arn:aws:cloudformation:*:*:stackset/SC-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:GetTemplateSummary",
            "iam:GetGroup",
            "iam:GetRole",
            "iam:GetUser",
            "iam:ListGroups",
            "iam:ListRoles",
            "iam:ListUsers",
            "servicecatalog:Get*",
            "servicecatalog:List*",
            "servicecatalog:Describe*",
            "servicecatalog:ScanProvisionedProducts",
            "servicecatalog:Search*",
            "ssm:DescribeDocument",
            "ssm:GetAutomationExecution",
            "ssm:ListDocuments",
            "ssm:ListDocumentVersions",
            "config:DescribeConfigurationRecorders",
            "config:DescribeConfigurationRecorderStatus"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-10-25T18:53:38+00:00"
  },
  "AWSServiceCatalogAppRegistryFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AppRegistryUpdateStack",
          "Effect": "Allow",
          "Action": [
            "cloudformation:UpdateStack"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "servicecatalog-appregistry.amazonaws.com"
            }
          }
        },
        {
          "Sid": "AppRegistryResourceGroupsIntegration",
          "Effect": "Allow",
          "Action": [
            "resource-groups:CreateGroup",
            "resource-groups:DeleteGroup",
            "resource-groups:GetGroup",
            "resource-groups:GetTags",
            "resource-groups:Tag",
            "resource-groups:Untag",
            "resource-groups:GetGroupConfiguration",
            "resource-groups:AssociateResource",
            "resource-groups:DisassociateResource"
          ],
          "Resource": "arn:aws:resource-groups:*:*:group/AWS_*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "servicecatalog-appregistry.amazonaws.com"
            }
          }
        },
        {
          "Sid": "AppRegistryServiceLinkedRole",
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/servicecatalog-appregistry.amazonaws.com/AWSServiceRoleForAWSServiceCatalogAppRegistry*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "servicecatalog-appregistry.amazonaws.com"
            }
          }
        },
        {
          "Sid": "AppRegistryOperations",
          "Effect": "Allow",
          "Action": [
            "cloudformation:DescribeStacks",
            "servicecatalog:CreateApplication",
            "servicecatalog:GetApplication",
            "servicecatalog:UpdateApplication",
            "servicecatalog:DeleteApplication",
            "servicecatalog:ListApplications",
            "servicecatalog:AssociateResource",
            "servicecatalog:DisassociateResource",
            "servicecatalog:GetAssociatedResource",
            "servicecatalog:ListAssociatedResources",
            "servicecatalog:AssociateAttributeGroup",
            "servicecatalog:DisassociateAttributeGroup",
            "servicecatalog:ListAssociatedAttributeGroups",
            "servicecatalog:CreateAttributeGroup",
            "servicecatalog:UpdateAttributeGroup",
            "servicecatalog:DeleteAttributeGroup",
            "servicecatalog:GetAttributeGroup",
            "servicecatalog:ListAttributeGroups",
            "servicecatalog:SyncResource",
            "servicecatalog:ListAttributeGroupsForApplication",
            "servicecatalog:GetConfiguration",
            "servicecatalog:PutConfiguration"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AppRegistryResourceTagging",
          "Effect": "Allow",
          "Action": [
            "servicecatalog:ListTagsForResource",
            "servicecatalog:UntagResource",
            "servicecatalog:TagResource"
          ],
          "Resource": "arn:aws:servicecatalog:*:*:*"
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-10T17:06:21+00:00"
  },
  "AWSServiceCatalogAppRegistryReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "servicecatalog:GetApplication",
            "servicecatalog:ListApplications",
            "servicecatalog:GetAssociatedResource",
            "servicecatalog:ListAssociatedResources",
            "servicecatalog:ListAssociatedAttributeGroups",
            "servicecatalog:GetAttributeGroup",
            "servicecatalog:ListAttributeGroups",
            "servicecatalog:ListTagsForResource",
            "servicecatalog:ListAttributeGroupsForApplication",
            "servicecatalog:GetConfiguration"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-17T18:16:39+00:00"
  },
  "AWSServiceCatalogAppRegistryServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "cloudformation:DescribeStacks",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "resource-groups:CreateGroup",
            "resource-groups:Tag"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/EnableAWSServiceCatalogAppRegistry": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "resource-groups:DeleteGroup",
            "resource-groups:UpdateGroup",
            "resource-groups:GetTags",
            "resource-groups:Tag",
            "resource-groups:Untag"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/EnableAWSServiceCatalogAppRegistry": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "resource-groups:GetGroup",
            "resource-groups:GetGroupConfiguration"
          ],
          "Resource": [
            "arn:*:resource-groups:*:*:group/AWS_AppRegistry*",
            "arn:*:resource-groups:*:*:group/AWS_CloudFormation_Stack*"
          ]
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2022-10-26T16:05:52+00:00"
  },
  "AWSServiceCatalogEndUserFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStacks",
            "cloudformation:SetStackPolicy",
            "cloudformation:ValidateTemplate",
            "cloudformation:UpdateStack",
            "cloudformation:CreateChangeSet",
            "cloudformation:DescribeChangeSet",
            "cloudformation:ExecuteChangeSet",
            "cloudformation:ListChangeSets",
            "cloudformation:DeleteChangeSet",
            "cloudformation:TagResource",
            "cloudformation:CreateStackSet",
            "cloudformation:CreateStackInstances",
            "cloudformation:UpdateStackSet",
            "cloudformation:UpdateStackInstances",
            "cloudformation:DeleteStackSet",
            "cloudformation:DeleteStackInstances",
            "cloudformation:DescribeStackSet",
            "cloudformation:DescribeStackInstance",
            "cloudformation:DescribeStackSetOperation",
            "cloudformation:ListStackInstances",
            "cloudformation:ListStackResources",
            "cloudformation:ListStackSetOperations",
            "cloudformation:ListStackSetOperationResults"
          ],
          "Resource": [
            "arn:aws:cloudformation:*:*:stack/SC-*",
            "arn:aws:cloudformation:*:*:stack/StackSet-SC-*",
            "arn:aws:cloudformation:*:*:changeSet/SC-*",
            "arn:aws:cloudformation:*:*:stackset/SC-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:GetTemplateSummary",
            "servicecatalog:DescribeProduct",
            "servicecatalog:DescribeProductView",
            "servicecatalog:DescribeProvisioningParameters",
            "servicecatalog:ListLaunchPaths",
            "servicecatalog:ProvisionProduct",
            "servicecatalog:SearchProducts",
            "ssm:DescribeDocument",
            "ssm:GetAutomationExecution",
            "config:DescribeConfigurationRecorders",
            "config:DescribeConfigurationRecorderStatus"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "servicecatalog:DescribeProvisionedProduct",
            "servicecatalog:DescribeRecord",
            "servicecatalog:ListRecordHistory",
            "servicecatalog:ListStackInstancesForProvisionedProduct",
            "servicecatalog:ScanProvisionedProducts",
            "servicecatalog:TerminateProvisionedProduct",
            "servicecatalog:UpdateProvisionedProduct",
            "servicecatalog:SearchProvisionedProducts",
            "servicecatalog:CreateProvisionedProductPlan",
            "servicecatalog:DescribeProvisionedProductPlan",
            "servicecatalog:ExecuteProvisionedProductPlan",
            "servicecatalog:DeleteProvisionedProductPlan",
            "servicecatalog:ListProvisionedProductPlans",
            "servicecatalog:ListServiceActionsForProvisioningArtifact",
            "servicecatalog:ExecuteProvisionedProductServiceAction",
            "servicecatalog:DescribeServiceActionExecutionParameters"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "servicecatalog:userLevel": "self"
            }
          }
        }
      ]
    },
    "VersionId": "v7",
    "IsDefaultVersion": true,
    "CreateDate": "2019-07-10T20:30:52+00:00"
  },
  "AWSServiceCatalogEndUserReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStacks",
            "cloudformation:DescribeChangeSet",
            "cloudformation:ListChangeSets",
            "cloudformation:DescribeStackSet",
            "cloudformation:DescribeStackInstance",
            "cloudformation:DescribeStackSetOperation",
            "cloudformation:ListStackInstances",
            "cloudformation:ListStackResources",
            "cloudformation:ListStackSetOperations",
            "cloudformation:ListStackSetOperationResults"
          ],
          "Resource": [
            "arn:aws:cloudformation:*:*:stack/SC-*",
            "arn:aws:cloudformation:*:*:stack/StackSet-SC-*",
            "arn:aws:cloudformation:*:*:changeSet/SC-*",
            "arn:aws:cloudformation:*:*:stackset/SC-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:GetTemplateSummary",
            "servicecatalog:DescribeProduct",
            "servicecatalog:DescribeProductView",
            "servicecatalog:DescribeProvisioningParameters",
            "servicecatalog:ListLaunchPaths",
            "servicecatalog:SearchProducts",
            "ssm:DescribeDocument",
            "ssm:GetAutomationExecution",
            "config:DescribeConfigurationRecorders",
            "config:DescribeConfigurationRecorderStatus"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "servicecatalog:DescribeProvisionedProduct",
            "servicecatalog:DescribeRecord",
            "servicecatalog:ListRecordHistory",
            "servicecatalog:ListStackInstancesForProvisionedProduct",
            "servicecatalog:ScanProvisionedProducts",
            "servicecatalog:SearchProvisionedProducts",
            "servicecatalog:DescribeProvisionedProductPlan",
            "servicecatalog:ListProvisionedProductPlans",
            "servicecatalog:ListServiceActionsForProvisioningArtifact",
            "servicecatalog:DescribeServiceActionExecutionParameters"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "servicecatalog:userLevel": "self"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-10-25T18:49:34+00:00"
  },
  "AWSServiceCatalogOrgsDataSyncServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "OrganizationsDataSyncToServiceCatalog",
          "Effect": "Allow",
          "Action": [
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAccounts",
            "organizations:ListChildren",
            "organizations:ListParents",
            "organizations:ListAWSServiceAccessForOrganization"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-04-10T20:48:28+00:00"
  },
  "AWSServiceCatalogSyncServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "ArtifactSyncToServiceCatalog",
          "Effect": "Allow",
          "Action": [
            "servicecatalog:ListProvisioningArtifacts",
            "servicecatalog:DescribeProductAsAdmin",
            "servicecatalog:DeleteProvisioningArtifact",
            "servicecatalog:ListServiceActionsForProvisioningArtifact",
            "servicecatalog:DescribeProvisioningArtifact",
            "servicecatalog:CreateProvisioningArtifact",
            "servicecatalog:UpdateProvisioningArtifact"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AccessArtifactRepositories",
          "Effect": "Allow",
          "Action": [
            "codestar-connections:UseConnection"
          ],
          "Resource": "arn:aws:codestar-connections:*:*:connection/*"
        },
        {
          "Sid": "ValidateTemplate",
          "Effect": "Allow",
          "Action": [
            "cloudformation:ValidateTemplate"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-15T21:20:15+00:00"
  },
  "AWSServiceRoleForAmazonEKSNodegroup": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "SharedSecurityGroupRelatedPermissions",
          "Effect": "Allow",
          "Action": [
            "ec2:RevokeSecurityGroupIngress",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:DescribeInstances",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:DeleteSecurityGroup"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/eks": "*"
            }
          }
        },
        {
          "Sid": "EKSCreatedSecurityGroupRelatedPermissions",
          "Effect": "Allow",
          "Action": [
            "ec2:RevokeSecurityGroupIngress",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:DescribeInstances",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:DeleteSecurityGroup"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/eks:nodegroup-name": "*"
            }
          }
        },
        {
          "Sid": "LaunchTemplateRelatedPermissions",
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteLaunchTemplate",
            "ec2:CreateLaunchTemplateVersion"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/eks:nodegroup-name": "*"
            }
          }
        },
        {
          "Sid": "AutoscalingRelatedPermissions",
          "Effect": "Allow",
          "Action": [
            "autoscaling:UpdateAutoScalingGroup",
            "autoscaling:DeleteAutoScalingGroup",
            "autoscaling:TerminateInstanceInAutoScalingGroup",
            "autoscaling:CompleteLifecycleAction",
            "autoscaling:PutLifecycleHook",
            "autoscaling:PutNotificationConfiguration",
            "autoscaling:EnableMetricsCollection"
          ],
          "Resource": "arn:aws:autoscaling:*:*:*:autoScalingGroupName/eks-*"
        },
        {
          "Sid": "AllowAutoscalingToCreateSLR",
          "Effect": "Allow",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "autoscaling.amazonaws.com"
            }
          },
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*"
        },
        {
          "Sid": "AllowASGCreationByEKS",
          "Effect": "Allow",
          "Action": [
            "autoscaling:CreateOrUpdateTags",
            "autoscaling:CreateAutoScalingGroup"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:TagKeys": [
                "eks",
                "eks:cluster-name",
                "eks:nodegroup-name"
              ]
            }
          }
        },
        {
          "Sid": "AllowPassRoleToAutoscaling",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "autoscaling.amazonaws.com"
            }
          }
        },
        {
          "Sid": "AllowPassRoleToEC2",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "*",
          "Condition": {
            "StringEqualsIfExists": {
              "iam:PassedToService": [
                "ec2.amazonaws.com",
                "ec2.amazonaws.com.cn"
              ]
            }
          }
        },
        {
          "Sid": "PermissionsToManageResourcesForNodegroups",
          "Effect": "Allow",
          "Action": [
            "iam:GetRole",
            "ec2:CreateLaunchTemplate",
            "ec2:DescribeInstances",
            "iam:GetInstanceProfile",
            "ec2:DescribeLaunchTemplates",
            "autoscaling:DescribeAutoScalingGroups",
            "ec2:CreateSecurityGroup",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:RunInstances",
            "ec2:DescribeSecurityGroups",
            "ec2:GetConsoleOutput",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSubnets"
          ],
          "Resource": "*"
        },
        {
          "Sid": "PermissionsToCreateAndManageInstanceProfiles",
          "Effect": "Allow",
          "Action": [
            "iam:CreateInstanceProfile",
            "iam:DeleteInstanceProfile",
            "iam:RemoveRoleFromInstanceProfile",
            "iam:AddRoleToInstanceProfile"
          ],
          "Resource": "arn:aws:iam::*:instance-profile/eks-*"
        },
        {
          "Sid": "PermissionsToManageEKSAndKubernetesTags",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags",
            "ec2:DeleteTags"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringLike": {
              "aws:TagKeys": [
                "eks",
                "eks:cluster-name",
                "eks:nodegroup-name",
                "kubernetes.io/cluster/*"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v6",
    "IsDefaultVersion": true,
    "CreateDate": "2022-01-14T00:33:26+00:00"
  },
  "AWSServiceRoleForCloudWatchAlarmsActionSSMServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "ssm:CreateOpsItem"
          ],
          "Resource": "*",
          "Effect": "Allow"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-10-01T09:49:01+00:00"
  },
  "AWSServiceRoleForCloudWatchMetrics_DbPerfInsightsServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "pi:GetResourceMetrics"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-09-07T09:32:32+00:00"
  },
  "AWSServiceRoleForCodeGuru-Profiler": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AllowSNSPublishToSendNotifications",
          "Effect": "Allow",
          "Action": [
            "sns:Publish"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-06-26T22:04:26+00:00"
  },
  "AWSServiceRoleForCodeWhispererPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "sso-directory:ListMembersInGroup"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "sso:ListProfileAssociations",
            "sso:ListProfiles",
            "sso:ListDirectoryAssociations",
            "sso:DescribeRegisteredRegions",
            "sso:GetProfile",
            "sso:GetManagedApplicationInstance"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "codeguru-security:CreateUploadUrl"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "codeguru-security:CreateScan",
            "codeguru-security:GetScan",
            "codeguru-security:ListFindings",
            "codeguru-security:GetFindings"
          ],
          "Resource": [
            "arn:aws:codeguru-security:*:*:scans/CodeWhisperer-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricData"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": [
                "AWS/CodeWhisperer"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-06-28T16:57:20+00:00"
  },
  "AWSServiceRoleForEC2ScheduledInstances": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "aws:ec2sri:scheduledInstanceId"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:TerminateInstances"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/aws:ec2sri:scheduledInstanceId": "*"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2017-10-12T18:31:55+00:00"
  },
  "AWSServiceRoleForGroundStationDataflowEndpointGroupPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeAddresses",
            "ec2:DescribeNetworkInterfaces"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-12-13T23:52:45+00:00"
  },
  "AWSServiceRoleForImageBuilder": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:RunInstances"
          ],
          "Resource": [
            "arn:aws:ec2:*::image/*",
            "arn:aws:ec2:*::snapshot/*",
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:network-interface/*",
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:key-pair/*",
            "arn:aws:ec2:*:*:launch-template/*",
            "arn:aws:license-manager:*:*:license-configuration:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:RunInstances"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:volume/*",
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/CreatedBy": [
                "EC2 Image Builder",
                "EC2 Fast Launch"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "ec2.amazonaws.com",
                "ec2.amazonaws.com.cn",
                "vmie.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:StopInstances",
            "ec2:StartInstances",
            "ec2:TerminateInstances"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "ec2:ResourceTag/CreatedBy": "EC2 Image Builder"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CopyImage",
            "ec2:CreateImage",
            "ec2:CreateLaunchTemplate",
            "ec2:DeregisterImage",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstances",
            "ec2:DescribeInstanceTypeOfferings",
            "ec2:DescribeInstanceTypes",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:ModifyImageAttribute",
            "ec2:DescribeImportImageTasks",
            "ec2:DescribeExportImageTasks",
            "ec2:DescribeSnapshots",
            "ec2:DescribeHosts"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:ModifySnapshotAttribute"
          ],
          "Resource": "arn:aws:ec2:*::snapshot/*",
          "Condition": {
            "StringEquals": {
              "ec2:ResourceTag/CreatedBy": "EC2 Image Builder"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": [
                "RunInstances",
                "CreateImage"
              ],
              "aws:RequestTag/CreatedBy": [
                "EC2 Image Builder",
                "EC2 Fast Launch"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": [
            "arn:aws:ec2:*::image/*",
            "arn:aws:ec2:*:*:export-image-task/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": [
            "arn:aws:ec2:*::snapshot/*",
            "arn:aws:ec2:*:*:launch-template/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/CreatedBy": [
                "EC2 Image Builder",
                "EC2 Fast Launch"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "license-manager:UpdateLicenseSpecificationsForResource"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sns:Publish"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:ListCommands",
            "ssm:ListCommandInvocations",
            "ssm:AddTagsToResource",
            "ssm:DescribeInstanceInformation",
            "ssm:GetAutomationExecution",
            "ssm:StopAutomationExecution",
            "ssm:ListInventoryEntries",
            "ssm:SendAutomationSignal",
            "ssm:DescribeInstanceAssociationsStatus",
            "ssm:DescribeAssociationExecutions",
            "ssm:GetCommandInvocation"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "ssm:SendCommand",
          "Resource": [
            "arn:aws:ssm:*:*:document/AWS-RunPowerShellScript",
            "arn:aws:ssm:*:*:document/AWS-RunShellScript",
            "arn:aws:ssm:*:*:document/AWSEC2-RunSysprep",
            "arn:aws:s3:::*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:SendCommand"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "StringEquals": {
              "ssm:resourceTag/CreatedBy": [
                "EC2 Image Builder"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ssm:StartAutomationExecution",
          "Resource": "arn:aws:ssm:*:*:automation-definition/ImageBuilder*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:CreateAssociation",
            "ssm:DeleteAssociation"
          ],
          "Resource": [
            "arn:aws:ssm:*:*:document/AWS-GatherSoftwareInventory",
            "arn:aws:ssm:*:*:association/*",
            "arn:aws:ec2:*:*:instance/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:Encrypt",
            "kms:Decrypt",
            "kms:ReEncryptFrom",
            "kms:ReEncryptTo",
            "kms:GenerateDataKeyWithoutPlaintext"
          ],
          "Resource": "*",
          "Condition": {
            "ForAllValues:StringEquals": {
              "kms:EncryptionContextKeys": [
                "aws:ebs:id"
              ]
            },
            "StringLike": {
              "kms:ViaService": [
                "ec2.*.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:DescribeKey"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "kms:ViaService": [
                "ec2.*.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "kms:CreateGrant",
          "Resource": "*",
          "Condition": {
            "Bool": {
              "kms:GrantIsForAWSResource": true
            },
            "StringLike": {
              "kms:ViaService": [
                "ec2.*.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "sts:AssumeRole",
          "Resource": "arn:aws:iam::*:role/EC2ImageBuilderDistributionCrossAccountRole"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:CreateLogGroup",
            "logs:PutLogEvents"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/imagebuilder/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateLaunchTemplateVersion",
            "ec2:DescribeLaunchTemplates",
            "ec2:ModifyLaunchTemplate",
            "ec2:DescribeLaunchTemplateVersions"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:ExportImage"
          ],
          "Resource": "arn:aws:ec2:*::image/*",
          "Condition": {
            "StringEquals": {
              "ec2:ResourceTag/CreatedBy": "EC2 Image Builder"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:ExportImage"
          ],
          "Resource": "arn:aws:ec2:*:*:export-image-task/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CancelExportTask"
          ],
          "Resource": "arn:aws:ec2:*:*:export-image-task/*",
          "Condition": {
            "StringEquals": {
              "ec2:ResourceTag/CreatedBy": "EC2 Image Builder"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": [
                "ssm.amazonaws.com",
                "ec2fastlaunch.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:EnableFastLaunch"
          ],
          "Resource": [
            "arn:aws:ec2:*::image/*",
            "arn:aws:ec2:*:*:launch-template/*"
          ],
          "Condition": {
            "StringEquals": {
              "ec2:ResourceTag/CreatedBy": "EC2 Image Builder"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "inspector2:ListCoverage",
            "inspector2:ListFindings"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ecr:CreateRepository"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/CreatedBy": "EC2 Image Builder"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ecr:TagResource"
          ],
          "Resource": "arn:aws:ecr:*:*:repository/image-builder-*",
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/CreatedBy": "EC2 Image Builder"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ecr:BatchDeleteImage"
          ],
          "Resource": "arn:aws:ecr:*:*:repository/image-builder-*",
          "Condition": {
            "StringEquals": {
              "ecr:ResourceTag/CreatedBy": "EC2 Image Builder"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "events:DeleteRule",
            "events:DescribeRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets"
          ],
          "Resource": [
            "arn:aws:events:*:*:rule/ImageBuilder-*"
          ]
        }
      ]
    },
    "VersionId": "v19",
    "IsDefaultVersion": true,
    "CreateDate": "2023-10-19T21:30:10+00:00"
  },
  "AWSServiceRoleForIoTSiteWise": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AllowSiteWiseReadGreenGrass",
          "Effect": "Allow",
          "Action": [
            "greengrass:GetAssociatedRole",
            "greengrass:GetCoreDefinition",
            "greengrass:GetCoreDefinitionVersion",
            "greengrass:GetGroup",
            "greengrass:GetGroupVersion"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AllowSiteWiseAccessLogGroup",
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:DescribeLogGroups"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/iotsitewise*"
        },
        {
          "Sid": "AllowSiteWiseAccessLog",
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/iotsitewise*:log-stream:*"
        },
        {
          "Sid": "AllowSiteWiseAccessSiteWiseManagedWorkspaceInTwinMaker",
          "Effect": "Allow",
          "Action": [
            "iottwinmaker:GetWorkspace",
            "iottwinmaker:ExecuteQuery"
          ],
          "Resource": "arn:aws:iottwinmaker:*:*:workspace/*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "iottwinmaker:linkedServices": [
                "IOTSITEWISE"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v8",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-13T18:27:50+00:00"
  },
  "AWSServiceRoleForLogDeliveryPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "firehose:PutRecord",
            "firehose:PutRecordBatch",
            "firehose:ListTagsForDeliveryStream"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/LogDeliveryEnabled": "true"
            }
          }
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2021-07-15T20:07:44+00:00"
  },
  "AWSServiceRoleForMonitronPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "sso:GetManagedApplicationInstance",
            "sso:GetProfile",
            "sso:ListProfiles",
            "sso:ListProfileAssociations",
            "sso:AssociateProfile",
            "sso:ListDirectoryAssociations",
            "sso-directory:DescribeUsers",
            "sso-directory:SearchUsers"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-09-29T20:38:15+00:00"
  },
  "AWSServiceRoleForSMS": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:CreateChangeSet",
            "cloudformation:CreateStack"
          ],
          "Resource": "arn:aws:cloudformation:*:*:stack/sms-app-*/*",
          "Condition": {
            "Null": {
              "cloudformation:ResourceTypes": "false"
            },
            "ForAllValues:StringEquals": {
              "cloudformation:ResourceTypes": [
                "AWS::EC2::Instance",
                "AWS::ApplicationInsights::Application",
                "AWS::ResourceGroups::Group"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:DeleteStack",
            "cloudformation:ExecuteChangeSet",
            "cloudformation:DeleteChangeSet",
            "cloudformation:DescribeChangeSet",
            "cloudformation:DescribeStacks",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStackResource",
            "cloudformation:DescribeStackResources",
            "cloudformation:GetTemplate"
          ],
          "Resource": "arn:aws:cloudformation:*:*:stack/sms-app-*/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:ValidateTemplate",
            "s3:ListAllMyBuckets"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:DeleteObject",
            "s3:GetBucketAcl",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:PutObject",
            "s3:PutObjectAcl",
            "s3:PutLifecycleConfiguration"
          ],
          "Resource": "arn:aws:s3:::sms-app-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sms:CreateReplicationJob",
            "sms:DeleteReplicationJob",
            "sms:GetReplicationJobs",
            "sms:GetReplicationRuns",
            "sms:GetServers",
            "sms:ImportServerCatalog",
            "sms:StartOnDemandReplicationRun",
            "sms:UpdateReplicationJob"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "ssm:SendCommand",
          "Resource": [
            "arn:aws:ssm:*::document/AWS-RunRemoteScript",
            "arn:aws:s3:::sms-app-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "ssm:SendCommand",
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "StringEquals": {
              "ssm:resourceTag/UseForSMSApplicationValidation": [
                "true"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:CancelCommand",
            "ssm:GetCommandInvocation"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": "arn:aws:ec2:*:*:snapshot/*",
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "CopySnapshot"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CopySnapshot",
          "Resource": "arn:aws:ec2:*:*:snapshot/*",
          "Condition": {
            "StringLike": {
              "aws:RequestTag/SMSJobId": [
                "sms-*"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:ModifySnapshotAttribute",
            "ec2:DeleteSnapshot"
          ],
          "Resource": "arn:aws:ec2:*:*:snapshot/*",
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/SMSJobId": [
                "sms-*"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CopyImage",
            "ec2:DescribeImages",
            "ec2:DescribeInstances",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSnapshotAttribute",
            "ec2:DeregisterImage",
            "ec2:ImportImage",
            "ec2:DescribeImportImageTasks",
            "ec2:GetEbsEncryptionByDefault"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:GetRole",
            "iam:GetInstanceProfile"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DisassociateIamInstanceProfile",
            "ec2:AssociateIamInstanceProfile",
            "ec2:ReplaceIamInstanceProfileAssociation"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/sms-app-*/*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "ec2.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "*",
          "Condition": {
            "StringEqualsIfExists": {
              "iam:PassedToService": "cloudformation.amazonaws.com"
            },
            "StringLike": {
              "iam:AssociatedResourceArn": "arn:aws:cloudformation:*:*:stack/sms-app-*/*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:RunInstances"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags",
            "ec2:DeleteTags"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:ModifyInstanceAttribute",
            "ec2:StopInstances",
            "ec2:StartInstances",
            "ec2:TerminateInstances"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/sms-app-*/*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "applicationinsights:Describe*",
            "applicationinsights:List*",
            "cloudformation:ListStackResources"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "applicationinsights:CreateApplication",
            "applicationinsights:CreateComponent",
            "applicationinsights:UpdateApplication",
            "applicationinsights:DeleteApplication",
            "applicationinsights:UpdateComponentConfiguration",
            "applicationinsights:DeleteComponent"
          ],
          "Resource": "arn:aws:applicationinsights:*:*:application/resource-group/sms-app-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "resource-groups:CreateGroup",
            "resource-groups:GetGroup",
            "resource-groups:UpdateGroup",
            "resource-groups:DeleteGroup"
          ],
          "Resource": "arn:aws:resource-groups:*:*:group/sms-app-*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/sms-app-*/*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/aws-service-role/application-insights.amazonaws.com/AWSServiceRoleForApplicationInsights"
          ],
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "application-insights.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v10",
    "IsDefaultVersion": true,
    "CreateDate": "2020-10-15T17:28:13+00:00"
  },
  "AWSServiceRolePolicyForBackupReports": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "backup:DescribeFramework",
            "backup:ListBackupJobs",
            "backup:ListRestoreJobs",
            "backup:ListCopyJobs"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "config:DescribeConfigurationRecorders",
            "config:DescribeConfigurationRecorderStatus",
            "config:BatchGetResourceConfig",
            "config:SelectResourceConfig",
            "config:DescribeConfigurationAggregators",
            "config:SelectAggregateResourceConfig",
            "config:DescribeConfigRuleEvaluationStatus",
            "config:DescribeConfigRules",
            "s3:GetBucketLocation"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "config:GetComplianceDetailsByConfigRule",
            "config:PutConfigRule",
            "config:DeleteConfigRule"
          ],
          "Resource": "arn:aws:config:*:*:config-rule/aws-service-rule/backup.amazonaws.com*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "config:DeleteConfigurationAggregator",
            "config:PutConfigurationAggregator"
          ],
          "Resource": "arn:aws:config:*:*:config-aggregator/aws-service-config-aggregator/backup.amazonaws.com*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-10T00:51:25+00:00"
  },
  "AWSServiceRolePolicyForBackupRestoreTesting": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "BackupActions",
          "Effect": "Allow",
          "Action": [
            "backup:DescribeRestoreJob",
            "backup:GetRecoveryPointRestoreMetadata",
            "backup:ListBackupVaults",
            "backup:ListProtectedResourcesByBackupVault",
            "backup:ListRecoveryPointsByBackupVault",
            "backup:ListTags",
            "backup:StartRestoreJob"
          ],
          "Resource": "*"
        },
        {
          "Sid": "IamPassRole",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "backup.amazonaws.com"
            }
          }
        },
        {
          "Sid": "DescribeActions",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstances",
            "ec2:DescribeTags",
            "ec2:DescribeVolumes",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DescribeMountTargets",
            "fsx:DescribeFileSystems",
            "fsx:DescribeVolumes",
            "fsx:ListTagsForResource",
            "rds:DescribeDBInstances",
            "rds:DescribeDBClusters",
            "rds:DescribeDBInstanceAutomatedBackups",
            "rds:ListTagsForResource"
          ],
          "Resource": "*"
        },
        {
          "Sid": "DeleteActions",
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteVolume",
            "ec2:TerminateInstances",
            "elasticfilesystem:DeleteFilesystem",
            "elasticfilesystem:DeleteMountTarget",
            "rds:DeleteDBCluster",
            "rds:DeleteDBInstance",
            "fsx:DeleteFileSystem",
            "fsx:DeleteVolume"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/awsbackup-restore-test": "false"
            }
          }
        },
        {
          "Sid": "DdbDeleteActions",
          "Effect": "Allow",
          "Action": [
            "dynamodb:DeleteTable",
            "dynamodb:DescribeTable"
          ],
          "Resource": "arn:aws:dynamodb:*:*:table/awsbackup-restore-test-*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        },
        {
          "Sid": "S3DeleteActions",
          "Effect": "Allow",
          "Action": [
            "s3:DeleteBucket",
            "s3:GetLifecycleConfiguration",
            "s3:PutLifecycleConfiguration"
          ],
          "Resource": "arn:aws:s3:::awsbackup-restore-test-*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-10T23:37:45+00:00"
  },
  "AWSShieldDRTAccessPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "SRTAccessProtectedResources",
          "Effect": "Allow",
          "Action": [
            "cloudfront:List*",
            "route53:List*",
            "elasticloadbalancing:Describe*",
            "cloudwatch:Describe*",
            "cloudwatch:Get*",
            "cloudwatch:List*",
            "cloudfront:GetDistribution*",
            "globalaccelerator:ListAccelerators",
            "globalaccelerator:DescribeAccelerator",
            "ec2:DescribeRegions",
            "ec2:DescribeAddresses"
          ],
          "Resource": "*"
        },
        {
          "Sid": "SRTManageProtections",
          "Effect": "Allow",
          "Action": [
            "shield:*",
            "waf:*",
            "wafv2:*",
            "waf-regional:*",
            "elasticloadbalancing:SetWebACL",
            "cloudfront:UpdateDistribution",
            "apigateway:SetWebACL"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v6",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-15T17:28:15+00:00"
  },
  "AWSShieldServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AWSShield",
          "Effect": "Allow",
          "Action": [
            "wafv2:GetWebACL",
            "wafv2:UpdateWebACL",
            "wafv2:GetWebACLForResource",
            "wafv2:ListResourcesForWebACL",
            "cloudfront:ListDistributions",
            "cloudfront:GetDistribution"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-11-17T19:17:46+00:00"
  },
  "AWSStepFunctionsConsoleFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "states:*",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:ListRoles",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/service-role/StatesExecutionRole*"
        },
        {
          "Effect": "Allow",
          "Action": "lambda:ListFunctions",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2017-01-12T00:19:34+00:00"
  },
  "AWSStepFunctionsFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "states:*",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2017-01-11T21:51:32+00:00"
  },
  "AWSStepFunctionsReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "states:ListStateMachines",
            "states:ListActivities",
            "states:DescribeStateMachine",
            "states:DescribeStateMachineForExecution",
            "states:ListExecutions",
            "states:DescribeExecution",
            "states:GetExecutionHistory",
            "states:DescribeActivity"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2017-11-10T22:03:49+00:00"
  },
  "AWSStorageGatewayFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "storagegateway:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeSnapshots",
            "ec2:DeleteSnapshot"
          ],
          "Resource": "*"
        },
        {
          "Sid": "fetchStorageGatewayParams",
          "Effect": "Allow",
          "Action": "ssm:GetParameters",
          "Resource": "arn:aws:ssm:*::parameter/aws/service/storagegateway/*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-09-06T20:26:09+00:00"
  },
  "AWSStorageGatewayReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "storagegateway:List*",
            "storagegateway:Describe*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeSnapshots"
          ],
          "Resource": "*"
        },
        {
          "Sid": "fetchStorageGatewayParams",
          "Effect": "Allow",
          "Action": "ssm:GetParameters",
          "Resource": "arn:aws:ssm:*::parameter/aws/service/storagegateway/*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-09-06T20:24:17+00:00"
  },
  "AWSStorageGatewayServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "fsx:ListTagsForResource"
          ],
          "Resource": "arn:aws:fsx:*:*:backup/*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-02-17T19:03:19+00:00"
  },
  "AWSSupplyChainFederationAdminAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AWSSupplyChain",
          "Effect": "Allow",
          "Action": [
            "scn:*"
          ],
          "Resource": [
            "arn:aws:scn:*:*:instance/*"
          ]
        },
        {
          "Sid": "ChimeAppInstance",
          "Effect": "Allow",
          "Action": [
            "chime:BatchCreateChannelMembership",
            "chime:CreateAppInstanceUser",
            "chime:CreateChannel",
            "chime:CreateChannelMembership",
            "chime:CreateChannelModerator",
            "chime:Connect",
            "chime:DeleteChannelMembership",
            "chime:DeleteChannelModerator",
            "chime:DescribeChannelMembershipForAppInstanceUser",
            "chime:GetChannelMembershipPreferences",
            "chime:ListChannelMemberships",
            "chime:ListChannelMembershipsForAppInstanceUser",
            "chime:ListChannelMessages",
            "chime:ListChannelModerators",
            "chime:TagResource",
            "chime:PutChannelMembershipPreferences",
            "chime:SendChannelMessage",
            "chime:UpdateChannelReadMarker",
            "chime:UpdateAppInstanceUser"
          ],
          "Resource": [
            "arn:aws:chime:*:*:app-instance/*"
          ],
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/SCNInstanceId": "*"
            }
          }
        },
        {
          "Sid": "ChimeChannel",
          "Effect": "Allow",
          "Action": [
            "chime:DescribeChannel"
          ],
          "Resource": [
            "arn:aws:chime:*:*:app-instance/*"
          ]
        },
        {
          "Sid": "ChimeMessaging",
          "Effect": "Allow",
          "Action": [
            "chime:GetMessagingSessionEndpoint"
          ],
          "Resource": "*"
        },
        {
          "Sid": "IAMIdentityCenter",
          "Effect": "Allow",
          "Action": [
            "sso:GetManagedApplicationInstance",
            "sso:ListDirectoryAssociations",
            "sso:AssociateProfile",
            "sso:DisassociateProfile",
            "sso:ListProfiles",
            "sso:GetProfile",
            "sso:ListProfileAssociations"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AppflowConnectorProfile",
          "Effect": "Allow",
          "Action": [
            "appflow:CreateConnectorProfile",
            "appflow:UseConnectorProfile",
            "appflow:DeleteConnectorProfile",
            "appflow:UpdateConnectorProfile"
          ],
          "Resource": [
            "arn:aws:appflow:*:*:connectorprofile/scn-*"
          ]
        },
        {
          "Sid": "AppflowFlow",
          "Effect": "Allow",
          "Action": [
            "appflow:CreateFlow",
            "appflow:DeleteFlow",
            "appflow:DescribeFlow",
            "appflow:DescribeFlowExecutionRecords",
            "appflow:ListFlows",
            "appflow:StartFlow",
            "appflow:StopFlow",
            "appflow:UpdateFlow",
            "appflow:TagResource",
            "appflow:UntagResource"
          ],
          "Resource": [
            "arn:aws:appflow:*:*:flow/scn-*"
          ]
        },
        {
          "Sid": "S3ListAllBuckets",
          "Effect": "Allow",
          "Action": [
            "s3:ListAllMyBuckets"
          ],
          "Resource": "*"
        },
        {
          "Sid": "S3ListSupplyChainBucket",
          "Effect": "Allow",
          "Action": [
            "s3:GetBucketLocation",
            "s3:GetBucketPolicy",
            "s3:ListBucket"
          ],
          "Resource": [
            "arn:aws:s3:::aws-supply-chain-data-*"
          ]
        },
        {
          "Sid": "S3ReadWriteObject",
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:PutObject"
          ],
          "Resource": [
            "arn:aws:s3:::aws-supply-chain-data-*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        },
        {
          "Sid": "SecretsManagerCreateSecret",
          "Effect": "Allow",
          "Action": "secretsmanager:CreateSecret",
          "Resource": "arn:aws:secretsmanager:*:*:secret:*",
          "Condition": {
            "StringLike": {
              "secretsmanager:Name": "appflow!*"
            },
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "appflow.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "SecretsManagerPutResourcePolicy",
          "Effect": "Allow",
          "Action": [
            "secretsmanager:PutResourcePolicy"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:secret:*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "appflow.amazonaws.com"
              ]
            },
            "StringEqualsIgnoreCase": {
              "secretsmanager:ResourceTag/aws:secretsmanager:owningService": "appflow"
            }
          }
        },
        {
          "Sid": "KMSListKeys",
          "Effect": "Allow",
          "Action": [
            "kms:ListKeys",
            "kms:ListAliases"
          ],
          "Resource": "arn:aws:kms:*:*:key/*"
        },
        {
          "Sid": "KMSListGrants",
          "Effect": "Allow",
          "Action": [
            "kms:DescribeKey",
            "kms:ListGrants"
          ],
          "Resource": "arn:aws:kms:*:*:key/*",
          "Condition": {
            "StringLike": {
              "kms:ViaService": "appflow.*.amazonaws.com"
            },
            "StringEquals": {
              "aws:ResourceTag/aws-supply-chain-access": "true"
            }
          }
        },
        {
          "Sid": "KMSCreateGrant",
          "Effect": "Allow",
          "Action": [
            "kms:CreateGrant"
          ],
          "Resource": "arn:aws:kms:*:*:key/*",
          "Condition": {
            "StringLike": {
              "kms:ViaService": "appflow.*.amazonaws.com"
            },
            "Bool": {
              "kms:GrantIsForAWSResource": "true"
            },
            "StringEquals": {
              "aws:ResourceTag/aws-supply-chain-access": "true"
            }
          }
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-01T18:50:13+00:00"
  },
  "AWSSupportAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "support:*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:41:11+00:00"
  },
  "AWSSupportAppFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "servicequotas:GetRequestedServiceQuotaChange",
            "servicequotas:GetServiceQuota",
            "servicequotas:RequestServiceQuotaIncrease",
            "support:AddAttachmentsToSet",
            "support:AddCommunicationToCase",
            "support:CreateCase",
            "support:DescribeCases",
            "support:DescribeCommunications",
            "support:DescribeSeverityLevels",
            "support:InitiateChatForCase",
            "support:ResolveCase"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "servicequotas.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-08-22T16:53:41+00:00"
  },
  "AWSSupportAppReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "support:DescribeCases",
            "support:DescribeCommunications"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-08-22T17:01:15+00:00"
  },
  "AWSSupportPlansFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "supportplans:GetSupportPlan",
            "supportplans:GetSupportPlanUpdateStatus",
            "supportplans:StartSupportPlanUpdate",
            "supportplans:CreateSupportPlanSchedule"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-05-09T21:07:01+00:00"
  },
  "AWSSupportPlansReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "supportplans:GetSupportPlan",
            "supportplans:GetSupportPlanUpdateStatus"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-09-27T18:08:29+00:00"
  },
  "AWSSupportServiceRolePolicy": {
    "Document": {
      "Statement": [
        {
          "Sid": "AWSSupportAPIGatewayAccess",
          "Action": [
            "apigateway:GET"
          ],
          "Effect": "Allow",
          "Resource": [
            "arn:aws:apigateway:*::/account",
            "arn:aws:apigateway:*::/apis",
            "arn:aws:apigateway:*::/apis/*",
            "arn:aws:apigateway:*::/apis/*/authorizers",
            "arn:aws:apigateway:*::/apis/*/authorizers/*",
            "arn:aws:apigateway:*::/apis/*/deployments",
            "arn:aws:apigateway:*::/apis/*/deployments/*",
            "arn:aws:apigateway:*::/apis/*/integrations",
            "arn:aws:apigateway:*::/apis/*/integrations/*",
            "arn:aws:apigateway:*::/apis/*/integrations/*/integrationresponses",
            "arn:aws:apigateway:*::/apis/*/integrations/*/integrationresponses/*",
            "arn:aws:apigateway:*::/apis/*/models",
            "arn:aws:apigateway:*::/apis/*/models/*",
            "arn:aws:apigateway:*::/apis/*/routes",
            "arn:aws:apigateway:*::/apis/*/routes/*",
            "arn:aws:apigateway:*::/apis/*/routes/*/routeresponses",
            "arn:aws:apigateway:*::/apis/*/routes/*/routeresponses/*",
            "arn:aws:apigateway:*::/apis/*/stages",
            "arn:aws:apigateway:*::/apis/*/stages/*",
            "arn:aws:apigateway:*::/clientcertificates",
            "arn:aws:apigateway:*::/clientcertificates/*",
            "arn:aws:apigateway:*::/domainnames",
            "arn:aws:apigateway:*::/domainnames/*",
            "arn:aws:apigateway:*::/domainnames/*/apimappings",
            "arn:aws:apigateway:*::/domainnames/*/apimappings/*",
            "arn:aws:apigateway:*::/domainnames/*/basepathmappings",
            "arn:aws:apigateway:*::/domainnames/*/basepathmappings/*",
            "arn:aws:apigateway:*::/restapis",
            "arn:aws:apigateway:*::/restapis/*",
            "arn:aws:apigateway:*::/restapis/*/authorizers",
            "arn:aws:apigateway:*::/restapis/*/authorizers/*",
            "arn:aws:apigateway:*::/restapis/*/deployments",
            "arn:aws:apigateway:*::/restapis/*/deployments/*",
            "arn:aws:apigateway:*::/restapis/*/models",
            "arn:aws:apigateway:*::/restapis/*/models/*",
            "arn:aws:apigateway:*::/restapis/*/models/*/default_template",
            "arn:aws:apigateway:*::/restapis/*/resources",
            "arn:aws:apigateway:*::/restapis/*/resources/*",
            "arn:aws:apigateway:*::/restapis/*/resources/*/methods/*/integration/responses/*",
            "arn:aws:apigateway:*::/restapis/*/resources/*/methods/*/responses/*",
            "arn:aws:apigateway:*::/restapis/*/stages/*/sdks/*",
            "arn:aws:apigateway:*::/restapis/*/resources/*/methods/*",
            "arn:aws:apigateway:*::/restapis/*/resources/*/methods/*/integration",
            "arn:aws:apigateway:*::/restapis/*/stages",
            "arn:aws:apigateway:*::/restapis/*/stages/*",
            "arn:aws:apigateway:*::/usageplans",
            "arn:aws:apigateway:*::/usageplans/*",
            "arn:aws:apigateway:*::/vpclinks",
            "arn:aws:apigateway:*::/vpclinks/*"
          ]
        },
        {
          "Sid": "AWSSupportDeleteRoleAccess",
          "Action": [
            "iam:DeleteRole"
          ],
          "Effect": "Allow",
          "Resource": [
            "arn:aws:iam::*:role/aws-service-role/support.amazonaws.com/AWSServiceRoleForSupport"
          ]
        },
        {
          "Sid": "AWSSupportActions",
          "Action": [
            "access-analyzer:getAccessPreview",
            "access-analyzer:getAnalyzedResource",
            "access-analyzer:getAnalyzer",
            "access-analyzer:getArchiveRule",
            "access-analyzer:getFinding",
            "access-analyzer:getGeneratedPolicy",
            "access-analyzer:listAccessPreviewFindings",
            "access-analyzer:listAccessPreviews",
            "access-analyzer:listAnalyzedResources",
            "access-analyzer:listAnalyzers",
            "access-analyzer:listArchiveRules",
            "access-analyzer:listFindings",
            "access-analyzer:listPolicyGenerations",
            "acm-pca:describeCertificateAuthority",
            "acm-pca:describeCertificateAuthorityAuditReport",
            "acm-pca:getCertificate",
            "acm-pca:getCertificateAuthorityCertificate",
            "acm-pca:getCertificateAuthorityCsr",
            "acm-pca:listCertificateAuthorities",
            "acm-pca:listTags",
            "acm:describeCertificate",
            "acm:getAccountConfiguration",
            "acm:getCertificate",
            "acm:listCertificates",
            "acm:listTagsForCertificate",
            "airflow:getEnvironment",
            "airflow:listEnvironments",
            "airflow:listTagsForResource",
            "amplify:getApp",
            "amplify:getBackendEnvironment",
            "amplify:getBranch",
            "amplify:getDomainAssociation",
            "amplify:getJob",
            "amplify:getWebhook",
            "amplify:listApps",
            "amplify:listBackendEnvironments",
            "amplify:listBranches",
            "amplify:listDomainAssociations",
            "amplify:listWebhooks",
            "amplifyuibuilder:exportComponents",
            "amplifyuibuilder:exportThemes",
            "appflow:describeConnectorEntity",
            "appflow:describeConnectorProfiles",
            "appflow:describeConnectors",
            "appflow:describeFlow",
            "appflow:describeFlowExecutionRecords",
            "appflow:listConnectorEntities",
            "appflow:listFlows",
            "application-autoscaling:describeScalableTargets",
            "application-autoscaling:describeScalingActivities",
            "application-autoscaling:describeScalingPolicies",
            "application-autoscaling:describeScheduledActions",
            "applicationinsights:describeApplication",
            "applicationinsights:describeComponent",
            "applicationinsights:describeComponentConfiguration",
            "applicationinsights:describeComponentConfigurationRecommendation",
            "applicationinsights:describeLogPattern",
            "applicationinsights:describeObservation",
            "applicationinsights:describeProblem",
            "applicationinsights:describeProblemObservations",
            "applicationinsights:listApplications",
            "applicationinsights:listComponents",
            "applicationinsights:listConfigurationHistory",
            "applicationinsights:listLogPatterns",
            "applicationinsights:listLogPatternSets",
            "applicationinsights:listProblems",
            "appmesh:describeGatewayRoute",
            "appmesh:describeMesh",
            "appmesh:describeRoute",
            "appmesh:describeVirtualGateway",
            "appmesh:describeVirtualNode",
            "appmesh:describeVirtualRouter",
            "appmesh:describeVirtualService",
            "appmesh:listGatewayRoutes",
            "appmesh:listMeshes",
            "appmesh:listRoutes",
            "appmesh:listTagsForResource",
            "appmesh:listVirtualGateways",
            "appmesh:listVirtualNodes",
            "appmesh:listVirtualRouters",
            "appmesh:listVirtualServices",
            "apprunner:describeAutoScalingConfiguration",
            "apprunner:describeCustomDomains",
            "apprunner:describeOperation",
            "apprunner:describeService",
            "apprunner:listAutoScalingConfigurations",
            "apprunner:listConnections",
            "apprunner:listOperations",
            "apprunner:listServices",
            "apprunner:listTagsForResource",
            "appstream:describeAppBlockBuilderAppBlockAssociations",
            "appstream:describeAppBlockBuilders",
            "appstream:describeAppBlocks",
            "appstream:describeApplicationFleetAssociations",
            "appstream:describeApplications",
            "appstream:describeDirectoryConfigs",
            "appstream:describeFleets",
            "appstream:describeImageBuilders",
            "appstream:describeImages",
            "appstream:describeSessions",
            "appstream:describeStacks",
            "appstream:listAssociatedFleets",
            "appstream:listAssociatedStacks",
            "appstream:listTagsForResource",
            "appsync:getFunction",
            "appsync:getGraphqlApi",
            "appsync:getIntrospectionSchema",
            "appsync:getResolver",
            "appsync:getSchemaCreationStatus",
            "appsync:getType",
            "appsync:listDataSources",
            "appsync:listFunctions",
            "appsync:listGraphqlApis",
            "appsync:listResolvers",
            "appsync:listTypes",
            "aps:describeAlertManagerDefinition",
            "aps:describeRuleGroupsNamespace",
            "aps:describeWorkspace",
            "aps:listRuleGroupsNamespaces",
            "aps:listWorkspaces",
            "athena:batchGetNamedQuery",
            "athena:batchGetQueryExecution",
            "athena:getCalculationExecution",
            "athena:getCalculationExecutionStatus",
            "athena:getDataCatalog",
            "athena:getNamedQuery",
            "athena:getNotebookMetadata",
            "athena:getQueryExecution",
            "athena:getQueryRuntimeStatistics",
            "athena:getSession",
            "athena:getSessionStatus",
            "athena:getWorkGroup",
            "athena:listApplicationDPUSizes",
            "athena:listCalculationExecutions",
            "athena:listDataCatalogs",
            "athena:listEngineVersions",
            "athena:listExecutors",
            "athena:listNamedQueries",
            "athena:listNotebookMetadata",
            "athena:listNotebookSessions",
            "athena:listQueryExecutions",
            "athena:listSessions",
            "athena:listTagsForResource",
            "athena:listWorkGroups",
            "auditmanager:getAccountStatus",
            "auditmanager:getDelegations",
            "auditmanager:listAssessmentFrameworks",
            "auditmanager:listAssessmentReports",
            "auditmanager:listAssessments",
            "auditmanager:listControls",
            "auditmanager:listKeywordsForDataSource",
            "auditmanager:listNotifications",
            "autoscaling-plans:describeScalingPlanResources",
            "autoscaling-plans:describeScalingPlans",
            "autoscaling-plans:getScalingPlanResourceForecastData",
            "autoscaling:describeAccountLimits",
            "autoscaling:describeAdjustmentTypes",
            "autoscaling:describeAutoScalingGroups",
            "autoscaling:describeAutoScalingInstances",
            "autoscaling:describeAutoScalingNotificationTypes",
            "autoscaling:describeInstanceRefreshes",
            "autoscaling:describeLaunchConfigurations",
            "autoscaling:describeLifecycleHooks",
            "autoscaling:describeLifecycleHookTypes",
            "autoscaling:describeLoadBalancers",
            "autoscaling:describeLoadBalancerTargetGroups",
            "autoscaling:describeMetricCollectionTypes",
            "autoscaling:describeNotificationConfigurations",
            "autoscaling:describePolicies",
            "autoscaling:describeScalingActivities",
            "autoscaling:describeScalingProcessTypes",
            "autoscaling:describeScheduledActions",
            "autoscaling:describeTags",
            "autoscaling:describeTerminationPolicyTypes",
            "autoscaling:describeWarmPool",
            "backup:describeBackupJob",
            "backup:describeBackupVault",
            "backup:describeCopyJob",
            "backup:describeFramework",
            "backup:describeGlobalSettings",
            "backup:describeProtectedResource",
            "backup:describeRecoveryPoint",
            "backup:describeRegionSettings",
            "backup:describeReportJob",
            "backup:describeReportPlan",
            "backup:describeRestoreJob",
            "backup:getBackupPlan",
            "backup:getBackupPlanFromJSON",
            "backup:getBackupPlanFromTemplate",
            "backup:getBackupSelection",
            "backup:getBackupVaultAccessPolicy",
            "backup:getBackupVaultNotifications",
            "backup:getLegalHold",
            "backup:getRecoveryPointRestoreMetadata",
            "backup:getSupportedResourceTypes",
            "backup:listBackupJobs",
            "backup:listBackupPlans",
            "backup:listBackupPlanTemplates",
            "backup:listBackupPlanVersions",
            "backup:listBackupSelections",
            "backup:listBackupVaults",
            "backup:listCopyJobs",
            "backup:listFrameworks",
            "backup:listLegalHolds",
            "backup:listProtectedResources",
            "backup:listRecoveryPointsByBackupVault",
            "backup:listRecoveryPointsByLegalHold",
            "backup:listRecoveryPointsByResource",
            "backup:listReportJobs",
            "backup:listReportPlans",
            "backup:listRestoreJobs",
            "backup:listTags",
            "backup-gateway:getGateway",
            "backup-gateway:getHypervisor",
            "backup-gateway:getHypervisorPropertyMappings",
            "backup-gateway:getVirtualMachine",
            "backup-gateway:listGateways",
            "backup-gateway:listHypervisors",
            "backup-gateway:listVirtualMachines",
            "batch:describeComputeEnvironments",
            "batch:describeJobDefinitions",
            "batch:describeJobQueues",
            "batch:describeJobs",
            "batch:listJobs",
            "braket:getDevice",
            "braket:getQuantumTask",
            "braket:searchDevices",
            "braket:searchQuantumTasks",
            "budgets:viewBudget",
            "ce:getCostAndUsage",
            "ce:getCostAndUsageWithResources",
            "ce:getCostForecast",
            "ce:getDimensionValues",
            "ce:getReservationCoverage",
            "ce:getReservationPurchaseRecommendation",
            "ce:getReservationUtilization",
            "ce:getRightsizingRecommendation",
            "ce:getSavingsPlansCoverage",
            "ce:getSavingsPlansPurchaseRecommendation",
            "ce:getSavingsPlansUtilization",
            "ce:getSavingsPlansUtilizationDetails",
            "ce:getTags",
            "chime:describeAppInstance",
            "chime:getAttendee",
            "chime:getGlobalSettings",
            "chime:getMediaCapturePipeline",
            "chime:getMediaPipeline",
            "chime:getMeeting",
            "chime:getProxySession",
            "chime:getSipMediaApplication",
            "chime:getSipRule",
            "chime:getVoiceConnector",
            "chime:getVoiceConnectorGroup",
            "chime:getVoiceConnectorLoggingConfiguration",
            "chime:listAppInstances",
            "chime:listAttendees",
            "chime:listChannelBans",
            "chime:listChannels",
            "chime:listChannelsModeratedByAppInstanceUser",
            "chime:listMediaCapturePipelines",
            "chime:listMediaPipelines",
            "chime:listMeetings",
            "chime:listSipMediaApplications",
            "chime:listSipRules",
            "chime:listVoiceConnectorGroups",
            "chime:listVoiceConnectors",
            "cleanrooms:batchGetSchema",
            "cleanrooms:getCollaboration",
            "cleanrooms:getConfiguredTable",
            "cleanrooms:getConfiguredTableAssociation",
            "cleanrooms:getMembership",
            "cleanrooms:getSchema",
            "cleanrooms:listCollaborations",
            "cleanrooms:listConfiguredTableAssociations",
            "cleanrooms:listConfiguredTables",
            "cleanrooms:listMembers",
            "cleanrooms:listMemberships",
            "cleanrooms:listSchemas",
            "cloud9:describeEnvironmentMemberships",
            "cloud9:describeEnvironments",
            "cloud9:listEnvironments",
            "clouddirectory:getDirectory",
            "clouddirectory:listDirectories",
            "cloudformation:batchDescribeTypeConfigurations",
            "cloudformation:describeAccountLimits",
            "cloudformation:describeChangeSet",
            "cloudformation:describeChangeSetHooks",
            "cloudformation:describePublisher",
            "cloudformation:describeStackEvents",
            "cloudformation:describeStackInstance",
            "cloudformation:describeStackResource",
            "cloudformation:describeStackResources",
            "cloudformation:describeStacks",
            "cloudformation:describeStackSet",
            "cloudformation:describeStackSetOperation",
            "cloudformation:describeType",
            "cloudformation:describeTypeRegistration",
            "cloudformation:estimateTemplateCost",
            "cloudformation:getStackPolicy",
            "cloudformation:getTemplate",
            "cloudformation:getTemplateSummary",
            "cloudformation:listChangeSets",
            "cloudformation:listExports",
            "cloudformation:listImports",
            "cloudformation:listStackInstances",
            "cloudformation:listStackResources",
            "cloudformation:listStacks",
            "cloudformation:listStackSetOperationResults",
            "cloudformation:listStackSetOperations",
            "cloudformation:listStackSets",
            "cloudformation:listTypeRegistrations",
            "cloudformation:listTypes",
            "cloudformation:listTypeVersions",
            "cloudfront:describeFunction",
            "cloudfront:getCachePolicy",
            "cloudfront:getCachePolicyConfig",
            "cloudfront:getCloudFrontOriginAccessIdentity",
            "cloudfront:getCloudFrontOriginAccessIdentityConfig",
            "cloudfront:getContinuousDeploymentPolicy",
            "cloudfront:getContinuousDeploymentPolicyConfig",
            "cloudfront:getDistribution",
            "cloudfront:getDistributionConfig",
            "cloudfront:getInvalidation",
            "cloudfront:getKeyGroup",
            "cloudfront:getKeyGroupConfig",
            "cloudfront:getMonitoringSubscription",
            "cloudfront:getOriginAccessControl",
            "cloudfront:getOriginAccessControlConfig",
            "cloudfront:getOriginRequestPolicy",
            "cloudfront:getOriginRequestPolicyConfig",
            "cloudfront:getPublicKey",
            "cloudfront:getPublicKeyConfig",
            "cloudfront:getRealtimeLogConfig",
            "cloudfront:getStreamingDistribution",
            "cloudfront:getStreamingDistributionConfig",
            "cloudfront:listCachePolicies",
            "cloudfront:listCloudFrontOriginAccessIdentities",
            "cloudfront:listContinuousDeploymentPolicies",
            "cloudfront:listDistributions",
            "cloudfront:listDistributionsByCachePolicyId",
            "cloudfront:listDistributionsByKeyGroup",
            "cloudfront:listDistributionsByOriginRequestPolicyId",
            "cloudfront:listDistributionsByRealtimeLogConfig",
            "cloudfront:listDistributionsByResponseHeadersPolicyId",
            "cloudfront:listDistributionsByWebACLId",
            "cloudfront:listFunctions",
            "cloudfront:listInvalidations",
            "cloudfront:listKeyGroups",
            "cloudfront:listOriginAccessControls",
            "cloudfront:listOriginRequestPolicies",
            "cloudfront:listPublicKeys",
            "cloudfront:listRealtimeLogConfigs",
            "cloudfront:listStreamingDistributions",
            "cloudhsm:describeBackups",
            "cloudhsm:describeClusters",
            "cloudsearch:describeAnalysisSchemes",
            "cloudsearch:describeAvailabilityOptions",
            "cloudsearch:describeDomains",
            "cloudsearch:describeExpressions",
            "cloudsearch:describeIndexFields",
            "cloudsearch:describeScalingParameters",
            "cloudsearch:describeServiceAccessPolicies",
            "cloudsearch:describeSuggesters",
            "cloudsearch:listDomainNames",
            "cloudtrail:describeTrails",
            "cloudtrail:getEventSelectors",
            "cloudtrail:getInsightSelectors",
            "cloudtrail:getTrail",
            "cloudtrail:getTrailStatus",
            "cloudtrail:listPublicKeys",
            "cloudtrail:listTags",
            "cloudtrail:listTrails",
            "cloudtrail:lookupEvents",
            "cloudwatch:describeAlarmHistory",
            "cloudwatch:describeAlarms",
            "cloudwatch:describeAlarmsForMetric",
            "cloudwatch:describeAnomalyDetectors",
            "cloudwatch:describeInsightRules",
            "cloudwatch:getDashboard",
            "cloudwatch:getInsightRuleReport",
            "cloudwatch:getMetricData",
            "cloudwatch:getMetricStatistics",
            "cloudwatch:getMetricStream",
            "cloudwatch:listDashboards",
            "cloudwatch:listManagedInsightRules",
            "cloudwatch:listMetrics",
            "cloudwatch:listMetricStreams",
            "codeartifact:describeDomain",
            "codeartifact:describePackageVersion",
            "codeartifact:describeRepository",
            "codeartifact:getDomainPermissionsPolicy",
            "codeartifact:getRepositoryEndpoint",
            "codeartifact:getRepositoryPermissionsPolicy",
            "codeartifact:listDomains",
            "codeartifact:listPackages",
            "codeartifact:listPackageVersionAssets",
            "codeartifact:listPackageVersions",
            "codeartifact:listRepositories",
            "codeartifact:listRepositoriesInDomain",
            "codebuild:batchGetBuildBatches",
            "codebuild:batchGetBuilds",
            "codebuild:batchGetProjects",
            "codebuild:listBuildBatches",
            "codebuild:listBuildBatchesForProject",
            "codebuild:listBuilds",
            "codebuild:listBuildsForProject",
            "codebuild:listCuratedEnvironmentImages",
            "codebuild:listProjects",
            "codebuild:listSourceCredentials",
            "codecommit:batchGetRepositories",
            "codecommit:getBranch",
            "codecommit:getRepository",
            "codecommit:getRepositoryTriggers",
            "codecommit:listBranches",
            "codecommit:listRepositories",
            "codedeploy:batchGetApplicationRevisions",
            "codedeploy:batchGetApplications",
            "codedeploy:batchGetDeploymentGroups",
            "codedeploy:batchGetDeploymentInstances",
            "codedeploy:batchGetDeployments",
            "codedeploy:batchGetDeploymentTargets",
            "codedeploy:batchGetOnPremisesInstances",
            "codedeploy:getApplication",
            "codedeploy:getApplicationRevision",
            "codedeploy:getDeployment",
            "codedeploy:getDeploymentConfig",
            "codedeploy:getDeploymentGroup",
            "codedeploy:getDeploymentInstance",
            "codedeploy:getDeploymentTarget",
            "codedeploy:getOnPremisesInstance",
            "codedeploy:listApplicationRevisions",
            "codedeploy:listApplications",
            "codedeploy:listDeploymentConfigs",
            "codedeploy:listDeploymentGroups",
            "codedeploy:listDeploymentInstances",
            "codedeploy:listDeployments",
            "codedeploy:listDeploymentTargets",
            "codedeploy:listGitHubAccountTokenNames",
            "codedeploy:listOnPremisesInstances",
            "codepipeline:getJobDetails",
            "codepipeline:getPipeline",
            "codepipeline:getPipelineExecution",
            "codepipeline:getPipelineState",
            "codepipeline:listActionExecutions",
            "codepipeline:listActionTypes",
            "codepipeline:listPipelineExecutions",
            "codepipeline:listPipelines",
            "codepipeline:listWebhooks",
            "codestar:describeProject",
            "codestar:listProjects",
            "codestar:listResources",
            "codestar:listTeamMembers",
            "codestar:listUserProfiles",
            "cognito-identity:describeIdentityPool",
            "cognito-identity:getIdentityPoolRoles",
            "cognito-identity:listIdentities",
            "cognito-identity:listIdentityPools",
            "cognito-idp:describeIdentityProvider",
            "cognito-idp:describeResourceServer",
            "cognito-idp:describeRiskConfiguration",
            "cognito-idp:describeUserImportJob",
            "cognito-idp:describeUserPool",
            "cognito-idp:describeUserPoolClient",
            "cognito-idp:describeUserPoolDomain",
            "cognito-idp:getGroup",
            "cognito-idp:getUICustomization",
            "cognito-idp:getUserPoolMfaConfig",
            "cognito-idp:listGroups",
            "cognito-idp:listIdentityProviders",
            "cognito-idp:listResourceServers",
            "cognito-idp:listUserImportJobs",
            "cognito-idp:listUserPoolClients",
            "cognito-idp:listUserPools",
            "cognito-sync:describeDataset",
            "cognito-sync:describeIdentityPoolUsage",
            "cognito-sync:describeIdentityUsage",
            "cognito-sync:getCognitoEvents",
            "cognito-sync:getIdentityPoolConfiguration",
            "cognito-sync:listDatasets",
            "cognito-sync:listIdentityPoolUsage",
            "comprehend:describeDocumentClassificationJob",
            "comprehend:describeDocumentClassifier",
            "comprehend:describeDominantLanguageDetectionJob",
            "comprehend:describeEndpoint",
            "comprehend:describeEntitiesDetectionJob",
            "comprehend:describeEntityRecognizer",
            "comprehend:describeEventsDetectionJob",
            "comprehend:describeKeyPhrasesDetectionJob",
            "comprehend:describePiiEntitiesDetectionJob",
            "comprehend:describeSentimentDetectionJob",
            "comprehend:describeTargetedSentimentDetectionJob",
            "comprehend:describeTopicsDetectionJob",
            "comprehend:listDocumentClassificationJobs",
            "comprehend:listDocumentClassifiers",
            "comprehend:listDominantLanguageDetectionJobs",
            "comprehend:listEndpoints",
            "comprehend:listEntitiesDetectionJobs",
            "comprehend:listEntityRecognizers",
            "comprehend:listEventsDetectionJobs",
            "comprehend:listKeyPhrasesDetectionJobs",
            "comprehend:listPiiEntitiesDetectionJobs",
            "comprehend:listSentimentDetectionJobs",
            "comprehend:listTargetedSentimentDetectionJobs",
            "comprehend:listTopicsDetectionJobs",
            "compute-optimizer:getAutoScalingGroupRecommendations",
            "compute-optimizer:getEBSVolumeRecommendations",
            "compute-optimizer:getEC2InstanceRecommendations",
            "compute-optimizer:getEC2RecommendationProjectedMetrics",
            "compute-optimizer:getECSServiceRecommendations",
            "compute-optimizer:getECSServiceRecommendationProjectedMetrics",
            "compute-optimizer:getEnrollmentStatus",
            "compute-optimizer:getRecommendationSummaries",
            "config:batchGetAggregateResourceConfig",
            "config:batchGetResourceConfig",
            "config:describeAggregateComplianceByConfigRules",
            "config:describeAggregationAuthorizations",
            "config:describeComplianceByConfigRule",
            "config:describeComplianceByResource",
            "config:describeConfigRuleEvaluationStatus",
            "config:describeConfigRules",
            "config:describeConfigurationAggregators",
            "config:describeConfigurationAggregatorSourcesStatus",
            "config:describeConfigurationRecorders",
            "config:describeConfigurationRecorderStatus",
            "config:describeConformancePackCompliance",
            "config:describeConformancePacks",
            "config:describeConformancePackStatus",
            "config:describeDeliveryChannels",
            "config:describeDeliveryChannelStatus",
            "config:describeOrganizationConfigRules",
            "config:describeOrganizationConfigRuleStatuses",
            "config:describeOrganizationConformancePacks",
            "config:describeOrganizationConformancePackStatuses",
            "config:describePendingAggregationRequests",
            "config:describeRemediationConfigurations",
            "config:describeRemediationExceptions",
            "config:describeRemediationExecutionStatus",
            "config:describeRetentionConfigurations",
            "config:getAggregateComplianceDetailsByConfigRule",
            "config:getAggregateConfigRuleComplianceSummary",
            "config:getAggregateDiscoveredResourceCounts",
            "config:getAggregateResourceConfig",
            "config:getComplianceDetailsByConfigRule",
            "config:getComplianceDetailsByResource",
            "config:getComplianceSummaryByConfigRule",
            "config:getComplianceSummaryByResourceType",
            "config:getConformancePackComplianceDetails",
            "config:getConformancePackComplianceSummary",
            "config:getDiscoveredResourceCounts",
            "config:getOrganizationConfigRuleDetailedStatus",
            "config:getOrganizationConformancePackDetailedStatus",
            "config:getResourceConfigHistory",
            "config:listAggregateDiscoveredResources",
            "config:listDiscoveredResources",
            "config:listTagsForResource",
            "connect:describePhoneNumber",
            "connect:describeUser",
            "connect:getCurrentMetricData",
            "connect:getMetricData",
            "connect:listPhoneNumbersV2",
            "connect:listRoutingProfiles",
            "connect:listSecurityProfiles",
            "connect:listUsers",
            "controltower:describeAccountFactoryConfig",
            "controltower:describeCoreService",
            "controltower:describeGuardrail",
            "controltower:describeGuardrailForTarget",
            "controltower:describeManagedAccount",
            "controltower:describeSingleSignOn",
            "controltower:getAvailableUpdates",
            "controltower:getHomeRegion",
            "controltower:getLandingZoneStatus",
            "controltower:listDirectoryGroups",
            "controltower:listGuardrailsForTarget",
            "controltower:listGuardrailViolations",
            "controltower:listManagedAccounts",
            "controltower:listManagedAccountsForGuardrail",
            "controltower:listManagedAccountsForParent",
            "controltower:listManagedOrganizationalUnits",
            "controltower:listManagedOrganizationalUnitsForGuardrail",
            "databrew:describeDataset",
            "databrew:describeJob",
            "databrew:describeProject",
            "databrew:describeRecipe",
            "databrew:listDatasets",
            "databrew:listJobRuns",
            "databrew:listJobs",
            "databrew:listProjects",
            "databrew:listRecipes",
            "databrew:listRecipeVersions",
            "databrew:listTagsForResource",
            "datapipeline:describeObjects",
            "datapipeline:describePipelines",
            "datapipeline:getPipelineDefinition",
            "datapipeline:listPipelines",
            "datapipeline:queryObjects",
            "datasync:describeAgent",
            "datasync:describeLocationEfs",
            "datasync:describeLocationFsxLustre",
            "datasync:describeLocationFsxOpenZfs",
            "datasync:describeLocationFsxWindows",
            "datasync:describeLocationHdfs",
            "datasync:describeLocationNfs",
            "datasync:describeLocationObjectStorage",
            "datasync:describeLocationS3",
            "datasync:describeLocationSmb",
            "datasync:describeTask",
            "datasync:describeTaskExecution",
            "datasync:listAgents",
            "datasync:listLocations",
            "datasync:listTaskExecutions",
            "datasync:listTasks",
            "dax:describeClusters",
            "dax:describeDefaultParameters",
            "dax:describeEvents",
            "dax:describeParameterGroups",
            "dax:describeParameters",
            "dax:describeSubnetGroups",
            "detective:getMembers",
            "detective:listGraphs",
            "detective:listInvitations",
            "detective:listMembers",
            "devicefarm:getAccountSettings",
            "devicefarm:getDevice",
            "devicefarm:getDevicePool",
            "devicefarm:getDevicePoolCompatibility",
            "devicefarm:getJob",
            "devicefarm:getProject",
            "devicefarm:getRemoteAccessSession",
            "devicefarm:getRun",
            "devicefarm:getSuite",
            "devicefarm:getTest",
            "devicefarm:getTestGridProject",
            "devicefarm:getTestGridSession",
            "devicefarm:getUpload",
            "devicefarm:listArtifacts",
            "devicefarm:listDevicePools",
            "devicefarm:listDevices",
            "devicefarm:listJobs",
            "devicefarm:listProjects",
            "devicefarm:listRemoteAccessSessions",
            "devicefarm:listRuns",
            "devicefarm:listSamples",
            "devicefarm:listSuites",
            "devicefarm:listTestGridProjects",
            "devicefarm:listTestGridSessionActions",
            "devicefarm:listTestGridSessionArtifacts",
            "devicefarm:listTestGridSessions",
            "devicefarm:listTests",
            "devicefarm:listUniqueProblems",
            "devicefarm:listUploads",
            "directconnect:describeConnections",
            "directconnect:describeConnectionsOnInterconnect",
            "directconnect:describeInterconnects",
            "directconnect:describeLocations",
            "directconnect:describeVirtualGateways",
            "directconnect:describeVirtualInterfaces",
            "dlm:getLifecyclePolicies",
            "dlm:getLifecyclePolicy",
            "dms:describeAccountAttributes",
            "dms:describeApplicableIndividualAssessments",
            "dms:describeConnections",
            "dms:describeEndpoints",
            "dms:describeEndpointSettings",
            "dms:describeEndpointTypes",
            "dms:describeEventCategories",
            "dms:describeEvents",
            "dms:describeEventSubscriptions",
            "dms:describeFleetAdvisorCollectors",
            "dms:describeFleetAdvisorDatabases",
            "dms:describeFleetAdvisorLsaAnalysis",
            "dms:describeFleetAdvisorSchemaObjectSummary",
            "dms:describeFleetAdvisorSchemas",
            "dms:describeOrderableReplicationInstances",
            "dms:describePendingMaintenanceActions",
            "dms:describeRefreshSchemasStatus",
            "dms:describeReplicationInstances",
            "dms:describeReplicationInstanceTaskLogs",
            "dms:describeReplicationSubnetGroups",
            "dms:describeReplicationTaskAssessmentResults",
            "dms:describeReplicationTaskAssessmentRuns",
            "dms:describeReplicationTaskIndividualAssessments",
            "dms:describeReplicationTasks",
            "dms:describeSchemas",
            "dms:describeTableStatistics",
            "docdb-elastic:getCluster",
            "docdb-elastic:getClusterSnapshot",
            "docdb-elastic:listClusters",
            "docdb-elastic:listClusterSnapshots",
            "drs:describeJobLogItems",
            "drs:describeJobs",
            "drs:describeLaunchConfigurationTemplates",
            "drs:describeRecoveryInstances",
            "drs:describeRecoverySnapshots",
            "drs:describeReplicationConfigurationTemplates",
            "drs:describeSourceNetworks",
            "drs:describeSourceServers",
            "drs:getLaunchConfiguration",
            "drs:getReplicationConfiguration",
            "drs:listExtensibleSourceServers",
            "drs:listStagingAccounts",
            "ds:describeClientAuthenticationSettings",
            "ds:describeConditionalForwarders",
            "ds:describeDirectories",
            "ds:describeDomainControllers",
            "ds:describeEventTopics",
            "ds:describeLDAPSSettings",
            "ds:describeSharedDirectories",
            "ds:describeSnapshots",
            "ds:describeTrusts",
            "ds:getDirectoryLimits",
            "ds:getSnapshotLimits",
            "ds:listIpRoutes",
            "ds:listSchemaExtensions",
            "ds:listTagsForResource",
            "dynamodb:describeBackup",
            "dynamodb:describeContinuousBackups",
            "dynamodb:describeContributorInsights",
            "dynamodb:describeExport",
            "dynamodb:describeGlobalTable",
            "dynamodb:describeImport",
            "dynamodb:describeKinesisStreamingDestination",
            "dynamodb:describeLimits",
            "dynamodb:describeStream",
            "dynamodb:describeTable",
            "dynamodb:describeTimeToLive",
            "dynamodb:listBackups",
            "dynamodb:listContributorInsights",
            "dynamodb:listExports",
            "dynamodb:listGlobalTables",
            "dynamodb:listImports",
            "dynamodb:listStreams",
            "dynamodb:listTables",
            "dynamodb:listTagsOfResource",
            "ec2:describeAccountAttributes",
            "ec2:describeAddresses",
            "ec2:describeAvailabilityZones",
            "ec2:describeBundleTasks",
            "ec2:describeByoipCidrs",
            "ec2:describeCapacityReservations",
            "ec2:describeCarrierGateways",
            "ec2:describeClassicLinkInstances",
            "ec2:describeClientVpnAuthorizationRules",
            "ec2:describeClientVpnConnections",
            "ec2:describeClientVpnEndpoints",
            "ec2:describeClientVpnRoutes",
            "ec2:describeClientVpnTargetNetworks",
            "ec2:describeCoipPools",
            "ec2:describeConversionTasks",
            "ec2:describeCustomerGateways",
            "ec2:describeDhcpOptions",
            "ec2:describeEgressOnlyInternetGateways",
            "ec2:describeElasticGpus",
            "ec2:describeExportImageTasks",
            "ec2:describeExportTasks",
            "ec2:describeFastSnapshotRestores",
            "ec2:describeFleetHistory",
            "ec2:describeFleetInstances",
            "ec2:describeFleets",
            "ec2:describeFlowLogs",
            "ec2:describeHostReservationOfferings",
            "ec2:describeHostReservations",
            "ec2:describeHosts",
            "ec2:describeIdentityIdFormat",
            "ec2:describeIdFormat",
            "ec2:describeImageAttribute",
            "ec2:describeImages",
            "ec2:describeImportImageTasks",
            "ec2:describeImportSnapshotTasks",
            "ec2:describeInstanceAttribute",
            "ec2:describeInstances",
            "ec2:describeInstanceStatus",
            "ec2:describeInternetGateways",
            "ec2:describeIpamPools",
            "ec2:describeIpams",
            "ec2:describeIpamScopes",
            "ec2:describeKeyPairs",
            "ec2:describeLaunchTemplates",
            "ec2:describeLaunchTemplateVersions",
            "ec2:describeLocalGatewayRouteTables",
            "ec2:describeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
            "ec2:describeLocalGatewayRouteTableVpcAssociations",
            "ec2:describeLocalGateways",
            "ec2:describeLocalGatewayVirtualInterfaceGroups",
            "ec2:describeLocalGatewayVirtualInterfaces",
            "ec2:describeManagedPrefixLists",
            "ec2:describeMovingAddresses",
            "ec2:describeNatGateways",
            "ec2:describeNetworkAcls",
            "ec2:describeNetworkInterfaceAttribute",
            "ec2:describeNetworkInterfaces",
            "ec2:describePlacementGroups",
            "ec2:describePrefixLists",
            "ec2:describePublicIpv4Pools",
            "ec2:describeRegions",
            "ec2:describeReservedInstances",
            "ec2:describeReservedInstancesListings",
            "ec2:describeReservedInstancesModifications",
            "ec2:describeReservedInstancesOfferings",
            "ec2:describeRouteTables",
            "ec2:describeScheduledInstances",
            "ec2:describeSecurityGroupReferences",
            "ec2:describeSecurityGroups",
            "ec2:describeSnapshotAttribute",
            "ec2:describeSnapshots",
            "ec2:describeSpotDatafeedSubscription",
            "ec2:describeSpotFleetInstances",
            "ec2:describeSpotFleetRequestHistory",
            "ec2:describeSpotFleetRequests",
            "ec2:describeSpotInstanceRequests",
            "ec2:describeSpotPriceHistory",
            "ec2:describeStaleSecurityGroups",
            "ec2:describeSubnets",
            "ec2:describeTags",
            "ec2:describeTrafficMirrorFilters",
            "ec2:describeTrafficMirrorSessions",
            "ec2:describeTrafficMirrorTargets",
            "ec2:describeTransitGatewayAttachments",
            "ec2:describeTransitGatewayRouteTables",
            "ec2:describeTransitGateways",
            "ec2:describeTransitGatewayConnectPeers",
            "ec2:describeTransitGatewayMulticastDomains",
            "ec2:describeTransitGatewayPeeringAttachments",
            "ec2:describeTransitGatewayPolicyTables",
            "ec2:describeTransitGatewayRouteTableAnnouncements",
            "ec2:describeTransitGatewayVpcAttachments",
            "ec2:describeVerifiedAccessEndpoints",
            "ec2:describeVerifiedAccessGroups",
            "ec2:describeVerifiedAccessInstances",
            "ec2:describeVerifiedAccessTrustProviders",
            "ec2:describeVolumeAttribute",
            "ec2:describeVolumes",
            "ec2:describeVolumesModifications",
            "ec2:describeVolumeStatus",
            "ec2:describeVpcAttribute",
            "ec2:describeVpcClassicLink",
            "ec2:describeVpcClassicLinkDnsSupport",
            "ec2:describeVpcEndpointConnectionNotifications",
            "ec2:describeVpcEndpointConnections",
            "ec2:describeVpcEndpoints",
            "ec2:describeVpcEndpointServiceConfigurations",
            "ec2:describeVpcEndpointServicePermissions",
            "ec2:describeVpcEndpointServices",
            "ec2:describeVpcPeeringConnections",
            "ec2:describeVpcs",
            "ec2:describeVpnConnections",
            "ec2:describeVpnGateways",
            "ec2:getAssociatedIpv6PoolCidrs",
            "ec2:getCoipPoolUsage",
            "ec2:getConsoleOutput",
            "ec2:getConsoleScreenshot",
            "ec2:getIpamAddressHistory",
            "ec2:getIpamPoolAllocations",
            "ec2:getIpamPoolCidrs",
            "ec2:getIpamResourceCidrs",
            "ec2:getManagedPrefixListAssociations",
            "ec2:getManagedPrefixListEntries",
            "ec2:getReservedInstancesExchangeQuote",
            "ec2:getVerifiedAccessEndpointPolicy",
            "ec2:getVerifiedAccessGroupPolicy",
            "ec2:getTransitGatewayMulticastDomainAssociations",
            "ec2:getTransitGatewayPrefixListReferences",
            "ec2:searchLocalGatewayRoutes",
            "ec2:searchTransitGatewayMulticastGroups",
            "ec2:searchTransitGatewayRoutes",
            "ecr-public:describeImages",
            "ecr-public:describeImageTags",
            "ecr-public:describeRegistries",
            "ecr-public:describeRepositories",
            "ecr-public:getRegistryCatalogData",
            "ecr-public:getRepositoryCatalogData",
            "ecr-public:getRepositoryPolicy",
            "ecr-public:listTagsForResource",
            "ecr:batchCheckLayerAvailability",
            "ecr:batchGetRepositoryScanningConfiguration",
            "ecr:describeImages",
            "ecr:describeImageReplicationStatus",
            "ecr:describeImageScanFindings",
            "ecr:describePullThroughCacheRules",
            "ecr:describeRegistry",
            "ecr:describeRepositories",
            "ecr:getLifecyclePolicy",
            "ecr:getLifecyclePolicyPreview",
            "ecr:getRegistryPolicy",
            "ecr:getRegistryScanningConfiguration",
            "ecr:getRepositoryPolicy",
            "ecr:listImages",
            "ecr:listTagsForResource",
            "ecs:describeCapacityProviders",
            "ecs:describeClusters",
            "ecs:describeContainerInstances",
            "ecs:describeServices",
            "ecs:describeTaskDefinition",
            "ecs:describeTasks",
            "ecs:describeTaskSets",
            "ecs:getTaskProtection",
            "ecs:listAccountSettings",
            "ecs:listAttributes",
            "ecs:listClusters",
            "ecs:listContainerInstances",
            "ecs:listServices",
            "ecs:listServicesByNamespace",
            "ecs:listTagsForResource",
            "ecs:listTaskDefinitionFamilies",
            "ecs:listTaskDefinitions",
            "ecs:listTasks",
            "eks:describeAddon",
            "eks:describeAddonConfiguration",
            "eks:describeAddonVersions",
            "eks:describeCluster",
            "eks:describeFargateProfile",
            "eks:describeIdentityProviderConfig",
            "eks:describeNodegroup",
            "eks:describeUpdate",
            "eks:listAddons",
            "eks:listClusters",
            "eks:listFargateProfiles",
            "eks:listIdentityProviderConfigs",
            "eks:listNodegroups",
            "eks:listUpdates",
            "elasticache:describeCacheClusters",
            "elasticache:describeCacheEngineVersions",
            "elasticache:describeCacheParameterGroups",
            "elasticache:describeCacheParameters",
            "elasticache:describeCacheSecurityGroups",
            "elasticache:describeCacheSubnetGroups",
            "elasticache:describeEngineDefaultParameters",
            "elasticache:describeEvents",
            "elasticache:describeGlobalReplicationGroups",
            "elasticache:describeReplicationGroups",
            "elasticache:describeReservedCacheNodes",
            "elasticache:describeReservedCacheNodesOfferings",
            "elasticache:describeServiceUpdates",
            "elasticache:describeSnapshots",
            "elasticache:describeUpdateActions",
            "elasticache:describeUserGroups",
            "elasticache:describeUsers",
            "elasticache:listAllowedNodeTypeModifications",
            "elasticache:listTagsForResource",
            "elasticbeanstalk:checkDNSAvailability",
            "elasticbeanstalk:describeAccountAttributes",
            "elasticbeanstalk:describeApplicationVersions",
            "elasticbeanstalk:describeApplications",
            "elasticbeanstalk:describeConfigurationOptions",
            "elasticbeanstalk:describeEnvironmentHealth",
            "elasticbeanstalk:describeEnvironmentManagedActionHistory",
            "elasticbeanstalk:describeEnvironmentManagedActions",
            "elasticbeanstalk:describeEnvironmentResources",
            "elasticbeanstalk:describeEnvironments",
            "elasticbeanstalk:describeEvents",
            "elasticbeanstalk:describeInstancesHealth",
            "elasticbeanstalk:describePlatformVersion",
            "elasticbeanstalk:listAvailableSolutionStacks",
            "elasticbeanstalk:listPlatformBranches",
            "elasticbeanstalk:listPlatformVersions",
            "elasticbeanstalk:validateConfigurationSettings",
            "elasticfilesystem:describeAccessPoints",
            "elasticfilesystem:describeFileSystemPolicy",
            "elasticfilesystem:describeFileSystems",
            "elasticfilesystem:describeLifecycleConfiguration",
            "elasticfilesystem:describeMountTargets",
            "elasticfilesystem:describeMountTargetSecurityGroups",
            "elasticfilesystem:describeTags",
            "elasticfilesystem:listTagsForResource",
            "elasticloadbalancing:describeAccountLimits",
            "elasticloadbalancing:describeInstanceHealth",
            "elasticloadbalancing:describeListenerCertificates",
            "elasticloadbalancing:describeListeners",
            "elasticloadbalancing:describeLoadBalancerAttributes",
            "elasticloadbalancing:describeLoadBalancerPolicies",
            "elasticloadbalancing:describeLoadBalancerPolicyTypes",
            "elasticloadbalancing:describeLoadBalancers",
            "elasticloadbalancing:describeRules",
            "elasticloadbalancing:describeSSLPolicies",
            "elasticloadbalancing:describeTags",
            "elasticloadbalancing:describeTargetGroupAttributes",
            "elasticloadbalancing:describeTargetGroups",
            "elasticloadbalancing:describeTargetHealth",
            "elasticmapreduce:describeCluster",
            "elasticmapreduce:describeNotebookExecution",
            "elasticmapreduce:describeReleaseLabel",
            "elasticmapreduce:describeSecurityConfiguration",
            "elasticmapreduce:describeStep",
            "elasticmapreduce:describeStudio",
            "elasticmapreduce:getAutoTerminationPolicy",
            "elasticmapreduce:getBlockPublicAccessConfiguration",
            "elasticmapreduce:getManagedScalingPolicy",
            "elasticmapreduce:getStudioSessionMapping",
            "elasticmapreduce:listBootstrapActions",
            "elasticmapreduce:listClusters",
            "elasticmapreduce:listInstanceFleets",
            "elasticmapreduce:listInstanceGroups",
            "elasticmapreduce:listInstances",
            "elasticmapreduce:listNotebookExecutions",
            "elasticmapreduce:listReleaseLabels",
            "elasticmapreduce:listSecurityConfigurations",
            "elasticmapreduce:listSteps",
            "elasticmapreduce:listStudios",
            "elasticmapreduce:listStudioSessionMappings",
            "elastictranscoder:listJobsByPipeline",
            "elastictranscoder:listJobsByStatus",
            "elastictranscoder:listPipelines",
            "elastictranscoder:listPresets",
            "elastictranscoder:readPipeline",
            "elastictranscoder:readPreset",
            "emr-containers:describeJobRun",
            "emr-containers:describeJobTemplate",
            "emr-containers:describeManagedEndpoint",
            "emr-containers:describeVirtualCluster",
            "emr-containers:listJobRuns",
            "emr-containers:listJobTemplates",
            "emr-containers:listManagedEndpoints",
            "emr-containers:listVirtualClusters",
            "emr-serverless:getApplication",
            "emr-serverless:getJobRun",
            "emr-serverless:listApplications",
            "es:describeDomain",
            "es:describeDomainAutoTunes",
            "es:describeDomainChangeProgress",
            "es:describeDomainConfig",
            "es:describeDomains",
            "es:describeDryRunProgress",
            "es:describeElasticsearchDomain",
            "es:describeElasticsearchDomainConfig",
            "es:describeElasticsearchDomains",
            "es:describeInboundConnections",
            "es:describeInstanceTypeLimits",
            "es:describeOutboundConnections",
            "es:describePackages",
            "es:describeReservedInstanceOfferings",
            "es:describeReservedInstances",
            "es:describeVpcEndpoints",
            "es:getCompatibleVersions",
            "es:getPackageVersionHistory",
            "es:getUpgradeHistory",
            "es:getUpgradeStatus",
            "es:listDomainNames",
            "es:listDomainsForPackage",
            "es:listInstanceTypeDetails",
            "es:listPackagesForDomain",
            "es:listScheduledActions",
            "es:listTags",
            "es:listVersions",
            "es:listVpcEndpointAccess",
            "es:listVpcEndpoints",
            "es:listVpcEndpointsForDomain",
            "evidently:getExperiment",
            "evidently:getFeature",
            "evidently:getLaunch",
            "evidently:getProject",
            "evidently:getSegment",
            "evidently:listExperiments",
            "evidently:listFeatures",
            "evidently:listLaunches",
            "evidently:listProjects",
            "evidently:listSegments",
            "evidently:listSegmentReferences",
            "events:describeApiDestination",
            "events:describeArchive",
            "events:describeConnection",
            "events:describeEndpoint",
            "events:describeEventBus",
            "events:describeEventSource",
            "events:describePartnerEventSource",
            "events:describeReplay",
            "events:describeRule",
            "events:listArchives",
            "events:listApiDestinations",
            "events:listConnections",
            "events:listEndpoints",
            "events:listEventBuses",
            "events:listEventSources",
            "events:listPartnerEventSourceAccounts",
            "events:listPartnerEventSources",
            "events:listReplays",
            "events:listRuleNamesByTarget",
            "events:listRules",
            "events:listTargetsByRule",
            "events:testEventPattern",
            "firehose:describeDeliveryStream",
            "firehose:listDeliveryStreams",
            "fms:getAdminAccount",
            "fms:getComplianceDetail",
            "fms:getNotificationChannel",
            "fms:getPolicy",
            "fms:getProtectionStatus",
            "fms:listComplianceStatus",
            "fms:listMemberAccounts",
            "fms:listPolicies",
            "forecast:describeDataset",
            "forecast:describeDatasetGroup",
            "forecast:describeDatasetImportJob",
            "forecast:describeForecast",
            "forecast:describeForecastExportJob",
            "forecast:describePredictor",
            "forecast:getAccuracyMetrics",
            "forecast:listDatasetGroups",
            "forecast:listDatasetImportJobs",
            "forecast:listDatasets",
            "forecast:listForecastExportJobs",
            "forecast:listForecasts",
            "forecast:listPredictors",
            "fsx:describeBackups",
            "fsx:describeDataRepositoryAssociations",
            "fsx:describeDataRepositoryTasks",
            "fsx:describeFileCaches",
            "fsx:describeFileSystems",
            "fsx:describeSnapshots",
            "fsx:describeStorageVirtualMachines",
            "fsx:describeVolumes",
            "fsx:listTagsForResource",
            "gamelift:describeAlias",
            "gamelift:describeBuild",
            "gamelift:describeEC2InstanceLimits",
            "gamelift:describeFleetAttributes",
            "gamelift:describeFleetCapacity",
            "gamelift:describeFleetEvents",
            "gamelift:describeFleetLocationAttributes",
            "gamelift:describeFleetLocationCapacity",
            "gamelift:describeFleetLocationUtilization",
            "gamelift:describeFleetPortSettings",
            "gamelift:describeFleetUtilization",
            "gamelift:describeGameServer",
            "gamelift:describeGameServerGroup",
            "gamelift:describeGameSessionDetails",
            "gamelift:describeGameSessionPlacement",
            "gamelift:describeGameSessionQueues",
            "gamelift:describeGameSessions",
            "gamelift:describeInstances",
            "gamelift:describeMatchmaking",
            "gamelift:describeMatchmakingConfigurations",
            "gamelift:describeMatchmakingRuleSets",
            "gamelift:describePlayerSessions",
            "gamelift:describeRuntimeConfiguration",
            "gamelift:describeScalingPolicies",
            "gamelift:describeScript",
            "gamelift:listAliases",
            "gamelift:listBuilds",
            "gamelift:listFleets",
            "gamelift:listGameServerGroups",
            "gamelift:listGameServers",
            "gamelift:listScripts",
            "gamelift:resolveAlias",
            "gamesparks:getExtension",
            "gamesparks:getExtensionVersion",
            "gamesparks:getGame",
            "gamesparks:getSnapshot",
            "gamesparks:getStage",
            "gamesparks:getStageDeployment",
            "gamesparks:listExtensions",
            "gamesparks:listExtensionVersions",
            "gamesparks:listGames",
            "gamesparks:listSnapshots",
            "gamesparks:listStageDeployments",
            "gamesparks:listStages",
            "glacier:describeJob",
            "glacier:describeVault",
            "glacier:getDataRetrievalPolicy",
            "glacier:getVaultAccessPolicy",
            "glacier:getVaultLock",
            "glacier:getVaultNotifications",
            "glacier:listJobs",
            "glacier:listTagsForVault",
            "glacier:listVaults",
            "globalaccelerator:describeAccelerator",
            "globalaccelerator:describeAcceleratorAttributes",
            "globalaccelerator:describeEndpointGroup",
            "globalaccelerator:describeListener",
            "globalaccelerator:listAccelerators",
            "globalaccelerator:listEndpointGroups",
            "globalaccelerator:listListeners",
            "glue:batchGetBlueprints",
            "glue:batchGetCrawlers",
            "glue:batchGetDevEndpoints",
            "glue:batchGetJobs",
            "glue:batchGetPartition",
            "glue:batchGetTriggers",
            "glue:batchGetWorkflows",
            "glue:checkSchemaVersionValidity",
            "glue:getBlueprint",
            "glue:getBlueprintRun",
            "glue:getBlueprintRuns",
            "glue:getCatalogImportStatus",
            "glue:getClassifier",
            "glue:getClassifiers",
            "glue:getColumnStatisticsForPartition",
            "glue:getColumnStatisticsForTable",
            "glue:getCrawler",
            "glue:getCrawlerMetrics",
            "glue:getCrawlers",
            "glue:getCustomEntityType",
            "glue:getDatabase",
            "glue:getDatabases",
            "glue:getDataflowGraph",
            "glue:getDataQualityResult",
            "glue:getDataQualityRuleRecommendationRun",
            "glue:getDataQualityRuleset",
            "glue:getDataQualityRulesetEvaluationRun",
            "glue:getDevEndpoint",
            "glue:getDevEndpoints",
            "glue:getJob",
            "glue:getJobRun",
            "glue:getJobRuns",
            "glue:getJobs",
            "glue:getMapping",
            "glue:getMLTaskRun",
            "glue:getMLTaskRuns",
            "glue:getMLTransform",
            "glue:getMLTransforms",
            "glue:getPartition",
            "glue:getPartitionIndexes",
            "glue:getPartitions",
            "glue:getRegistry",
            "glue:getResourcePolicies",
            "glue:getResourcePolicy",
            "glue:getSchema",
            "glue:getSchemaByDefinition",
            "glue:getSchemaVersion",
            "glue:getSchemaVersionsDiff",
            "glue:getSession",
            "glue:getStatement",
            "glue:getTable",
            "glue:getTables",
            "glue:getTableVersions",
            "glue:getTrigger",
            "glue:getTriggers",
            "glue:getUserDefinedFunction",
            "glue:getUserDefinedFunctions",
            "glue:getWorkflow",
            "glue:getWorkflowRun",
            "glue:getWorkflowRuns",
            "glue:listCrawlers",
            "glue:listCrawls",
            "glue:listDataQualityResults",
            "glue:listDataQualityRuleRecommendationRuns",
            "glue:listDataQualityRulesetEvaluationRuns",
            "glue:listDataQualityRulesets",
            "glue:listDevEndpoints",
            "glue:listMLTransforms",
            "glue:listRegistries",
            "glue:listSchemas",
            "glue:listSchemaVersions",
            "glue:listSessions",
            "glue:listStatements",
            "glue:querySchemaVersionMetadata",
            "greengrass:getConnectivityInfo",
            "greengrass:getCoreDefinition",
            "greengrass:getCoreDefinitionVersion",
            "greengrass:getDeploymentStatus",
            "greengrass:getDeviceDefinition",
            "greengrass:getDeviceDefinitionVersion",
            "greengrass:getFunctionDefinition",
            "greengrass:getFunctionDefinitionVersion",
            "greengrass:getGroup",
            "greengrass:getGroupCertificateAuthority",
            "greengrass:getGroupVersion",
            "greengrass:getLoggerDefinition",
            "greengrass:getLoggerDefinitionVersion",
            "greengrass:getResourceDefinitionVersion",
            "greengrass:getServiceRoleForAccount",
            "greengrass:getSubscriptionDefinition",
            "greengrass:getSubscriptionDefinitionVersion",
            "greengrass:listCoreDefinitions",
            "greengrass:listCoreDefinitionVersions",
            "greengrass:listDeployments",
            "greengrass:listDeviceDefinitions",
            "greengrass:listDeviceDefinitionVersions",
            "greengrass:listFunctionDefinitions",
            "greengrass:listFunctionDefinitionVersions",
            "greengrass:listGroups",
            "greengrass:listGroupVersions",
            "greengrass:listLoggerDefinitions",
            "greengrass:listLoggerDefinitionVersions",
            "greengrass:listResourceDefinitions",
            "greengrass:listResourceDefinitionVersions",
            "greengrass:listSubscriptionDefinitions",
            "greengrass:listSubscriptionDefinitionVersions",
            "guardduty:getDetector",
            "guardduty:getFindings",
            "guardduty:getFindingsStatistics",
            "guardduty:getInvitationsCount",
            "guardduty:getIPSet",
            "guardduty:getMasterAccount",
            "guardduty:getMembers",
            "guardduty:getThreatIntelSet",
            "guardduty:listDetectors",
            "guardduty:listFindings",
            "guardduty:listInvitations",
            "guardduty:listIPSets",
            "guardduty:listMembers",
            "guardduty:listThreatIntelSets",
            "health:describeAffectedAccountsForOrganization",
            "health:describeAffectedEntities",
            "health:describeAffectedEntitiesForOrganization",
            "health:describeEntityAggregates",
            "health:describeEventAggregates",
            "health:describeEventDetails",
            "health:describeEventDetailsForOrganization",
            "health:describeEvents",
            "health:describeEventsForOrganization",
            "health:describeEventTypes",
            "health:describeHealthServiceStatusForOrganization",
            "iam:getAccessKeyLastUsed",
            "iam:getAccountAuthorizationDetails",
            "iam:getAccountPasswordPolicy",
            "iam:getAccountSummary",
            "iam:getContextKeysForCustomPolicy",
            "iam:getContextKeysForPrincipalPolicy",
            "iam:getCredentialReport",
            "iam:getGroup",
            "iam:getGroupPolicy",
            "iam:getInstanceProfile",
            "iam:getLoginProfile",
            "iam:getOpenIDConnectProvider",
            "iam:getPolicy",
            "iam:getPolicyVersion",
            "iam:getRole",
            "iam:getRolePolicy",
            "iam:getSAMLProvider",
            "iam:getServerCertificate",
            "iam:getServiceLinkedRoleDeletionStatus",
            "iam:getSSHPublicKey",
            "iam:getUser",
            "iam:getUserPolicy",
            "iam:listAccessKeys",
            "iam:listAccountAliases",
            "iam:listAttachedGroupPolicies",
            "iam:listAttachedRolePolicies",
            "iam:listAttachedUserPolicies",
            "iam:listEntitiesForPolicy",
            "iam:listGroupPolicies",
            "iam:listGroups",
            "iam:listGroupsForUser",
            "iam:listInstanceProfiles",
            "iam:listInstanceProfilesForRole",
            "iam:listMFADevices",
            "iam:listOpenIDConnectProviders",
            "iam:listPolicies",
            "iam:listPolicyVersions",
            "iam:listRolePolicies",
            "iam:listRoles",
            "iam:listSAMLProviders",
            "iam:listServerCertificates",
            "iam:listSigningCertificates",
            "iam:listSSHPublicKeys",
            "iam:listUserPolicies",
            "iam:listUsers",
            "iam:listVirtualMFADevices",
            "iam:simulateCustomPolicy",
            "iam:simulatePrincipalPolicy",
            "imagebuilder:getComponent",
            "imagebuilder:getComponentPolicy",
            "imagebuilder:getContainerRecipe",
            "imagebuilder:getDistributionConfiguration",
            "imagebuilder:getImage",
            "imagebuilder:getImagePipeline",
            "imagebuilder:getImagePolicy",
            "imagebuilder:getImageRecipe",
            "imagebuilder:getImageRecipePolicy",
            "imagebuilder:getInfrastructureConfiguration",
            "imagebuilder:getWorkflowExecution",
            "imagebuilder:getWorkflowStepExecution",
            "imagebuilder:listComponentBuildVersions",
            "imagebuilder:listComponents",
            "imagebuilder:listContainerRecipes",
            "imagebuilder:listDistributionConfigurations",
            "imagebuilder:listImageBuildVersions",
            "imagebuilder:listImagePipelineImages",
            "imagebuilder:listImagePipelines",
            "imagebuilder:listImageRecipes",
            "imagebuilder:listImages",
            "imagebuilder:listImageScanFindingAggregations",
            "imagebuilder:listInfrastructureConfigurations",
            "imagebuilder:listWorkflowExecutions",
            "imagebuilder:listWorkflowStepExecutions",
            "imagebuilder:listTagsForResource",
            "inspector:describeAssessmentRuns",
            "inspector:describeAssessmentTargets",
            "inspector:describeAssessmentTemplates",
            "inspector:describeCrossAccountAccessRole",
            "inspector:describeResourceGroups",
            "inspector:describeRulesPackages",
            "inspector:getTelemetryMetadata",
            "inspector:listAssessmentRunAgents",
            "inspector:listAssessmentRuns",
            "inspector:listAssessmentTargets",
            "inspector:listAssessmentTemplates",
            "inspector:listEventSubscriptions",
            "inspector:listRulesPackages",
            "inspector:listTagsForResource",
            "inspector2:batchGetAccountStatus",
            "inspector2:batchGetFreeTrialInfo",
            "inspector2:describeOrganizationConfiguration",
            "inspector2:getDelegatedAdminAccount",
            "inspector2:getMember",
            "inspector2:listCoverage",
            "inspector2:listDelegatedAdminAccounts",
            "inspector2:listFilters",
            "inspector2:listFindings",
            "inspector2:listMembers",
            "inspector2:listUsageTotals",
            "internetmonitor:getMonitor",
            "internetmonitor:listMonitors",
            "internetmonitor:getHealthEvent",
            "internetmonitor:listHealthEvents",
            "iot:describeAuthorizer",
            "iot:describeCACertificate",
            "iot:describeCertificate",
            "iot:describeDefaultAuthorizer",
            "iot:describeDomainConfiguration",
            "iot:describeEndpoint",
            "iot:describeIndex",
            "iot:describeJobExecution",
            "iot:describeThing",
            "iot:describeThingGroup",
            "iot:describeTunnel",
            "iot:getEffectivePolicies",
            "iot:getIndexingConfiguration",
            "iot:getLoggingOptions",
            "iot:getPolicy",
            "iot:getPolicyVersion",
            "iot:getTopicRule",
            "iot:getV2LoggingOptions",
            "iot:listAttachedPolicies",
            "iot:listAuthorizers",
            "iot:listCACertificates",
            "iot:listCertificates",
            "iot:listCertificatesByCA",
            "iot:listDomainConfigurations",
            "iot:listJobExecutionsForJob",
            "iot:listJobExecutionsForThing",
            "iot:listJobs",
            "iot:listNamedShadowsForThing",
            "iot:listOutgoingCertificates",
            "iot:listPackages",
            "iot:listPackageVersions",
            "iot:listPolicies",
            "iot:listPolicyPrincipals",
            "iot:listPolicyVersions",
            "iot:listPrincipalPolicies",
            "iot:listPrincipalThings",
            "iot:listRoleAliases",
            "iot:listTargetsForPolicy",
            "iot:listThingGroups",
            "iot:listThingGroupsForThing",
            "iot:listThingPrincipals",
            "iot:listThingRegistrationTasks",
            "iot:listThings",
            "iot:listThingsInThingGroup",
            "iot:listThingTypes",
            "iot:listTopicRules",
            "iot:listTunnels",
            "iot:listV2LoggingLevels",
            "iotevents:describeDetector",
            "iotevents:describeDetectorModel",
            "iotevents:describeInput",
            "iotevents:describeLoggingOptions",
            "iotevents:listDetectorModels",
            "iotevents:listDetectorModelVersions",
            "iotevents:listDetectors",
            "iotevents:listInputs",
            "iotfleetwise:getCampaign",
            "iotfleetwise:getDecoderManifest",
            "iotfleetwise:getFleet",
            "iotfleetwise:getModelManifest",
            "iotfleetwise:getSignalCatalog",
            "iotfleetwise:getVehicle",
            "iotfleetwise:getVehicleStatus",
            "iotfleetwise:listCampaigns",
            "iotfleetwise:listDecoderManifests",
            "iotfleetwise:listDecoderManifestNetworkInterfaces",
            "iotfleetwise:listDecoderManifestSignals",
            "iotfleetwise:listFleets",
            "iotfleetwise:listFleetsForVehicle",
            "iotfleetwise:listModelManifests",
            "iotfleetwise:listModelManifestNodes",
            "iotfleetwise:listSignalCatalogs",
            "iotfleetwise:listSignalCatalogNodes",
            "iotfleetwise:listVehicles",
            "iotsitewise:describeAccessPolicy",
            "iotsitewise:describeAsset",
            "iotsitewise:describeAssetModel",
            "iotsitewise:describeAssetProperty",
            "iotsitewise:describeDashboard",
            "iotsitewise:describeGateway",
            "iotsitewise:describeGatewayCapabilityConfiguration",
            "iotsitewise:describeLoggingOptions",
            "iotsitewise:describePortal",
            "iotsitewise:describeProject",
            "iotsitewise:listAccessPolicies",
            "iotsitewise:listAssetModels",
            "iotsitewise:listAssets",
            "iotsitewise:listAssociatedAssets",
            "iotsitewise:listDashboards",
            "iotsitewise:listGateways",
            "iotsitewise:listPortals",
            "iotsitewise:listProjectAssets",
            "iotsitewise:listProjects",
            "iottwinmaker:getComponentType",
            "iottwinmaker:getEntity",
            "iottwinmaker:getPricingPlan",
            "iottwinmaker:getScene",
            "iottwinmaker:getWorkspace",
            "iottwinmaker:listComponentTypes",
            "iottwinmaker:listEntities",
            "iottwinmaker:listScenes",
            "iottwinmaker:getSyncJob",
            "iottwinmaker:listSyncJobs",
            "iottwinmaker:listSyncResources",
            "iottwinmaker:listWorkspaces",
            "iotwireless:getDestination",
            "iotwireless:getDeviceProfile",
            "iotwireless:getPartnerAccount",
            "iotwireless:getServiceEndpoint",
            "iotwireless:getServiceProfile",
            "iotwireless:getWirelessDevice",
            "iotwireless:getWirelessDeviceStatistics",
            "iotwireless:getWirelessGateway",
            "iotwireless:getWirelessGatewayCertificate",
            "iotwireless:getWirelessGatewayFirmwareInformation",
            "iotwireless:getWirelessGatewayStatistics",
            "iotwireless:getWirelessGatewayTask",
            "iotwireless:getWirelessGatewayTaskDefinition",
            "iotwireless:listDestinations",
            "iotwireless:listDeviceProfiles",
            "iotwireless:listPartnerAccounts",
            "iotwireless:listServiceProfiles",
            "iotwireless:listTagsForResource",
            "iotwireless:listWirelessDevices",
            "iotwireless:listWirelessGateways",
            "iotwireless:listWirelessGatewayTaskDefinitions",
            "ivs:getChannel",
            "ivs:getRecordingConfiguration",
            "ivs:getStream",
            "ivs:getStreamSession",
            "ivs:listChannels",
            "ivs:listPlaybackKeyPairs",
            "ivs:listRecordingConfigurations",
            "ivs:listStreamKeys",
            "ivs:listStreams",
            "ivs:listStreamSessions",
            "kafka:describeCluster",
            "kafka:describeClusterOperation",
            "kafka:describeClusterV2",
            "kafka:describeConfiguration",
            "kafka:describeConfigurationRevision",
            "kafka:getBootstrapBrokers",
            "kafka:listConfigurations",
            "kafka:listConfigurationRevisions",
            "kafka:listClusterOperations",
            "kafka:listClusters",
            "kafka:listClustersV2",
            "kafka:listNodes",
            "kafkaconnect:describeConnector",
            "kafkaconnect:describeCustomPlugin",
            "kafkaconnect:describeWorkerConfiguration",
            "kafkaconnect:listConnectors",
            "kafkaconnect:listCustomPlugins",
            "kafkaconnect:listWorkerConfigurations",
            "kendra:describeDataSource",
            "kendra:describeFaq",
            "kendra:describeIndex",
            "kendra:listDataSources",
            "kendra:listFaqs",
            "kendra:listIndices",
            "kinesis:describeStream",
            "kinesis:describeStreamConsumer",
            "kinesis:describeStreamSummary",
            "kinesis:listShards",
            "kinesis:listStreams",
            "kinesis:listStreamConsumers",
            "kinesis:listTagsForStream",
            "kinesisanalytics:describeApplication",
            "kinesisanalytics:describeApplicationSnapshot",
            "kinesisanalytics:listApplications",
            "kinesisanalytics:listApplicationSnapshots",
            "kinesisvideo:describeImageGenerationConfiguration",
            "kinesisvideo:describeNotificationConfiguration",
            "kinesisvideo:describeSignalingChannel",
            "kinesisvideo:describeStream",
            "kinesisvideo:getDataEndpoint",
            "kinesisvideo:getIceServerConfig",
            "kinesisvideo:getSignalingChannelEndpoint",
            "kinesisvideo:listSignalingChannels",
            "kinesisvideo:listStreams",
            "kms:describeKey",
            "kms:getKeyPolicy",
            "kms:getKeyRotationStatus",
            "kms:listAliases",
            "kms:listGrants",
            "kms:listKeyPolicies",
            "kms:listKeys",
            "kms:listResourceTags",
            "kms:listRetirableGrants",
            "lambda:getAccountSettings",
            "lambda:getAlias",
            "lambda:getCodeSigningConfig",
            "lambda:getEventSourceMapping",
            "lambda:getFunction",
            "lambda:getFunctionCodeSigningConfig",
            "lambda:getFunctionConcurrency",
            "lambda:getFunctionConfiguration",
            "lambda:getFunctionEventInvokeConfig",
            "lambda:getFunctionUrlConfig",
            "lambda:getLayerVersion",
            "lambda:getLayerVersionPolicy",
            "lambda:getPolicy",
            "lambda:getProvisionedConcurrencyConfig",
            "lambda:getRuntimeManagementConfig",
            "lambda:listAliases",
            "lambda:listCodeSigningConfigs",
            "lambda:listEventSourceMappings",
            "lambda:listFunctionEventInvokeConfigs",
            "lambda:listFunctions",
            "lambda:listFunctionsByCodeSigningConfig",
            "lambda:listFunctionUrlConfigs",
            "lambda:listLayers",
            "lambda:listLayerVersions",
            "lambda:listProvisionedConcurrencyConfigs",
            "lambda:listVersionsByFunction",
            "launchwizard:describeProvisionedApp",
            "launchwizard:describeProvisioningEvents",
            "launchwizard:listProvisionedApps",
            "lex:describeBot",
            "lex:describeBotAlias",
            "lex:describeBotLocale",
            "lex:describeBotRecommendation",
            "lex:describeBotVersion",
            "lex:describeCustomVocabularyMetadata",
            "lex:describeExport",
            "lex:describeImport",
            "lex:describeIntent",
            "lex:describeResourcePolicy",
            "lex:describeSlot",
            "lex:describeSlotType",
            "lex:getBot",
            "lex:getBotAlias",
            "lex:getBotAliases",
            "lex:getBotChannelAssociation",
            "lex:getBotChannelAssociations",
            "lex:getBots",
            "lex:getBotVersions",
            "lex:getBuiltinIntent",
            "lex:getBuiltinIntents",
            "lex:getBuiltinSlotTypes",
            "lex:getIntent",
            "lex:getIntents",
            "lex:getIntentVersions",
            "lex:getSlotType",
            "lex:getSlotTypes",
            "lex:getSlotTypeVersions",
            "lex:listBotAliases",
            "lex:listBotLocales",
            "lex:listBotRecommendations",
            "lex:listBots",
            "lex:listBotVersions",
            "lex:listExports",
            "lex:listImports",
            "lex:listIntents",
            "lex:listRecommendedIntents",
            "lex:listSlots",
            "lex:listSlotTypes",
            "license-manager:getLicenseConfiguration",
            "license-manager:getServiceSettings",
            "license-manager:listAssociationsForLicenseConfiguration",
            "license-manager:listFailuresForLicenseConfigurationOperations",
            "license-manager:listLicenseConfigurations",
            "license-manager:listLicenseSpecificationsForResource",
            "license-manager:listResourceInventory",
            "license-manager:listUsageForLicenseConfiguration",
            "lightsail:getActiveNames",
            "lightsail:getAlarms",
            "lightsail:getAutoSnapshots",
            "lightsail:getBlueprints",
            "lightsail:getBucketBundles",
            "lightsail:getBucketMetricData",
            "lightsail:getBuckets",
            "lightsail:getBundles",
            "lightsail:getCertificates",
            "lightsail:getContainerImages",
            "lightsail:getContainerServiceDeployments",
            "lightsail:getContainerServiceMetricData",
            "lightsail:getContainerServicePowers",
            "lightsail:getContainerServices",
            "lightsail:getDisk",
            "lightsail:getDisks",
            "lightsail:getDiskSnapshot",
            "lightsail:getDiskSnapshots",
            "lightsail:getDistributionBundles",
            "lightsail:getDistributionMetricData",
            "lightsail:getDistributions",
            "lightsail:getDomain",
            "lightsail:getDomains",
            "lightsail:getExportSnapshotRecords",
            "lightsail:getInstance",
            "lightsail:getInstanceMetricData",
            "lightsail:getInstancePortStates",
            "lightsail:getInstances",
            "lightsail:getInstanceSnapshot",
            "lightsail:getInstanceSnapshots",
            "lightsail:getInstanceState",
            "lightsail:getKeyPair",
            "lightsail:getKeyPairs",
            "lightsail:getLoadBalancer",
            "lightsail:getLoadBalancerMetricData",
            "lightsail:getLoadBalancers",
            "lightsail:getLoadBalancerTlsCertificates",
            "lightsail:getOperation",
            "lightsail:getOperations",
            "lightsail:getOperationsForResource",
            "lightsail:getRegions",
            "lightsail:getRelationalDatabase",
            "lightsail:getRelationalDatabaseMetricData",
            "lightsail:getRelationalDatabases",
            "lightsail:getRelationalDatabaseSnapshot",
            "lightsail:getRelationalDatabaseSnapshots",
            "lightsail:getStaticIp",
            "lightsail:getStaticIps",
            "lightsail:isVpcPeered",
            "logs:describeDestinations",
            "logs:describeExportTasks",
            "logs:describeLogGroups",
            "logs:describeLogStreams",
            "logs:describeMetricFilters",
            "logs:describeQueries",
            "logs:describeQueryDefinitions",
            "logs:describeResourcePolicies",
            "logs:describeSubscriptionFilters",
            "logs:getDataProtectionPolicy",
            "logs:getLogDelivery",
            "logs:getLogGroupFields",
            "logs:listLogDeliveries",
            "logs:testMetricFilter",
            "lookoutequipment:describeDataIngestionJob",
            "lookoutequipment:describeDataset",
            "lookoutequipment:describeInferenceScheduler",
            "lookoutequipment:describeModel",
            "lookoutequipment:listDataIngestionJobs",
            "lookoutequipment:listDatasets",
            "lookoutequipment:listInferenceExecutions",
            "lookoutequipment:listInferenceSchedulers",
            "lookoutequipment:listModels",
            "lookoutmetrics:describeAlert",
            "lookoutmetrics:describeAnomalyDetectionExecutions",
            "lookoutmetrics:describeAnomalyDetector",
            "lookoutmetrics:describeMetricSet",
            "lookoutmetrics:getAnomalyGroup",
            "lookoutmetrics:getDataQualityMetrics",
            "lookoutmetrics:getFeedback",
            "lookoutmetrics:getSampleData",
            "lookoutmetrics:listAlerts",
            "lookoutmetrics:listAnomalyDetectors",
            "lookoutmetrics:listAnomalyGroupSummaries",
            "lookoutmetrics:listAnomalyGroupTimeSeries",
            "lookoutmetrics:listMetricSets",
            "lookoutmetrics:listTagsForResource",
            "machinelearning:describeBatchPredictions",
            "machinelearning:describeDataSources",
            "machinelearning:describeEvaluations",
            "machinelearning:describeMLModels",
            "machinelearning:getBatchPrediction",
            "machinelearning:getDataSource",
            "machinelearning:getEvaluation",
            "machinelearning:getMLModel",
            "macie2:getClassificationExportConfiguration",
            "macie2:getCustomDataIdentifier",
            "macie2:getFindings",
            "macie2:getFindingStatistics",
            "macie2:listClassificationJobs",
            "macie2:listCustomDataIdentifiers",
            "macie2:listFindings",
            "managedblockchain:getMember",
            "managedblockchain:getNetwork",
            "managedblockchain:getNode",
            "managedblockchain:listMembers",
            "managedblockchain:listNetworks",
            "managedblockchain:listNodes",
            "mediaconnect:describeFlow",
            "mediaconnect:listEntitlements",
            "mediaconnect:listFlows",
            "mediaconvert:describeEndpoints",
            "mediaconvert:getJob",
            "mediaconvert:getJobTemplate",
            "mediaconvert:getPreset",
            "mediaconvert:getQueue",
            "mediaconvert:listJobs",
            "mediaconvert:listJobTemplates",
            "medialive:describeChannel",
            "medialive:describeInput",
            "medialive:describeInputDevice",
            "medialive:describeInputSecurityGroup",
            "medialive:describeMultiplex",
            "medialive:describeOffering",
            "medialive:describeReservation",
            "medialive:describeSchedule",
            "medialive:listChannels",
            "medialive:listInputDevices",
            "medialive:listInputs",
            "medialive:listInputSecurityGroups",
            "medialive:listMultiplexes",
            "medialive:listOfferings",
            "medialive:listReservations",
            "mediapackage:describeChannel",
            "mediapackage:describeOriginEndpoint",
            "mediapackage:listChannels",
            "mediapackage:listOriginEndpoints",
            "mediastore:describeContainer",
            "mediastore:getContainerPolicy",
            "mediastore:getCorsPolicy",
            "mediastore:listContainers",
            "mediatailor:getPlaybackConfiguration",
            "mediatailor:listPlaybackConfigurations",
            "mgn:describeJobLogItems",
            "mgn:describeJobs",
            "mgn:describeLaunchConfigurationTemplates",
            "mgn:describeReplicationConfigurationTemplates",
            "mgn:describeSourceServers",
            "mgn:describeVcenterClients",
            "mgn:getLaunchConfiguration",
            "mgn:getReplicationConfiguration",
            "mgn:listApplications",
            "mgn:listSourceServerActions",
            "mgn:listTemplateActions",
            "mgn:listWaves",
            "mobiletargeting:getAdmChannel",
            "mobiletargeting:getApnsChannel",
            "mobiletargeting:getApnsSandboxChannel",
            "mobiletargeting:getApnsVoipChannel",
            "mobiletargeting:getApnsVoipSandboxChannel",
            "mobiletargeting:getApp",
            "mobiletargeting:getApplicationSettings",
            "mobiletargeting:getApps",
            "mobiletargeting:getBaiduChannel",
            "mobiletargeting:getCampaign",
            "mobiletargeting:getCampaignActivities",
            "mobiletargeting:getCampaigns",
            "mobiletargeting:getCampaignVersion",
            "mobiletargeting:getCampaignVersions",
            "mobiletargeting:getEmailChannel",
            "mobiletargeting:getEndpoint",
            "mobiletargeting:getEventStream",
            "mobiletargeting:getExportJob",
            "mobiletargeting:getExportJobs",
            "mobiletargeting:getGcmChannel",
            "mobiletargeting:getImportJob",
            "mobiletargeting:getImportJobs",
            "mobiletargeting:getJourney",
            "mobiletargeting:getJourneyExecutionMetrics",
            "mobiletargeting:getJourneyExecutionActivityMetrics",
            "mobiletargeting:getJourneyRunExecutionActivityMetrics",
            "mobiletargeting:getJourneyRunExecutionMetrics",
            "mobiletargeting:getJourneyRuns",
            "mobiletargeting:getSegment",
            "mobiletargeting:getSegmentImportJobs",
            "mobiletargeting:getSegments",
            "mobiletargeting:getSegmentVersion",
            "mobiletargeting:getSegmentVersions",
            "mobiletargeting:getSmsChannel",
            "mobiletargeting:listJourneys",
            "mq:describeBroker",
            "mq:describeConfiguration",
            "mq:describeConfigurationRevision",
            "mq:describeUser",
            "mq:listBrokers",
            "mq:listConfigurationRevisions",
            "mq:listConfigurations",
            "mq:listUsers",
            "m2:getApplication",
            "m2:getApplicationVersion",
            "m2:getBatchJobExecution",
            "m2:getDataSetDetails",
            "m2:getDataSetImportTask",
            "m2:getDeployment",
            "m2:getEnvironment",
            "m2:listApplications",
            "m2:listApplicationVersions",
            "m2:listBatchJobDefinitions",
            "m2:listBatchJobExecutions",
            "m2:listDataSetImportHistory",
            "m2:listDataSets",
            "m2:listDeployments",
            "m2:listEngineVersions",
            "m2:listEnvironments",
            "network-firewall:describeFirewall",
            "network-firewall:describeFirewallPolicy",
            "network-firewall:describeLoggingConfiguration",
            "network-firewall:describeRuleGroup",
            "network-firewall:describeTlsInspectionConfiguration",
            "network-firewall:listFirewallPolicies",
            "network-firewall:listFirewalls",
            "network-firewall:listRuleGroups",
            "network-firewall:listTlsInspectionConfigurations",
            "networkmanager:describeGlobalNetworks",
            "networkmanager:getConnectAttachment",
            "networkmanager:getConnections",
            "networkmanager:getConnectPeer",
            "networkmanager:getConnectPeerAssociations",
            "networkmanager:getCoreNetwork",
            "networkmanager:getCoreNetworkChangeEvents",
            "networkmanager:getCoreNetworkChangeSet",
            "networkmanager:getCoreNetworkPolicy",
            "networkmanager:getCustomerGatewayAssociations",
            "networkmanager:getDevices",
            "networkmanager:getLinkAssociations",
            "networkmanager:getLinks",
            "networkmanager:getNetworkResourceCounts",
            "networkmanager:getNetworkResourceRelationships",
            "networkmanager:getNetworkResources",
            "networkmanager:getNetworkRoutes",
            "networkmanager:getNetworkTelemetry",
            "networkmanager:getResourcePolicy",
            "networkmanager:getRouteAnalysis",
            "networkmanager:getSites",
            "networkmanager:getSiteToSiteVpnAttachment",
            "networkmanager:getTransitGatewayConnectPeerAssociations",
            "networkmanager:getTransitGatewayPeering",
            "networkmanager:getTransitGatewayRegistrations",
            "networkmanager:getTransitGatewayRouteTableAttachment",
            "networkmanager:getVpcAttachment",
            "networkmanager:listAttachments",
            "networkmanager:listConnectPeers",
            "networkmanager:listCoreNetworkPolicyVersions",
            "networkmanager:listCoreNetworks",
            "networkmanager:listOrganizationServiceAccessStatus",
            "networkmanager:listPeerings",
            "networkmanager:listTagsForResource",
            "nimble:getEula",
            "nimble:getLaunchProfile",
            "nimble:getLaunchProfileDetails",
            "nimble:getLaunchProfileInitialization",
            "nimble:getLaunchProfileMember",
            "nimble:getStreamingImage",
            "nimble:getStreamingSession",
            "nimble:getStreamingSessionStream",
            "nimble:getStudio",
            "nimble:getStudioComponent",
            "nimble:listEulaAcceptances",
            "nimble:listEulas",
            "nimble:listLaunchProfiles",
            "nimble:listStreamingImages",
            "nimble:listStreamingSessions",
            "nimble:listStudioComponents",
            "nimble:listStudios",
            "notifications:getEventRule",
            "notifications:getNotificationConfiguration",
            "notifications:getNotificationEvent",
            "notifications:listChannels",
            "notifications:listEventRules",
            "notifications:listNotificationConfigurations",
            "notifications:listNotificationEvents",
            "notifications:listNotificationHubs",
            "notifications-contacts:getEmailContact",
            "notifications-contacts:listEmailContacts",
            "oam:getLink",
            "oam:getSink",
            "oam:getSinkPolicy",
            "oam:listAttachedLinks",
            "oam:listLinks",
            "oam:listSinks",
            "omics:getAnnotationImportJob",
            "omics:getAnnotationStore",
            "omics:getReadSetImportJob",
            "omics:getReadSetMetadata",
            "omics:getReference",
            "omics:getReferenceImportJob",
            "omics:getReferenceMetadata",
            "omics:getReferenceStore",
            "omics:getRun",
            "omics:getRunGroup",
            "omics:getSequenceStore",
            "omics:getVariantImportJob",
            "omics:getVariantStore",
            "omics:getWorkflow",
            "omics:listAnnotationImportJobs",
            "omics:listAnnotationStores",
            "omics:listMultipartReadSetUploads",
            "omics:listReadSetImportJobs",
            "omics:listReadSets",
            "omics:listReadSetUploadParts",
            "omics:listReferenceImportJobs",
            "omics:listReferenceStores",
            "omics:listReferences",
            "omics:listRunGroups",
            "omics:listRunTasks",
            "omics:listRuns",
            "omics:listSequenceStores",
            "omics:listVariantImportJobs",
            "omics:listVariantStores",
            "omics:listWorkflows",
            "opsworks-cm:describeAccountAttributes",
            "opsworks-cm:describeBackups",
            "opsworks-cm:describeEvents",
            "opsworks-cm:describeNodeAssociationStatus",
            "opsworks-cm:describeServers",
            "opsworks:describeAgentVersions",
            "opsworks:describeApps",
            "opsworks:describeCommands",
            "opsworks:describeDeployments",
            "opsworks:describeEcsClusters",
            "opsworks:describeElasticIps",
            "opsworks:describeElasticLoadBalancers",
            "opsworks:describeInstances",
            "opsworks:describeLayers",
            "opsworks:describeLoadBasedAutoScaling",
            "opsworks:describeMyUserProfile",
            "opsworks:describePermissions",
            "opsworks:describeRaidArrays",
            "opsworks:describeRdsDbInstances",
            "opsworks:describeServiceErrors",
            "opsworks:describeStackProvisioningParameters",
            "opsworks:describeStacks",
            "opsworks:describeStackSummary",
            "opsworks:describeTimeBasedAutoScaling",
            "opsworks:describeUserProfiles",
            "opsworks:describeVolumes",
            "opsworks:getHostnameSuggestion",
            "organizations:listAccounts",
            "organizations:listTagsForResource",
            "outposts:getCatalogItem",
            "outposts:getConnection",
            "outposts:getOrder",
            "outposts:getOutpost",
            "outposts:getOutpostInstanceTypes",
            "outposts:getSite",
            "outposts:listAssets",
            "outposts:listOrders",
            "outposts:listOutposts",
            "outposts:listSites",
            "personalize:describeAlgorithm",
            "personalize:describeBatchInferenceJob",
            "personalize:describeBatchSegmentJob",
            "personalize:describeCampaign",
            "personalize:describeDataset",
            "personalize:describeDatasetExportJob",
            "personalize:describeDatasetGroup",
            "personalize:describeDatasetImportJob",
            "personalize:describeEventTracker",
            "personalize:describeFeatureTransformation",
            "personalize:describeFilter",
            "personalize:describeRecipe",
            "personalize:describeRecommender",
            "personalize:describeSchema",
            "personalize:describeSolution",
            "personalize:describeSolutionVersion",
            "personalize:getPersonalizedRanking",
            "personalize:getRecommendations",
            "personalize:getSolutionMetrics",
            "personalize:listBatchInferenceJobs",
            "personalize:listBatchSegmentJobs",
            "personalize:listCampaigns",
            "personalize:listDatasetExportJobs",
            "personalize:listDatasetGroups",
            "personalize:listDatasetImportJobs",
            "personalize:listDatasets",
            "personalize:listEventTrackers",
            "personalize:listRecipes",
            "personalize:listRecommenders",
            "personalize:listSchemas",
            "personalize:listSolutions",
            "personalize:listSolutionVersions",
            "pipes:describePipe",
            "pipes:listPipes",
            "pipes:listTagsForResource",
            "polly:describeVoices",
            "polly:getLexicon",
            "polly:listLexicons",
            "pricing:describeServices",
            "pricing:getAttributeValues",
            "pricing:getProducts",
            "private-networks:getDeviceIdentifier",
            "private-networks:getNetwork",
            "private-networks:getNetworkResource",
            "private-networks:listDeviceIdentifiers",
            "private-networks:listNetworks",
            "private-networks:listNetworkResources",
            "quicksight:describeAccountCustomization",
            "quicksight:describeAccountSettings",
            "quicksight:describeAccountSubscription",
            "quicksight:describeAnalysis",
            "quicksight:describeAnalysisPermissions",
            "quicksight:describeDashboard",
            "quicksight:describeDashboardPermissions",
            "quicksight:describeDataSet",
            "quicksight:describeDataSetPermissions",
            "quicksight:describeDataSetRefreshProperties",
            "quicksight:describeDataSource",
            "quicksight:describeDataSourcePermissions",
            "quicksight:describeFolder",
            "quicksight:describeFolderPermissions",
            "quicksight:describeFolderResolvedPermissions",
            "quicksight:describeGroup",
            "quicksight:describeGroupMembership",
            "quicksight:describeIAMPolicyAssignment",
            "quicksight:describeIngestion",
            "quicksight:describeIpRestriction",
            "quicksight:describeNamespace",
            "quicksight:describeRefreshSchedule",
            "quicksight:describeTemplate",
            "quicksight:describeTemplateAlias",
            "quicksight:describeTemplatePermissions",
            "quicksight:describeTheme",
            "quicksight:describeThemeAlias",
            "quicksight:describeThemePermissions",
            "quicksight:describeTopic",
            "quicksight:describeTopicPermissions",
            "quicksight:describeTopicRefresh",
            "quicksight:describeTopicRefreshSchedule",
            "quicksight:describeUser",
            "quicksight:describeVPCConnection",
            "quicksight:listAnalyses",
            "quicksight:listDashboards",
            "quicksight:listDashboardVersions",
            "quicksight:listDataSets",
            "quicksight:listDataSources",
            "quicksight:listFolderMembers",
            "quicksight:listFolders",
            "quicksight:listGroupMemberships",
            "quicksight:listGroups",
            "quicksight:listIAMPolicyAssignments",
            "quicksight:listIAMPolicyAssignmentsForUser",
            "quicksight:listIngestions",
            "quicksight:listNamespaces",
            "quicksight:listRefreshSchedules",
            "quicksight:listTemplateAliases",
            "quicksight:listTemplates",
            "quicksight:listTemplateVersions",
            "quicksight:listThemeAliases",
            "quicksight:listThemes",
            "quicksight:listThemeVersions",
            "quicksight:listTopicRefreshSchedules",
            "quicksight:listTopics",
            "quicksight:listUserGroups",
            "quicksight:listUsers",
            "quicksight:listVPCConnections",
            "quicksight:searchAnalyses",
            "quicksight:searchDashboards",
            "quicksight:searchDataSets",
            "quicksight:searchDataSources",
            "quicksight:searchFolders",
            "quicksight:searchGroups",
            "ram:getPermission",
            "ram:getResourceShareAssociations",
            "ram:getResourceShareInvitations",
            "ram:getResourceShares",
            "ram:listPendingInvitationResources",
            "ram:listPrincipals",
            "ram:listResources",
            "ram:listResourceSharePermissions",
            "rbin:getRule",
            "rbin:listRules",
            "rds:describeAccountAttributes",
            "rds:describeBlueGreenDeployments",
            "rds:describeCertificates",
            "rds:describeDBClusterEndpoints",
            "rds:describeDBClusterParameterGroups",
            "rds:describeDBClusterParameters",
            "rds:describeDBClusters",
            "rds:describeDBClusterSnapshots",
            "rds:describeDBEngineVersions",
            "rds:describeDBInstanceAutomatedBackups",
            "rds:describeDBInstances",
            "rds:describeDBLogFiles",
            "rds:describeDBParameterGroups",
            "rds:describeDBParameters",
            "rds:describeDBSecurityGroups",
            "rds:describeDBSnapshotAttributes",
            "rds:describeDBSnapshots",
            "rds:describeDBSubnetGroups",
            "rds:describeEngineDefaultClusterParameters",
            "rds:describeEngineDefaultParameters",
            "rds:describeEventCategories",
            "rds:describeEvents",
            "rds:describeEventSubscriptions",
            "rds:describeExportTasks",
            "rds:describeGlobalClusters",
            "rds:describeOptionGroupOptions",
            "rds:describeOptionGroups",
            "rds:describeOrderableDBInstanceOptions",
            "rds:describePendingMaintenanceActions",
            "rds:describeReservedDBInstances",
            "rds:describeReservedDBInstancesOfferings",
            "rds:describeSourceRegions",
            "rds:describeValidDBInstanceModifications",
            "rds:listTagsForResource",
            "redshift-data:describeStatement",
            "redshift-data:listStatements",
            "redshift:describeClusterParameterGroups",
            "redshift:describeClusterParameters",
            "redshift:describeClusters",
            "redshift:describeClusterSecurityGroups",
            "redshift:describeClusterSnapshots",
            "redshift:describeClusterSubnetGroups",
            "redshift:describeClusterVersions",
            "redshift:describeDataShares",
            "redshift:describeDataSharesForConsumer",
            "redshift:describeDataSharesForProducer",
            "redshift:describeDefaultClusterParameters",
            "redshift:describeEventCategories",
            "redshift:describeEvents",
            "redshift:describeEventSubscriptions",
            "redshift:describeHsmClientCertificates",
            "redshift:describeHsmConfigurations",
            "redshift:describeLoggingStatus",
            "redshift:describeOrderableClusterOptions",
            "redshift:describeReservedNodeOfferings",
            "redshift:describeReservedNodes",
            "redshift:describeResize",
            "redshift:describeSnapshotCopyGrants",
            "redshift:describeStorage",
            "redshift:describeTableRestoreStatus",
            "redshift:describeTags",
            "redshift-serverless:listEndpointAccess",
            "redshift-serverless:listNamespaces",
            "redshift-serverless:listRecoveryPoints",
            "redshift-serverless:listSnapshots",
            "redshift-serverless:listUsageLimits",
            "redshift-serverless:listWorkgroups",
            "redshift-serverless:getEndpointAccess",
            "redshift-serverless:getNamespace",
            "redshift-serverless:getRecoveryPoint",
            "redshift-serverless:getUsageLimit",
            "redshift-serverless:getWorkgroup",
            "rekognition:listCollections",
            "rekognition:listFaces",
            "resource-explorer-2:getIndex",
            "resource-explorer-2:getView",
            "resource-explorer-2:listIndexes",
            "resource-explorer-2:listViews",
            "resource-explorer-2:search",
            "resource-groups:getGroup",
            "resource-groups:getGroupQuery",
            "resource-groups:getTags",
            "resource-groups:listGroupResources",
            "resource-groups:listGroups",
            "resource-groups:searchResources",
            "robomaker:batchDescribeSimulationJob",
            "robomaker:describeDeploymentJob",
            "robomaker:describeFleet",
            "robomaker:describeRobot",
            "robomaker:describeRobotApplication",
            "robomaker:describeSimulationApplication",
            "robomaker:describeSimulationJob",
            "robomaker:listDeploymentJobs",
            "robomaker:listFleets",
            "robomaker:listRobotApplications",
            "robomaker:listRobots",
            "robomaker:listSimulationApplications",
            "robomaker:listSimulationJobs",
            "route53-recovery-cluster:getRoutingControlState",
            "route53-recovery-cluster:listRoutingControls",
            "route53-recovery-control-config:describeControlPanel",
            "route53-recovery-control-config:describeRoutingControl",
            "route53-recovery-control-config:describeSafetyRule",
            "route53-recovery-control-config:listControlPanels",
            "route53-recovery-control-config:listRoutingControls",
            "route53-recovery-control-config:listSafetyRules",
            "route53-recovery-readiness:getCell",
            "route53-recovery-readiness:getCellReadinessSummary",
            "route53-recovery-readiness:getReadinessCheck",
            "route53-recovery-readiness:getReadinessCheckResourceStatus",
            "route53-recovery-readiness:getReadinessCheckStatus",
            "route53-recovery-readiness:getRecoveryGroup",
            "route53-recovery-readiness:getRecoveryGroupReadinessSummary",
            "route53-recovery-readiness:listCells",
            "route53-recovery-readiness:listReadinessChecks",
            "route53-recovery-readiness:listRecoveryGroups",
            "route53-recovery-readiness:listResourceSets",
            "route53:getAccountLimit",
            "route53:getChange",
            "route53:getCheckerIpRanges",
            "route53:getDNSSEC",
            "route53:getGeoLocation",
            "route53:getHealthCheck",
            "route53:getHealthCheckCount",
            "route53:getHealthCheckLastFailureReason",
            "route53:getHealthCheckStatus",
            "route53:getHostedZone",
            "route53:getHostedZoneCount",
            "route53:getHostedZoneLimit",
            "route53:getQueryLoggingConfig",
            "route53:getReusableDelegationSet",
            "route53:getTrafficPolicy",
            "route53:getTrafficPolicyInstance",
            "route53:getTrafficPolicyInstanceCount",
            "route53:listCidrBlocks",
            "route53:listCidrCollections",
            "route53:listCidrLocations",
            "route53:listGeoLocations",
            "route53:listHealthChecks",
            "route53:listHostedZones",
            "route53:listHostedZonesByName",
            "route53:listHostedZonesByVpc",
            "route53:listQueryLoggingConfigs",
            "route53:listResourceRecordSets",
            "route53:listReusableDelegationSets",
            "route53:listTrafficPolicies",
            "route53:listTrafficPolicyInstances",
            "route53:listTrafficPolicyInstancesByHostedZone",
            "route53:listTrafficPolicyInstancesByPolicy",
            "route53:listTrafficPolicyVersions",
            "route53:listVPCAssociationAuthorizations",
            "route53domains:checkDomainAvailability",
            "route53domains:getContactReachabilityStatus",
            "route53domains:getDomainDetail",
            "route53domains:getOperationDetail",
            "route53domains:listDomains",
            "route53domains:listOperations",
            "route53domains:listPrices",
            "route53domains:listTagsForDomain",
            "route53domains:viewBilling",
            "route53resolver:getFirewallConfig",
            "route53resolver:getFirewallDomainList",
            "route53resolver:getFirewallRuleGroup",
            "route53resolver:getFirewallRuleGroupAssociation",
            "route53resolver:getFirewallRuleGroupPolicy",
            "route53resolver:getOutpostResolver",
            "route53resolver:getResolverDnssecConfig",
            "route53resolver:getResolverQueryLogConfig",
            "route53resolver:getResolverQueryLogConfigAssociation",
            "route53resolver:getResolverQueryLogConfigPolicy",
            "route53resolver:getResolverRule",
            "route53resolver:getResolverRuleAssociation",
            "route53resolver:getResolverRulePolicy",
            "route53resolver:listFirewallConfigs",
            "route53resolver:listFirewallDomainLists",
            "route53resolver:listFirewallDomains",
            "route53resolver:listFirewallRuleGroupAssociations",
            "route53resolver:listFirewallRuleGroups",
            "route53resolver:listFirewallRules",
            "route53resolver:listOutpostResolvers",
            "route53resolver:listResolverConfigs",
            "route53resolver:listResolverDnssecConfigs",
            "route53resolver:listResolverEndpointIpAddresses",
            "route53resolver:listResolverEndpoints",
            "route53resolver:listResolverQueryLogConfigAssociations",
            "route53resolver:listResolverQueryLogConfigs",
            "route53resolver:listResolverRuleAssociations",
            "route53resolver:listResolverRules",
            "route53resolver:listTagsForResource",
            "rum:batchGetRumMetricDefinitions",
            "rum:getAppMonitor",
            "rum:listAppMonitors",
            "rum:listRumMetricsDestinations",
            "s3:describeJob",
            "s3:describeMultiRegionAccessPointOperation",
            "s3:getAccelerateConfiguration",
            "s3:getAccessPoint",
            "s3:getAccessPointConfigurationForObjectLambda",
            "s3:getAccessPointForObjectLambda",
            "s3:getAccessPointPolicy",
            "s3:getAccessPointPolicyForObjectLambda",
            "s3:getAccessPointPolicyStatus",
            "s3:getAccessPointPolicyStatusForObjectLambda",
            "s3:getAccountPublicAccessBlock",
            "s3:getAnalyticsConfiguration",
            "s3:getBucketAcl",
            "s3:getBucketCORS",
            "s3:getBucketLocation",
            "s3:getBucketLogging",
            "s3:getBucketNotification",
            "s3:getBucketObjectLockConfiguration",
            "s3:getBucketOwnershipControls",
            "s3:getBucketPolicy",
            "s3:getBucketPolicyStatus",
            "s3:getBucketPublicAccessBlock",
            "s3:getBucketRequestPayment",
            "s3:getBucketVersioning",
            "s3:getBucketWebsite",
            "s3:getEncryptionConfiguration",
            "s3:getIntelligentTieringConfiguration",
            "s3:getInventoryConfiguration",
            "s3:getLifecycleConfiguration",
            "s3:getMetricsConfiguration",
            "s3:getMultiRegionAccessPoint",
            "s3:getMultiRegionAccessPointPolicy",
            "s3:getMultiRegionAccessPointPolicyStatus",
            "s3:getMultiRegionAccessPointRoutes",
            "s3:getObjectLegalHold",
            "s3:getObjectRetention",
            "s3:getReplicationConfiguration",
            "s3:getStorageLensConfiguration",
            "s3:listAccessPoints",
            "s3:listAccessPointsForObjectLambda",
            "s3:listAllMyBuckets",
            "s3:listBucket",
            "s3:listBucketMultipartUploads",
            "s3:listBucketVersions",
            "s3:listJobs",
            "s3:listMultipartUploadParts",
            "s3:listMultiRegionAccessPoints",
            "s3:listStorageLensConfigurations",
            "sagemaker:describeAction",
            "sagemaker:describeAlgorithm",
            "sagemaker:describeApp",
            "sagemaker:describeArtifact",
            "sagemaker:describeAutoMLJob",
            "sagemaker:describeCompilationJob",
            "sagemaker:describeContext",
            "sagemaker:describeDataQualityJobDefinition",
            "sagemaker:describeDevice",
            "sagemaker:describeDeviceFleet",
            "sagemaker:describeDomain",
            "sagemaker:describeEdgePackagingJob",
            "sagemaker:describeEndpoint",
            "sagemaker:describeEndpointConfig",
            "sagemaker:describeExperiment",
            "sagemaker:describeFeatureGroup",
            "sagemaker:describeHumanTaskUi",
            "sagemaker:describeHyperParameterTuningJob",
            "sagemaker:describeImage",
            "sagemaker:describeImageVersion",
            "sagemaker:describeLabelingJob",
            "sagemaker:describeModel",
            "sagemaker:describeModelBiasJobDefinition",
            "sagemaker:describeModelExplainabilityJobDefinition",
            "sagemaker:describeModelPackage",
            "sagemaker:describeModelPackageGroup",
            "sagemaker:describeModelQualityJobDefinition",
            "sagemaker:describeMonitoringSchedule",
            "sagemaker:describeNotebookInstance",
            "sagemaker:describeNotebookInstanceLifecycleConfig",
            "sagemaker:describePipeline",
            "sagemaker:describePipelineDefinitionForExecution",
            "sagemaker:describePipelineExecution",
            "sagemaker:describeProcessingJob",
            "sagemaker:describeProject",
            "sagemaker:describeSubscribedWorkteam",
            "sagemaker:describeTrainingJob",
            "sagemaker:describeTransformJob",
            "sagemaker:describeTrial",
            "sagemaker:describeTrialComponent",
            "sagemaker:describeUserProfile",
            "sagemaker:describeWorkteam",
            "sagemaker:listActions",
            "sagemaker:listAlgorithms",
            "sagemaker:listApps",
            "sagemaker:listArtifacts",
            "sagemaker:listAssociations",
            "sagemaker:listAutoMLJobs",
            "sagemaker:listCandidatesForAutoMLJob",
            "sagemaker:listCodeRepositories",
            "sagemaker:listCompilationJobs",
            "sagemaker:listContexts",
            "sagemaker:listDataQualityJobDefinitions",
            "sagemaker:listDeviceFleets",
            "sagemaker:listDevices",
            "sagemaker:listDomains",
            "sagemaker:listEdgePackagingJobs",
            "sagemaker:listEndpointConfigs",
            "sagemaker:listEndpoints",
            "sagemaker:listExperiments",
            "sagemaker:listFeatureGroups",
            "sagemaker:listFlowDefinitions",
            "sagemaker:listHumanTaskUis",
            "sagemaker:listHyperParameterTuningJobs",
            "sagemaker:listImages",
            "sagemaker:listImageVersions",
            "sagemaker:listLabelingJobs",
            "sagemaker:listLabelingJobsForWorkteam",
            "sagemaker:listModelBiasJobDefinitions",
            "sagemaker:listModelExplainabilityJobDefinitions",
            "sagemaker:listModelPackageGroups",
            "sagemaker:listModelPackages",
            "sagemaker:listModelQualityJobDefinitions",
            "sagemaker:listModels",
            "sagemaker:listMonitoringAlerts",
            "sagemaker:listMonitoringAlertHistory",
            "sagemaker:listMonitoringExecutions",
            "sagemaker:listMonitoringSchedules",
            "sagemaker:listNotebookInstanceLifecycleConfigs",
            "sagemaker:listNotebookInstances",
            "sagemaker:listPipelineExecutions",
            "sagemaker:listPipelineExecutionSteps",
            "sagemaker:listPipelineParametersForExecution",
            "sagemaker:listPipelines",
            "sagemaker:listProcessingJobs",
            "sagemaker:listProjects",
            "sagemaker:listSubscribedWorkteams",
            "sagemaker:listTags",
            "sagemaker:listTrainingJobs",
            "sagemaker:listTrainingJobsForHyperParameterTuningJob",
            "sagemaker:listTransformJobs",
            "sagemaker:listTrialComponents",
            "sagemaker:listTrials",
            "sagemaker:listUserProfiles",
            "sagemaker:listWorkteams",
            "savingsplans:describeSavingsPlans",
            "scheduler:getSchedule",
            "scheduler:getScheduleGroup",
            "scheduler:listScheduleGroups",
            "scheduler:listSchedules",
            "schemas:describeCodeBinding",
            "schemas:describeDiscoverer",
            "schemas:describeRegistry",
            "schemas:describeSchema",
            "schemas:getCodeBindingSource",
            "schemas:getDiscoveredSchema",
            "schemas:getResourcePolicy",
            "schemas:listDiscoverers",
            "schemas:listRegistries",
            "schemas:listSchemas",
            "schemas:listSchemaVersions",
            "sdb:domainMetadata",
            "sdb:listDomains",
            "secretsmanager:describeSecret",
            "secretsmanager:getResourcePolicy",
            "secretsmanager:listSecrets",
            "secretsmanager:listSecretVersionIds",
            "securityhub:getEnabledStandards",
            "securityhub:getFindings",
            "securityhub:getInsightResults",
            "securityhub:getInsights",
            "securityhub:getMasterAccount",
            "securityhub:getMembers",
            "securityhub:listEnabledProductsForImport",
            "securityhub:listInvitations",
            "securityhub:listMembers",
            "securitylake:getDataLakeExceptionSubscription",
            "securitylake:getDataLakeOrganizationConfiguration",
            "securitylake:getDataLakeSources",
            "securitylake:getSubscriber",
            "securitylake:listDataLakeExceptions",
            "securitylake:listDataLakes",
            "securitylake:listLogSources",
            "securitylake:listSubscribers",
            "serverlessrepo:getApplication",
            "serverlessrepo:getApplicationPolicy",
            "serverlessrepo:getCloudFormationTemplate",
            "serverlessrepo:listApplicationDependencies",
            "serverlessrepo:listApplications",
            "serverlessrepo:listApplicationVersions",
            "servicecatalog:describeConstraint",
            "servicecatalog:describePortfolio",
            "servicecatalog:describeProduct",
            "servicecatalog:describeProductAsAdmin",
            "servicecatalog:describeProductView",
            "servicecatalog:describeProvisioningArtifact",
            "servicecatalog:describeProvisioningParameters",
            "servicecatalog:describeRecord",
            "servicecatalog:listAcceptedPortfolioShares",
            "servicecatalog:listConstraintsForPortfolio",
            "servicecatalog:listLaunchPaths",
            "servicecatalog:listPortfolioAccess",
            "servicecatalog:listPortfolios",
            "servicecatalog:listPortfoliosForProduct",
            "servicecatalog:listPrincipalsForPortfolio",
            "servicecatalog:listProvisioningArtifacts",
            "servicecatalog:listRecordHistory",
            "servicecatalog:scanProvisionedProducts",
            "servicecatalog:searchProducts",
            "servicequotas:getAssociationForServiceQuotaTemplate",
            "servicequotas:getAWSDefaultServiceQuota",
            "servicequotas:getRequestedServiceQuotaChange",
            "servicequotas:getServiceQuota",
            "servicequotas:getServiceQuotaIncreaseRequestFromTemplate",
            "servicequotas:listAWSDefaultServiceQuotas",
            "servicequotas:listRequestedServiceQuotaChangeHistory",
            "servicequotas:listRequestedServiceQuotaChangeHistoryByQuota",
            "servicequotas:listServiceQuotaIncreaseRequestsInTemplate",
            "servicequotas:listServiceQuotas",
            "servicequotas:listServices",
            "ses:describeActiveReceiptRuleSet",
            "ses:describeConfigurationSet",
            "ses:describeReceiptRule",
            "ses:describeReceiptRuleSet",
            "ses:getAccount",
            "ses:getAccountSendingEnabled",
            "ses:getBlacklistReports",
            "ses:getConfigurationSet",
            "ses:getConfigurationSetEventDestinations",
            "ses:getContactList",
            "ses:getDedicatedIp",
            "ses:getDedicatedIpPool",
            "ses:getDedicatedIps",
            "ses:getDeliverabilityDashboardOptions",
            "ses:getDeliverabilityTestReport",
            "ses:getDomainDeliverabilityCampaign",
            "ses:getDomainStatisticsReport",
            "ses:getEmailIdentity",
            "ses:getIdentityDkimAttributes",
            "ses:getIdentityMailFromDomainAttributes",
            "ses:getIdentityNotificationAttributes",
            "ses:getIdentityPolicies",
            "ses:getIdentityVerificationAttributes",
            "ses:getImportJob",
            "ses:getSendQuota",
            "ses:getSendStatistics",
            "ses:listConfigurationSets",
            "ses:listContactLists",
            "ses:listContacts",
            "ses:listCustomVerificationEmailTemplates",
            "ses:listDedicatedIpPools",
            "ses:listDeliverabilityTestReports",
            "ses:listDomainDeliverabilityCampaigns",
            "ses:listEmailIdentities",
            "ses:listEmailTemplates",
            "ses:listIdentities",
            "ses:listIdentityPolicies",
            "ses:listImportJobs",
            "ses:listReceiptFilters",
            "ses:listReceiptRuleSets",
            "ses:listRecommendations",
            "ses:listTagsForResource",
            "ses:listTemplates",
            "ses:listVerifiedEmailAddresses",
            "shield:describeAttack",
            "shield:describeProtection",
            "shield:describeSubscription",
            "shield:listAttacks",
            "shield:listProtections",
            "sms-voice:getConfigurationSetEventDestinations",
            "sms:getConnectors",
            "sms:getReplicationJobs",
            "sms:getReplicationRuns",
            "sms:getServers",
            "snowball:describeAddress",
            "snowball:describeAddresses",
            "snowball:describeJob",
            "snowball:getSnowballUsage",
            "snowball:listJobs",
            "sns:checkIfPhoneNumberIsOptedOut",
            "sns:getDataProtectionPolicy",
            "sns:getEndpointAttributes",
            "sns:getPlatformApplicationAttributes",
            "sns:getSMSAttributes",
            "sns:getSMSSandboxAccountStatus",
            "sns:getSubscriptionAttributes",
            "sns:getTopicAttributes",
            "sns:listEndpointsByPlatformApplication",
            "sns:listOriginationNumbers",
            "sns:listPhoneNumbersOptedOut",
            "sns:listPlatformApplications",
            "sns:listSMSSandboxPhoneNumbers",
            "sns:listSubscriptions",
            "sns:listSubscriptionsByTopic",
            "sns:listTopics",
            "sqs:getQueueAttributes",
            "sqs:getQueueUrl",
            "sqs:listDeadLetterSourceQueues",
            "sqs:listQueues",
            "ssm-contacts:describeEngagement",
            "ssm-contacts:describePage",
            "ssm-contacts:getContact",
            "ssm-contacts:getContactChannel",
            "ssm-contacts:getContactPolicy",
            "ssm-contacts:getRotation",
            "ssm-contacts:getRotationOverride",
            "ssm-contacts:listContactChannels",
            "ssm-contacts:listContacts",
            "ssm-contacts:listEngagements",
            "ssm-contacts:listPageReceipts",
            "ssm-contacts:listPageResolutions",
            "ssm-contacts:listPagesByContact",
            "ssm-contacts:listPagesByEngagement",
            "ssm-contacts:listPreviewRotationShifts",
            "ssm-contacts:listRotationOverrides",
            "ssm-contacts:listRotations",
            "ssm-contacts:listRotationShifts",
            "ssm-incidents:getIncidentRecord",
            "ssm-incidents:getReplicationSet",
            "ssm-incidents:getResourcePolicies",
            "ssm-incidents:getResponsePlan",
            "ssm-incidents:getTimelineEvent",
            "ssm-incidents:listIncidentRecords",
            "ssm-incidents:listRelatedItems",
            "ssm-incidents:listReplicationSets",
            "ssm-incidents:listResponsePlans",
            "ssm-incidents:listTimelineEvents",
            "ssm-sap:getApplication",
            "ssm-sap:getComponent",
            "ssm-sap:getDatabase",
            "ssm-sap:getOperation",
            "ssm-sap:getResourcePermission",
            "ssm-sap:listApplications",
            "ssm-sap:listComponents",
            "ssm-sap:listDatabases",
            "ssm-sap:listOperations",
            "ssm:describeActivations",
            "ssm:describeAssociation",
            "ssm:describeAssociationExecutions",
            "ssm:describeAssociationExecutionTargets",
            "ssm:describeAutomationExecutions",
            "ssm:describeAutomationStepExecutions",
            "ssm:describeAvailablePatches",
            "ssm:describeDocument",
            "ssm:describeDocumentPermission",
            "ssm:describeEffectiveInstanceAssociations",
            "ssm:describeEffectivePatchesForPatchBaseline",
            "ssm:describeInstanceAssociationsStatus",
            "ssm:describeInstanceInformation",
            "ssm:describeInstancePatches",
            "ssm:describeInstancePatchStates",
            "ssm:describeInstancePatchStatesForPatchGroup",
            "ssm:describeInventoryDeletions",
            "ssm:describeMaintenanceWindowExecutions",
            "ssm:describeMaintenanceWindowExecutionTaskInvocations",
            "ssm:describeMaintenanceWindowExecutionTasks",
            "ssm:describeMaintenanceWindows",
            "ssm:describeMaintenanceWindowSchedule",
            "ssm:describeMaintenanceWindowsForTarget",
            "ssm:describeMaintenanceWindowTargets",
            "ssm:describeMaintenanceWindowTasks",
            "ssm:describeOpsItems",
            "ssm:describeParameters",
            "ssm:describePatchBaselines",
            "ssm:describePatchGroups",
            "ssm:describePatchGroupState",
            "ssm:describePatchProperties",
            "ssm:describeSessions",
            "ssm:getAutomationExecution",
            "ssm:getCalendarState",
            "ssm:getCommandInvocation",
            "ssm:getConnectionStatus",
            "ssm:getDefaultPatchBaseline",
            "ssm:getDeployablePatchSnapshotForInstance",
            "ssm:getInventorySchema",
            "ssm:getMaintenanceWindow",
            "ssm:getMaintenanceWindowExecution",
            "ssm:getMaintenanceWindowExecutionTask",
            "ssm:getMaintenanceWindowExecutionTaskInvocation",
            "ssm:getMaintenanceWindowTask",
            "ssm:getOpsItem",
            "ssm:getOpsMetadata",
            "ssm:getOpsSummary",
            "ssm:getPatchBaseline",
            "ssm:getPatchBaselineForPatchGroup",
            "ssm:getResourcePolicies",
            "ssm:getServiceSetting",
            "ssm:listAssociations",
            "ssm:listAssociationVersions",
            "ssm:listCommandInvocations",
            "ssm:listCommands",
            "ssm:listComplianceItems",
            "ssm:listComplianceSummaries",
            "ssm:listDocuments",
            "ssm:listDocumentMetadataHistory",
            "ssm:listDocumentVersions",
            "ssm:listOpsItemEvents",
            "ssm:listOpsItemRelatedItems",
            "ssm:listOpsMetadata",
            "ssm:listResourceComplianceSummaries",
            "ssm:listResourceDataSync",
            "ssm:listTagsForResource",
            "states:describeActivity",
            "states:describeExecution",
            "states:describeMapRun",
            "states:describeStateMachine",
            "states:describeStateMachineAlias",
            "states:describeStateMachineForExecution",
            "states:getExecutionHistory",
            "states:listActivities",
            "states:listExecutions",
            "states:listMapRuns",
            "states:listStateMachineAliases",
            "states:listStateMachines",
            "states:listStateMachineVersions",
            "storagegateway:describeBandwidthRateLimit",
            "storagegateway:describeCache",
            "storagegateway:describeCachediSCSIVolumes",
            "storagegateway:describeFileSystemAssociations",
            "storagegateway:describeGatewayInformation",
            "storagegateway:describeMaintenanceStartTime",
            "storagegateway:describeNFSFileShares",
            "storagegateway:describeSMBFileShares",
            "storagegateway:describeSMBSettings",
            "storagegateway:describeSnapshotSchedule",
            "storagegateway:describeStorediSCSIVolumes",
            "storagegateway:describeTapeArchives",
            "storagegateway:describeTapeRecoveryPoints",
            "storagegateway:describeTapes",
            "storagegateway:describeUploadBuffer",
            "storagegateway:describeVTLDevices",
            "storagegateway:describeWorkingStorage",
            "storagegateway:listAutomaticTapeCreationPolicies",
            "storagegateway:listFileShares",
            "storagegateway:listFileSystemAssociations",
            "storagegateway:listGateways",
            "storagegateway:listLocalDisks",
            "storagegateway:listTagsForResource",
            "storagegateway:listTapes",
            "storagegateway:listVolumeInitiators",
            "storagegateway:listVolumeRecoveryPoints",
            "storagegateway:listVolumes",
            "swf:countClosedWorkflowExecutions",
            "swf:countOpenWorkflowExecutions",
            "swf:countPendingActivityTasks",
            "swf:countPendingDecisionTasks",
            "swf:describeActivityType",
            "swf:describeDomain",
            "swf:describeWorkflowExecution",
            "swf:describeWorkflowType",
            "swf:getWorkflowExecutionHistory",
            "swf:listActivityTypes",
            "swf:listClosedWorkflowExecutions",
            "swf:listDomains",
            "swf:listOpenWorkflowExecutions",
            "swf:listWorkflowTypes",
            "synthetics:describeCanaries",
            "synthetics:describeCanariesLastRun",
            "synthetics:describeRuntimeVersions",
            "synthetics:getCanary",
            "synthetics:getCanaryRuns",
            "synthetics:getGroup",
            "synthetics:listAssociatedGroups",
            "synthetics:listGroupResources",
            "synthetics:listGroups",
            "tiros:createQuery",
            "tiros:getQueryAnswer",
            "tiros:getQueryExplanation",
            "transcribe:describeLanguageModel",
            "transcribe:getCallAnalyticsCategory",
            "transcribe:getCallAnalyticsJob",
            "transcribe:getMedicalTranscriptionJob",
            "transcribe:getMedicalVocabulary",
            "transcribe:getTranscriptionJob",
            "transcribe:getVocabulary",
            "transcribe:getVocabularyFilter",
            "transcribe:listCallAnalyticsCategories",
            "transcribe:listCallAnalyticsJobs",
            "transcribe:listLanguageModels",
            "transcribe:listMedicalTranscriptionJobs",
            "transcribe:listMedicalVocabularies",
            "transcribe:listTranscriptionJobs",
            "transcribe:listVocabularies",
            "transcribe:listVocabularyFilters",
            "transfer:describeAccess",
            "transfer:describeAgreement",
            "transfer:describeConnector",
            "transfer:describeExecution",
            "transfer:describeProfile",
            "transfer:describeServer",
            "transfer:describeUser",
            "transfer:describeWorkflow",
            "transfer:listAccesses",
            "transfer:listAgreements",
            "transfer:listConnectors",
            "transfer:listExecutions",
            "transfer:listHostKeys",
            "transfer:listProfiles",
            "transfer:listServers",
            "transfer:listTagsForResource",
            "transfer:listUsers",
            "transfer:listWorkflows",
            "transfer:sendWorkflowStepState",
            "verifiedpermissions:getIdentitySource",
            "verifiedpermissions:getPolicy",
            "verifiedpermissions:getPolicyStore",
            "verifiedpermissions:getPolicyTemplate",
            "verifiedpermissions:getSchema",
            "verifiedpermissions:listIdentitySources",
            "verifiedpermissions:listPolicies",
            "verifiedpermissions:listPolicyStores",
            "verifiedpermissions:listPolicyTemplates",
            "vpc-lattice:getAccessLogSubscription",
            "vpc-lattice:getAuthPolicy",
            "vpc-lattice:getListener",
            "vpc-lattice:getResourcePolicy",
            "vpc-lattice:getRule",
            "vpc-lattice:getService",
            "vpc-lattice:getServiceNetwork",
            "vpc-lattice:getServiceNetworkServiceAssociation",
            "vpc-lattice:getServiceNetworkVpcAssociation",
            "vpc-lattice:getTargetGroup",
            "vpc-lattice:listAccessLogSubscriptions",
            "vpc-lattice:listListeners",
            "vpc-lattice:listRules",
            "vpc-lattice:listServiceNetworks",
            "vpc-lattice:listServiceNetworkServiceAssociations",
            "vpc-lattice:listServiceNetworkVpcAssociations",
            "vpc-lattice:listServices",
            "vpc-lattice:listTargetGroups",
            "vpc-lattice:listTargets",
            "waf-regional:getByteMatchSet",
            "waf-regional:getChangeTokenStatus",
            "waf-regional:getGeoMatchSet",
            "waf-regional:getIPSet",
            "waf-regional:getLoggingConfiguration",
            "waf-regional:getRateBasedRule",
            "waf-regional:getRegexMatchSet",
            "waf-regional:getRegexPatternSet",
            "waf-regional:getRule",
            "waf-regional:getRuleGroup",
            "waf-regional:getSqlInjectionMatchSet",
            "waf-regional:getWebACL",
            "waf-regional:getWebACLForResource",
            "waf-regional:listActivatedRulesInRuleGroup",
            "waf-regional:listByteMatchSets",
            "waf-regional:listGeoMatchSets",
            "waf-regional:listIPSets",
            "waf-regional:listLoggingConfigurations",
            "waf-regional:listRateBasedRules",
            "waf-regional:listRegexMatchSets",
            "waf-regional:listRegexPatternSets",
            "waf-regional:listResourcesForWebACL",
            "waf-regional:listRuleGroups",
            "waf-regional:listRules",
            "waf-regional:listSqlInjectionMatchSets",
            "waf-regional:listWebACLs",
            "waf:getByteMatchSet",
            "waf:getChangeTokenStatus",
            "waf:getGeoMatchSet",
            "waf:getIPSet",
            "waf:getLoggingConfiguration",
            "waf:getRateBasedRule",
            "waf:getRegexMatchSet",
            "waf:getRegexPatternSet",
            "waf:getRule",
            "waf:getRuleGroup",
            "waf:getSampledRequests",
            "waf:getSizeConstraintSet",
            "waf:getSqlInjectionMatchSet",
            "waf:getWebACL",
            "waf:getXssMatchSet",
            "waf:listActivatedRulesInRuleGroup",
            "waf:listByteMatchSets",
            "waf:listGeoMatchSets",
            "waf:listIPSets",
            "waf:listLoggingConfigurations",
            "waf:listRateBasedRules",
            "waf:listRegexMatchSets",
            "waf:listRegexPatternSets",
            "waf:listRuleGroups",
            "waf:listRules",
            "waf:listSizeConstraintSets",
            "waf:listSqlInjectionMatchSets",
            "waf:listWebACLs",
            "waf:listXssMatchSets",
            "wafv2:checkCapacity",
            "wafv2:describeManagedRuleGroup",
            "wafv2:getIPSet",
            "wafv2:getLoggingConfiguration",
            "wafv2:getPermissionPolicy",
            "wafv2:getRateBasedStatementManagedKeys",
            "wafv2:getRegexPatternSet",
            "wafv2:getRuleGroup",
            "wafv2:getSampledRequests",
            "wafv2:getWebACL",
            "wafv2:getWebACLForResource",
            "wafv2:listAvailableManagedRuleGroups",
            "wafv2:listIPSets",
            "wafv2:listLoggingConfigurations",
            "wafv2:listRegexPatternSets",
            "wafv2:listResourcesForWebACL",
            "wafv2:listRuleGroups",
            "wafv2:listTagsForResource",
            "wafv2:listWebACLs",
            "workdocs:checkAlias",
            "workdocs:describeAvailableDirectories",
            "workdocs:describeInstances",
            "workmail:describeGroup",
            "workmail:describeOrganization",
            "workmail:describeResource",
            "workmail:describeUser",
            "workmail:listAliases",
            "workmail:listGroupMembers",
            "workmail:listGroups",
            "workmail:listMailboxPermissions",
            "workmail:listOrganizations",
            "workmail:listResourceDelegates",
            "workmail:listResources",
            "workmail:listUsers",
            "workspaces-web:getBrowserSettings",
            "workspaces-web:getIdentityProvider",
            "workspaces-web:getNetworkSettings",
            "workspaces-web:getPortal",
            "workspaces-web:getPortalServiceProviderMetadata",
            "workspaces-web:getTrustStoreCertificate",
            "workspaces-web:getUserSettings",
            "workspaces-web:listBrowserSettings",
            "workspaces-web:listIdentityProviders",
            "workspaces-web:listNetworkSettings",
            "workspaces-web:listPortals",
            "workspaces-web:listTagsForResource",
            "workspaces-web:listTrustStoreCertificates",
            "workspaces-web:listTrustStores",
            "workspaces-web:listUserSettings",
            "workspaces:describeAccount",
            "workspaces:describeAccountModifications",
            "workspaces:describeIpGroups",
            "workspaces:describeTags",
            "workspaces:describeWorkspaceBundles",
            "workspaces:describeWorkspaceDirectories",
            "workspaces:describeWorkspaceImages",
            "workspaces:describeWorkspaces",
            "workspaces:describeWorkspacesConnectionStatus"
          ],
          "Effect": "Allow",
          "Resource": [
            "*"
          ]
        }
      ],
      "Version": "2012-10-17"
    },
    "VersionId": "v32",
    "IsDefaultVersion": true,
    "CreateDate": "2023-10-27T19:47:53+00:00"
  },
  "AWSSystemsManagerAccountDiscoveryServicePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:ListRoots",
            "organizations:ListAccounts",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListChildren",
            "organizations:ListParents",
            "organizations:ListDelegatedServicesForAccount",
            "organizations:ListDelegatedAdministrators"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2022-10-17T20:25:02+00:00"
  },
  "AWSSystemsManagerChangeManagementServicePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ssm:CreateAssociation",
            "ssm:DeleteAssociation",
            "ssm:CreateOpsItem",
            "ssm:GetOpsItem",
            "ssm:UpdateOpsItem",
            "ssm:StartAutomationExecution",
            "ssm:StopAutomationExecution",
            "ssm:GetAutomationExecution",
            "ssm:GetCalendarState",
            "ssm:GetDocument"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:DescribeAlarms"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "sso:ListDirectoryAssociations"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "sso-directory:DescribeUsers",
            "sso-directory:IsMemberInGroup"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "iam:GetGroup",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "ssm.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-07T22:21:57+00:00"
  },
  "AWSSystemsManagerForSAPFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ssm-sap:*"
          ],
          "Resource": "arn:*:ssm-sap:*:*:*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/aws-service-role/ssm-sap.amazonaws.com/AWSServiceRoleForAWSSSMForSAP"
          ],
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "ssm-sap.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-18T21:58:54+00:00"
  },
  "AWSSystemsManagerForSAPReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ssm-sap:get*",
            "ssm-sap:list*"
          ],
          "Resource": "arn:*:ssm-sap:*:*:*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-17T02:11:44+00:00"
  },
  "AWSSystemsManagerOpsDataSyncServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ssm:GetOpsItem",
            "ssm:UpdateOpsItem"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/ExplorerSecurityHubOpsItem": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:CreateOpsItem"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:AddTagsToResource"
          ],
          "Resource": "arn:aws:ssm:*:*:opsitem/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:UpdateServiceSetting",
            "ssm:GetServiceSetting"
          ],
          "Resource": [
            "arn:aws:ssm:*:*:servicesetting/ssm/opsitem/*",
            "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "securityhub:GetFindings",
            "securityhub:BatchUpdateFindings"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Deny",
          "Action": "securityhub:BatchUpdateFindings",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "securityhub:ASFFSyntaxPath/Workflow.Status": "SUPPRESSED"
            }
          }
        },
        {
          "Effect": "Deny",
          "Action": "securityhub:BatchUpdateFindings",
          "Resource": "*",
          "Condition": {
            "Null": {
              "securityhub:ASFFSyntaxPath/Confidence": false
            }
          }
        },
        {
          "Effect": "Deny",
          "Action": "securityhub:BatchUpdateFindings",
          "Resource": "*",
          "Condition": {
            "Null": {
              "securityhub:ASFFSyntaxPath/Criticality": false
            }
          }
        },
        {
          "Effect": "Deny",
          "Action": "securityhub:BatchUpdateFindings",
          "Resource": "*",
          "Condition": {
            "Null": {
              "securityhub:ASFFSyntaxPath/Note.Text": false
            }
          }
        },
        {
          "Effect": "Deny",
          "Action": "securityhub:BatchUpdateFindings",
          "Resource": "*",
          "Condition": {
            "Null": {
              "securityhub:ASFFSyntaxPath/Note.UpdatedBy": false
            }
          }
        },
        {
          "Effect": "Deny",
          "Action": "securityhub:BatchUpdateFindings",
          "Resource": "*",
          "Condition": {
            "Null": {
              "securityhub:ASFFSyntaxPath/RelatedFindings": false
            }
          }
        },
        {
          "Effect": "Deny",
          "Action": "securityhub:BatchUpdateFindings",
          "Resource": "*",
          "Condition": {
            "Null": {
              "securityhub:ASFFSyntaxPath/Types": false
            }
          }
        },
        {
          "Effect": "Deny",
          "Action": "securityhub:BatchUpdateFindings",
          "Resource": "*",
          "Condition": {
            "Null": {
              "securityhub:ASFFSyntaxPath/UserDefinedFields.key": false
            }
          }
        },
        {
          "Effect": "Deny",
          "Action": "securityhub:BatchUpdateFindings",
          "Resource": "*",
          "Condition": {
            "Null": {
              "securityhub:ASFFSyntaxPath/UserDefinedFields.value": false
            }
          }
        },
        {
          "Effect": "Deny",
          "Action": "securityhub:BatchUpdateFindings",
          "Resource": "*",
          "Condition": {
            "Null": {
              "securityhub:ASFFSyntaxPath/VerificationState": false
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-06-28T22:53:43+00:00"
  },
  "AWSThinkboxAWSPortalAdminPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AttachInternetGateway",
            "ec2:AssociateAddress",
            "ec2:AssociateRouteTable",
            "ec2:AllocateAddress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateFleet",
            "ec2:CreateLaunchTemplate",
            "ec2:CreateInternetGateway",
            "ec2:CreateNatGateway",
            "ec2:CreatePlacementGroup",
            "ec2:CreateRoute",
            "ec2:CreateRouteTable",
            "ec2:CreateSecurityGroup",
            "ec2:CreateSubnet",
            "ec2:CreateVpc",
            "ec2:CreateVpcEndpoint",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeAddresses",
            "ec2:DescribeFleets",
            "ec2:DescribeFleetHistory",
            "ec2:DescribeFleetInstances",
            "ec2:DescribeImages",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeRouteTables",
            "ec2:DescribeNatGateways",
            "ec2:DescribeTags",
            "ec2:DescribeKeyPairs",
            "ec2:DescribePlacementGroups",
            "ec2:DescribeInstanceTypeOfferings",
            "ec2:DescribeRegions",
            "ec2:DescribeSpotFleetRequestHistory",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSpotFleetInstances",
            "ec2:DescribeSpotFleetRequests",
            "ec2:DescribeSpotPriceHistory",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpcEndpoints",
            "ec2:GetConsoleOutput",
            "ec2:ImportKeyPair",
            "ec2:ReleaseAddress",
            "ec2:RequestSpotFleet",
            "ec2:CancelSpotFleetRequests",
            "ec2:DisassociateAddress",
            "ec2:DeleteFleets",
            "ec2:DeleteLaunchTemplate",
            "ec2:DeleteVpc",
            "ec2:DeletePlacementGroup",
            "ec2:DeleteVpcEndpoints",
            "ec2:DeleteInternetGateway",
            "ec2:DeleteSecurityGroup",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:DeleteRoute",
            "ec2:DeleteRouteTable",
            "ec2:DisassociateRouteTable",
            "ec2:DeleteSubnet",
            "ec2:DeleteNatGateway",
            "ec2:DetachInternetGateway",
            "ec2:ModifyInstanceAttribute",
            "ec2:ModifyFleet",
            "ec2:ModifySpotFleetRequest",
            "ec2:ModifyVpcAttribute"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "ec2:RunInstances",
          "Resource": [
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:key-pair/*",
            "arn:aws:ec2:*::snapshot/*",
            "arn:aws:ec2:*:*:launch-template/*",
            "arn:aws:ec2:*:*:volume/*",
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:placement-group/*",
            "arn:aws:ec2:*:*:network-interface/*",
            "arn:aws:ec2:*::image/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "ec2:RunInstances",
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "StringLike": {
              "ec2:InstanceProfile": "arn:aws:iam::*:instance-profile/AWSPortal*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:TerminateInstances",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "ec2:ResourceTag/aws:cloudformation:logical-id": "ReverseForwarder"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:TerminateInstances",
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/aws:ec2spot:fleet-request-id": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:TerminateInstances",
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "ec2:PlacementGroup": "*DeadlinePlacementGroup*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "StringLike": {
              "ec2:PlacementGroup": "*DeadlinePlacementGroup*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "ec2:CreateAction": "RunInstances"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags",
            "ec2:DeleteTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:internet-gateway/*",
            "arn:aws:ec2:*:*:route-table/*",
            "arn:aws:ec2:*:*:volume/*",
            "arn:aws:ec2:*:*:vpc/*",
            "arn:aws:ec2:*:*:natgateway/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:GetUser"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:GetInstanceProfile"
          ],
          "Resource": [
            "arn:aws:iam::*:instance-profile/AWSPortal*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:GetPolicy",
            "iam:ListEntitiesForPolicy",
            "iam:ListPolicyVersions"
          ],
          "Resource": [
            "arn:aws:iam::*:policy/AWSPortal*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:GetRole",
            "iam:GetRolePolicy"
          ],
          "Resource": [
            "arn:aws:iam::*:role/AWSPortal*",
            "arn:aws:iam::*:role/DeadlineSpot*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/AWSPortal*",
            "arn:aws:iam::*:role/DeadlineSpot*"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "ec2.amazonaws.com",
                "ec2fleet.amazonaws.com",
                "spot.amazonaws.com",
                "spotfleet.amazonaws.com",
                "cloudformation.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": [
                "ec2fleet.amazonaws.com",
                "spot.amazonaws.com",
                "spotfleet.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:CreateBucket",
            "s3:GetBucketLocation",
            "s3:GetBucketLogging",
            "s3:GetBucketVersioning",
            "s3:PutBucketAcl",
            "s3:PutBucketCORS",
            "s3:PutBucketVersioning",
            "s3:GetBucketAcl",
            "s3:GetObject",
            "s3:PutBucketLogging",
            "s3:PutBucketTagging",
            "s3:PutObject",
            "s3:ListBucket",
            "s3:ListBucketVersions",
            "s3:PutEncryptionConfiguration",
            "s3:PutLifecycleConfiguration",
            "s3:DeleteBucket",
            "s3:DeleteObject",
            "s3:DeleteBucketPolicy",
            "s3:DeleteObjectVersion"
          ],
          "Resource": [
            "arn:aws:s3::*:awsportal*",
            "arn:aws:s3::*:stack*",
            "arn:aws:s3::*:aws-portal-cache*",
            "arn:aws:s3::*:logs-for-aws-portal-cache*",
            "arn:aws:s3::*:logs-for-stack*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:PutBucketPolicy"
          ],
          "Resource": [
            "arn:aws:s3::*:logs-for-aws-portal-cache*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:PutBucketOwnershipControls"
          ],
          "Resource": [
            "arn:aws:s3::*:logs-for-stack*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListAllMyBuckets"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Scan"
          ],
          "Resource": "arn:aws:dynamodb:*:*:table/DeadlineFleetHealth*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:CreateStack",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStackResources",
            "cloudformation:DeleteStack",
            "cloudformation:DeleteChangeSet",
            "cloudformation:ListStackResources",
            "cloudformation:CreateChangeSet",
            "cloudformation:DescribeChangeSet",
            "cloudformation:ExecuteChangeSet",
            "cloudformation:UpdateTerminationProtection"
          ],
          "Resource": [
            "arn:aws:cloudformation:*:*:stack/stack*/*",
            "arn:aws:cloudformation:*:*:stack/Deadline*/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:EstimateTemplateCost",
            "cloudformation:DescribeStacks",
            "cloudformation:ListStacks"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "logs:PutRetentionPolicy",
            "logs:DeleteRetentionPolicy"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/thinkbox*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:DescribeLogGroups",
            "logs:CreateLogGroup"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:Encrypt",
            "kms:GenerateDataKey"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringLike": {
              "kms:ViaService": [
                "s3.*.amazonaws.com",
                "secretsmanager.*.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:CreateSecret"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "secretsmanager:Name": [
                "rcs-tls-pw*"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:DeleteSecret",
            "secretsmanager:UpdateSecret",
            "secretsmanager:DescribeSecret",
            "secretsmanager:TagResource"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:secret:rcs-tls-pw*"
        }
      ]
    },
    "VersionId": "v6",
    "IsDefaultVersion": true,
    "CreateDate": "2023-04-18T18:24:02+00:00"
  },
  "AWSThinkboxAWSPortalGatewayPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "logs:PutLogEvents",
            "logs:DescribeLogStreams",
            "logs:DescribeLogGroups",
            "logs:CreateLogStream"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/thinkbox*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:PutObject",
            "s3:ListBucket"
          ],
          "Resource": [
            "arn:aws:s3:::aws-portal-cache*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "dynamodb:Scan",
          "Resource": [
            "arn:aws:dynamodb:*:*:table/DeadlineFleetHealth*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListBucket",
            "s3:GetObject"
          ],
          "Resource": [
            "arn:aws:s3:::stack*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:PutObject"
          ],
          "Resource": [
            "arn:aws:s3:::stack*/gateway_certs/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:GetSecretValue"
          ],
          "Resource": [
            "arn:aws:secretsmanager:*:*:secret:rcs-tls-pw-stack*"
          ]
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2020-06-30T16:02:07+00:00"
  },
  "AWSThinkboxAWSPortalWorkerPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeTags"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:TerminateInstances"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "StringEquals": {
              "ec2:ResourceTag/DeadlineRole": "DeadlineRenderNode"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:PutObject",
            "s3:ListBucket"
          ],
          "Resource": [
            "arn:aws:s3:::aws-portal-cache*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": [
            "arn:aws:s3:::stack*/gateway_certs/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "logs:DescribeLogStreams",
            "logs:DescribeLogGroups"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/thinkbox*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "sqs:SendMessage",
            "sqs:GetQueueUrl"
          ],
          "Resource": [
            "arn:aws:sqs:*:*:DeadlineAWS*"
          ]
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-07T23:27:47+00:00"
  },
  "AWSThinkboxAssetServerPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/thinkbox*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:PutObject",
            "s3:ListBucket"
          ],
          "Resource": [
            "arn:aws:s3:::aws-portal-cache*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-05-27T19:18:53+00:00"
  },
  "AWSThinkboxDeadlineResourceTrackerAccessPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:ListStreams"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:BatchWriteItem",
            "dynamodb:DeleteItem",
            "dynamodb:DescribeStream",
            "dynamodb:DescribeTable",
            "dynamodb:GetItem",
            "dynamodb:GetRecords",
            "dynamodb:GetShardIterator",
            "dynamodb:PutItem",
            "dynamodb:Scan",
            "dynamodb:UpdateItem",
            "dynamodb:UpdateTable"
          ],
          "Resource": [
            "arn:aws:dynamodb:*:*:table/DeadlineEC2ComputeNodeHealth*",
            "arn:aws:dynamodb:*:*:table/DeadlineEC2ComputeNodeInfo*",
            "arn:aws:dynamodb:*:*:table/DeadlineFleetHealth*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CancelSpotFleetRequests",
            "ec2:DeleteFleets",
            "ec2:DescribeFleetInstances",
            "ec2:DescribeFleets",
            "ec2:DescribeInstances",
            "ec2:DescribeSpotFleetInstances",
            "ec2:DescribeSpotFleetRequests"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:RebootInstances",
            "ec2:TerminateInstances"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/DeadlineTrackedAWSResource": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "events:PutEvents"
          ],
          "Resource": [
            "arn:aws:events:*:*:event-bus/default"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "lambda:InvokeFunction"
          ],
          "Resource": [
            "arn:aws:lambda:*:*:function:DeadlineResourceTracker*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:PutLogEvents"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/lambda/DeadlineResourceTracker*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "sqs:DeleteMessage",
            "sqs:GetQueueAttributes",
            "sqs:ReceiveMessage"
          ],
          "Resource": [
            "arn:aws:sqs:*:*:DeadlineAWSComputeNodeStateMessageQueue*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-05-27T19:25:05+00:00"
  },
  "AWSThinkboxDeadlineResourceTrackerAdminPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "application-autoscaling:DeleteScalingPolicy",
            "application-autoscaling:DeregisterScalableTarget",
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingPolicies",
            "application-autoscaling:PutScalingPolicy",
            "application-autoscaling:RegisterScalableTarget"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:ListStacks"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:UpdateStack",
            "cloudformation:DescribeStacks",
            "cloudformation:UpdateTerminationProtection"
          ],
          "Resource": [
            "arn:aws:cloudformation:*:*:stack/DeadlineResourceTracker*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:CreateTable",
            "dynamodb:DeleteTable",
            "dynamodb:DescribeTable",
            "dynamodb:ListTagsOfResource",
            "dynamodb:TagResource",
            "dynamodb:UntagResource"
          ],
          "Resource": [
            "arn:aws:dynamodb:*:*:table/DeadlineEC2ComputeNodeHealth*",
            "arn:aws:dynamodb:*:*:table/DeadlineEC2ComputeNodeInfo*",
            "arn:aws:dynamodb:*:*:table/DeadlineFleetHealth*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:BatchWriteItem",
            "dynamodb:Scan"
          ],
          "Resource": [
            "arn:aws:dynamodb:*:*:table/DeadlineFleetHealth*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "events:DeleteRule",
            "events:DescribeRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets"
          ],
          "Resource": [
            "arn:aws:events:*:*:rule/DeadlineResourceTracker*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:GetRole",
            "iam:ListAttachedRolePolicies"
          ],
          "Resource": [
            "arn:aws:iam::*:role/DeadlineResourceTracker*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:GetUser"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/aws-service-role/*"
          ],
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": [
                "dynamodb.application-autoscaling.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/DeadlineResourceTrackerAccess*"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "lambda.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "application-autoscaling.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "lambda:GetEventSourceMapping"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "lambda:CreateEventSourceMapping",
            "lambda:DeleteEventSourceMapping"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringLike": {
              "lambda:FunctionArn": [
                "arn:aws:lambda:*:*:function:DeadlineResourceTracker*"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "lambda:AddPermission",
            "lambda:RemovePermission"
          ],
          "Resource": [
            "arn:aws:lambda:*:*:function:DeadlineResourceTracker*"
          ],
          "Condition": {
            "StringLike": {
              "lambda:Principal": "events.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "lambda:CreateFunction",
            "lambda:DeleteFunction",
            "lambda:DeleteFunctionConcurrency",
            "lambda:GetFunction",
            "lambda:GetFunctionConfiguration",
            "lambda:ListTags",
            "lambda:PutFunctionConcurrency",
            "lambda:TagResource",
            "lambda:UntagResource",
            "lambda:UpdateFunctionCode",
            "lambda:UpdateFunctionConfiguration"
          ],
          "Resource": [
            "arn:aws:lambda:*:*:function:DeadlineResourceTracker*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": [
            "arn:aws:s3:::*/deadline_aws_resource_tracker-*.zip",
            "arn:aws:s3:::*/DeadlineAWSResourceTrackerTemplate-*.yaml"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "sqs:CreateQueue",
            "sqs:DeleteQueue",
            "sqs:GetQueueAttributes",
            "sqs:ListQueueTags",
            "sqs:TagQueue",
            "sqs:UntagQueue"
          ],
          "Resource": [
            "arn:aws:sqs:*:*:DeadlineAWSComputeNodeState*",
            "arn:aws:sqs:*:*:DeadlineResourceTracker*"
          ]
        }
      ]
    },
    "VersionId": "v6",
    "IsDefaultVersion": true,
    "CreateDate": "2022-06-22T18:08:40+00:00"
  },
  "AWSThinkboxDeadlineSpotEventPluginAdminPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CancelSpotFleetRequests",
            "ec2:DescribeSpotFleetInstances",
            "ec2:DescribeSpotFleetRequests",
            "ec2:ModifySpotFleetRequest",
            "ec2:RequestSpotFleet"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "RunInstances"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:RunInstances"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:TerminateInstances"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/aws:ec2spot:fleet-request-id": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/aws-service-role/*"
          ],
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": [
                "spot.amazonaws.com",
                "spotfleet.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:GetInstanceProfile"
          ],
          "Resource": [
            "arn:aws:iam::*:instance-profile/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:GetRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/aws-ec2-spot-fleet-tagging-role",
            "arn:aws:iam::*:role/DeadlineSpot*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:GetUser"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/aws-ec2-spot-fleet-tagging-role",
            "arn:aws:iam::*:role/DeadlineSpot*"
          ],
          "Condition": {
            "StringLike": {
              "iam:PassedToService": "ec2.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-05-27T19:38:34+00:00"
  },
  "AWSThinkboxDeadlineSpotEventPluginWorkerPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstances",
            "ec2:DescribeTags"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:TerminateInstances"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "StringEquals": {
              "ec2:ResourceTag/DeadlineTrackedAWSResource": "SpotEventPlugin"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:TerminateInstances"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "StringEquals": {
              "ec2:ResourceTag/DeadlineResourceTracker": "SpotEventPlugin"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "sqs:GetQueueUrl",
            "sqs:SendMessage"
          ],
          "Resource": [
            "arn:aws:sqs:*:*:DeadlineAWSComputeNodeState*"
          ]
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-07T23:31:31+00:00"
  },
  "AWSTransferConsoleFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "transfer.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "acm:ListCertificates",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpcEndpoints",
            "health:DescribeEventAggregates",
            "iam:GetPolicyVersion",
            "iam:ListPolicies",
            "iam:ListRoles",
            "route53:ListHostedZones",
            "s3:ListAllMyBuckets",
            "transfer:*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-14T19:33:25+00:00"
  },
  "AWSTransferFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "transfer:*",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "transfer.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeAddresses"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-14T19:37:23+00:00"
  },
  "AWSTransferLoggingAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:CreateLogGroup",
            "logs:PutLogEvents"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-01-14T15:32:50+00:00"
  },
  "AWSTransferReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "transfer:DescribeUser",
            "transfer:DescribeServer",
            "transfer:ListUsers",
            "transfer:ListServers",
            "transfer:TestIdentityProvider",
            "transfer:ListTagsForResource"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-08-27T17:54:51+00:00"
  },
  "AWSTrustedAdvisorPriorityFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "trustedadvisor:DescribeAccount*",
            "trustedadvisor:DescribeOrganization",
            "trustedadvisor:DescribeRisk*",
            "trustedadvisor:DownloadRisk",
            "trustedadvisor:UpdateRiskStatus",
            "trustedadvisor:DescribeNotificationConfigurations",
            "trustedadvisor:UpdateNotificationConfigurations",
            "trustedadvisor:DeleteNotificationConfigurationForDelegatedAdmin",
            "trustedadvisor:SetOrganizationAccess"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "organizations:ListDelegatedAdministrators",
            "organizations:EnableAWSServiceAccess",
            "organizations:DisableAWSServiceAccess"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "organizations:ServicePrincipal": [
                "reporting.trustedadvisor.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/reporting.trustedadvisor.amazonaws.com/AWSServiceRoleForTrustedAdvisorReporting",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "reporting.trustedadvisor.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "organizations:RegisterDelegatedAdministrator",
            "organizations:DeregisterDelegatedAdministrator"
          ],
          "Resource": "arn:aws:organizations::*:*",
          "Condition": {
            "StringEquals": {
              "organizations:ServicePrincipal": [
                "reporting.trustedadvisor.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-08-16T16:08:24+00:00"
  },
  "AWSTrustedAdvisorPriorityReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "trustedadvisor:DescribeAccount*",
            "trustedadvisor:DescribeOrganization",
            "trustedadvisor:DescribeRisk*",
            "trustedadvisor:DownloadRisk",
            "trustedadvisor:DescribeNotificationConfigurations"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "organizations:ListDelegatedAdministrators"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "organizations:ServicePrincipal": [
                "reporting.trustedadvisor.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-08-16T16:35:12+00:00"
  },
  "AWSTrustedAdvisorReportingServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListAccountsForParent",
            "organizations:ListDelegatedAdministrators",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListChildren",
            "organizations:ListParents",
            "organizations:DescribeOrganizationalUnit",
            "organizations:DescribeAccount"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-02-28T23:23:45+00:00"
  },
  "AWSTrustedAdvisorServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "TrustedAdvisorServiceRolePermissions",
          "Effect": "Allow",
          "Action": [
            "autoscaling:DescribeAccountLimits",
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribeLaunchConfigurations",
            "ce:GetReservationPurchaseRecommendation",
            "ce:GetSavingsPlansPurchaseRecommendation",
            "cloudformation:DescribeAccountLimits",
            "cloudformation:DescribeStacks",
            "cloudformation:ListStacks",
            "cloudfront:ListDistributions",
            "cloudtrail:DescribeTrails",
            "cloudtrail:GetTrailStatus",
            "cloudwatch:GetMetricStatistics",
            "dynamodb:DescribeLimits",
            "dynamodb:DescribeTable",
            "dynamodb:ListTables",
            "ec2:DescribeAddresses",
            "ec2:DescribeReservedInstances",
            "ec2:DescribeInstances",
            "ec2:DescribeVpcs",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeImages",
            "ec2:DescribeVolumes",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeRegions",
            "ec2:DescribeReservedInstancesOfferings",
            "ec2:DescribeSnapshots",
            "ec2:DescribeVpnConnections",
            "ec2:DescribeVpnGateways",
            "ec2:DescribeLaunchTemplateVersions",
            "ecs:DescribeTaskDefinition",
            "ecs:ListTaskDefinitions",
            "elasticloadbalancing:DescribeAccountLimits",
            "elasticloadbalancing:DescribeInstanceHealth",
            "elasticloadbalancing:DescribeLoadBalancerAttributes",
            "elasticloadbalancing:DescribeLoadBalancerPolicies",
            "elasticloadbalancing:DescribeLoadBalancerPolicyTypes",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTargetGroups",
            "iam:GenerateCredentialReport",
            "iam:GetAccountPasswordPolicy",
            "iam:GetAccountSummary",
            "iam:GetCredentialReport",
            "iam:GetServerCertificate",
            "iam:ListServerCertificates",
            "kinesis:DescribeLimits",
            "kafka:ListClustersV2",
            "kafka:ListNodes",
            "rds:DescribeAccountAttributes",
            "rds:DescribeDBClusters",
            "rds:DescribeDBEngineVersions",
            "rds:DescribeDBInstances",
            "rds:DescribeDBParameterGroups",
            "rds:DescribeDBParameters",
            "rds:DescribeDBSecurityGroups",
            "rds:DescribeDBSnapshots",
            "rds:DescribeDBSubnetGroups",
            "rds:DescribeEngineDefaultParameters",
            "rds:DescribeEvents",
            "rds:DescribeOptionGroupOptions",
            "rds:DescribeOptionGroups",
            "rds:DescribeOrderableDBInstanceOptions",
            "rds:DescribeReservedDBInstances",
            "rds:DescribeReservedDBInstancesOfferings",
            "rds:ListTagsForResource",
            "redshift:DescribeClusters",
            "redshift:DescribeReservedNodeOfferings",
            "redshift:DescribeReservedNodes",
            "route53:GetAccountLimit",
            "route53:GetHealthCheck",
            "route53:GetHostedZone",
            "route53:ListHealthChecks",
            "route53:ListHostedZones",
            "route53:ListHostedZonesByName",
            "route53:ListResourceRecordSets",
            "route53resolver:ListResolverEndpoints",
            "route53resolver:ListResolverEndpointIpAddresses",
            "s3:GetAccountPublicAccessBlock",
            "s3:GetBucketAcl",
            "s3:GetBucketPolicy",
            "s3:GetBucketPolicyStatus",
            "s3:GetBucketLocation",
            "s3:GetBucketLogging",
            "s3:GetBucketVersioning",
            "s3:GetBucketPublicAccessBlock",
            "s3:GetLifecycleConfiguration",
            "s3:ListBucket",
            "s3:ListAllMyBuckets",
            "ses:GetSendQuota",
            "sqs:ListQueues"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v11",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-10T00:18:42+00:00"
  },
  "AWSUserNotificationsServiceLinkedRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "events:DescribeRule",
            "events:PutRule",
            "events:PutTargets",
            "events:DeleteRule",
            "events:ListTargetsByRule",
            "events:RemoveTargets"
          ],
          "Resource": [
            "arn:aws:events:*:*:rule/AWSUserNotificationsManagedRule-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "cloudwatch:PutMetricData",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": "AWS/Notifications"
            }
          },
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-04-19T13:28:34+00:00"
  },
  "AWSVPCS2SVpnServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "0",
          "Effect": "Allow",
          "Action": [
            "acm:ExportCertificate",
            "acm:DescribeCertificate",
            "acm:ListCertificates",
            "acm-pca:DescribeCertificateAuthority"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-08-06T14:13:58+00:00"
  },
  "AWSVPCTransitGatewayServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "ec2:CreateNetworkInterface",
            "ec2:DescribeNetworkInterfaces",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:DeleteNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:AssignIpv6Addresses",
            "ec2:UnAssignIpv6Addresses"
          ],
          "Resource": "*",
          "Effect": "Allow",
          "Sid": "0"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2021-04-15T16:31:44+00:00"
  },
  "AWSVPCVerifiedAccessServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "VerifiedAccessRoleModifyTaggedNetworkInterfaceActions",
          "Effect": "Allow",
          "Action": [
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:DeleteNetworkInterface"
          ],
          "Resource": "arn:aws:ec2:*:*:network-interface/*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/VerifiedAccessManaged": "true"
            }
          }
        },
        {
          "Sid": "VerifiedAccessRoleModifyNetworkInterfaceActions",
          "Effect": "Allow",
          "Action": [
            "ec2:ModifyNetworkInterfaceAttribute"
          ],
          "Resource": "arn:aws:ec2:*:*:security-group/*"
        },
        {
          "Sid": "VerifiedAccessRoleNetworkInterfaceActions",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:security-group/*"
          ]
        },
        {
          "Sid": "VerifiedAccessRoleTaggedNetworkInterfaceActions",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface"
          ],
          "Resource": "arn:aws:ec2:*:*:network-interface/*",
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/VerifiedAccessManaged": "true"
            }
          }
        },
        {
          "Sid": "VerifiedAccessRoleTaggingActions",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": "arn:aws:ec2:*:*:network-interface/*",
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "CreateNetworkInterface"
            }
          }
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-17T21:03:13+00:00"
  },
  "AWSVendorInsightsAssessorFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "vendor-insights:GetProfileAccessTerms",
            "vendor-insights:ListEntitledSecurityProfiles",
            "vendor-insights:GetEntitledSecurityProfileSnapshot",
            "vendor-insights:ListEntitledSecurityProfileSnapshots"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "aws-marketplace:CreateAgreementRequest",
            "aws-marketplace:GetAgreementRequest",
            "aws-marketplace:AcceptAgreementRequest",
            "aws-marketplace:CancelAgreementRequest",
            "aws-marketplace:ListAgreementRequests",
            "aws-marketplace:SearchAgreements",
            "aws-marketplace:CancelAgreement"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws-marketplace:AgreementType": "VendorInsightsAgreement"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "artifact:GetReport",
            "artifact:GetReportMetadata",
            "artifact:GetTermForReport",
            "artifact:ListReports"
          ],
          "Resource": "arn:aws:artifact:*::report/*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-12-01T00:51:44+00:00"
  },
  "AWSVendorInsightsAssessorReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "vendor-insights:ListEntitledSecurityProfiles",
            "vendor-insights:GetEntitledSecurityProfileSnapshot",
            "vendor-insights:ListEntitledSecurityProfileSnapshots"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "artifact:GetReport",
            "artifact:GetReportMetadata",
            "artifact:GetTermForReport",
            "artifact:ListReports"
          ],
          "Resource": "arn:aws:artifact:*::report/*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-12-01T00:55:16+00:00"
  },
  "AWSVendorInsightsVendorFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "aws-marketplace:DescribeEntity",
          "Resource": "arn:aws:aws-marketplace:*:*:*/SaaSProduct/*"
        },
        {
          "Effect": "Allow",
          "Action": "aws-marketplace:ListEntities",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "vendor-insights:CreateDataSource",
            "vendor-insights:UpdateDataSource",
            "vendor-insights:DeleteDataSource",
            "vendor-insights:GetDataSource",
            "vendor-insights:ListDataSources",
            "vendor-insights:CreateSecurityProfile",
            "vendor-insights:ListSecurityProfiles",
            "vendor-insights:GetSecurityProfile",
            "vendor-insights:AssociateDataSource",
            "vendor-insights:DisassociateDataSource",
            "vendor-insights:UpdateSecurityProfile",
            "vendor-insights:ActivateSecurityProfile",
            "vendor-insights:DeactivateSecurityProfile",
            "vendor-insights:UpdateSecurityProfileSnapshotCreationConfiguration",
            "vendor-insights:UpdateSecurityProfileSnapshotReleaseConfiguration",
            "vendor-insights:ListSecurityProfileSnapshots",
            "vendor-insights:GetSecurityProfileSnapshot",
            "vendor-insights:TagResource",
            "vendor-insights:UntagResource",
            "vendor-insights:ListTagsForResource"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "aws-marketplace:AcceptAgreementApprovalRequest",
            "aws-marketplace:RejectAgreementApprovalRequest",
            "aws-marketplace:GetAgreementApprovalRequest",
            "aws-marketplace:ListAgreementApprovalRequests",
            "aws-marketplace:CancelAgreement",
            "aws-marketplace:SearchAgreements"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws-marketplace:AgreementType": "VendorInsightsAgreement"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "artifact:GetReport",
            "artifact:GetReportMetadata",
            "artifact:GetTermForReport",
            "artifact:ListReports"
          ],
          "Resource": "arn:aws:artifact:*::report/*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-10-19T01:41:01+00:00"
  },
  "AWSVendorInsightsVendorReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "aws-marketplace:DescribeEntity",
          "Resource": "arn:aws:aws-marketplace:*:*:*/SaaSProduct/*"
        },
        {
          "Effect": "Allow",
          "Action": "aws-marketplace:ListEntities",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "vendor-insights:GetDataSource",
            "vendor-insights:ListDataSources",
            "vendor-insights:ListSecurityProfiles",
            "vendor-insights:GetSecurityProfile",
            "vendor-insights:GetSecurityProfileSnapshot",
            "vendor-insights:ListSecurityProfileSnapshots",
            "vendor-insights:ListTagsForResource"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "artifact:GetReport",
            "artifact:GetReportMetadata",
            "artifact:GetTermForReport",
            "artifact:ListReports"
          ],
          "Resource": "arn:aws:artifact:*::report/*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-12-01T00:54:38+00:00"
  },
  "AWSVpcLatticeServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "cloudwatch:PutMetricData",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": "AWS/VpcLattice"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-30T20:47:10+00:00"
  },
  "AWSWAFConsoleFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AllowUseOfAWSWAF",
          "Effect": "Allow",
          "Action": [
            "apigateway:GET",
            "apigateway:SetWebACL",
            "cloudfront:ListDistributions",
            "cloudfront:ListDistributionsByWebACLId",
            "cloudfront:UpdateDistribution",
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "ec2:DescribeRegions",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:SetWebACL",
            "appsync:ListGraphqlApis",
            "appsync:SetWebACL",
            "waf-regional:*",
            "waf:*",
            "wafv2:*",
            "s3:ListAllMyBuckets",
            "logs:DescribeResourcePolicies",
            "logs:DescribeLogGroups",
            "cognito-idp:ListUserPools",
            "cognito-idp:AssociateWebACL",
            "cognito-idp:DisassociateWebACL",
            "cognito-idp:ListResourcesForWebACL",
            "cognito-idp:GetWebACLForResource",
            "apprunner:AssociateWebAcl",
            "apprunner:DisassociateWebAcl",
            "apprunner:DescribeWebAclForService",
            "apprunner:ListServices",
            "apprunner:ListAssociatedServicesForWebAcl",
            "ec2:AssociateVerifiedAccessInstanceWebAcl",
            "ec2:DisassociateVerifiedAccessInstanceWebAcl",
            "ec2:DescribeVerifiedAccessInstanceWebAclAssociations",
            "ec2:GetVerifiedAccessInstanceWebAcl",
            "ec2:DescribeVerifiedAccessInstances"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AllowLogDeliverySubscription",
          "Action": [
            "logs:CreateLogDelivery",
            "logs:DeleteLogDelivery"
          ],
          "Resource": "*",
          "Effect": "Allow"
        },
        {
          "Sid": "GrantLogDeliveryPermissionForS3Bucket",
          "Action": [
            "s3:PutBucketPolicy",
            "s3:GetBucketPolicy"
          ],
          "Resource": [
            "arn:aws:s3:::aws-waf-logs-*"
          ],
          "Effect": "Allow"
        },
        {
          "Sid": "GrantLogDeliveryPermissionForCloudWatchLogGroup",
          "Action": [
            "logs:PutResourcePolicy"
          ],
          "Resource": "*",
          "Effect": "Allow",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "wafv2.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v8",
    "IsDefaultVersion": true,
    "CreateDate": "2023-06-05T20:56:03+00:00"
  },
  "AWSWAFConsoleReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "apigateway:GET",
            "cloudfront:ListDistributions",
            "cloudfront:ListDistributionsByWebACLId",
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "ec2:DescribeRegions",
            "elasticloadbalancing:DescribeLoadBalancers",
            "appsync:ListGraphqlApis",
            "waf-regional:Get*",
            "waf-regional:List*",
            "waf:Get*",
            "waf:List*",
            "wafv2:Describe*",
            "wafv2:Get*",
            "wafv2:List*",
            "wafv2:CheckCapacity",
            "cognito-idp:ListUserPools",
            "cognito-idp:ListResourcesForWebACL",
            "cognito-idp:GetWebACLForResource",
            "apprunner:DescribeWebAclForService",
            "apprunner:ListServices",
            "apprunner:ListAssociatedServicesForWebAcl",
            "ec2:DescribeVerifiedAccessInstanceWebAclAssociations",
            "ec2:GetVerifiedAccessInstanceWebAcl",
            "ec2:DescribeVerifiedAccessInstances"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v7",
    "IsDefaultVersion": true,
    "CreateDate": "2023-06-05T20:56:51+00:00"
  },
  "AWSWAFFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AllowUseOfAWSWAF",
          "Effect": "Allow",
          "Action": [
            "waf:*",
            "waf-regional:*",
            "wafv2:*",
            "elasticloadbalancing:SetWebACL",
            "apigateway:SetWebACL",
            "appsync:SetWebACL",
            "logs:DescribeResourcePolicies",
            "logs:DescribeLogGroups",
            "cognito-idp:AssociateWebACL",
            "cognito-idp:DisassociateWebACL",
            "cognito-idp:ListResourcesForWebACL",
            "cognito-idp:GetWebACLForResource",
            "apprunner:AssociateWebAcl",
            "apprunner:DisassociateWebAcl",
            "apprunner:DescribeWebAclForService",
            "apprunner:ListServices",
            "apprunner:ListAssociatedServicesForWebAcl",
            "ec2:AssociateVerifiedAccessInstanceWebAcl",
            "ec2:DisassociateVerifiedAccessInstanceWebAcl",
            "ec2:DescribeVerifiedAccessInstanceWebAclAssociations",
            "ec2:GetVerifiedAccessInstanceWebAcl"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AllowLogDeliverySubscription",
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogDelivery",
            "logs:DeleteLogDelivery"
          ],
          "Resource": "*"
        },
        {
          "Sid": "GrantLogDeliveryPermissionForS3Bucket",
          "Effect": "Allow",
          "Action": [
            "s3:PutBucketPolicy",
            "s3:GetBucketPolicy"
          ],
          "Resource": [
            "arn:aws:s3:::aws-waf-logs-*"
          ]
        },
        {
          "Sid": "GrantLogDeliveryPermissionForCloudWatchLogGroup",
          "Effect": "Allow",
          "Action": [
            "logs:PutResourcePolicy"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "wafv2.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v11",
    "IsDefaultVersion": true,
    "CreateDate": "2023-06-05T20:55:25+00:00"
  },
  "AWSWAFReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "waf:Get*",
            "waf:List*",
            "waf-regional:Get*",
            "waf-regional:List*",
            "wafv2:Get*",
            "wafv2:List*",
            "wafv2:Describe*",
            "wafv2:CheckCapacity",
            "cognito-idp:ListResourcesForWebACL",
            "cognito-idp:GetWebACLForResource",
            "apprunner:DescribeWebAclForService",
            "apprunner:ListServices",
            "apprunner:ListAssociatedServicesForWebAcl",
            "ec2:DescribeVerifiedAccessInstanceWebAclAssociations",
            "ec2:GetVerifiedAccessInstanceWebAcl"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v8",
    "IsDefaultVersion": true,
    "CreateDate": "2023-06-05T20:55:48+00:00"
  },
  "AWSWellArchitectedDiscoveryServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "trustedadvisor:DescribeChecks",
            "trustedadvisor:DescribeCheckItems"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:DescribeStacks",
            "cloudformation:ListStackResources",
            "resource-groups:ListGroupResources",
            "tag:GetResources"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "servicecatalog:ListAssociatedResources",
            "servicecatalog:GetApplication",
            "servicecatalog:CreateAttributeGroup"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "servicecatalog:AssociateAttributeGroup",
            "servicecatalog:DisassociateAttributeGroup"
          ],
          "Resource": [
            "arn:*:servicecatalog:*:*:/applications/*",
            "arn:*:servicecatalog:*:*:/attribute-groups/AWS_WellArchitected-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "servicecatalog:UpdateAttributeGroup",
            "servicecatalog:DeleteAttributeGroup"
          ],
          "Resource": [
            "arn:*:servicecatalog:*:*:/attribute-groups/AWS_WellArchitected-*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-04-26T18:36:40+00:00"
  },
  "AWSWellArchitectedOrganizationsServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAccounts",
            "organizations:ListAccountsForParent",
            "organizations:ListChildren",
            "organizations:ListParents",
            "organizations:ListRoots"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-07-25T18:03:31+00:00"
  },
  "AWSWickrFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "wickr:*",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-27T20:36:44+00:00"
  },
  "AWSXRayDaemonWriteAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "xray:PutTraceSegments",
            "xray:PutTelemetryRecords",
            "xray:GetSamplingRules",
            "xray:GetSamplingTargets",
            "xray:GetSamplingStatisticSummaries"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-08-28T23:00:33+00:00"
  },
  "AWSXrayCrossAccountSharingConfiguration": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "xray:Link",
            "oam:ListLinks"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "oam:DeleteLink",
            "oam:GetLink",
            "oam:TagResource"
          ],
          "Resource": "arn:aws:oam:*:*:link/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "oam:CreateLink",
            "oam:UpdateLink"
          ],
          "Resource": [
            "arn:aws:oam:*:*:link/*",
            "arn:aws:oam:*:*:sink/*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-27T13:46:35+00:00"
  },
  "AWSXrayFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "xray:*"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2016-12-01T18:30:55+00:00"
  },
  "AWSXrayReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "xray:GetSamplingRules",
            "xray:GetSamplingTargets",
            "xray:GetSamplingStatisticSummaries",
            "xray:BatchGetTraces",
            "xray:BatchGetTraceSummaryById",
            "xray:GetDistinctTraceGraphs",
            "xray:GetServiceGraph",
            "xray:GetTraceGraph",
            "xray:GetTraceSummaries",
            "xray:GetGroups",
            "xray:GetGroup",
            "xray:ListTagsForResource",
            "xray:ListResourcePolicies",
            "xray:GetTimeSeriesServiceStatistics",
            "xray:GetInsightSummaries",
            "xray:GetInsight",
            "xray:GetInsightEvents",
            "xray:GetInsightImpactGraph"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v7",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-15T23:13:57+00:00"
  },
  "AWSXrayWriteOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "xray:PutTraceSegments",
            "xray:PutTelemetryRecords",
            "xray:GetSamplingRules",
            "xray:GetSamplingTargets",
            "xray:GetSamplingStatisticSummaries"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2018-08-28T23:03:04+00:00"
  },
  "AWS_ConfigRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AWSConfigRoleStatementID",
          "Effect": "Allow",
          "Action": [
            "access-analyzer:GetAnalyzer",
            "access-analyzer:GetArchiveRule",
            "access-analyzer:ListAnalyzers",
            "access-analyzer:ListArchiveRules",
            "access-analyzer:ListTagsForResource",
            "account:GetAlternateContact",
            "acm-pca:DescribeCertificateAuthority",
            "acm-pca:GetCertificateAuthorityCertificate",
            "acm-pca:GetCertificateAuthorityCsr",
            "acm-pca:ListCertificateAuthorities",
            "acm-pca:ListTags",
            "acm:DescribeCertificate",
            "acm:ListCertificates",
            "acm:ListTagsForCertificate",
            "airflow:GetEnvironment",
            "airflow:ListEnvironments",
            "airflow:ListTagsForResource",
            "amplify:GetApp",
            "amplify:GetBranch",
            "amplify:ListApps",
            "amplify:ListBranches",
            "amplifyuibuilder:ExportThemes",
            "amplifyuibuilder:GetTheme",
            "amplifyuibuilder:ListThemes",
            "apigateway:GET",
            "app-integrations:GetEventIntegration",
            "app-integrations:ListEventIntegrationAssociations",
            "app-integrations:ListEventIntegrations",
            "appconfig:GetApplication",
            "appconfig:GetConfigurationProfile",
            "appconfig:GetDeployment",
            "appconfig:GetDeploymentStrategy",
            "appconfig:GetEnvironment",
            "appconfig:GetHostedConfigurationVersion",
            "appconfig:ListApplications",
            "appconfig:ListConfigurationProfiles",
            "appconfig:ListDeployments",
            "appconfig:ListDeploymentStrategies",
            "appconfig:ListEnvironments",
            "appconfig:ListHostedConfigurationVersions",
            "appconfig:ListTagsForResource",
            "appflow:DescribeConnectorProfiles",
            "appflow:DescribeFlow",
            "appflow:ListFlows",
            "appflow:ListTagsForResource",
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingPolicies",
            "appmesh:DescribeGatewayRoute",
            "appmesh:DescribeMesh",
            "appmesh:DescribeRoute",
            "appmesh:DescribeVirtualGateway",
            "appmesh:DescribeVirtualNode",
            "appmesh:DescribeVirtualRouter",
            "appmesh:DescribeVirtualService",
            "appmesh:ListGatewayRoutes",
            "appmesh:ListMeshes",
            "appmesh:ListRoutes",
            "appmesh:ListTagsForResource",
            "appmesh:ListVirtualGateways",
            "appmesh:ListVirtualNodes",
            "appmesh:ListVirtualRouters",
            "appmesh:ListVirtualServices",
            "apprunner:DescribeService",
            "apprunner:DescribeVpcConnector",
            "apprunner:ListServices",
            "apprunner:ListTagsForResource",
            "apprunner:ListVpcConnectors",
            "appstream:DescribeApplications",
            "appstream:DescribeDirectoryConfigs",
            "appstream:DescribeFleets",
            "appstream:DescribeStacks",
            "appstream:ListTagsForResource",
            "appsync:GetApiCache",
            "appsync:GetGraphqlApi",
            "appsync:ListGraphqlApis",
            "APS:DescribeRuleGroupsNamespace",
            "APS:DescribeWorkspace",
            "aps:ListRuleGroupsNamespaces",
            "aps:ListTagsForResource",
            "APS:ListWorkspaces",
            "athena:GetDataCatalog",
            "athena:GetPreparedStatement",
            "athena:GetWorkGroup",
            "athena:ListDataCatalogs",
            "athena:ListPreparedStatements",
            "athena:ListTagsForResource",
            "athena:ListWorkGroups",
            "auditmanager:GetAccountStatus",
            "auditmanager:GetAssessment",
            "auditmanager:ListAssessments",
            "autoscaling-plans:DescribeScalingPlanResources",
            "autoscaling-plans:DescribeScalingPlans",
            "autoscaling-plans:GetScalingPlanResourceForecastData",
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribeLaunchConfigurations",
            "autoscaling:DescribeLifecycleHooks",
            "autoscaling:DescribePolicies",
            "autoscaling:DescribeScheduledActions",
            "autoscaling:DescribeTags",
            "autoscaling:DescribeWarmPool",
            "backup-gateway:ListTagsForResource",
            "backup-gateway:ListVirtualMachines",
            "backup:DescribeBackupVault",
            "backup:DescribeFramework",
            "backup:DescribeProtectedResource",
            "backup:DescribeRecoveryPoint",
            "backup:DescribeReportPlan",
            "backup:GetBackupPlan",
            "backup:GetBackupSelection",
            "backup:GetBackupVaultAccessPolicy",
            "backup:GetBackupVaultNotifications",
            "backup:ListBackupPlans",
            "backup:ListBackupSelections",
            "backup:ListBackupVaults",
            "backup:ListFrameworks",
            "backup:ListRecoveryPointsByBackupVault",
            "backup:ListReportPlans",
            "backup:ListTags",
            "batch:DescribeComputeEnvironments",
            "batch:DescribeJobQueues",
            "batch:DescribeSchedulingPolicies",
            "batch:ListSchedulingPolicies",
            "batch:ListTagsForResource",
            "billingconductor:ListAccountAssociations",
            "billingconductor:ListBillingGroups",
            "billingconductor:ListCustomLineItems",
            "billingconductor:ListPricingPlans",
            "billingconductor:ListPricingRules",
            "billingconductor:ListPricingRulesAssociatedToPricingPlan",
            "billingconductor:ListTagsForResource",
            "budgets:DescribeBudgetAction",
            "budgets:DescribeBudgetActionsForAccount",
            "budgets:DescribeBudgetActionsForBudget",
            "budgets:ViewBudget",
            "cassandra:Select",
            "ce:GetAnomalyMonitors",
            "ce:GetAnomalySubscriptions",
            "cloud9:DescribeEnvironmentMemberships",
            "cloud9:DescribeEnvironments",
            "cloud9:ListEnvironments",
            "cloud9:ListTagsForResource",
            "cloudformation:DescribeType",
            "cloudformation:GetResource",
            "cloudformation:ListResources",
            "cloudformation:ListStackResources",
            "cloudformation:ListStacks",
            "cloudformation:ListTypes",
            "cloudfront:GetFunction",
            "cloudfront:GetOriginAccessControl",
            "cloudfront:GetResponseHeadersPolicy",
            "cloudfront:ListDistributions",
            "cloudfront:ListFunctions",
            "cloudfront:ListOriginAccessControls",
            "cloudfront:ListResponseHeadersPolicies",
            "cloudfront:ListTagsForResource",
            "cloudtrail:DescribeTrails",
            "cloudtrail:GetEventDataStore",
            "cloudtrail:GetEventSelectors",
            "cloudtrail:GetTrailStatus",
            "cloudtrail:ListEventDataStores",
            "cloudtrail:ListTags",
            "cloudtrail:ListTrails",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DescribeAnomalyDetectors",
            "cloudwatch:GetDashboard",
            "cloudwatch:GetMetricStream",
            "cloudwatch:ListDashboards",
            "cloudwatch:ListMetricStreams",
            "cloudwatch:ListTagsForResource",
            "codeartifact:DescribeRepository",
            "codeartifact:GetRepositoryPermissionsPolicy",
            "codeartifact:ListDomains",
            "codeartifact:ListPackages",
            "codeartifact:ListPackageVersions",
            "codeartifact:ListRepositories",
            "codeartifact:ListTagsForResource",
            "codebuild:BatchGetReportGroups",
            "codebuild:ListReportGroups",
            "codecommit:GetRepository",
            "codecommit:GetRepositoryTriggers",
            "codecommit:ListRepositories",
            "codecommit:ListTagsForResource",
            "codedeploy:GetDeploymentConfig",
            "codeguru-profiler:DescribeProfilingGroup",
            "codeguru-profiler:GetNotificationConfiguration",
            "codeguru-profiler:GetPolicy",
            "codeguru-profiler:ListProfilingGroups",
            "codeguru-reviewer:DescribeRepositoryAssociation",
            "codeguru-reviewer:ListRepositoryAssociations",
            "codepipeline:GetPipeline",
            "codepipeline:GetPipelineState",
            "codepipeline:ListPipelines",
            "cognito-identity:GetIdentityPoolRoles",
            "cognito-identity:ListIdentityPools",
            "cognito-identity:ListTagsForResource",
            "cognito-idp:DescribeIdentityProvider",
            "cognito-idp:DescribeResourceServer",
            "cognito-idp:DescribeUserPool",
            "cognito-idp:DescribeUserPoolClient",
            "cognito-idp:DescribeUserPoolDomain",
            "cognito-idp:GetGroup",
            "cognito-idp:GetUserPoolMfaConfig",
            "cognito-idp:ListGroups",
            "cognito-idp:ListIdentityProviders",
            "cognito-idp:ListResourceServers",
            "cognito-idp:ListUserPoolClients",
            "cognito-idp:ListUserPools",
            "cognito-idp:ListTagsForResource",
            "config:BatchGet*",
            "config:Describe*",
            "config:Get*",
            "config:List*",
            "config:Put*",
            "config:Select*",
            "connect:DescribeEvaluationForm",
            "connect:DescribeInstance",
            "connect:DescribeInstanceStorageConfig",
            "connect:DescribePhoneNumber",
            "connect:DescribePrompt",
            "connect:DescribeQuickConnect",
            "connect:DescribeRule",
            "connect:DescribeUser",
            "connect:GetTaskTemplate",
            "connect:ListApprovedOrigins",
            "connect:ListEvaluationForms",
            "connect:ListInstanceAttributes",
            "connect:ListInstances",
            "connect:ListInstanceStorageConfigs",
            "connect:ListIntegrationAssociations",
            "connect:ListPhoneNumbers",
            "connect:ListPhoneNumbersV2",
            "connect:ListPrompts",
            "connect:ListQuickConnects",
            "connect:ListRules",
            "connect:ListSecurityKeys",
            "connect:ListTagsForResource",
            "connect:ListTaskTemplates",
            "connect:ListUsers",
            "connect:SearchAvailablePhoneNumbers",
            "databrew:DescribeDataset",
            "databrew:DescribeJob",
            "databrew:DescribeProject",
            "databrew:DescribeRecipe",
            "databrew:DescribeRuleset",
            "databrew:DescribeSchedule",
            "databrew:ListDatasets",
            "databrew:ListJobs",
            "databrew:ListProjects",
            "databrew:ListRecipes",
            "databrew:ListRecipeVersions",
            "databrew:ListRulesets",
            "databrew:ListSchedules",
            "datasync:DescribeAgent",
            "datasync:DescribeLocationEfs",
            "datasync:DescribeLocationFsxLustre",
            "datasync:DescribeLocationFsxWindows",
            "datasync:DescribeLocationHdfs",
            "datasync:DescribeLocationNfs",
            "datasync:DescribeLocationObjectStorage",
            "datasync:DescribeLocationS3",
            "datasync:DescribeLocationSmb",
            "datasync:DescribeTask",
            "datasync:ListAgents",
            "datasync:ListLocations",
            "datasync:ListTagsForResource",
            "datasync:ListTasks",
            "dax:DescribeClusters",
            "dax:DescribeParameterGroups",
            "dax:DescribeParameters",
            "dax:DescribeSubnetGroups",
            "dax:ListTags",
            "detective:ListGraphs",
            "detective:ListTagsForResource",
            "devicefarm:GetInstanceProfile",
            "devicefarm:GetNetworkProfile",
            "devicefarm:GetProject",
            "devicefarm:GetTestGridProject",
            "devicefarm:ListInstanceProfiles",
            "devicefarm:ListNetworkProfiles",
            "devicefarm:ListProjects",
            "devicefarm:ListTagsForResource",
            "devicefarm:ListTestGridProjects",
            "devops-guru:GetResourceCollection",
            "dms:DescribeCertificates",
            "dms:DescribeEndpoints",
            "dms:DescribeEventSubscriptions",
            "dms:DescribeReplicationInstances",
            "dms:DescribeReplicationSubnetGroups",
            "dms:DescribeReplicationTasks",
            "dms:ListTagsForResource",
            "ds:DescribeDirectories",
            "ds:DescribeDomainControllers",
            "ds:DescribeEventTopics",
            "ds:ListLogSubscriptions",
            "ds:ListTagsForResource",
            "dynamodb:DescribeContinuousBackups",
            "dynamodb:DescribeGlobalTable",
            "dynamodb:DescribeGlobalTableSettings",
            "dynamodb:DescribeLimits",
            "dynamodb:DescribeTable",
            "dynamodb:DescribeTableReplicaAutoScaling",
            "dynamodb:DescribeTimeToLive",
            "dynamodb:ListTables",
            "dynamodb:ListTagsOfResource",
            "ec2:Describe*",
            "ec2:DescribeClientVpnAuthorizationRules",
            "ec2:DescribeClientVpnEndpoints",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeFleets",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribePlacementGroups",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSpotFleetRequests",
            "ec2:DescribeTags",
            "ec2:DescribeTrafficMirrorFilters",
            "ec2:DescribeTrafficMirrorSessions",
            "ec2:DescribeTrafficMirrorTargets",
            "ec2:DescribeVolumeAttribute",
            "ec2:DescribeVolumes",
            "ec2:GetEbsEncryptionByDefault",
            "ec2:GetInstanceTypesFromInstanceRequirements",
            "ec2:GetIpamPoolAllocations",
            "ec2:GetIpamPoolCidrs",
            "ec2:GetManagedPrefixListEntries",
            "ec2:GetNetworkInsightsAccessScopeAnalysisFindings",
            "ec2:GetNetworkInsightsAccessScopeContent",
            "ecr-public:DescribeRepositories",
            "ecr-public:GetRepositoryCatalogData",
            "ecr-public:GetRepositoryPolicy",
            "ecr-public:ListTagsForResource",
            "ecr:BatchGetRepositoryScanningConfiguration",
            "ecr:DescribePullThroughCacheRules",
            "ecr:DescribeRegistry",
            "ecr:DescribeRepositories",
            "ecr:GetLifecyclePolicy",
            "ecr:GetRegistryPolicy",
            "ecr:GetRepositoryPolicy",
            "ecr:ListTagsForResource",
            "ecs:DescribeCapacityProviders",
            "ecs:DescribeClusters",
            "ecs:DescribeServices",
            "ecs:DescribeTaskDefinition",
            "ecs:DescribeTaskSets",
            "ecs:ListClusters",
            "ecs:ListServices",
            "ecs:ListTagsForResource",
            "ecs:ListTaskDefinitionFamilies",
            "ecs:ListTaskDefinitions",
            "eks:DescribeAddon",
            "eks:DescribeCluster",
            "eks:DescribeFargateProfile",
            "eks:DescribeIdentityProviderConfig",
            "eks:DescribeNodegroup",
            "eks:ListAddons",
            "eks:ListClusters",
            "eks:ListFargateProfiles",
            "eks:ListIdentityProviderConfigs",
            "eks:ListNodegroups",
            "eks:ListTagsForResource",
            "elasticache:DescribeCacheClusters",
            "elasticache:DescribeCacheParameterGroups",
            "elasticache:DescribeCacheParameters",
            "elasticache:DescribeCacheSubnetGroups",
            "elasticache:DescribeReplicationGroups",
            "elasticache:DescribeSnapshots",
            "elasticache:ListTagsForResource",
            "elasticbeanstalk:DescribeConfigurationSettings",
            "elasticbeanstalk:DescribeEnvironments",
            "elasticfilesystem:DescribeAccessPoints",
            "elasticfilesystem:DescribeBackupPolicy",
            "elasticfilesystem:DescribeFileSystemPolicy",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DescribeLifecycleConfiguration",
            "elasticfilesystem:DescribeMountTargets",
            "elasticfilesystem:DescribeMountTargetSecurityGroups",
            "elasticloadbalancing:DescribeListenerCertificates",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancerAttributes",
            "elasticloadbalancing:DescribeLoadBalancerPolicies",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeRules",
            "elasticloadbalancing:DescribeTags",
            "elasticloadbalancing:DescribeTargetGroupAttributes",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "elasticmapreduce:DescribeCluster",
            "elasticmapreduce:DescribeSecurityConfiguration",
            "elasticmapreduce:DescribeStep",
            "elasticmapreduce:DescribeStudio",
            "elasticmapreduce:GetBlockPublicAccessConfiguration",
            "elasticmapreduce:GetManagedScalingPolicy",
            "elasticmapreduce:GetStudioSessionMapping",
            "elasticmapreduce:ListClusters",
            "elasticmapreduce:ListInstanceFleets",
            "elasticmapreduce:ListInstanceGroups",
            "elasticmapreduce:ListInstances",
            "elasticmapreduce:ListSecurityConfigurations",
            "elasticmapreduce:ListSteps",
            "elasticmapreduce:ListStudios",
            "elasticmapreduce:ListStudioSessionMappings",
            "emr-containers:DescribeVirtualCluster",
            "emr-containers:ListVirtualClusters",
            "emr-serverless:GetApplication",
            "emr-serverless:ListApplications",
            "es:DescribeDomain",
            "es:DescribeDomains",
            "es:DescribeElasticsearchDomain",
            "es:DescribeElasticsearchDomains",
            "es:GetCompatibleElasticsearchVersions",
            "es:GetCompatibleVersions",
            "es:ListDomainNames",
            "es:ListTags",
            "events:DescribeApiDestination",
            "events:DescribeArchive",
            "events:DescribeConnection",
            "events:DescribeEndpoint",
            "events:DescribeEventBus",
            "events:DescribeRule",
            "events:ListApiDestinations",
            "events:ListArchives",
            "events:ListConnections",
            "events:ListEndpoints",
            "events:ListEventBuses",
            "events:ListRules",
            "events:ListTagsForResource",
            "events:ListTargetsByRule",
            "evidently:GetLaunch",
            "evidently:GetProject",
            "evidently:GetSegment",
            "evidently:ListLaunches",
            "evidently:ListProjects",
            "evidently:ListSegments",
            "evidently:ListTagsForResource",
            "finspace:GetEnvironment",
            "finspace:ListEnvironments",
            "firehose:DescribeDeliveryStream",
            "firehose:ListDeliveryStreams",
            "firehose:ListTagsForDeliveryStream",
            "fis:GetExperimentTemplate",
            "fis:ListExperimentTemplates",
            "fms:GetNotificationChannel",
            "fms:GetPolicy",
            "fms:ListPolicies",
            "fms:ListTagsForResource",
            "forecast:DescribeDataset",
            "forecast:DescribeDatasetGroup",
            "forecast:ListDatasetGroups",
            "forecast:ListDatasets",
            "forecast:ListTagsForResource",
            "frauddetector:GetDetectors",
            "frauddetector:GetDetectorVersion",
            "frauddetector:GetEntityTypes",
            "frauddetector:GetEventTypes",
            "frauddetector:GetExternalModels",
            "frauddetector:GetLabels",
            "frauddetector:GetModels",
            "frauddetector:GetOutcomes",
            "frauddetector:GetRules",
            "frauddetector:GetVariables",
            "frauddetector:ListTagsForResource",
            "fsx:DescribeBackups",
            "fsx:DescribeFileSystems",
            "fsx:DescribeSnapshots",
            "fsx:DescribeStorageVirtualMachines",
            "fsx:DescribeVolumes",
            "fsx:ListTagsForResource",
            "gamelift:DescribeAlias",
            "gamelift:DescribeBuild",
            "gamelift:DescribeFleetAttributes",
            "gamelift:DescribeFleetCapacity",
            "gamelift:DescribeFleetLocationAttributes",
            "gamelift:DescribeFleetLocationCapacity",
            "gamelift:DescribeFleetPortSettings",
            "gamelift:DescribeGameServerGroup",
            "gamelift:DescribeGameSessionQueues",
            "gamelift:DescribeMatchmakingConfigurations",
            "gamelift:DescribeMatchmakingRuleSets",
            "gamelift:DescribeRuntimeConfiguration",
            "gamelift:DescribeScript",
            "gamelift:DescribeVpcPeeringAuthorizations",
            "gamelift:DescribeVpcPeeringConnections",
            "gamelift:ListAliases",
            "gamelift:ListBuilds",
            "gamelift:ListFleets",
            "gamelift:ListGameServerGroups",
            "gamelift:ListScripts",
            "gamelift:ListTagsForResource",
            "geo:DescribeGeofenceCollection",
            "geo:DescribeMap",
            "geo:DescribePlaceIndex",
            "geo:DescribeRouteCalculator",
            "geo:DescribeTracker",
            "geo:ListGeofenceCollections",
            "geo:ListMaps",
            "geo:ListPlaceIndexes",
            "geo:ListRouteCalculators",
            "geo:ListTrackerConsumers",
            "geo:ListTrackers",
            "globalaccelerator:DescribeAccelerator",
            "globalaccelerator:DescribeEndpointGroup",
            "globalaccelerator:DescribeListener",
            "globalaccelerator:ListAccelerators",
            "globalaccelerator:ListEndpointGroups",
            "globalaccelerator:ListListeners",
            "globalaccelerator:ListTagsForResource",
            "glue:BatchGetDevEndpoints",
            "glue:BatchGetJobs",
            "glue:BatchGetWorkflows",
            "glue:GetClassifier",
            "glue:GetClassifiers",
            "glue:GetCrawler",
            "glue:GetCrawlers",
            "glue:GetDevEndpoint",
            "glue:GetDevEndpoints",
            "glue:GetJob",
            "glue:GetJobs",
            "glue:GetMLTransform",
            "glue:GetMLTransforms",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:GetSecurityConfiguration",
            "glue:GetSecurityConfigurations",
            "glue:GetTable",
            "glue:GetTags",
            "glue:GetWorkflow",
            "glue:ListCrawlers",
            "glue:ListDevEndpoints",
            "glue:ListJobs",
            "glue:ListMLTransforms",
            "glue:ListWorkflows",
            "grafana:DescribeWorkspace",
            "grafana:DescribeWorkspaceAuthentication",
            "grafana:DescribeWorkspaceConfiguration",
            "grafana:ListWorkspaces",
            "greengrass:DescribeComponent",
            "greengrass:GetComponent",
            "greengrass:ListComponents",
            "greengrass:ListComponentVersions",
            "groundstation:GetConfig",
            "groundstation:GetDataflowEndpointGroup",
            "groundstation:GetMissionProfile",
            "groundstation:ListConfigs",
            "groundstation:ListDataflowEndpointGroups",
            "groundstation:ListMissionProfiles",
            "groundstation:ListTagsForResource",
            "guardduty:DescribePublishingDestination",
            "guardduty:GetAdministratorAccount",
            "guardduty:GetDetector",
            "guardduty:GetFilter",
            "guardduty:GetFindings",
            "guardduty:GetIPSet",
            "guardduty:GetMasterAccount",
            "guardduty:GetMemberDetectors",
            "guardduty:GetMembers",
            "guardduty:GetThreatIntelSet",
            "guardduty:ListDetectors",
            "guardduty:ListFilters",
            "guardduty:ListFindings",
            "guardduty:ListIPSets",
            "guardduty:ListMembers",
            "guardduty:ListOrganizationAdminAccounts",
            "guardduty:ListPublishingDestinations",
            "guardduty:ListTagsForResource",
            "guardduty:ListThreatIntelSets",
            "healthlake:DescribeFHIRDatastore",
            "healthlake:ListFHIRDatastores",
            "healthlake:ListTagsForResource",
            "iam:GenerateCredentialReport",
            "iam:GetAccountAuthorizationDetails",
            "iam:GetAccountPasswordPolicy",
            "iam:GetAccountSummary",
            "iam:GetCredentialReport",
            "iam:GetGroup",
            "iam:GetGroupPolicy",
            "iam:GetInstanceProfile",
            "iam:GetPolicy",
            "iam:GetPolicyVersion",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:GetSAMLProvider",
            "iam:GetServerCertificate",
            "iam:GetUser",
            "iam:GetUserPolicy",
            "iam:ListAccessKeys",
            "iam:ListAttachedGroupPolicies",
            "iam:ListAttachedRolePolicies",
            "iam:ListAttachedUserPolicies",
            "iam:ListEntitiesForPolicy",
            "iam:ListGroupPolicies",
            "iam:ListGroups",
            "iam:ListGroupsForUser",
            "iam:ListInstanceProfiles",
            "iam:ListInstanceProfilesForRole",
            "iam:ListInstanceProfileTags",
            "iam:ListMFADevices",
            "iam:ListMFADeviceTags",
            "iam:ListPolicyVersions",
            "iam:ListRolePolicies",
            "iam:ListRoles",
            "iam:ListSAMLProviders",
            "iam:ListServerCertificates",
            "iam:ListUserPolicies",
            "iam:ListVirtualMFADevices",
            "imagebuilder:GetComponent",
            "imagebuilder:GetContainerRecipe",
            "imagebuilder:GetDistributionConfiguration",
            "imagebuilder:GetImage",
            "imagebuilder:GetImagePipeline",
            "imagebuilder:GetImageRecipe",
            "imagebuilder:GetInfrastructureConfiguration",
            "imagebuilder:ListComponentBuildVersions",
            "imagebuilder:ListComponents",
            "imagebuilder:ListContainerRecipes",
            "imagebuilder:ListDistributionConfigurations",
            "imagebuilder:ListImageBuildVersions",
            "imagebuilder:ListImagePipelines",
            "imagebuilder:ListImageRecipes",
            "imagebuilder:ListImages",
            "imagebuilder:ListInfrastructureConfigurations",
            "inspector2:BatchGetAccountStatus",
            "inspector2:GetDelegatedAdminAccount",
            "inspector2:ListFilters",
            "inspector2:ListMembers",
            "iot:DescribeAccountAuditConfiguration",
            "iot:DescribeAuthorizer",
            "iot:DescribeCACertificate",
            "iot:DescribeCertificate",
            "iot:DescribeCustomMetric",
            "iot:DescribeDimension",
            "iot:DescribeDomainConfiguration",
            "iot:DescribeFleetMetric",
            "iot:DescribeJobTemplate",
            "iot:DescribeMitigationAction",
            "iot:DescribeProvisioningTemplate",
            "iot:DescribeRoleAlias",
            "iot:DescribeScheduledAudit",
            "iot:DescribeSecurityProfile",
            "iot:GetPolicy",
            "iot:GetTopicRule",
            "iot:GetTopicRuleDestination",
            "iot:ListAuthorizers",
            "iot:ListCACertificates",
            "iot:ListCertificates",
            "iot:ListCustomMetrics",
            "iot:ListDimensions",
            "iot:ListDomainConfigurations",
            "iot:ListFleetMetrics",
            "iot:ListJobTemplates",
            "iot:ListMitigationActions",
            "iot:ListPolicies",
            "iot:ListProvisioningTemplates",
            "iot:ListRoleAliases",
            "iot:ListScheduledAudits",
            "iot:ListSecurityProfiles",
            "iot:ListSecurityProfilesForTarget",
            "iot:ListTagsForResource",
            "iot:ListTargetsForSecurityProfile",
            "iot:ListTopicRuleDestinations",
            "iot:ListTopicRules",
            "iot:ListV2LoggingLevels",
            "iot:ValidateSecurityProfileBehaviors",
            "iotanalytics:DescribeChannel",
            "iotanalytics:DescribeDataset",
            "iotanalytics:DescribeDatastore",
            "iotanalytics:DescribePipeline",
            "iotanalytics:ListChannels",
            "iotanalytics:ListDatasets",
            "iotanalytics:ListDatastores",
            "iotanalytics:ListPipelines",
            "iotanalytics:ListTagsForResource",
            "iotevents:DescribeAlarmModel",
            "iotevents:DescribeDetectorModel",
            "iotevents:DescribeInput",
            "iotevents:ListAlarmModels",
            "iotevents:ListDetectorModels",
            "iotevents:ListInputs",
            "iotevents:ListTagsForResource",
            "iotsitewise:DescribeAccessPolicy",
            "iotsitewise:DescribeAsset",
            "iotsitewise:DescribeAssetModel",
            "iotsitewise:DescribeDashboard",
            "iotsitewise:DescribeGateway",
            "iotsitewise:DescribePortal",
            "iotsitewise:DescribeProject",
            "iotsitewise:ListAccessPolicies",
            "iotsitewise:ListAssetModels",
            "iotsitewise:ListAssets",
            "iotsitewise:ListDashboards",
            "iotsitewise:ListGateways",
            "iotsitewise:ListPortals",
            "iotsitewise:ListProjectAssets",
            "iotsitewise:ListProjects",
            "iotsitewise:ListTagsForResource",
            "iottwinmaker:GetComponentType",
            "iottwinmaker:GetEntity",
            "iottwinmaker:GetScene",
            "iottwinmaker:GetSyncJob",
            "iottwinmaker:GetWorkspace",
            "iottwinmaker:ListComponentTypes",
            "iottwinmaker:ListEntities",
            "iottwinmaker:ListScenes",
            "iottwinmaker:ListSyncJobs",
            "iottwinmaker:ListTagsForResource",
            "iottwinmaker:ListWorkspaces",
            "iotwireless:GetFuotaTask",
            "iotwireless:GetMulticastGroup",
            "iotwireless:GetServiceProfile",
            "iotwireless:GetWirelessDevice",
            "iotwireless:GetWirelessGatewayTaskDefinition",
            "iotwireless:ListFuotaTasks",
            "iotwireless:ListMulticastGroups",
            "iotwireless:ListServiceProfiles",
            "iotwireless:ListTagsForResource",
            "iotwireless:ListWirelessDevices",
            "iotwireless:ListWirelessGatewayTaskDefinitions",
            "ivs:GetChannel",
            "ivs:GetPlaybackKeyPair",
            "ivs:GetRecordingConfiguration",
            "ivs:GetStreamKey",
            "ivs:ListChannels",
            "ivs:ListPlaybackKeyPairs",
            "ivs:ListRecordingConfigurations",
            "ivs:ListStreamKeys",
            "ivs:ListTagsForResource",
            "kafka:DescribeCluster",
            "kafka:DescribeClusterV2",
            "kafka:DescribeConfiguration",
            "kafka:DescribeConfigurationRevision",
            "kafka:ListClusters",
            "kafka:ListClustersV2",
            "kafka:ListConfigurations",
            "kafka:ListScramSecrets",
            "kafka:ListTagsForResource",
            "kafkaconnect:DescribeConnector",
            "kafkaconnect:ListConnectors",
            "kendra:DescribeIndex",
            "kendra:ListIndices",
            "kendra:ListTagsForResource",
            "kinesis:DescribeStreamConsumer",
            "kinesis:DescribeStreamSummary",
            "kinesis:ListStreamConsumers",
            "kinesis:ListStreams",
            "kinesis:ListTagsForStream",
            "kinesisanalytics:DescribeApplication",
            "kinesisanalytics:ListApplications",
            "kinesisanalytics:ListTagsForResource",
            "kinesisvideo:DescribeSignalingChannel",
            "kinesisvideo:DescribeStream",
            "kinesisvideo:ListSignalingChannels",
            "kinesisvideo:ListStreams",
            "kinesisvideo:ListTagsForResource",
            "kinesisvideo:ListTagsForStream",
            "kms:DescribeKey",
            "kms:GetKeyPolicy",
            "kms:GetKeyRotationStatus",
            "kms:ListAliases",
            "kms:ListKeys",
            "kms:ListResourceTags",
            "lakeformation:DescribeResource",
            "lakeformation:GetDataLakeSettings",
            "lakeformation:ListPermissions",
            "lakeformation:ListResources",
            "lambda:GetAlias",
            "lambda:GetCodeSigningConfig",
            "lambda:GetFunction",
            "lambda:GetFunctionCodeSigningConfig",
            "lambda:GetPolicy",
            "lambda:ListAliases",
            "lambda:ListCodeSigningConfigs",
            "lambda:ListFunctions",
            "lambda:ListTags",
            "lambda:ListVersionsByFunction",
            "lex:DescribeBot",
            "lex:DescribeBotAlias",
            "lex:DescribeBotVersion",
            "lex:DescribeResourcePolicy",
            "lex:ListBotAliases",
            "lex:ListBotLocales",
            "lex:ListBots",
            "lex:ListBotVersions",
            "lex:ListTagsForResource",
            "license-manager:GetGrant",
            "license-manager:GetLicense",
            "license-manager:ListDistributedGrants",
            "license-manager:ListLicenses",
            "license-manager:ListReceivedGrants",
            "lightsail:GetAlarms",
            "lightsail:GetBuckets",
            "lightsail:GetCertificates",
            "lightsail:GetContainerServices",
            "lightsail:GetDisk",
            "lightsail:GetDisks",
            "lightsail:GetDistributions",
            "lightsail:GetInstance",
            "lightsail:GetInstances",
            "lightsail:GetKeyPair",
            "lightsail:GetLoadBalancer",
            "lightsail:GetLoadBalancers",
            "lightsail:GetLoadBalancerTlsCertificates",
            "lightsail:GetRelationalDatabase",
            "lightsail:GetRelationalDatabaseParameters",
            "lightsail:GetRelationalDatabases",
            "lightsail:GetStaticIp",
            "lightsail:GetStaticIps",
            "logs:DescribeDestinations",
            "logs:DescribeLogGroups",
            "logs:GetDataProtectionPolicy",
            "logs:GetLogDelivery",
            "logs:ListLogDeliveries",
            "logs:ListTagsLogGroup",
            "lookoutequipment:DescribeInferenceScheduler",
            "lookoutequipment:ListTagsForResource",
            "lookoutmetrics:DescribeAlert",
            "lookoutmetrics:DescribeAnomalyDetector",
            "lookoutmetrics:ListAlerts",
            "lookoutmetrics:ListAnomalyDetectors",
            "lookoutmetrics:ListMetricSets",
            "lookoutmetrics:ListTagsForResource",
            "lookoutvision:DescribeProject",
            "lookoutvision:ListProjects",
            "m2:GetEnvironment",
            "m2:ListEnvironments",
            "m2:ListTagsForResource",
            "macie2:DescribeOrganizationConfiguration",
            "macie2:GetAutomatedDiscoveryConfiguration",
            "macie2:GetClassificationExportConfiguration",
            "macie2:GetCustomDataIdentifier",
            "macie2:GetFindingsPublicationConfiguration",
            "macie2:GetMacieSession",
            "macie2:ListCustomDataIdentifiers",
            "macie2:ListTagsForResource",
            "managedblockchain:GetMember",
            "managedblockchain:GetNetwork",
            "managedblockchain:GetNode",
            "managedblockchain:ListInvitations",
            "managedblockchain:ListMembers",
            "managedblockchain:ListNodes",
            "mediaconnect:DescribeFlow",
            "mediaconnect:ListFlows",
            "mediaconnect:ListTagsForResource",
            "mediapackage-vod:DescribePackagingConfiguration",
            "mediapackage-vod:DescribePackagingGroup",
            "mediapackage-vod:ListPackagingConfigurations",
            "mediapackage-vod:ListPackagingGroups",
            "mediapackage-vod:ListTagsForResource",
            "mediatailor:GetPlaybackConfiguration",
            "mediatailor:ListPlaybackConfigurations",
            "memorydb:DescribeAcls",
            "memorydb:DescribeClusters",
            "memorydb:DescribeParameterGroups",
            "memorydb:DescribeParameters",
            "memorydb:DescribeSubnetGroups",
            "memorydb:DescribeUsers",
            "memorydb:ListTags",
            "mobiletargeting:GetApp",
            "mobiletargeting:GetApplicationSettings",
            "mobiletargeting:GetApps",
            "mobiletargeting:GetCampaign",
            "mobiletargeting:GetCampaigns",
            "mobiletargeting:GetEmailChannel",
            "mobiletargeting:GetEmailTemplate",
            "mobiletargeting:GetEventStream",
            "mobiletargeting:GetInAppTemplate",
            "mobiletargeting:GetSegment",
            "mobiletargeting:GetSegments",
            "mobiletargeting:ListTagsForResource",
            "mobiletargeting:ListTemplates",
            "mq:DescribeBroker",
            "mq:ListBrokers",
            "network-firewall:DescribeLoggingConfiguration",
            "network-firewall:ListFirewalls",
            "networkmanager:DescribeGlobalNetworks",
            "networkmanager:GetConnectPeer",
            "networkmanager:GetCustomerGatewayAssociations",
            "networkmanager:GetDevices",
            "networkmanager:GetLinkAssociations",
            "networkmanager:GetLinks",
            "networkmanager:GetSites",
            "networkmanager:GetTransitGatewayRegistrations",
            "networkmanager:ListConnectPeers",
            "networkmanager:ListTagsForResource",
            "nimble:GetLaunchProfile",
            "nimble:GetLaunchProfileDetails",
            "nimble:GetStreamingImage",
            "nimble:GetStudio",
            "nimble:GetStudioComponent",
            "nimble:ListLaunchProfiles",
            "nimble:ListStreamingImages",
            "nimble:ListStudioComponents",
            "nimble:ListStudios",
            "opsworks:DescribeInstances",
            "opsworks:DescribeLayers",
            "opsworks:DescribeTimeBasedAutoScaling",
            "opsworks:DescribeVolumes",
            "opsworks:ListTags",
            "organizations:DescribeAccount",
            "organizations:DescribeEffectivePolicy",
            "organizations:DescribeOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:DescribePolicy",
            "organizations:DescribeResourcePolicy",
            "organizations:ListAccounts",
            "organizations:ListAccountsForParent",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListParents",
            "organizations:ListPolicies",
            "organizations:ListPoliciesForTarget",
            "organizations:ListRoots",
            "organizations:ListTagsForResource",
            "organizations:ListTargetsForPolicy",
            "panorama:DescribeApplicationInstance",
            "panorama:DescribeApplicationInstanceDetails",
            "panorama:DescribePackage",
            "panorama:DescribePackageVersion",
            "panorama:ListApplicationInstances",
            "panorama:ListNodes",
            "panorama:ListPackages",
            "personalize:DescribeDataset",
            "personalize:DescribeDatasetGroup",
            "personalize:DescribeSchema",
            "personalize:DescribeSolution",
            "personalize:ListDatasetGroups",
            "personalize:ListDatasetImportJobs",
            "personalize:ListDatasets",
            "personalize:ListSchemas",
            "personalize:ListSolutions",
            "personalize:ListTagsForResource",
            "profile:GetDomain",
            "profile:GetIntegration",
            "profile:GetProfileObjectType",
            "profile:ListDomains",
            "profile:ListIntegrations",
            "profile:ListProfileObjectTypes",
            "profile:ListTagsForResource",
            "quicksight:DescribeAccountSubscription",
            "quicksight:DescribeAnalysis",
            "quicksight:DescribeAnalysisPermissions",
            "quicksight:DescribeDashboard",
            "quicksight:DescribeDashboardPermissions",
            "quicksight:DescribeDataSet",
            "quicksight:DescribeDataSetPermissions",
            "quicksight:DescribeDataSetRefreshProperties",
            "quicksight:DescribeDataSource",
            "quicksight:DescribeDataSourcePermissions",
            "quicksight:DescribeTemplate",
            "quicksight:DescribeTemplatePermissions",
            "quicksight:DescribeTheme",
            "quicksight:DescribeThemePermissions",
            "quicksight:ListAnalyses",
            "quicksight:ListDashboards",
            "quicksight:ListDataSets",
            "quicksight:ListDataSources",
            "quicksight:ListTagsForResource",
            "quicksight:ListTemplates",
            "quicksight:ListThemes",
            "ram:GetResourceShareAssociations",
            "ram:GetResourceShares",
            "ram:ListResources",
            "ram:ListResourceSharePermissions",
            "rds:DescribeDBClusterParameterGroups",
            "rds:DescribeDBClusterParameters",
            "rds:DescribeDBClusters",
            "rds:DescribeDBClusterSnapshotAttributes",
            "rds:DescribeDBClusterSnapshots",
            "rds:DescribeDBEngineVersions",
            "rds:DescribeDBInstances",
            "rds:DescribeDBParameterGroups",
            "rds:DescribeDBParameters",
            "rds:DescribeDBProxies",
            "rds:DescribeDBProxyEndpoints",
            "rds:DescribeDBSecurityGroups",
            "rds:DescribeDBSnapshotAttributes",
            "rds:DescribeDBSnapshots",
            "rds:DescribeDBSubnetGroups",
            "rds:DescribeEngineDefaultClusterParameters",
            "rds:DescribeEventSubscriptions",
            "rds:DescribeGlobalClusters",
            "rds:DescribeOptionGroups",
            "rds:ListTagsForResource",
            "redshift:DescribeClusterParameterGroups",
            "redshift:DescribeClusterParameters",
            "redshift:DescribeClusters",
            "redshift:DescribeClusterSecurityGroups",
            "redshift:DescribeClusterSnapshots",
            "redshift:DescribeClusterSubnetGroups",
            "redshift:DescribeEndpointAccess",
            "redshift:DescribeEndpointAuthorization",
            "redshift:DescribeEventSubscriptions",
            "redshift:DescribeLoggingStatus",
            "redshift:DescribeScheduledActions",
            "refactor-spaces:GetEnvironment",
            "refactor-spaces:GetService",
            "refactor-spaces:ListApplications",
            "refactor-spaces:ListEnvironments",
            "refactor-spaces:ListServices",
            "rekognition:DescribeStreamProcessor",
            "rekognition:ListStreamProcessors",
            "rekognition:ListTagsForResource",
            "resiliencehub:DescribeApp",
            "resiliencehub:DescribeAppVersionTemplate",
            "resiliencehub:DescribeResiliencyPolicy",
            "resiliencehub:ListApps",
            "resiliencehub:ListAppVersionResourceMappings",
            "resiliencehub:ListResiliencyPolicies",
            "resiliencehub:ListTagsForResource",
            "resource-explorer-2:GetIndex",
            "resource-explorer-2:ListIndexes",
            "resource-explorer-2:ListTagsForResource",
            "resource-groups:GetGroup",
            "resource-groups:GetGroupConfiguration",
            "resource-groups:GetGroupQuery",
            "resource-groups:GetTags",
            "resource-groups:ListGroupResources",
            "resource-groups:ListGroups",
            "robomaker:DescribeRobotApplication",
            "robomaker:DescribeSimulationApplication",
            "robomaker:ListRobotApplications",
            "robomaker:ListSimulationApplications",
            "route53-recovery-control-config:DescribeCluster",
            "route53-recovery-control-config:DescribeControlPanel",
            "route53-recovery-control-config:DescribeRoutingControl",
            "route53-recovery-control-config:DescribeSafetyRule",
            "route53-recovery-control-config:ListClusters",
            "route53-recovery-control-config:ListControlPanels",
            "route53-recovery-control-config:ListRoutingControls",
            "route53-recovery-control-config:ListSafetyRules",
            "route53-recovery-control-config:ListTagsForResource",
            "route53-recovery-readiness:GetCell",
            "route53-recovery-readiness:GetReadinessCheck",
            "route53-recovery-readiness:GetRecoveryGroup",
            "route53-recovery-readiness:GetResourceSet",
            "route53-recovery-readiness:ListCells",
            "route53-recovery-readiness:ListReadinessChecks",
            "route53-recovery-readiness:ListRecoveryGroups",
            "route53-recovery-readiness:ListResourceSets",
            "route53:GetChange",
            "route53:GetDNSSEC",
            "route53:GetHealthCheck",
            "route53:GetHostedZone",
            "route53:ListCidrBlocks",
            "route53:ListCidrCollections",
            "route53:ListCidrLocations",
            "route53:ListHealthChecks",
            "route53:ListHostedZones",
            "route53:ListHostedZonesByName",
            "route53:ListQueryLoggingConfigs",
            "route53:ListResourceRecordSets",
            "route53:ListTagsForResource",
            "route53resolver:GetFirewallDomainList",
            "route53resolver:GetFirewallRuleGroup",
            "route53resolver:GetFirewallRuleGroupAssociation",
            "route53resolver:GetResolverDnssecConfig",
            "route53resolver:GetResolverEndpoint",
            "route53resolver:GetResolverQueryLogConfig",
            "route53resolver:GetResolverQueryLogConfigAssociation",
            "route53resolver:GetResolverRule",
            "route53resolver:GetResolverRuleAssociation",
            "route53resolver:ListFirewallDomainLists",
            "route53resolver:ListFirewallDomains",
            "route53resolver:ListFirewallRuleGroupAssociations",
            "route53resolver:ListFirewallRuleGroups",
            "route53resolver:ListFirewallRules",
            "route53resolver:ListResolverDnssecConfigs",
            "route53resolver:ListResolverEndpointIpAddresses",
            "route53resolver:ListResolverEndpoints",
            "route53resolver:ListResolverQueryLogConfigAssociations",
            "route53resolver:ListResolverQueryLogConfigs",
            "route53resolver:ListResolverRuleAssociations",
            "route53resolver:ListResolverRules",
            "route53resolver:ListTagsForResource",
            "rum:GetAppMonitor",
            "rum:GetAppMonitorData",
            "rum:ListAppMonitors",
            "rum:ListTagsForResource",
            "s3-outposts:GetAccessPoint",
            "s3-outposts:GetAccessPointPolicy",
            "s3-outposts:GetBucket",
            "s3-outposts:GetBucketPolicy",
            "s3-outposts:GetBucketTagging",
            "s3-outposts:GetLifecycleConfiguration",
            "s3-outposts:ListAccessPoints",
            "s3-outposts:ListEndpoints",
            "s3-outposts:ListRegionalBuckets",
            "s3:GetAccelerateConfiguration",
            "s3:GetAccessPoint",
            "s3:GetAccessPointForObjectLambda",
            "s3:GetAccessPointPolicy",
            "s3:GetAccessPointPolicyForObjectLambda",
            "s3:GetAccessPointPolicyStatus",
            "s3:GetAccessPointPolicyStatusForObjectLambda",
            "s3:GetAccountPublicAccessBlock",
            "s3:GetBucketAcl",
            "s3:GetBucketCORS",
            "s3:GetBucketLocation",
            "s3:GetBucketLogging",
            "s3:GetBucketNotification",
            "s3:GetBucketObjectLockConfiguration",
            "s3:GetBucketPolicy",
            "s3:GetBucketPublicAccessBlock",
            "s3:GetBucketRequestPayment",
            "s3:GetBucketTagging",
            "s3:GetBucketVersioning",
            "s3:GetBucketWebsite",
            "s3:GetEncryptionConfiguration",
            "s3:GetLifecycleConfiguration",
            "s3:GetMultiRegionAccessPoint",
            "s3:GetMultiRegionAccessPointPolicy",
            "s3:GetMultiRegionAccessPointPolicyStatus",
            "s3:GetReplicationConfiguration",
            "s3:GetStorageLensConfiguration",
            "s3:GetStorageLensConfigurationTagging",
            "s3:ListAccessPoints",
            "s3:ListAccessPointsForObjectLambda",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ListMultiRegionAccessPoints",
            "s3:ListStorageLensConfigurations",
            "sagemaker:DescribeAppImageConfig",
            "sagemaker:DescribeCodeRepository",
            "sagemaker:DescribeDataQualityJobDefinition",
            "sagemaker:DescribeDeviceFleet",
            "sagemaker:DescribeDomain",
            "sagemaker:DescribeEndpoint",
            "sagemaker:DescribeEndpointConfig",
            "sagemaker:DescribeFeatureGroup",
            "sagemaker:DescribeImage",
            "sagemaker:DescribeImageVersion",
            "sagemaker:DescribeModel",
            "sagemaker:DescribeModelBiasJobDefinition",
            "sagemaker:DescribeModelExplainabilityJobDefinition",
            "sagemaker:DescribeModelQualityJobDefinition",
            "sagemaker:DescribeMonitoringSchedule",
            "sagemaker:DescribeNotebookInstance",
            "sagemaker:DescribeNotebookInstanceLifecycleConfig",
            "sagemaker:DescribePipeline",
            "sagemaker:DescribeProject",
            "sagemaker:DescribeWorkteam",
            "sagemaker:ListAppImageConfigs",
            "sagemaker:ListCodeRepositories",
            "sagemaker:ListDataQualityJobDefinitions",
            "sagemaker:ListDeviceFleets",
            "sagemaker:ListDomains",
            "sagemaker:ListEndpointConfigs",
            "sagemaker:ListEndpoints",
            "sagemaker:ListFeatureGroups",
            "sagemaker:ListImages",
            "sagemaker:ListImageVersions",
            "sagemaker:ListModelBiasJobDefinitions",
            "sagemaker:ListModelExplainabilityJobDefinitions",
            "sagemaker:ListModelQualityJobDefinitions",
            "sagemaker:ListModels",
            "sagemaker:ListMonitoringSchedules",
            "sagemaker:ListNotebookInstanceLifecycleConfigs",
            "sagemaker:ListNotebookInstances",
            "sagemaker:ListPipelines",
            "sagemaker:ListProjects",
            "sagemaker:ListTags",
            "sagemaker:ListWorkteams",
            "schemas:DescribeDiscoverer",
            "schemas:DescribeRegistry",
            "schemas:DescribeSchema",
            "schemas:GetResourcePolicy",
            "schemas:ListDiscoverers",
            "schemas:ListRegistries",
            "schemas:ListSchemas",
            "sdb:GetAttributes",
            "sdb:ListDomains",
            "secretsmanager:ListSecrets",
            "secretsmanager:ListSecretVersionIds",
            "securityhub:DescribeHub",
            "serviceCatalog:DescribePortfolioShares",
            "servicediscovery:GetInstance",
            "servicediscovery:GetNamespace",
            "servicediscovery:GetService",
            "servicediscovery:ListInstances",
            "servicediscovery:ListNamespaces",
            "servicediscovery:ListServices",
            "servicediscovery:ListTagsForResource",
            "ses:DescribeReceiptRule",
            "ses:DescribeReceiptRuleSet",
            "ses:GetConfigurationSet",
            "ses:GetConfigurationSetEventDestinations",
            "ses:GetContactList",
            "ses:GetEmailTemplate",
            "ses:GetTemplate",
            "ses:ListConfigurationSets",
            "ses:ListContactLists",
            "ses:ListEmailTemplates",
            "ses:ListReceiptFilters",
            "ses:ListReceiptRuleSets",
            "ses:ListTemplates",
            "shield:DescribeDRTAccess",
            "shield:DescribeProtection",
            "shield:DescribeSubscription",
            "signer:GetSigningProfile",
            "signer:ListProfilePermissions",
            "signer:ListSigningProfiles",
            "sns:GetDataProtectionPolicy",
            "sns:GetSubscriptionAttributes",
            "sns:GetTopicAttributes",
            "sns:ListSubscriptions",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTagsForResource",
            "sns:ListTopics",
            "sqs:GetQueueAttributes",
            "sqs:ListQueues",
            "sqs:ListQueueTags",
            "ssm:DescribeAutomationExecutions",
            "ssm:DescribeDocument",
            "ssm:DescribeDocumentPermission",
            "ssm:DescribeParameters",
            "ssm:GetAutomationExecution",
            "ssm:GetDocument",
            "ssm:ListDocuments",
            "ssm:ListTagsForResource",
            "sso:DescribeInstanceAccessControlAttributeConfiguration",
            "sso:DescribePermissionSet",
            "sso:GetInlinePolicyForPermissionSet",
            "sso:ListManagedPoliciesInPermissionSet",
            "sso:ListPermissionSets",
            "sso:ListTagsForResource",
            "states:DescribeActivity",
            "states:DescribeStateMachine",
            "states:ListActivities",
            "states:ListStateMachines",
            "states:ListTagsForResource",
            "storagegateway:ListGateways",
            "storagegateway:ListTagsForResource",
            "storagegateway:ListVolumes",
            "sts:GetCallerIdentity",
            "support:DescribeCases",
            "synthetics:DescribeCanaries",
            "synthetics:DescribeCanariesLastRun",
            "synthetics:DescribeRuntimeVersions",
            "synthetics:GetCanary",
            "synthetics:GetCanaryRuns",
            "synthetics:GetGroup",
            "synthetics:ListAssociatedGroups",
            "synthetics:ListGroupResources",
            "synthetics:ListGroups",
            "synthetics:ListTagsForResource",
            "tag:GetResources",
            "timestream:DescribeDatabase",
            "timestream:DescribeEndpoints",
            "timestream:DescribeTable",
            "timestream:ListDatabases",
            "timestream:ListTables",
            "timestream:ListTagsForResource",
            "transfer:DescribeAgreement",
            "transfer:DescribeCertificate",
            "transfer:DescribeConnector",
            "transfer:DescribeProfile",
            "transfer:DescribeServer",
            "transfer:DescribeUser",
            "transfer:DescribeWorkflow",
            "transfer:ListAgreements",
            "transfer:ListCertificates",
            "transfer:ListConnectors",
            "transfer:ListProfiles",
            "transfer:ListServers",
            "transfer:ListTagsForResource",
            "transfer:ListUsers",
            "transfer:ListWorkflows",
            "voiceid:DescribeDomain",
            "voiceid:ListTagsForResource",
            "waf-regional:GetLoggingConfiguration",
            "waf-regional:GetWebACL",
            "waf-regional:GetWebACLForResource",
            "waf-regional:ListLoggingConfigurations",
            "waf:GetLoggingConfiguration",
            "waf:GetWebACL",
            "wafv2:GetLoggingConfiguration",
            "wafv2:GetRuleGroup",
            "wafv2:ListRuleGroups",
            "wafv2:ListTagsForResource",
            "workspaces:DescribeConnectionAliases",
            "workspaces:DescribeTags",
            "workspaces:DescribeWorkspaces"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ConfigLogStreamStatementID",
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:CreateLogGroup"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/config/*"
        },
        {
          "Sid": "ConfigLogEventsStatementID",
          "Effect": "Allow",
          "Action": "logs:PutLogEvents",
          "Resource": "arn:aws:logs:*:*:log-group:/aws/config/*:log-stream:config-rule-evaluation/*"
        }
      ]
    },
    "VersionId": "v28",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-17T21:09:11+00:00"
  },
  "AWSrePostPrivateCloudWatchAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "CloudWatchPublishMetrics",
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricData"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": [
                "AWS/rePostPrivate",
                "AWS/Usage"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-15T16:37:33+00:00"
  },
  "AccessAnalyzerServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AccessAnalyzerServiceRolePolicy",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeAddresses",
            "ec2:DescribeByoipCidrs",
            "ec2:DescribeSnapshotAttribute",
            "ec2:DescribeSnapshots",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ecr:DescribeRepositories",
            "ecr:GetRepositoryPolicy",
            "elasticfilesystem:DescribeFileSystemPolicy",
            "elasticfilesystem:DescribeFileSystems",
            "iam:GetRole",
            "iam:ListEntitiesForPolicy",
            "iam:ListRoles",
            "iam:ListUsers",
            "iam:GetUser",
            "iam:GetGroup",
            "iam:GenerateServiceLastAccessedDetails",
            "iam:GetServiceLastAccessedDetails",
            "iam:ListAccessKeys",
            "iam:GetLoginProfile",
            "iam:GetAccessKeyLastUsed",
            "kms:DescribeKey",
            "kms:GetKeyPolicy",
            "kms:ListGrants",
            "kms:ListKeyPolicies",
            "kms:ListKeys",
            "lambda:GetFunctionUrlConfig",
            "lambda:GetLayerVersionPolicy",
            "lambda:GetPolicy",
            "lambda:ListAliases",
            "lambda:ListFunctions",
            "lambda:ListLayers",
            "lambda:ListLayerVersions",
            "lambda:ListVersionsByFunction",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:ListAccounts",
            "organizations:ListAccountsForParent",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListChildren",
            "organizations:ListDelegatedAdministrators",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListParents",
            "organizations:ListRoots",
            "rds:DescribeDBClusterSnapshotAttributes",
            "rds:DescribeDBClusterSnapshots",
            "rds:DescribeDBSnapshotAttributes",
            "rds:DescribeDBSnapshots",
            "s3:DescribeMultiRegionAccessPointOperation",
            "s3:GetAccessPoint",
            "s3:GetAccessPointPolicy",
            "s3:GetAccessPointPolicyStatus",
            "s3:GetAccountPublicAccessBlock",
            "s3:GetBucketAcl",
            "s3:GetBucketLocation",
            "s3:GetBucketPolicyStatus",
            "s3:GetBucketPolicy",
            "s3:GetBucketPublicAccessBlock",
            "s3:GetMultiRegionAccessPoint",
            "s3:GetMultiRegionAccessPointPolicy",
            "s3:GetMultiRegionAccessPointPolicyStatus",
            "s3:ListAccessPoints",
            "s3:ListAllMyBuckets",
            "s3:ListMultiRegionAccessPoints",
            "sns:GetTopicAttributes",
            "sns:ListTopics",
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetResourcePolicy",
            "secretsmanager:ListSecrets",
            "sqs:GetQueueAttributes",
            "sqs:ListQueues"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v9",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-07T19:55:15+00:00"
  },
  "AdministratorAccess-AWSElasticBeanstalk": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "acm:Describe*",
            "acm:List*",
            "autoscaling:Describe*",
            "cloudformation:Describe*",
            "cloudformation:Estimate*",
            "cloudformation:Get*",
            "cloudformation:List*",
            "cloudformation:Validate*",
            "cloudtrail:LookupEvents",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "codecommit:Get*",
            "codecommit:UploadArchive",
            "ec2:AllocateAddress",
            "ec2:AssociateAddress",
            "ec2:AuthorizeSecurityGroup*",
            "ec2:CreateLaunchTemplate*",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:DeleteLaunchTemplate*",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteTags",
            "ec2:Describe*",
            "ec2:DisassociateAddress",
            "ec2:ReleaseAddress",
            "ec2:RevokeSecurityGroup*",
            "ecs:CreateCluster",
            "ecs:DeRegisterTaskDefinition",
            "ecs:Describe*",
            "ecs:List*",
            "ecs:RegisterTaskDefinition",
            "elasticbeanstalk:*",
            "elasticloadbalancing:Describe*",
            "iam:GetRole",
            "iam:ListAttachedRolePolicies",
            "iam:ListInstanceProfiles",
            "iam:ListRolePolicies",
            "iam:ListRoles",
            "iam:ListServerCertificates",
            "logs:Describe*",
            "rds:Describe*",
            "s3:ListAllMyBuckets",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTopics",
            "sqs:ListQueues"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "autoscaling:*"
          ],
          "Resource": [
            "arn:aws:autoscaling:*:*:launchConfiguration:*:launchConfigurationName/awseb-e-*",
            "arn:aws:autoscaling:*:*:launchConfiguration:*:launchConfigurationName/eb-*",
            "arn:aws:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/awseb-e-*",
            "arn:aws:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/eb-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:CancelUpdateStack",
            "cloudformation:ContinueUpdateRollback",
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:GetTemplate",
            "cloudformation:ListStackResources",
            "cloudformation:SignalResource",
            "cloudformation:TagResource",
            "cloudformation:UntagResource",
            "cloudformation:UpdateStack"
          ],
          "Resource": [
            "arn:aws:cloudformation:*:*:stack/awseb-*",
            "arn:aws:cloudformation:*:*:stack/eb-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:DeleteAlarms",
            "cloudwatch:PutMetricAlarm"
          ],
          "Resource": [
            "arn:aws:cloudwatch:*:*:alarm:awseb-*",
            "arn:aws:cloudwatch:*:*:alarm:eb-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "codebuild:BatchGetBuilds",
            "codebuild:CreateProject",
            "codebuild:DeleteProject",
            "codebuild:StartBuild"
          ],
          "Resource": "arn:aws:codebuild:*:*:project/Elastic-Beanstalk-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:CreateTable",
            "dynamodb:DeleteTable",
            "dynamodb:DescribeTable",
            "dynamodb:TagResource"
          ],
          "Resource": [
            "arn:aws:dynamodb:*:*:table/awseb-e-*",
            "arn:aws:dynamodb:*:*:table/eb-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:RebootInstances",
            "ec2:TerminateInstances"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/aws:cloudformation:stack-id": [
                "arn:aws:cloudformation:*:*:stack/awseb-e-*",
                "arn:aws:cloudformation:*:*:stack/eb-*"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:RunInstances",
          "Resource": "*",
          "Condition": {
            "ArnLike": {
              "ec2:LaunchTemplate": "arn:aws:ec2:*:*:launch-template/*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ecs:DeleteCluster"
          ],
          "Resource": "arn:aws:ecs:*:*:cluster/awseb-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:*Rule",
            "elasticloadbalancing:*Tags",
            "elasticloadbalancing:SetRulePriorities",
            "elasticloadbalancing:SetSecurityGroups"
          ],
          "Resource": [
            "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*",
            "arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*",
            "arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:*"
          ],
          "Resource": [
            "arn:aws:elasticloadbalancing:*:*:targetgroup/awseb-*",
            "arn:aws:elasticloadbalancing:*:*:targetgroup/eb-*",
            "arn:aws:elasticloadbalancing:*:*:loadbalancer/awseb-*",
            "arn:aws:elasticloadbalancing:*:*:loadbalancer/eb-*",
            "arn:aws:elasticloadbalancing:*:*:loadbalancer/*/awseb-*/*",
            "arn:aws:elasticloadbalancing:*:*:loadbalancer/*/eb-*/*",
            "arn:aws:elasticloadbalancing:*:*:listener/awseb-*",
            "arn:aws:elasticloadbalancing:*:*:listener/eb-*",
            "arn:aws:elasticloadbalancing:*:*:listener/*/awseb-*/*/*",
            "arn:aws:elasticloadbalancing:*:*:listener/*/eb-*/*/*",
            "arn:aws:elasticloadbalancing:*:*:listener-rule/app/awseb-*/*/*/*",
            "arn:aws:elasticloadbalancing:*:*:listener-rule/app/eb-*/*/*/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:AddRoleToInstanceProfile",
            "iam:CreateInstanceProfile",
            "iam:CreateRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/aws-elasticbeanstalk*",
            "arn:aws:iam::*:instance-profile/aws-elasticbeanstalk*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:AttachRolePolicy"
          ],
          "Resource": "arn:aws:iam::*:role/aws-elasticbeanstalk*",
          "Condition": {
            "StringLike": {
              "iam:PolicyArn": [
                "arn:aws:iam::aws:policy/AWSElasticBeanstalk*",
                "arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalk*"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "elasticbeanstalk.amazonaws.com",
                "ec2.amazonaws.com",
                "ec2.amazonaws.com.cn",
                "autoscaling.amazonaws.com",
                "elasticloadbalancing.amazonaws.com",
                "ecs.amazonaws.com",
                "cloudformation.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling*",
            "arn:aws:iam::*:role/aws-service-role/elasticbeanstalk.amazonaws.com/AWSServiceRoleForElasticBeanstalk*",
            "arn:aws:iam::*:role/aws-service-role/elasticloadbalancing.amazonaws.com/AWSServiceRoleForElasticLoadBalancing*",
            "arn:aws:iam::*:role/aws-service-role/managedupdates.elasticbeanstalk.amazonaws.com/AWSServiceRoleForElasticBeanstalk*",
            "arn:aws:iam::*:role/aws-service-role/maintenance.elasticbeanstalk.amazonaws.com/AWSServiceRoleForElasticBeanstalk*"
          ],
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": [
                "autoscaling.amazonaws.com",
                "elasticbeanstalk.amazonaws.com",
                "elasticloadbalancing.amazonaws.com",
                "managedupdates.elasticbeanstalk.amazonaws.com",
                "maintenance.elasticbeanstalk.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:DeleteLogGroup",
            "logs:PutRetentionPolicy"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "rds:*DBSubnetGroup",
            "rds:AuthorizeDBSecurityGroupIngress",
            "rds:CreateDBInstance",
            "rds:CreateDBSecurityGroup",
            "rds:DeleteDBInstance",
            "rds:DeleteDBSecurityGroup",
            "rds:ModifyDBInstance",
            "rds:RestoreDBInstanceFromDBSnapshot"
          ],
          "Resource": [
            "arn:aws:rds:*:*:db:*",
            "arn:aws:rds:*:*:secgrp:awseb-e-*",
            "arn:aws:rds:*:*:secgrp:eb-*",
            "arn:aws:rds:*:*:snapshot:*",
            "arn:aws:rds:*:*:subgrp:awseb-e-*",
            "arn:aws:rds:*:*:subgrp:eb-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:Delete*",
            "s3:Get*",
            "s3:Put*"
          ],
          "Resource": "arn:aws:s3:::elasticbeanstalk-*/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:CreateBucket",
            "s3:GetBucket*",
            "s3:ListBucket",
            "s3:PutBucketPolicy"
          ],
          "Resource": "arn:aws:s3:::elasticbeanstalk-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sns:CreateTopic",
            "sns:DeleteTopic",
            "sns:GetTopicAttributes",
            "sns:Publish",
            "sns:SetTopicAttributes",
            "sns:Subscribe",
            "sns:Unsubscribe"
          ],
          "Resource": "arn:aws:sns:*:*:ElasticBeanstalkNotifications-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sqs:*QueueAttributes",
            "sqs:CreateQueue",
            "sqs:DeleteQueue",
            "sqs:SendMessage",
            "sqs:TagQueue"
          ],
          "Resource": [
            "arn:aws:sqs:*:*:awseb-e-*",
            "arn:aws:sqs:*:*:eb-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ecs:TagResource"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "ecs:CreateAction": [
                "CreateCluster",
                "RegisterTaskDefinition"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-23T23:45:23+00:00"
  },
  "AdministratorAccess-Amplify": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "CLICloudformationPolicy",
          "Effect": "Allow",
          "Action": [
            "cloudformation:CreateChangeSet",
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeChangeSet",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStackResource",
            "cloudformation:DescribeStackResources",
            "cloudformation:DescribeStacks",
            "cloudformation:ExecuteChangeSet",
            "cloudformation:GetTemplate",
            "cloudformation:UpdateStack",
            "cloudformation:ListStacks",
            "cloudformation:ListStackResources",
            "cloudformation:DeleteStackSet",
            "cloudformation:DescribeStackSet",
            "cloudformation:UpdateStackSet"
          ],
          "Resource": [
            "arn:aws:cloudformation:*:*:stack/amplify-*"
          ]
        },
        {
          "Sid": "CLIManageviaCFNPolicy",
          "Effect": "Allow",
          "Action": [
            "iam:ListRoleTags",
            "iam:TagRole",
            "iam:AttachRolePolicy",
            "iam:CreatePolicy",
            "iam:DeletePolicy",
            "iam:DeleteRole",
            "iam:DeleteRolePolicy",
            "iam:DetachRolePolicy",
            "iam:PutRolePolicy",
            "iam:UntagRole",
            "iam:UpdateRole",
            "iam:GetRole",
            "iam:GetPolicy",
            "iam:GetRolePolicy",
            "iam:PassRole",
            "iam:ListPolicyVersions",
            "iam:CreatePolicyVersion",
            "iam:DeletePolicyVersion",
            "iam:CreateRole",
            "iam:ListRolePolicies",
            "iam:PutRolePermissionsBoundary",
            "iam:DeleteRolePermissionsBoundary",
            "appsync:CreateApiKey",
            "appsync:CreateDataSource",
            "appsync:CreateFunction",
            "appsync:CreateResolver",
            "appsync:CreateType",
            "appsync:DeleteApiKey",
            "appsync:DeleteDataSource",
            "appsync:DeleteFunction",
            "appsync:DeleteResolver",
            "appsync:DeleteType",
            "appsync:GetDataSource",
            "appsync:GetFunction",
            "appsync:GetIntrospectionSchema",
            "appsync:GetResolver",
            "appsync:GetSchemaCreationStatus",
            "appsync:GetType",
            "appsync:GraphQL",
            "appsync:ListApiKeys",
            "appsync:ListDataSources",
            "appsync:ListFunctions",
            "appsync:ListGraphqlApis",
            "appsync:ListResolvers",
            "appsync:ListResolversByFunction",
            "appsync:ListTypes",
            "appsync:StartSchemaCreation",
            "appsync:UntagResource",
            "appsync:UpdateApiKey",
            "appsync:UpdateDataSource",
            "appsync:UpdateFunction",
            "appsync:UpdateResolver",
            "appsync:UpdateType",
            "appsync:TagResource",
            "appsync:CreateGraphqlApi",
            "appsync:DeleteGraphqlApi",
            "appsync:GetGraphqlApi",
            "appsync:ListTagsForResource",
            "appsync:UpdateGraphqlApi",
            "apigateway:DELETE",
            "apigateway:GET",
            "apigateway:PATCH",
            "apigateway:POST",
            "apigateway:PUT",
            "cognito-idp:CreateUserPool",
            "cognito-identity:CreateIdentityPool",
            "cognito-identity:DeleteIdentityPool",
            "cognito-identity:DescribeIdentity",
            "cognito-identity:DescribeIdentityPool",
            "cognito-identity:SetIdentityPoolRoles",
            "cognito-identity:GetIdentityPoolRoles",
            "cognito-identity:UpdateIdentityPool",
            "cognito-idp:CreateUserPoolClient",
            "cognito-idp:DeleteUserPool",
            "cognito-idp:DeleteUserPoolClient",
            "cognito-idp:DescribeUserPool",
            "cognito-idp:DescribeUserPoolClient",
            "cognito-idp:ListTagsForResource",
            "cognito-idp:ListUserPoolClients",
            "cognito-idp:UpdateUserPoolClient",
            "cognito-idp:CreateGroup",
            "cognito-idp:DeleteGroup",
            "cognito-identity:TagResource",
            "cognito-idp:TagResource",
            "cognito-idp:UpdateUserPool",
            "cognito-idp:SetUserPoolMfaConfig",
            "lambda:AddPermission",
            "lambda:CreateFunction",
            "lambda:DeleteFunction",
            "lambda:GetFunction",
            "lambda:GetFunctionConfiguration",
            "lambda:InvokeAsync",
            "lambda:InvokeFunction",
            "lambda:RemovePermission",
            "lambda:UpdateFunctionCode",
            "lambda:UpdateFunctionConfiguration",
            "lambda:ListTags",
            "lambda:TagResource",
            "lambda:UntagResource",
            "lambda:AddLayerVersionPermission",
            "lambda:CreateEventSourceMapping",
            "lambda:DeleteEventSourceMapping",
            "lambda:DeleteLayerVersion",
            "lambda:GetEventSourceMapping",
            "lambda:GetLayerVersion",
            "lambda:ListEventSourceMappings",
            "lambda:ListLayerVersions",
            "lambda:PublishLayerVersion",
            "lambda:RemoveLayerVersionPermission",
            "lambda:UpdateEventSourceMapping",
            "dynamodb:CreateTable",
            "dynamodb:DeleteItem",
            "dynamodb:DeleteTable",
            "dynamodb:DescribeContinuousBackups",
            "dynamodb:DescribeTable",
            "dynamodb:DescribeTimeToLive",
            "dynamodb:ListStreams",
            "dynamodb:PutItem",
            "dynamodb:TagResource",
            "dynamodb:ListTagsOfResource",
            "dynamodb:UntagResource",
            "dynamodb:UpdateContinuousBackups",
            "dynamodb:UpdateItem",
            "dynamodb:UpdateTable",
            "dynamodb:UpdateTimeToLive",
            "s3:CreateBucket",
            "s3:ListBucket",
            "s3:PutBucketAcl",
            "s3:PutBucketCORS",
            "s3:PutBucketNotification",
            "s3:PutBucketPolicy",
            "s3:PutBucketWebsite",
            "s3:PutObjectAcl",
            "cloudfront:CreateCloudFrontOriginAccessIdentity",
            "cloudfront:CreateDistribution",
            "cloudfront:DeleteCloudFrontOriginAccessIdentity",
            "cloudfront:DeleteDistribution",
            "cloudfront:GetCloudFrontOriginAccessIdentity",
            "cloudfront:GetCloudFrontOriginAccessIdentityConfig",
            "cloudfront:GetDistribution",
            "cloudfront:GetDistributionConfig",
            "cloudfront:TagResource",
            "cloudfront:UntagResource",
            "cloudfront:UpdateCloudFrontOriginAccessIdentity",
            "cloudfront:UpdateDistribution",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:ListRuleNamesByTarget",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "mobiletargeting:GetApp",
            "kinesis:AddTagsToStream",
            "kinesis:CreateStream",
            "kinesis:DeleteStream",
            "kinesis:DescribeStream",
            "kinesis:DescribeStreamSummary",
            "kinesis:ListTagsForStream",
            "kinesis:PutRecords",
            "es:AddTags",
            "es:CreateElasticsearchDomain",
            "es:DeleteElasticsearchDomain",
            "es:DescribeElasticsearchDomain",
            "es:UpdateElasticsearchDomainConfig",
            "s3:PutEncryptionConfiguration",
            "s3:PutBucketPublicAccessBlock"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "cloudformation.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "CLISDKCalls",
          "Effect": "Allow",
          "Action": [
            "appsync:GetIntrospectionSchema",
            "appsync:GraphQL",
            "appsync:UpdateApiKey",
            "appsync:ListApiKeys",
            "amplify:*",
            "amplifybackend:*",
            "amplifyuibuilder:*",
            "sts:AssumeRole",
            "mobiletargeting:*",
            "cognito-idp:AdminAddUserToGroup",
            "cognito-idp:AdminCreateUser",
            "cognito-idp:CreateGroup",
            "cognito-idp:DeleteGroup",
            "cognito-idp:DeleteUser",
            "cognito-idp:ListUsers",
            "cognito-idp:AdminGetUser",
            "cognito-idp:ListUsersInGroup",
            "cognito-idp:AdminDisableUser",
            "cognito-idp:AdminRemoveUserFromGroup",
            "cognito-idp:AdminResetUserPassword",
            "cognito-idp:AdminListGroupsForUser",
            "cognito-idp:ListGroups",
            "cognito-idp:AdminListUserAuthEvents",
            "cognito-idp:AdminDeleteUser",
            "cognito-idp:AdminConfirmSignUp",
            "cognito-idp:AdminEnableUser",
            "cognito-idp:AdminUpdateUserAttributes",
            "cognito-idp:DescribeIdentityProvider",
            "cognito-idp:DescribeUserPool",
            "cognito-idp:DeleteUserPool",
            "cognito-idp:DescribeUserPoolClient",
            "cognito-idp:CreateUserPool",
            "cognito-idp:CreateUserPoolClient",
            "cognito-idp:UpdateUserPool",
            "cognito-idp:AdminSetUserPassword",
            "cognito-idp:ListUserPools",
            "cognito-idp:ListUserPoolClients",
            "cognito-idp:ListIdentityProviders",
            "cognito-idp:GetUserPoolMfaConfig",
            "cognito-identity:GetIdentityPoolRoles",
            "cognito-identity:SetIdentityPoolRoles",
            "cognito-identity:CreateIdentityPool",
            "cognito-identity:DeleteIdentityPool",
            "cognito-identity:ListIdentityPools",
            "cognito-identity:DescribeIdentityPool",
            "dynamodb:DescribeTable",
            "dynamodb:ListTables",
            "lambda:GetFunction",
            "lambda:CreateFunction",
            "lambda:AddPermission",
            "lambda:DeleteFunction",
            "lambda:DeleteLayerVersion",
            "lambda:InvokeFunction",
            "lambda:ListLayerVersions",
            "iam:PutRolePolicy",
            "iam:CreatePolicy",
            "iam:AttachRolePolicy",
            "iam:ListPolicyVersions",
            "iam:ListAttachedRolePolicies",
            "iam:CreateRole",
            "iam:PassRole",
            "iam:ListRolePolicies",
            "iam:DeleteRolePolicy",
            "iam:CreatePolicyVersion",
            "iam:DeletePolicyVersion",
            "iam:DeleteRole",
            "iam:DetachRolePolicy",
            "cloudformation:ListStacks",
            "cloudformation:DescribeStacks",
            "sns:CreateSMSSandboxPhoneNumber",
            "sns:GetSMSSandboxAccountStatus",
            "sns:VerifySMSSandboxPhoneNumber",
            "sns:DeleteSMSSandboxPhoneNumber",
            "sns:ListSMSSandboxPhoneNumbers",
            "sns:ListOriginationNumbers",
            "rekognition:DescribeCollection",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "lex:GetBot",
            "lex:GetBuiltinIntent",
            "lex:GetBuiltinIntents",
            "lex:GetBuiltinSlotTypes",
            "cloudformation:GetTemplateSummary",
            "codecommit:GitPull",
            "cloudfront:GetCloudFrontOriginAccessIdentity",
            "cloudfront:GetCloudFrontOriginAccessIdentityConfig",
            "polly:DescribeVoices"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AmplifySSMCalls",
          "Effect": "Allow",
          "Action": [
            "ssm:PutParameter",
            "ssm:DeleteParameter",
            "ssm:GetParametersByPath",
            "ssm:GetParameters",
            "ssm:GetParameter",
            "ssm:DeleteParameters"
          ],
          "Resource": "arn:aws:ssm:*:*:parameter/amplify/*"
        },
        {
          "Sid": "GeoPowerUser",
          "Effect": "Allow",
          "Action": [
            "geo:*"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AmplifyEcrSDKCalls",
          "Effect": "Allow",
          "Action": [
            "ecr:DescribeRepositories"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AmplifyStorageSDKCalls",
          "Effect": "Allow",
          "Action": [
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:DeleteBucketPolicy",
            "s3:DeleteBucketWebsite",
            "s3:DeleteObject",
            "s3:DeleteObjectVersion",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ListBucketVersions",
            "s3:PutBucketAcl",
            "s3:PutBucketCORS",
            "s3:PutBucketNotification",
            "s3:PutBucketPolicy",
            "s3:PutBucketVersioning",
            "s3:PutBucketWebsite",
            "s3:PutEncryptionConfiguration",
            "s3:PutLifecycleConfiguration",
            "s3:PutObject",
            "s3:PutObjectAcl"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AmplifySSRCalls",
          "Effect": "Allow",
          "Action": [
            "cloudfront:CreateCloudFrontOriginAccessIdentity",
            "cloudfront:CreateDistribution",
            "cloudfront:CreateInvalidation",
            "cloudfront:GetDistribution",
            "cloudfront:GetDistributionConfig",
            "cloudfront:ListCloudFrontOriginAccessIdentities",
            "cloudfront:ListDistributions",
            "cloudfront:ListDistributionsByLambdaFunction",
            "cloudfront:ListDistributionsByWebACLId",
            "cloudfront:ListFieldLevelEncryptionConfigs",
            "cloudfront:ListFieldLevelEncryptionProfiles",
            "cloudfront:ListInvalidations",
            "cloudfront:ListPublicKeys",
            "cloudfront:ListStreamingDistributions",
            "cloudfront:UpdateDistribution",
            "cloudfront:TagResource",
            "cloudfront:UntagResource",
            "cloudfront:ListTagsForResource",
            "cloudfront:DeleteDistribution",
            "iam:AttachRolePolicy",
            "iam:CreateRole",
            "iam:CreateServiceLinkedRole",
            "iam:GetRole",
            "iam:PutRolePolicy",
            "iam:PassRole",
            "lambda:CreateFunction",
            "lambda:EnableReplication",
            "lambda:DeleteFunction",
            "lambda:GetFunction",
            "lambda:GetFunctionConfiguration",
            "lambda:PublishVersion",
            "lambda:UpdateFunctionCode",
            "lambda:UpdateFunctionConfiguration",
            "lambda:ListTags",
            "lambda:TagResource",
            "lambda:UntagResource",
            "route53:ChangeResourceRecordSets",
            "route53:ListHostedZonesByName",
            "route53:ListResourceRecordSets",
            "s3:CreateBucket",
            "s3:GetAccelerateConfiguration",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:PutAccelerateConfiguration",
            "s3:PutBucketPolicy",
            "s3:PutObject",
            "s3:PutBucketTagging",
            "s3:GetBucketTagging",
            "lambda:ListEventSourceMappings",
            "lambda:CreateEventSourceMapping",
            "iam:UpdateAssumeRolePolicy",
            "iam:DeleteRolePolicy",
            "sqs:CreateQueue",
            "sqs:DeleteQueue",
            "sqs:GetQueueAttributes",
            "sqs:SetQueueAttributes",
            "amplify:GetApp",
            "amplify:GetBranch",
            "amplify:UpdateApp",
            "amplify:UpdateBranch"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AmplifySSRViewLogGroups",
          "Effect": "Allow",
          "Action": "logs:DescribeLogGroups",
          "Resource": "arn:aws:logs:*:*:log-group:*"
        },
        {
          "Sid": "AmplifySSRCreateLogGroup",
          "Effect": "Allow",
          "Action": "logs:CreateLogGroup",
          "Resource": "arn:aws:logs:*:*:log-group:/aws/amplify/*"
        },
        {
          "Sid": "AmplifySSRPushLogs",
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:PutLogEvents"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/amplify/*:log-stream:*"
        }
      ]
    },
    "VersionId": "v11",
    "IsDefaultVersion": true,
    "CreateDate": "2023-05-31T17:08:15+00:00"
  },
  "AdministratorAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "*",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:39:46+00:00"
  },
  "AlexaForBusinessDeviceSetup": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "a4b:RegisterDevice",
            "a4b:CompleteRegistration",
            "a4b:SearchDevices",
            "a4b:SearchNetworkProfiles",
            "a4b:GetNetworkProfile",
            "a4b:PutDeviceSetupEvents"
          ],
          "Resource": "*"
        },
        {
          "Sid": "A4bDeviceSetupAccess",
          "Effect": "Allow",
          "Action": [
            "secretsmanager:GetSecretValue"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:secret:A4BNetworkProfile*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2019-05-20T21:05:39+00:00"
  },
  "AlexaForBusinessFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "a4b:*",
            "kms:DescribeKey"
          ],
          "Resource": "*"
        },
        {
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Effect": "Allow",
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": [
                "*a4b.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:DeleteServiceLinkedRole",
            "iam:GetServiceLinkedRoleDeletionStatus"
          ],
          "Resource": "arn:aws:iam::*:role/aws-service-role/*a4b.amazonaws.com/AWSServiceRoleForAlexaForBusiness*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:GetSecretValue",
            "secretsmanager:DeleteSecret",
            "secretsmanager:UpdateSecret"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:secret:A4B*"
        },
        {
          "Effect": "Allow",
          "Action": "secretsmanager:CreateSecret",
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "secretsmanager:Name": "A4B*"
            }
          }
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2020-07-01T21:01:55+00:00"
  },
  "AlexaForBusinessGatewayExecution": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "a4b:Send*",
            "a4b:Get*"
          ],
          "Resource": "arn:aws:a4b:*:*:gateway/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sqs:ReceiveMessage",
            "sqs:DeleteMessage"
          ],
          "Resource": [
            "arn:aws:sqs:*:*:dd-*",
            "arn:aws:sqs:*:*:sd-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "a4b:List*",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:PutLogEvents"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2017-11-30T16:47:19+00:00"
  },
  "AlexaForBusinessLifesizeDelegatedAccessPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "a4b:DisassociateDeviceFromRoom",
            "a4b:DeleteDevice",
            "a4b:UpdateDevice",
            "a4b:GetDevice"
          ],
          "Resource": [
            "arn:aws:a4b:us-east-1:*:device/*/*:A2IWO7UEGWV4TL"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "a4b:RegisterAVSDevice"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringEquals": {
              "a4b:amazonId": [
                "A2IWO7UEGWV4TL"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "a4b:SearchDevices"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "ForAllValues:StringLike": {
              "a4b:filters_deviceType": [
                "*A2IWO7UEGWV4TL"
              ]
            },
            "Null": {
              "a4b:filters_deviceType": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "a4b:AssociateDeviceWithRoom"
          ],
          "Resource": [
            "arn:aws:a4b:us-east-1:*:device/*/*:A2IWO7UEGWV4TL",
            "arn:aws:a4b:us-east-1:*:room/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "a4b:GetRoom",
            "a4b:GetAddressBook",
            "a4b:SearchRooms",
            "a4b:CreateContact",
            "a4b:CreateRoom",
            "a4b:UpdateContact",
            "a4b:ListConferenceProviders",
            "a4b:DeleteRoom",
            "a4b:CreateAddressBook",
            "a4b:DisassociateContactFromAddressBook",
            "a4b:CreateConferenceProvider",
            "a4b:PutConferencePreference",
            "a4b:DeleteAddressBook",
            "a4b:AssociateContactWithAddressBook",
            "a4b:DeleteContact",
            "a4b:SearchProfiles",
            "a4b:UpdateProfile",
            "a4b:GetContact"
          ],
          "Resource": "*"
        },
        {
          "Action": [
            "kms:DescribeKey"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:kms:*:*:key/*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2020-06-12T20:31:59+00:00"
  },
  "AlexaForBusinessNetworkProfileServicePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "A4bPcaTagAccess",
          "Action": [
            "acm-pca:GetCertificate",
            "acm-pca:IssueCertificate",
            "acm-pca:RevokeCertificate"
          ],
          "Effect": "Allow",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/a4b": "enabled"
            }
          }
        },
        {
          "Sid": "A4bNetworkProfileAccess",
          "Effect": "Allow",
          "Action": [
            "secretsmanager:GetSecretValue"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:secret:A4BNetworkProfile*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2019-04-05T21:57:56+00:00"
  },
  "AlexaForBusinessPolyDelegatedAccessPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "a4b:DisassociateDeviceFromRoom",
            "a4b:DeleteDevice",
            "a4b:UpdateDevice",
            "a4b:GetDevice"
          ],
          "Effect": "Allow",
          "Resource": [
            "arn:aws:a4b:us-east-1:*:device/*/*:A238TWV36W3S92",
            "arn:aws:a4b:us-east-1:*:device/*/*:A1FUZ1SC53VJXD"
          ]
        },
        {
          "Action": [
            "a4b:RegisterAVSDevice"
          ],
          "Effect": "Allow",
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringEquals": {
              "a4b:amazonId": [
                "A238TWV36W3S92",
                "A1FUZ1SC53VJXD"
              ]
            }
          }
        },
        {
          "Action": [
            "a4b:SearchDevices"
          ],
          "Effect": "Allow",
          "Resource": [
            "*"
          ]
        },
        {
          "Action": [
            "a4b:AssociateDeviceWithRoom"
          ],
          "Effect": "Allow",
          "Resource": [
            "arn:aws:a4b:us-east-1:*:device/*/*:A238TWV36W3S92",
            "arn:aws:a4b:us-east-1:*:device/*/*:A1FUZ1SC53VJXD",
            "arn:aws:a4b:us-east-1:*:room/*"
          ]
        },
        {
          "Action": [
            "a4b:GetRoom",
            "a4b:SearchRooms",
            "a4b:CreateRoom",
            "a4b:GetProfile",
            "a4b:SearchSkillGroups",
            "a4b:DisassociateSkillGroupFromRoom",
            "a4b:AssociateSkillGroupWithRoom",
            "a4b:GetSkillGroup",
            "a4b:SearchProfiles",
            "a4b:GetAddressBook",
            "a4b:UpdateRoom"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-10-16T19:48:45+00:00"
  },
  "AlexaForBusinessReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "a4b:Get*",
            "a4b:List*",
            "a4b:Search*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2019-11-20T00:25:33+00:00"
  },
  "AmazonAPIGatewayAdministrator": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "apigateway:*"
          ],
          "Resource": "arn:aws:apigateway:*::/*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-07-09T17:34:45+00:00"
  },
  "AmazonAPIGatewayInvokeFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "execute-api:Invoke",
            "execute-api:ManageConnections"
          ],
          "Resource": "arn:aws:execute-api:*:*:*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2018-12-18T18:25:10+00:00"
  },
  "AmazonAPIGatewayPushToCloudWatchLogs": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "logs:GetLogEvents",
            "logs:FilterLogEvents"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-11-11T23:41:46+00:00"
  },
  "AmazonAppFlowFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "appflow:*",
          "Resource": "*"
        },
        {
          "Sid": "ListRolesForRedshift",
          "Effect": "Allow",
          "Action": "iam:ListRoles",
          "Resource": "*"
        },
        {
          "Sid": "KMSListAccess",
          "Effect": "Allow",
          "Action": [
            "kms:ListKeys",
            "kms:DescribeKey",
            "kms:ListAliases"
          ],
          "Resource": "*"
        },
        {
          "Sid": "KMSGrantAccess",
          "Effect": "Allow",
          "Action": [
            "kms:CreateGrant"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "kms:ViaService": "appflow.*.amazonaws.com"
            },
            "Bool": {
              "kms:GrantIsForAWSResource": "true"
            }
          }
        },
        {
          "Sid": "KMSListGrantAccess",
          "Effect": "Allow",
          "Action": [
            "kms:ListGrants"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "kms:ViaService": "appflow.*.amazonaws.com"
            }
          }
        },
        {
          "Sid": "S3ReadAccess",
          "Effect": "Allow",
          "Action": [
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:GetBucketLocation",
            "s3:GetBucketPolicy"
          ],
          "Resource": "*"
        },
        {
          "Sid": "S3PutBucketPolicyAccess",
          "Effect": "Allow",
          "Action": [
            "s3:PutBucketPolicy"
          ],
          "Resource": "arn:aws:s3:::appflow-*"
        },
        {
          "Sid": "SecretsManagerCreateSecretAccess",
          "Effect": "Allow",
          "Action": "secretsmanager:CreateSecret",
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "secretsmanager:Name": "appflow!*"
            },
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "appflow.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "SecretsManagerPutResourcePolicyAccess",
          "Effect": "Allow",
          "Action": [
            "secretsmanager:PutResourcePolicy"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "appflow.amazonaws.com"
              ]
            },
            "StringEqualsIgnoreCase": {
              "secretsmanager:ResourceTag/aws:secretsmanager:owningService": "appflow"
            }
          }
        },
        {
          "Sid": "LambdaListFunctions",
          "Effect": "Allow",
          "Action": [
            "lambda:ListFunctions"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2022-02-28T23:11:23+00:00"
  },
  "AmazonAppFlowReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "appflow:DescribeConnector",
            "appflow:DescribeConnectors",
            "appflow:DescribeConnectorProfiles",
            "appflow:DescribeFlows",
            "appflow:DescribeFlowExecution",
            "appflow:DescribeConnectorFields",
            "appflow:ListConnectors",
            "appflow:ListConnectorFields",
            "appflow:ListTagsForResource"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-02-28T20:42:58+00:00"
  },
  "AmazonAppStreamFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "appstream:*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "application-autoscaling:DeleteScalingPolicy",
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingPolicies",
            "application-autoscaling:PutScalingPolicy",
            "application-autoscaling:RegisterScalableTarget",
            "application-autoscaling:DescribeScheduledActions",
            "application-autoscaling:PutScheduledAction",
            "application-autoscaling:DeleteScheduledAction"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:PutMetricAlarm"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpcEndpoints"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": "iam:ListRoles",
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": "iam:PassRole",
          "Effect": "Allow",
          "Resource": "arn:aws:iam::*:role/service-role/ApplicationAutoScalingForAmazonAppStreamAccess",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": "application-autoscaling.amazonaws.com"
            }
          }
        },
        {
          "Action": "iam:CreateServiceLinkedRole",
          "Effect": "Allow",
          "Resource": "arn:aws:iam::*:role/aws-service-role/appstream.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_AppStreamFleet",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "appstream.application-autoscaling.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v6",
    "IsDefaultVersion": true,
    "CreateDate": "2020-08-28T17:24:35+00:00"
  },
  "AmazonAppStreamPCAAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "acm-pca:IssueCertificate",
            "acm-pca:GetCertificate",
            "acm-pca:DescribeCertificateAuthority"
          ],
          "Resource": "arn:*:acm-pca:*:*:*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/euc-private-ca": "*"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-10-24T17:05:03+00:00"
  },
  "AmazonAppStreamReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "appstream:Get*",
            "appstream:List*",
            "appstream:Describe*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2016-12-07T21:00:06+00:00"
  },
  "AmazonAppStreamServiceAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeVpcs",
            "ec2:DescribeSubnets",
            "ec2:DescribeAvailabilityZones",
            "ec2:CreateNetworkInterface",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeSubnets",
            "ec2:AssociateAddress",
            "ec2:DisassociateAddress",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeVpcEndpoints",
            "s3:ListAllMyBuckets",
            "ds:DescribeDirectories"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:CreateBucket",
            "s3:ListBucket",
            "s3:GetObject",
            "s3:PutObject",
            "s3:DeleteObject",
            "s3:GetObjectVersion",
            "s3:DeleteObjectVersion",
            "s3:GetBucketPolicy",
            "s3:PutBucketPolicy",
            "s3:PutEncryptionConfiguration"
          ],
          "Resource": [
            "arn:aws:s3:::appstream2-36fb080bb8-*",
            "arn:aws:s3:::appstream-app-settings-*",
            "arn:aws:s3:::appstream-logs-*"
          ]
        }
      ]
    },
    "VersionId": "v8",
    "IsDefaultVersion": true,
    "CreateDate": "2020-06-26T16:33:54+00:00"
  },
  "AmazonAthenaFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "athena:*"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "glue:CreateDatabase",
            "glue:DeleteDatabase",
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:UpdateDatabase",
            "glue:CreateTable",
            "glue:DeleteTable",
            "glue:BatchDeleteTable",
            "glue:UpdateTable",
            "glue:GetTable",
            "glue:GetTables",
            "glue:BatchCreatePartition",
            "glue:CreatePartition",
            "glue:DeletePartition",
            "glue:BatchDeletePartition",
            "glue:UpdatePartition",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:BatchGetPartition"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:ListBucketMultipartUploads",
            "s3:ListMultipartUploadParts",
            "s3:AbortMultipartUpload",
            "s3:CreateBucket",
            "s3:PutObject",
            "s3:PutBucketPublicAccessBlock"
          ],
          "Resource": [
            "arn:aws:s3:::aws-athena-query-results-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:ListBucket"
          ],
          "Resource": [
            "arn:aws:s3:::athena-examples*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListBucket",
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "sns:ListTopics",
            "sns:GetTopicAttributes"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:GetMetricData"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "lakeformation:GetDataAccess"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "pricing:GetProducts"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v9",
    "IsDefaultVersion": true,
    "CreateDate": "2023-01-24T16:59:23+00:00"
  },
  "AmazonAugmentedAIFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "sagemaker:*HumanLoop",
            "sagemaker:*HumanLoops",
            "sagemaker:*FlowDefinition",
            "sagemaker:*FlowDefinitions",
            "sagemaker:*HumanTaskUi",
            "sagemaker:*HumanTaskUis"
          ],
          "Resource": "*",
          "Condition": {
            "StringEqualsIfExists": {
              "sagemaker:WorkteamType": [
                "private-crowd",
                "vendor-crowd"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "arn:aws:iam::*:role/*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "sagemaker.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-12-03T16:21:56+00:00"
  },
  "AmazonAugmentedAIHumanLoopFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "sagemaker:*HumanLoop",
            "sagemaker:*HumanLoops"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-12-03T16:20:47+00:00"
  },
  "AmazonAugmentedAIIntegratedAPIAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "sagemaker:*HumanLoop",
            "sagemaker:*HumanLoops",
            "sagemaker:*FlowDefinition",
            "sagemaker:*FlowDefinitions",
            "sagemaker:*HumanTaskUi",
            "sagemaker:*HumanTaskUis"
          ],
          "Resource": "*",
          "Condition": {
            "StringEqualsIfExists": {
              "sagemaker:WorkteamType": [
                "private-crowd",
                "vendor-crowd"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "textract:AnalyzeDocument"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "rekognition:DetectModerationLabels"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "arn:aws:iam::*:role/*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "sagemaker.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-04-22T20:47:32+00:00"
  },
  "AmazonBraketFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:PutObject",
            "s3:ListBucket",
            "s3:CreateBucket",
            "s3:PutBucketPublicAccessBlock",
            "s3:PutBucketPolicy"
          ],
          "Resource": "arn:aws:s3:::amazon-braket-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListAllMyBuckets",
            "servicequotas:GetServiceQuota",
            "cloudwatch:GetMetricData"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ecr:GetDownloadUrlForLayer",
            "ecr:BatchGetImage",
            "ecr:BatchCheckLayerAvailability"
          ],
          "Resource": "arn:aws:ecr:*:*:repository/amazon-braket*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ecr:GetAuthorizationToken"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:Describe*",
            "logs:Get*",
            "logs:List*",
            "logs:StartQuery",
            "logs:StopQuery",
            "logs:TestMetricFilter",
            "logs:FilterLogEvents"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/braket*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:ListRoles",
            "iam:ListRolePolicies",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:ListAttachedRolePolicies"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sagemaker:ListNotebookInstances"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sagemaker:CreatePresignedNotebookInstanceUrl",
            "sagemaker:CreateNotebookInstance",
            "sagemaker:DeleteNotebookInstance",
            "sagemaker:DescribeNotebookInstance",
            "sagemaker:StartNotebookInstance",
            "sagemaker:StopNotebookInstance",
            "sagemaker:UpdateNotebookInstance",
            "sagemaker:ListTags",
            "sagemaker:AddTags",
            "sagemaker:DeleteTags"
          ],
          "Resource": "arn:aws:sagemaker:*:*:notebook-instance/amazon-braket-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sagemaker:DescribeNotebookInstanceLifecycleConfig",
            "sagemaker:CreateNotebookInstanceLifecycleConfig",
            "sagemaker:DeleteNotebookInstanceLifecycleConfig",
            "sagemaker:ListNotebookInstanceLifecycleConfigs",
            "sagemaker:UpdateNotebookInstanceLifecycleConfig"
          ],
          "Resource": "arn:aws:sagemaker:*:*:notebook-instance-lifecycle-config/amazon-braket-*"
        },
        {
          "Effect": "Allow",
          "Action": "braket:*",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/braket.amazonaws.com/AWSServiceRoleForAmazonBraket*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "braket.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "arn:aws:iam::*:role/service-role/AmazonBraketServiceSageMakerNotebookRole*",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": [
                "sagemaker.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "arn:aws:iam::*:role/service-role/AmazonBraketJobsExecutionRole*",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": [
                "braket.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:GetQueryResults"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:PutLogEvents",
            "logs:CreateLogStream",
            "logs:CreateLogGroup"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/braket*"
        },
        {
          "Effect": "Allow",
          "Action": "cloudwatch:PutMetricData",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": "/aws/braket"
            }
          }
        }
      ]
    },
    "VersionId": "v6",
    "IsDefaultVersion": true,
    "CreateDate": "2023-04-19T16:25:29+00:00"
  },
  "AmazonBraketJobsExecutionPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:PutObject",
            "s3:ListBucket",
            "s3:CreateBucket",
            "s3:PutBucketPublicAccessBlock",
            "s3:PutBucketPolicy"
          ],
          "Resource": "arn:aws:s3:::amazon-braket-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ecr:GetDownloadUrlForLayer",
            "ecr:BatchGetImage",
            "ecr:BatchCheckLayerAvailability"
          ],
          "Resource": "arn:aws:ecr:*:*:repository/amazon-braket*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ecr:GetAuthorizationToken"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "braket:CancelJob",
            "braket:CancelQuantumTask",
            "braket:CreateJob",
            "braket:CreateQuantumTask",
            "braket:GetDevice",
            "braket:GetJob",
            "braket:GetQuantumTask",
            "braket:SearchDevices",
            "braket:SearchJobs",
            "braket:SearchQuantumTasks",
            "braket:ListTagsForResource",
            "braket:TagResource",
            "braket:UntagResource"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "arn:aws:iam::*:role/service-role/AmazonBraketJobsExecutionRole*",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": [
                "braket.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:ListRoles"
          ],
          "Resource": "arn:aws:iam::*:role/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:GetQueryResults"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:PutLogEvents",
            "logs:CreateLogStream",
            "logs:CreateLogGroup",
            "logs:GetLogEvents",
            "logs:DescribeLogStreams",
            "logs:StartQuery",
            "logs:StopQuery"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/braket*"
        },
        {
          "Effect": "Allow",
          "Action": "cloudwatch:PutMetricData",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": "/aws/braket"
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2021-11-28T05:34:55+00:00"
  },
  "AmazonBraketServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:PutObject",
            "s3:GetObject",
            "s3:ListBucket"
          ],
          "Resource": "arn:aws:s3:::amazon-braket-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:PutLogEvents",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:CreateLogGroup",
            "logs:DescribeLogGroups"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/braket:*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2020-08-06T20:10:42+00:00"
  },
  "AmazonChimeFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "chime:*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "s3:ListBucket",
            "s3:ListAllMyBuckets",
            "s3:GetBucketAcl",
            "s3:GetBucketLocation",
            "s3:GetBucketLogging",
            "s3:GetBucketVersioning",
            "s3:GetBucketWebsite"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "logs:CreateLogDelivery",
            "logs:DeleteLogDelivery",
            "logs:GetLogDelivery",
            "logs:ListLogDeliveries",
            "logs:DescribeResourcePolicies",
            "logs:PutResourcePolicy",
            "logs:CreateLogGroup",
            "logs:DescribeLogGroups"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sns:CreateTopic",
            "sns:GetTopicAttributes"
          ],
          "Resource": [
            "arn:aws:sns:*:*:ChimeVoiceConnector-Streaming*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "sqs:GetQueueAttributes",
            "sqs:CreateQueue"
          ],
          "Resource": [
            "arn:aws:sqs:*:*:ChimeVoiceConnector-Streaming*"
          ]
        },
        {
          "Action": [
            "kinesis:ListStreams"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kinesis:DescribeStream"
          ],
          "Resource": [
            "arn:aws:kinesis:*:*:stream/chime-chat-*",
            "arn:aws:kinesis:*:*:stream/chime-messaging-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetEncryptionConfiguration",
            "s3:ListBucket"
          ],
          "Resource": [
            "arn:aws:s3:::chime-chat-*"
          ]
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-14T21:00:52+00:00"
  },
  "AmazonChimeReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "chime:List*",
            "chime:Get*",
            "chime:Describe*",
            "chime:SearchAvailablePhoneNumbers"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v10",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-14T20:53:57+00:00"
  },
  "AmazonChimeSDK": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "chime:CreateMeeting",
            "chime:CreateMeetingWithAttendees",
            "chime:DeleteMeeting",
            "chime:GetMeeting",
            "chime:ListMeetings",
            "chime:CreateAttendee",
            "chime:BatchCreateAttendee",
            "chime:DeleteAttendee",
            "chime:GetAttendee",
            "chime:ListAttendees",
            "chime:ListAttendeeTags",
            "chime:ListMeetingTags",
            "chime:ListTagsForResource",
            "chime:TagAttendee",
            "chime:TagMeeting",
            "chime:TagResource",
            "chime:UntagAttendee",
            "chime:UntagMeeting",
            "chime:UntagResource",
            "chime:StartMeetingTranscription",
            "chime:StopMeetingTranscription",
            "chime:CreateMediaCapturePipeline",
            "chime:CreateMediaConcatenationPipeline",
            "chime:CreateMediaLiveConnectorPipeline",
            "chime:DeleteMediaCapturePipeline",
            "chime:DeleteMediaPipeline",
            "chime:GetMediaCapturePipeline",
            "chime:GetMediaPipeline",
            "chime:ListMediaCapturePipelines",
            "chime:ListMediaPipelines"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2023-01-10T18:05:12+00:00"
  },
  "AmazonChimeSDKMediaPipelinesServiceLinkedRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "kinesisvideo:GetDataEndpoint",
            "kinesisvideo:PutMedia",
            "kinesisvideo:UpdateDataRetention",
            "kinesisvideo:DescribeStream",
            "kinesisvideo:CreateStream"
          ],
          "Resource": [
            "arn:aws:kinesisvideo:*:*:stream/ChimeMediaPipelines-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "kinesisvideo:ListStreams"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "chime:GetMeeting",
            "chime:CreateAttendee",
            "chime:DeleteAttendee"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-09-07T20:08:32+00:00"
  },
  "AmazonChimeSDKMessagingServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "kms:GenerateDataKey"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "kms:ViaService": [
                "kinesis.*.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "kinesis:PutRecord",
            "kinesis:PutRecords",
            "kinesis:DescribeStream"
          ],
          "Resource": [
            "arn:aws:kinesis:*:*:stream/chime-messaging-*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-03T01:43:49+00:00"
  },
  "AmazonChimeServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/aws-service-role/chime.amazonaws.com/AWSServiceRoleForAmazonChime"
          ],
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "chime.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-09-30T22:25:06+00:00"
  },
  "AmazonChimeTranscriptionServiceLinkedRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "transcribe:StartStreamTranscription",
            "transcribe:StartMedicalStreamTranscription"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-08-04T21:47:41+00:00"
  },
  "AmazonChimeUserManagement": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "chime:ListAccounts",
            "chime:GetAccount",
            "chime:GetAccountSettings",
            "chime:UpdateAccountSettings",
            "chime:ListUsers",
            "chime:GetUser",
            "chime:GetUserByEmail",
            "chime:InviteUsers",
            "chime:InviteUsersFromProvider",
            "chime:SuspendUsers",
            "chime:ActivateUsers",
            "chime:UpdateUserLicenses",
            "chime:ResetPersonalPIN",
            "chime:LogoutUser",
            "chime:ListDomains",
            "chime:GetDomain",
            "chime:ListDirectories",
            "chime:ListGroups",
            "chime:SubmitSupportRequest",
            "chime:ListDelegates",
            "chime:ListAccountUsageReportData",
            "chime:GetMeetingDetail",
            "chime:ListMeetingEvents",
            "chime:ListMeetingsReportData",
            "chime:GetUserActivityReportData",
            "chime:UpdateUser",
            "chime:BatchUpdateUser",
            "chime:BatchSuspendUser",
            "chime:BatchUnsuspendUser",
            "chime:AssociatePhoneNumberWithUser",
            "chime:DisassociatePhoneNumberFromUser",
            "chime:GetPhoneNumber",
            "chime:ListPhoneNumbers",
            "chime:GetUserSettings",
            "chime:UpdateUserSettings",
            "chime:CreateUser",
            "chime:AssociateSigninDelegateGroupsWithAccount",
            "chime:DisassociateSigninDelegateGroupsFromAccount"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v8",
    "IsDefaultVersion": true,
    "CreateDate": "2020-02-18T19:26:10+00:00"
  },
  "AmazonChimeVoiceConnectorServiceLinkedRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "chime:GetVoiceConnector*"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "kinesisvideo:GetDataEndpoint",
            "kinesisvideo:PutMedia",
            "kinesisvideo:UpdateDataRetention",
            "kinesisvideo:DescribeStream",
            "kinesisvideo:CreateStream"
          ],
          "Resource": [
            "arn:aws:kinesisvideo:*:*:stream/ChimeVoiceConnector-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "kinesisvideo:ListStreams"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "SNS:Publish"
          ],
          "Resource": [
            "arn:aws:sns:*:*:ChimeVoiceConnector-Streaming*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "sqs:SendMessage"
          ],
          "Resource": [
            "arn:aws:sqs:*:*:ChimeVoiceConnector-Streaming*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "polly:SynthesizeSpeech"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "chime:CreateMediaInsightsPipeline",
            "chime:GetMediaInsightsPipelineConfiguration"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2023-04-14T21:49:14+00:00"
  },
  "AmazonCloudDirectoryFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "clouddirectory:*"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2017-02-25T00:41:39+00:00"
  },
  "AmazonCloudDirectoryReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "clouddirectory:List*",
            "clouddirectory:Get*",
            "clouddirectory:LookupPolicy",
            "clouddirectory:BatchRead"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2017-02-28T23:42:06+00:00"
  },
  "AmazonCloudWatchEvidentlyFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "evidently:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:ListRoles"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:GetRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/service-role/CloudWatchRUMEvidentlyRole-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets"
          ],
          "Resource": "arn:aws:s3:::*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:DescribeAlarmHistory",
            "cloudwatch:DescribeAlarmsForMetric",
            "cloudwatch:ListTagsForResource"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:DescribeAlarms",
            "cloudwatch:TagResource",
            "cloudwatch:UnTagResource"
          ],
          "Resource": [
            "arn:aws:cloudwatch:*:*:alarm:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudtrail:LookupEvents"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricAlarm"
          ],
          "Resource": [
            "arn:aws:cloudwatch:*:*:alarm:Evidently-Alarm-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "sns:ListTopics"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "sns:CreateTopic",
            "sns:Subscribe",
            "sns:ListSubscriptionsByTopic"
          ],
          "Resource": [
            "arn:*:sns:*:*:Evidently-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:DescribeLogGroups"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-11-29T15:10:14+00:00"
  },
  "AmazonCloudWatchEvidentlyReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "evidently:GetExperiment",
            "evidently:GetFeature",
            "evidently:GetLaunch",
            "evidently:GetProject",
            "evidently:ListExperiments",
            "evidently:ListFeatures",
            "evidently:ListLaunches",
            "evidently:ListProjects"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-11-29T15:08:38+00:00"
  },
  "AmazonCloudWatchEvidentlyServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "appconfig:StartDeployment",
          "Resource": [
            "arn:aws:appconfig:*:*:application/*",
            "arn:aws:appconfig:*:*:deploymentstrategy/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/DeployedBy": "Evidently"
            }
          }
        },
        {
          "Effect": "Deny",
          "Action": "appconfig:StartDeployment",
          "Resource": "arn:aws:appconfig:*:*:application/*/configurationprofile/*",
          "Condition": {
            "StringNotEquals": {
              "aws:ResourceTag/Owner": "Evidently"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "appconfig:TagResource",
          "Resource": "arn:aws:appconfig:*:*:application/*/environment/*/deployment/*",
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/DeployedBy": "Evidently"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "appconfig:StopDeployment",
          "Resource": "arn:aws:appconfig:*:*:application/*"
        },
        {
          "Effect": "Deny",
          "Action": "appconfig:StopDeployment",
          "Resource": "arn:aws:appconfig:*:*:application/*/environment/*/deployment/*",
          "Condition": {
            "StringNotEquals": {
              "aws:ResourceTag/DeployedBy": "Evidently"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "appconfig:ListDeployments",
          "Resource": "arn:aws:appconfig:*:*:application/*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-09-13T17:25:36+00:00"
  },
  "AmazonCloudWatchRUMFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "rum:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:GetRole",
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/aws-service-role/rum.amazonaws.com/AWSServiceRoleForRealUserMonitoring"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/RUM-Monitor*"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "cognito-identity.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:DescribeAlarms"
          ],
          "Resource": "arn:aws:cloudwatch:*:*:alarm:*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cognito-identity:CreateIdentityPool",
            "cognito-identity:ListIdentityPools",
            "cognito-identity:DescribeIdentityPool",
            "cognito-identity:GetIdentityPoolRoles",
            "cognito-identity:SetIdentityPoolRoles"
          ],
          "Resource": "arn:aws:cognito-identity:*:*:identitypool/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:DeleteLogGroup",
            "logs:PutRetentionPolicy",
            "logs:CreateLogStream"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:*RUMService*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogDelivery",
            "logs:GetLogDelivery",
            "logs:UpdateLogDelivery",
            "logs:DeleteLogDelivery",
            "logs:ListLogDeliveries",
            "logs:DescribeResourcePolicies"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:DescribeLogGroups"
          ],
          "Resource": "arn:aws:logs:*:*:log-group::log-stream:*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "synthetics:describeCanaries",
            "synthetics:describeCanariesLastRun"
          ],
          "Resource": "arn:aws:synthetics:*:*:canary:*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-11-29T15:46:12+00:00"
  },
  "AmazonCloudWatchRUMReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "rum:GetAppMonitor",
            "rum:GetAppMonitorData",
            "rum:ListAppMonitors",
            "rum:ListRumMetricsDestinations",
            "rum:BatchGetRumMetricDefinitions"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-10-28T18:12:58+00:00"
  },
  "AmazonCloudWatchRUMServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "xray:PutTraceSegments"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "cloudwatch:PutMetricData",
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "cloudwatch:namespace": [
                "RUM/CustomMetrics/*",
                "AWS/RUM"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-02-22T20:35:15+00:00"
  },
  "AmazonCodeCatalystFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "CodeCatalystResourceAccess",
          "Effect": "Allow",
          "Action": [
            "codecatalyst:*",
            "iam:ListRoles"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CodeCatalystAssociateIAMRole",
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "codecatalyst.amazonaws.com",
                "codecatalyst-runner.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-04-20T16:50:16+00:00"
  },
  "AmazonCodeCatalystReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "codecatalyst:Get*",
            "codecatalyst:List*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-04-20T16:49:12+00:00"
  },
  "AmazonCodeCatalystSupportAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "support:DescribeAttachment",
            "support:DescribeCaseAttributes",
            "support:DescribeCases",
            "support:DescribeCommunications",
            "support:DescribeIssueTypes",
            "support:DescribeServices",
            "support:DescribeSeverityLevels",
            "support:DescribeSupportLevel",
            "support:SearchForCases",
            "support:AddAttachmentsToSet",
            "support:AddCommunicationToCase",
            "support:CreateCase",
            "support:InitiateCallForCase",
            "support:InitiateChatForCase",
            "support:PutCaseAttributes",
            "support:RateCaseCommunication",
            "support:ResolveCase"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-04-20T12:34:44+00:00"
  },
  "AmazonCodeGuruProfilerAgentAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "codeguru-profiler:ConfigureAgent",
            "codeguru-profiler:CreateProfilingGroup",
            "codeguru-profiler:PostAgentProfile"
          ],
          "Resource": "arn:aws:codeguru-profiler:*:*:profilingGroup/*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2022-05-05T18:11:03+00:00"
  },
  "AmazonCodeGuruProfilerFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "codeguru-profiler:*",
            "iam:ListRoles",
            "iam:ListUsers",
            "sns:ListTopics",
            "codeguru:*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:iam::*:role/*AWSServiceRoleForCodeGuruProfiler*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "codeguru-profiler.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2020-07-15T03:23:08+00:00"
  },
  "AmazonCodeGuruProfilerReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "codeguru:Get*",
            "codeguru-profiler:BatchGet*",
            "codeguru-profiler:Describe*",
            "codeguru-profiler:Get*",
            "codeguru-profiler:List*",
            "iam:ListRoles",
            "iam:ListUsers"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2020-06-27T23:52:52+00:00"
  },
  "AmazonCodeGuruReviewerFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AmazonCodeGuruReviewerFullAccess",
          "Effect": "Allow",
          "Action": [
            "codeguru-reviewer:*",
            "codeguru:*"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AmazonCodeGuruReviewerSLRCreation",
          "Action": "iam:CreateServiceLinkedRole",
          "Effect": "Allow",
          "Resource": "arn:aws:iam::*:role/aws-service-role/codeguru-reviewer.amazonaws.com/AWSServiceRoleForAmazonCodeGuruReviewer",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "codeguru-reviewer.amazonaws.com"
            }
          }
        },
        {
          "Sid": "AmazonCodeGuruReviewerSLRDeletion",
          "Effect": "Allow",
          "Action": [
            "iam:DeleteServiceLinkedRole",
            "iam:GetServiceLinkedRoleDeletionStatus"
          ],
          "Resource": "arn:aws:iam::*:role/aws-service-role/codeguru-reviewer.amazonaws.com/AWSServiceRoleForAmazonCodeGuruReviewer"
        },
        {
          "Sid": "CodeCommitAccess",
          "Effect": "Allow",
          "Action": [
            "codecommit:ListRepositories"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CodeCommitTagManagement",
          "Effect": "Allow",
          "Action": [
            "codecommit:TagResource",
            "codecommit:UntagResource"
          ],
          "Resource": "*",
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": "codeguru-reviewer"
            }
          }
        },
        {
          "Sid": "CodeConnectTagManagement",
          "Effect": "Allow",
          "Action": [
            "codestar-connections:TagResource",
            "codestar-connections:UntagResource",
            "codestar-connections:ListTagsForResource"
          ],
          "Resource": "*",
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": "codeguru-reviewer"
            }
          }
        },
        {
          "Sid": "CodeConnectManagedRules",
          "Effect": "Allow",
          "Action": [
            "codestar-connections:UseConnection",
            "codestar-connections:ListConnections",
            "codestar-connections:PassConnection"
          ],
          "Resource": "*",
          "Condition": {
            "ForAllValues:StringEquals": {
              "codestar-connections:ProviderAction": [
                "ListRepositories",
                "ListOwners"
              ]
            }
          }
        },
        {
          "Sid": "CloudWatchEventsManagedRules",
          "Effect": "Allow",
          "Action": [
            "events:PutRule",
            "events:PutTargets",
            "events:DeleteRule",
            "events:RemoveTargets"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "events:ManagedBy": "codeguru-reviewer.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2020-08-29T04:16:08+00:00"
  },
  "AmazonCodeGuruReviewerReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AmazonCodeGuruReviewerReadOnlyAccess",
          "Effect": "Allow",
          "Action": [
            "codeguru:Get*",
            "codeguru-reviewer:List*",
            "codeguru-reviewer:Describe*",
            "codeguru-reviewer:Get*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2020-08-29T04:15:32+00:00"
  },
  "AmazonCodeGuruReviewerServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AccessCodeGuruReviewerEnabledRepositories",
          "Effect": "Allow",
          "Action": [
            "codecommit:GetRepository",
            "codecommit:GetBranch",
            "codecommit:DescribePullRequestEvents",
            "codecommit:GetCommentsForPullRequest",
            "codecommit:GetDifferences",
            "codecommit:GetPullRequest",
            "codecommit:ListPullRequests",
            "codecommit:PostCommentForPullRequest",
            "codecommit:GitPull",
            "codecommit:UntagResource"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/codeguru-reviewer": "enabled"
            }
          }
        },
        {
          "Sid": "AccessCodeGuruReviewerEnabledConnections",
          "Effect": "Allow",
          "Action": [
            "codestar-connections:UseConnection"
          ],
          "Resource": "*",
          "Condition": {
            "ForAllValues:StringEquals": {
              "codestar-connections:ProviderAction": [
                "ListBranches",
                "GetBranch",
                "ListRepositories",
                "ListOwners",
                "ListPullRequests",
                "GetPullRequest",
                "ListPullRequestComments",
                "ListPullRequestCommits",
                "ListCommitFiles",
                "ListBranchCommits",
                "CreatePullRequestDiffComment",
                "GitPull"
              ]
            },
            "Null": {
              "aws:ResourceTag/codeguru-reviewer": "false"
            }
          }
        },
        {
          "Sid": "CloudWatchEventsResourceCleanup",
          "Effect": "Allow",
          "Action": [
            "events:DeleteRule",
            "events:RemoveTargets"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "events:ManagedBy": "codeguru-reviewer.amazonaws.com"
            }
          }
        },
        {
          "Sid": "AllowGuruS3GetObject",
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": [
            "arn:aws:s3:::codeguru-reviewer-*",
            "arn:aws:s3:::codeguru-reviewer-*/*"
          ]
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2020-11-27T15:09:46+00:00"
  },
  "AmazonCodeGuruSecurityFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AmazonCodeGuruSecurityFullAccess",
          "Effect": "Allow",
          "Action": [
            "codeguru-security:*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-05-09T21:03:38+00:00"
  },
  "AmazonCodeGuruSecurityScanAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AmazonCodeGuruSecurityScanAccess",
          "Effect": "Allow",
          "Action": [
            "codeguru-security:CreateScan",
            "codeguru-security:CreateUploadUrl",
            "codeguru-security:GetScan",
            "codeguru-security:GetFindings"
          ],
          "Resource": "arn:aws:codeguru-security:*:*:scans/*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-05-09T20:54:32+00:00"
  },
  "AmazonCognitoDeveloperAuthenticatedIdentities": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cognito-identity:GetOpenIdTokenForDeveloperIdentity",
            "cognito-identity:LookupDeveloperIdentity",
            "cognito-identity:MergeDeveloperIdentities",
            "cognito-identity:UnlinkDeveloperIdentity"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-03-24T17:22:23+00:00"
  },
  "AmazonCognitoIdpEmailServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ses:SendEmail",
            "ses:SendRawEmail"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Deny",
          "Action": [
            "ses:List*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-03-21T21:32:25+00:00"
  },
  "AmazonCognitoIdpServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cognito-idp:Describe*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-06-26T22:30:20+00:00"
  },
  "AmazonCognitoPowerUser": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cognito-identity:*",
            "cognito-idp:*",
            "cognito-sync:*",
            "iam:ListRoles",
            "iam:ListOpenIdConnectProviders",
            "iam:GetRole",
            "iam:ListSAMLProviders",
            "iam:GetSAMLProvider",
            "kinesis:ListStreams",
            "lambda:GetPolicy",
            "lambda:ListFunctions",
            "sns:GetSMSSandboxAccountStatus",
            "sns:ListPlatformApplications",
            "ses:ListIdentities",
            "ses:GetIdentityVerificationAttributes",
            "mobiletargeting:GetApps",
            "acm:ListCertificates"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": [
                "cognito-idp.amazonaws.com",
                "email.cognito-idp.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:DeleteServiceLinkedRole",
            "iam:GetServiceLinkedRoleDeletionStatus"
          ],
          "Resource": [
            "arn:aws:iam::*:role/aws-service-role/cognito-idp.amazonaws.com/AWSServiceRoleForAmazonCognitoIdp*",
            "arn:aws:iam::*:role/aws-service-role/email.cognito-idp.amazonaws.com/AWSServiceRoleForAmazonCognitoIdpEmail*"
          ]
        }
      ]
    },
    "VersionId": "v6",
    "IsDefaultVersion": true,
    "CreateDate": "2021-05-27T22:48:53+00:00"
  },
  "AmazonCognitoReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cognito-identity:Describe*",
            "cognito-identity:Get*",
            "cognito-identity:List*",
            "cognito-idp:Describe*",
            "cognito-idp:AdminGet*",
            "cognito-idp:AdminList*",
            "cognito-idp:List*",
            "cognito-idp:Get*",
            "cognito-sync:Describe*",
            "cognito-sync:Get*",
            "cognito-sync:List*",
            "iam:ListOpenIdConnectProviders",
            "iam:ListRoles",
            "sns:ListPlatformApplications"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2019-08-01T19:21:04+00:00"
  },
  "AmazonCognitoUnAuthedIdentitiesSessionPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "rum:PutRumEvents",
            "sagemaker:InvokeEndpoint",
            "polly:*",
            "comprehend:*",
            "translate:*",
            "transcribe:*",
            "rekognition:*",
            "mobiletargeting:*",
            "firehose:*",
            "personalize:*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-07-19T23:04:05+00:00"
  },
  "AmazonCognitoUnauthenticatedIdentities": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "rum:PutRumEvents",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-02-01T22:36:27+00:00"
  },
  "AmazonConnectCampaignsServiceLinkedRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "connect-campaigns:ListCampaigns"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "connect:BatchPutContact",
            "connect:StopContact"
          ],
          "Resource": "arn:aws:connect:*:*:instance/*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-08T16:16:16+00:00"
  },
  "AmazonConnectReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "connect:Get*",
            "connect:Describe*",
            "connect:List*",
            "ds:DescribeDirectories"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Deny",
          "Action": "connect:GetFederationTokens",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2019-11-06T22:10:18+00:00"
  },
  "AmazonConnectServiceLinkedRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AllowConnectActions",
          "Effect": "Allow",
          "Action": [
            "connect:*"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "AllowDeleteSLR",
          "Effect": "Allow",
          "Action": [
            "iam:DeleteRole"
          ],
          "Resource": "arn:aws:iam::*:role/aws-service-role/connect.amazonaws.com/AWSServiceRoleForAmazonConnect_*"
        },
        {
          "Sid": "AllowS3ObjectForConnectBucket",
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:GetObjectAcl",
            "s3:PutObject",
            "s3:PutObjectAcl",
            "s3:DeleteObject"
          ],
          "Resource": [
            "arn:aws:s3:::amazon-connect-*/*"
          ]
        },
        {
          "Sid": "AllowGetBucketMetadataForConnectBucket",
          "Effect": "Allow",
          "Action": [
            "s3:GetBucketLocation",
            "s3:GetBucketAcl"
          ],
          "Resource": [
            "arn:aws:s3:::amazon-connect-*"
          ]
        },
        {
          "Sid": "AllowConnectLogGroupAccess",
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/connect/*:*"
          ]
        },
        {
          "Sid": "AllowListLexBotAccess",
          "Effect": "Allow",
          "Action": [
            "lex:ListBots",
            "lex:ListBotAliases"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AllowCustomerProfilesForConnectDomain",
          "Effect": "Allow",
          "Action": [
            "profile:SearchProfiles",
            "profile:CreateProfile",
            "profile:UpdateProfile",
            "profile:AddProfileKey",
            "profile:ListProfileObjectTypes",
            "profile:ListCalculatedAttributeDefinitions",
            "profile:ListCalculatedAttributesForProfile",
            "profile:GetDomain",
            "profile:ListIntegrations"
          ],
          "Resource": "arn:aws:profile:*:*:domains/amazon-connect-*"
        },
        {
          "Sid": "AllowReadPermissionForCustomerProfileObjects",
          "Effect": "Allow",
          "Action": [
            "profile:ListProfileObjects",
            "profile:GetProfileObjectType"
          ],
          "Resource": [
            "arn:aws:profile:*:*:domains/amazon-connect-*/object-types/*"
          ]
        },
        {
          "Sid": "AllowListIntegrationForCustomerProfile",
          "Effect": "Allow",
          "Action": [
            "profile:ListAccountIntegrations"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AllowReadForCustomerProfileObjectTemplates",
          "Effect": "Allow",
          "Action": [
            "profile:ListProfileObjectTypeTemplates",
            "profile:GetProfileObjectTypeTemplate"
          ],
          "Resource": "arn:aws:profile:*:*:/templates*"
        },
        {
          "Sid": "AllowWisdomForConnectEnabledTaggedResources",
          "Effect": "Allow",
          "Action": [
            "wisdom:CreateContent",
            "wisdom:DeleteContent",
            "wisdom:CreateKnowledgeBase",
            "wisdom:GetAssistant",
            "wisdom:GetKnowledgeBase",
            "wisdom:GetContent",
            "wisdom:GetRecommendations",
            "wisdom:GetSession",
            "wisdom:NotifyRecommendationsReceived",
            "wisdom:QueryAssistant",
            "wisdom:StartContentUpload",
            "wisdom:UpdateContent",
            "wisdom:UntagResource",
            "wisdom:TagResource",
            "wisdom:CreateSession",
            "wisdom:CreateQuickResponse",
            "wisdom:GetQuickResponse",
            "wisdom:SearchQuickResponses",
            "wisdom:StartImportJob",
            "wisdom:GetImportJob",
            "wisdom:ListImportJobs",
            "wisdom:ListQuickResponses",
            "wisdom:UpdateQuickResponse",
            "wisdom:DeleteQuickResponse",
            "wisdom:PutFeedback"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/AmazonConnectEnabled": "True"
            }
          }
        },
        {
          "Sid": "AllowListOperationForWisdom",
          "Effect": "Allow",
          "Action": [
            "wisdom:ListAssistants",
            "wisdom:ListKnowledgeBases"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AllowCustomerProfilesCalculatedAttributesForConnectDomain",
          "Effect": "Allow",
          "Action": [
            "profile:GetCalculatedAttributeForProfile",
            "profile:CreateCalculatedAttributeDefinition",
            "profile:DeleteCalculatedAttributeDefinition",
            "profile:GetCalculatedAttributeDefinition",
            "profile:UpdateCalculatedAttributeDefinition"
          ],
          "Resource": [
            "arn:aws:profile:*:*:domains/amazon-connect-*/calculated-attributes/*"
          ]
        },
        {
          "Sid": "AllowPutMetricsForConnectNamespace",
          "Effect": "Allow",
          "Action": "cloudwatch:PutMetricData",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": "AWS/Connect"
            }
          }
        }
      ]
    },
    "VersionId": "v13",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-15T22:04:36+00:00"
  },
  "AmazonConnectSynchronizationServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AllowConnectActions",
          "Effect": "Allow",
          "Action": [
            "connect:CreateUser*",
            "connect:UpdateUser*",
            "connect:DeleteUser*",
            "connect:DescribeUser*",
            "connect:ListUser*",
            "connect:CreateRoutingProfile",
            "connect:UpdateRoutingProfile*",
            "connect:DeleteRoutingProfile",
            "connect:DescribeRoutingProfile",
            "connect:ListRoutingProfile*",
            "connect:CreateAgentStatus",
            "connect:UpdateAgentStatus",
            "connect:DescribeAgentStatus",
            "connect:ListAgentStatuses",
            "connect:CreateQuickConnect",
            "connect:UpdateQuickConnect*",
            "connect:DeleteQuickConnect",
            "connect:DescribeQuickConnect",
            "connect:ListQuickConnects",
            "connect:CreateHoursOfOperation",
            "connect:UpdateHoursOfOperation",
            "connect:DeleteHoursOfOperation",
            "connect:DescribeHoursOfOperation",
            "connect:ListHoursOfOperations",
            "connect:CreateQueue",
            "connect:UpdateQueue*",
            "connect:DeleteQueue",
            "connect:DescribeQueue",
            "connect:ListQueue*",
            "connect:CreatePrompt",
            "connect:UpdatePrompt",
            "connect:DeletePrompt",
            "connect:DescribePrompt",
            "connect:ListPrompts",
            "connect:GetPromptFile",
            "connect:CreateSecurityProfile",
            "connect:UpdateSecurityProfile",
            "connect:DeleteSecurityProfile",
            "connect:DescribeSecurityProfile",
            "connect:ListSecurityProfile*",
            "connect:CreateContactFlow*",
            "connect:UpdateContactFlow*",
            "connect:DeleteContactFlow*",
            "connect:DescribeContactFlow*",
            "connect:ListContactFlow*",
            "connect:BatchGetFlowAssociation",
            "connect:CreatePredefinedAttribute",
            "connect:UpdatePredefinedAttribute",
            "connect:DeletePredefinedAttribute",
            "connect:DescribePredefinedAttribute",
            "connect:ListPredefinedAttributes",
            "connect:ListTagsForResource",
            "connect:TagResource",
            "connect:UntagResource",
            "connect:ListTrafficDistributionGroups",
            "connect:ListPhoneNumbersV2",
            "connect:UpdatePhoneNumber",
            "connect:DescribePhoneNumber",
            "connect:Associate*",
            "connect:Disassociate*"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AllowPutMetricsForConnectNamespace",
          "Effect": "Allow",
          "Action": "cloudwatch:PutMetricData",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": "AWS/Connect"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-10-27T22:38:25+00:00"
  },
  "AmazonConnectVoiceIDFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "voiceid:*",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-09-26T19:04:10+00:00"
  },
  "AmazonConnect_FullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "connect:*",
            "ds:CreateAlias",
            "ds:AuthorizeApplication",
            "ds:CreateIdentityPoolDirectory",
            "ds:DeleteDirectory",
            "ds:DescribeDirectories",
            "ds:UnauthorizeApplication",
            "firehose:DescribeDeliveryStream",
            "firehose:ListDeliveryStreams",
            "kinesis:DescribeStream",
            "kinesis:ListStreams",
            "kms:DescribeKey",
            "kms:ListAliases",
            "lex:GetBots",
            "lex:ListBots",
            "lex:ListBotAliases",
            "logs:CreateLogGroup",
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets",
            "lambda:ListFunctions",
            "ds:CheckAlias",
            "profile:ListAccountIntegrations",
            "profile:GetDomain",
            "profile:ListDomains",
            "profile:GetProfileObjectType",
            "profile:ListProfileObjectTypeTemplates"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "profile:AddProfileKey",
            "profile:CreateDomain",
            "profile:CreateProfile",
            "profile:DeleteDomain",
            "profile:DeleteIntegration",
            "profile:DeleteProfile",
            "profile:DeleteProfileKey",
            "profile:DeleteProfileObject",
            "profile:DeleteProfileObjectType",
            "profile:GetIntegration",
            "profile:GetMatches",
            "profile:GetProfileObjectType",
            "profile:ListIntegrations",
            "profile:ListProfileObjects",
            "profile:ListProfileObjectTypes",
            "profile:ListTagsForResource",
            "profile:MergeProfiles",
            "profile:PutIntegration",
            "profile:PutProfileObject",
            "profile:PutProfileObjectType",
            "profile:SearchProfiles",
            "profile:TagResource",
            "profile:UntagResource",
            "profile:UpdateDomain",
            "profile:UpdateProfile"
          ],
          "Resource": "arn:aws:profile:*:*:domains/amazon-connect-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:CreateBucket",
            "s3:GetBucketAcl"
          ],
          "Resource": "arn:aws:s3:::amazon-connect-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "servicequotas:GetServiceQuota"
          ],
          "Resource": "arn:aws:servicequotas:*:*:connect/*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "connect.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:DeleteServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/connect.amazonaws.com/AWSServiceRoleForAmazonConnect*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/profile.amazonaws.com/*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "profile.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-07T14:49:25+00:00"
  },
  "AmazonDMSCloudWatchLogsRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AllowDescribeOnAllLogGroups",
          "Effect": "Allow",
          "Action": [
            "logs:DescribeLogGroups"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "AllowDescribeOfAllLogStreamsOnDmsTasksLogGroup",
          "Effect": "Allow",
          "Action": [
            "logs:DescribeLogStreams"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:dms-tasks-*",
            "arn:aws:logs:*:*:log-group:dms-serverless-replication-*"
          ]
        },
        {
          "Sid": "AllowCreationOfDmsLogGroups",
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:dms-tasks-*",
            "arn:aws:logs:*:*:log-group:dms-serverless-replication-*:log-stream:"
          ]
        },
        {
          "Sid": "AllowCreationOfDmsLogStream",
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:dms-tasks-*:log-stream:dms-task-*",
            "arn:aws:logs:*:*:log-group:dms-serverless-replication-*:log-stream:dms-serverless-*"
          ]
        },
        {
          "Sid": "AllowUploadOfLogEventsToDmsLogStream",
          "Effect": "Allow",
          "Action": [
            "logs:PutLogEvents"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:dms-tasks-*:log-stream:dms-task-*",
            "arn:aws:logs:*:*:log-group:dms-serverless-replication-*:log-stream:dms-serverless-*"
          ]
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-05-23T21:32:57+00:00"
  },
  "AmazonDMSRedshiftS3Role": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:CreateBucket",
            "s3:ListBucket",
            "s3:DeleteBucket",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:PutObject",
            "s3:DeleteObject",
            "s3:GetObjectVersion",
            "s3:GetBucketPolicy",
            "s3:PutBucketPolicy",
            "s3:GetBucketAcl",
            "s3:PutBucketVersioning",
            "s3:GetBucketVersioning",
            "s3:PutLifecycleConfiguration",
            "s3:GetLifecycleConfiguration",
            "s3:DeleteBucketPolicy"
          ],
          "Resource": "arn:aws:s3:::dms-*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2019-07-08T18:19:14+00:00"
  },
  "AmazonDMSVPCManagementRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:DeleteNetworkInterface",
            "ec2:ModifyNetworkInterfaceAttribute"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2016-05-23T16:29:57+00:00"
  },
  "AmazonDRSVPCManagement": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateNetworkInterface",
            "ec2:CreateSecurityGroup",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteSecurityGroup",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:RevokeSecurityGroupIngress"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-09-02T00:09:20+00:00"
  },
  "AmazonDataZoneDomainExecutionRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "DomainExecutionRoleStatement",
          "Effect": "Allow",
          "Action": [
            "datazone:AcceptPredictions",
            "datazone:AcceptSubscriptionRequest",
            "datazone:CancelSubscription",
            "datazone:CreateAsset",
            "datazone:CreateAssetRevision",
            "datazone:CreateAssetType",
            "datazone:CreateDataSource",
            "datazone:CreateEnvironment",
            "datazone:CreateEnvironmentBlueprint",
            "datazone:CreateEnvironmentProfile",
            "datazone:CreateFormType",
            "datazone:CreateGlossary",
            "datazone:CreateGlossaryTerm",
            "datazone:CreateListingChangeSet",
            "datazone:CreateProject",
            "datazone:CreateProjectMembership",
            "datazone:CreateSubscriptionGrant",
            "datazone:CreateSubscriptionRequest",
            "datazone:DeleteAsset",
            "datazone:DeleteAssetType",
            "datazone:DeleteDataSource",
            "datazone:DeleteEnvironment",
            "datazone:DeleteEnvironmentBlueprint",
            "datazone:DeleteEnvironmentProfile",
            "datazone:DeleteFormType",
            "datazone:DeleteGlossary",
            "datazone:DeleteGlossaryTerm",
            "datazone:DeleteListing",
            "datazone:DeleteProject",
            "datazone:DeleteProjectMembership",
            "datazone:DeleteSubscriptionGrant",
            "datazone:DeleteSubscriptionRequest",
            "datazone:DeleteSubscriptionTarget",
            "datazone:GetAsset",
            "datazone:GetAssetType",
            "datazone:GetDataSource",
            "datazone:GetDataSourceRun",
            "datazone:GetDomain",
            "datazone:GetEnvironment",
            "datazone:GetEnvironmentActionLink",
            "datazone:GetEnvironmentBlueprint",
            "datazone:GetEnvironmentCredentials",
            "datazone:GetEnvironmentProfile",
            "datazone:GetFormType",
            "datazone:GetGlossary",
            "datazone:GetGlossaryTerm",
            "datazone:GetGroupProfile",
            "datazone:GetListing",
            "datazone:GetProject",
            "datazone:GetSubscription",
            "datazone:GetSubscriptionEligibility",
            "datazone:GetSubscriptionGrant",
            "datazone:GetSubscriptionRequestDetails",
            "datazone:GetSubscriptionTarget",
            "datazone:GetUserProfile",
            "datazone:ListAccountEnvironments",
            "datazone:ListAssetRevisions",
            "datazone:ListDataSourceRunActivities",
            "datazone:ListDataSourceRuns",
            "datazone:ListDataSources",
            "datazone:ListEnvironmentBlueprintConfigurations",
            "datazone:ListEnvironmentBlueprints",
            "datazone:ListEnvironmentProfiles",
            "datazone:ListEnvironments",
            "datazone:ListGroupsForUser",
            "datazone:ListNotifications",
            "datazone:ListProjectMemberships",
            "datazone:ListProjects",
            "datazone:ListSubscriptionGrants",
            "datazone:ListSubscriptionRequests",
            "datazone:ListSubscriptionTargets",
            "datazone:ListSubscriptions",
            "datazone:ListWarehouseMetadata",
            "datazone:RejectPredictions",
            "datazone:RejectSubscriptionRequest",
            "datazone:RevokeSubscription",
            "datazone:Search",
            "datazone:SearchGroupProfiles",
            "datazone:SearchListings",
            "datazone:SearchTypes",
            "datazone:SearchUserProfiles",
            "datazone:StartDataSourceRun",
            "datazone:UpdateDataSource",
            "datazone:UpdateEnvironment",
            "datazone:UpdateEnvironmentBlueprint",
            "datazone:UpdateEnvironmentDeploymentStatus",
            "datazone:UpdateEnvironmentProfile",
            "datazone:UpdateGlossary",
            "datazone:UpdateGlossaryTerm",
            "datazone:UpdateProject",
            "datazone:UpdateSubscriptionGrantStatus",
            "datazone:UpdateSubscriptionRequest"
          ],
          "Resource": "*"
        },
        {
          "Sid": "RAMResourceShareStatement",
          "Effect": "Allow",
          "Action": "ram:GetResourceShareAssociations",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-09-27T21:55:08+00:00"
  },
  "AmazonDataZoneEnvironmentRolePermissionsBoundary": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "CreateGlueConnection",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags",
            "ec2:DeleteTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:network-interface/*"
          ],
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "aws-glue-service-resource"
              ]
            }
          }
        },
        {
          "Sid": "GlueOperations",
          "Effect": "Allow",
          "Action": [
            "glue:*DataQuality*",
            "glue:BatchCreatePartition",
            "glue:BatchDeleteConnection",
            "glue:BatchDeletePartition",
            "glue:BatchDeleteTable",
            "glue:BatchDeleteTableVersion",
            "glue:BatchGetJobs",
            "glue:BatchGetWorkflows",
            "glue:BatchStopJobRun",
            "glue:BatchUpdatePartition",
            "glue:CreateBlueprint",
            "glue:CreateConnection",
            "glue:CreateCrawler",
            "glue:CreateDatabase",
            "glue:CreateJob",
            "glue:CreatePartition",
            "glue:CreatePartitionIndex",
            "glue:CreateTable",
            "glue:CreateWorkflow",
            "glue:DeleteBlueprint",
            "glue:DeleteColumnStatisticsForPartition",
            "glue:DeleteColumnStatisticsForTable",
            "glue:DeleteConnection",
            "glue:DeleteCrawler",
            "glue:DeleteJob",
            "glue:DeletePartition",
            "glue:DeletePartitionIndex",
            "glue:DeleteTable",
            "glue:DeleteTableVersion",
            "glue:DeleteWorkflow",
            "glue:GetColumnStatisticsForPartition",
            "glue:GetColumnStatisticsForTable",
            "glue:GetConnection",
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:GetTable",
            "glue:GetTables",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:ListSchemas",
            "glue:ListJobs",
            "glue:NotifyEvent",
            "glue:PutWorkflowRunProperties",
            "glue:ResetJobBookmark",
            "glue:ResumeWorkflowRun",
            "glue:SearchTables",
            "glue:StartBlueprintRun",
            "glue:StartCrawler",
            "glue:StartCrawlerSchedule",
            "glue:StartJobRun",
            "glue:StartWorkflowRun",
            "glue:StopCrawler",
            "glue:StopCrawlerSchedule",
            "glue:StopWorkflowRun",
            "glue:UpdateBlueprint",
            "glue:UpdateColumnStatisticsForPartition",
            "glue:UpdateColumnStatisticsForTable",
            "glue:UpdateConnection",
            "glue:UpdateCrawler",
            "glue:UpdateCrawlerSchedule",
            "glue:UpdateDatabase",
            "glue:UpdateJob",
            "glue:UpdatePartition",
            "glue:UpdateTable",
            "glue:UpdateWorkflow"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
            }
          }
        },
        {
          "Sid": "PassRole",
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/datazone*"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "glue.amazonaws.com"
            }
          }
        },
        {
          "Sid": "SameAccountKmsOperations",
          "Effect": "Allow",
          "Action": [
            "kms:DescribeKey",
            "kms:Decrypt",
            "kms:ListKeys"
          ],
          "Resource": "*",
          "Condition": {
            "StringNotEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        },
        {
          "Sid": "KmsOperationsWithResourceTag",
          "Effect": "Allow",
          "Action": [
            "kms:DescribeKey",
            "kms:Decrypt",
            "kms:ListKeys",
            "kms:Encrypt",
            "kms:GenerateDataKey",
            "kms:Verify",
            "kms:Sign"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
            }
          }
        },
        {
          "Sid": "AnalyticsOperations",
          "Effect": "Allow",
          "Action": [
            "datazone:*",
            "sqlworkbench:*"
          ],
          "Resource": "*"
        },
        {
          "Sid": "QueryOperations",
          "Effect": "Allow",
          "Action": [
            "athena:BatchGetNamedQuery",
            "athena:BatchGetPreparedStatement",
            "athena:BatchGetQueryExecution",
            "athena:CreateNamedQuery",
            "athena:CreateNotebook",
            "athena:CreatePreparedStatement",
            "athena:CreatePresignedNotebookUrl",
            "athena:DeleteNamedQuery",
            "athena:DeleteNotebook",
            "athena:DeletePreparedStatement",
            "athena:ExportNotebook",
            "athena:GetDatabase",
            "athena:GetDataCatalog",
            "athena:GetNamedQuery",
            "athena:GetPreparedStatement",
            "athena:GetQueryExecution",
            "athena:GetQueryResults",
            "athena:GetQueryRuntimeStatistics",
            "athena:GetTableMetadata",
            "athena:GetWorkGroup",
            "athena:ImportNotebook",
            "athena:ListDatabases",
            "athena:ListDataCatalogs",
            "athena:ListEngineVersions",
            "athena:ListNamedQueries",
            "athena:ListPreparedStatements",
            "athena:ListQueryExecutions",
            "athena:ListTableMetadata",
            "athena:ListTagsForResource",
            "athena:ListWorkGroups",
            "athena:StartCalculationExecution",
            "athena:StartQueryExecution",
            "athena:StartSession",
            "athena:StopCalculationExecution",
            "athena:StopQueryExecution",
            "athena:TerminateSession",
            "athena:UpdateNamedQuery",
            "athena:UpdateNotebook",
            "athena:UpdateNotebookMetadata",
            "athena:UpdatePreparedStatement",
            "ec2:CreateNetworkInterface",
            "ec2:DeleteNetworkInterface",
            "ec2:Describe*",
            "glue:BatchCreatePartition",
            "glue:BatchDeletePartition",
            "glue:BatchDeleteTable",
            "glue:BatchDeleteTableVersion",
            "glue:BatchGetJobs",
            "glue:BatchGetPartition",
            "glue:BatchGetWorkflows",
            "glue:BatchUpdatePartition",
            "glue:CreateBlueprint",
            "glue:CreateConnection",
            "glue:CreateCrawler",
            "glue:CreateDatabase",
            "glue:CreateJob",
            "glue:CreatePartition",
            "glue:CreatePartitionIndex",
            "glue:CreateTable",
            "glue:CreateWorkflow",
            "glue:DeleteColumnStatisticsForPartition",
            "glue:DeleteColumnStatisticsForTable",
            "glue:DeletePartition",
            "glue:DeletePartitionIndex",
            "glue:DeleteTable",
            "glue:DeleteTableVersion",
            "glue:GetColumnStatisticsForPartition",
            "glue:GetColumnStatisticsForTable",
            "glue:GetConnection",
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:GetTable",
            "glue:GetTables",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:ListSchemas",
            "glue:ListJobs",
            "glue:NotifyEvent",
            "glue:SearchTables",
            "glue:UpdateColumnStatisticsForPartition",
            "glue:UpdateColumnStatisticsForTable",
            "glue:UpdateDatabase",
            "glue:UpdatePartition",
            "glue:UpdateTable",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:ListGroups",
            "iam:ListRolePolicies",
            "iam:ListRoles",
            "iam:ListUsers",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:DescribeMetricFilters",
            "logs:DescribeQueries",
            "logs:DescribeQueryDefinitions",
            "logs:DescribeMetricFilters",
            "logs:StartQuery",
            "logs:StopQuery",
            "logs:GetLogEvents",
            "logs:GetLogGroupFields",
            "logs:GetQueryResults",
            "logs:GetLogRecord",
            "logs:PutLogEvents",
            "logs:CreateLogStream",
            "logs:FilterLogEvents",
            "lakeformation:GetDataAccess",
            "lakeformation:GetDataLakeSettings",
            "lakeformation:GetResourceLFTags",
            "lakeformation:ListPermissions",
            "redshift-data:ListTables",
            "redshift-data:DescribeTable",
            "redshift-data:ListSchemas",
            "redshift-data:ListDatabases",
            "redshift-data:ExecuteStatement",
            "redshift-data:GetStatementResult",
            "redshift-data:DescribeStatement",
            "redshift:CreateClusterUser",
            "redshift:DescribeClusters",
            "redshift:DescribeDataShares",
            "redshift:GetClusterCredentials",
            "redshift:GetClusterCredentialsWithIAM",
            "redshift:JoinGroup",
            "redshift-serverless:ListNamespaces",
            "redshift-serverless:ListWorkgroups",
            "redshift-serverless:GetNamespace",
            "redshift-serverless:GetWorkgroup",
            "redshift-serverless:GetCredentials",
            "secretsmanager:ListSecrets",
            "tag:GetResources"
          ],
          "Resource": "*"
        },
        {
          "Sid": "QueryOperationsWithResourceTag",
          "Effect": "Allow",
          "Action": [
            "athena:GetQueryResultsStream"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
            }
          }
        },
        {
          "Sid": "SecretsManagerOperationsWithTagKeys",
          "Effect": "Allow",
          "Action": [
            "secretsmanager:CreateSecret",
            "secretsmanager:TagResource"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:secret:AmazonDataZone-*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AmazonDataZoneDomain": "*",
              "aws:ResourceTag/AmazonDataZoneProject": "*"
            },
            "Null": {
              "aws:TagKeys": "false"
            },
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "AmazonDataZoneDomain",
                "AmazonDataZoneProject"
              ]
            }
          }
        },
        {
          "Sid": "DataZoneS3Buckets",
          "Effect": "Allow",
          "Action": [
            "s3:AbortMultipartUpload",
            "s3:DeleteObject",
            "s3:DeleteObjectVersion",
            "s3:GetObject",
            "s3:PutObject",
            "s3:PutObjectRetention",
            "s3:ReplicateObject",
            "s3:RestoreObject"
          ],
          "Resource": [
            "arn:aws:s3:::*/datazone/*"
          ]
        },
        {
          "Sid": "DataZoneS3BucketLocation",
          "Effect": "Allow",
          "Action": [
            "s3:GetBucketLocation"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ListDataZoneS3Bucket",
          "Effect": "Allow",
          "Action": [
            "s3:ListBucket"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringLike": {
              "s3:prefix": [
                "*/datazone/*",
                "datazone/*"
              ]
            }
          }
        },
        {
          "Sid": "NotDeniedOperations",
          "Effect": "Deny",
          "NotAction": [
            "datazone:*",
            "sqlworkbench:*",
            "athena:BatchGetNamedQuery",
            "athena:BatchGetPreparedStatement",
            "athena:BatchGetQueryExecution",
            "athena:CreateNamedQuery",
            "athena:CreateNotebook",
            "athena:CreatePreparedStatement",
            "athena:CreatePresignedNotebookUrl",
            "athena:DeleteNamedQuery",
            "athena:DeleteNotebook",
            "athena:DeletePreparedStatement",
            "athena:ExportNotebook",
            "athena:GetDatabase",
            "athena:GetDataCatalog",
            "athena:GetNamedQuery",
            "athena:GetPreparedStatement",
            "athena:GetQueryExecution",
            "athena:GetQueryResults",
            "athena:GetQueryResultsStream",
            "athena:GetQueryRuntimeStatistics",
            "athena:GetTableMetadata",
            "athena:GetWorkGroup",
            "athena:ImportNotebook",
            "athena:ListDatabases",
            "athena:ListDataCatalogs",
            "athena:ListEngineVersions",
            "athena:ListNamedQueries",
            "athena:ListPreparedStatements",
            "athena:ListQueryExecutions",
            "athena:ListTableMetadata",
            "athena:ListTagsForResource",
            "athena:ListWorkGroups",
            "athena:StartCalculationExecution",
            "athena:StartQueryExecution",
            "athena:StartSession",
            "athena:StopCalculationExecution",
            "athena:StopQueryExecution",
            "athena:TerminateSession",
            "athena:UpdateNamedQuery",
            "athena:UpdateNotebook",
            "athena:UpdateNotebookMetadata",
            "athena:UpdatePreparedStatement",
            "ec2:CreateNetworkInterface",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteTags",
            "ec2:Describe*",
            "glue:*DataQuality*",
            "glue:BatchCreatePartition",
            "glue:BatchDeleteConnection",
            "glue:BatchDeletePartition",
            "glue:BatchDeleteTable",
            "glue:BatchDeleteTableVersion",
            "glue:BatchGetJobs",
            "glue:BatchGetPartition",
            "glue:BatchGetWorkflows",
            "glue:BatchStopJobRun",
            "glue:BatchUpdatePartition",
            "glue:CreateBlueprint",
            "glue:CreateConnection",
            "glue:CreateCrawler",
            "glue:CreateDatabase",
            "glue:CreateJob",
            "glue:CreatePartition",
            "glue:CreatePartitionIndex",
            "glue:CreateTable",
            "glue:CreateWorkflow",
            "glue:DeleteBlueprint",
            "glue:DeleteColumnStatisticsForPartition",
            "glue:DeleteColumnStatisticsForTable",
            "glue:DeleteConnection",
            "glue:DeleteCrawler",
            "glue:DeleteJob",
            "glue:DeletePartition",
            "glue:DeletePartitionIndex",
            "glue:DeleteTable",
            "glue:DeleteTableVersion",
            "glue:DeleteWorkflow",
            "glue:GetColumnStatisticsForPartition",
            "glue:GetColumnStatisticsForTable",
            "glue:GetConnection",
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:GetTable",
            "glue:GetTables",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:ListSchemas",
            "glue:ListJobs",
            "glue:NotifyEvent",
            "glue:PutWorkflowRunProperties",
            "glue:ResetJobBookmark",
            "glue:ResumeWorkflowRun",
            "glue:SearchTables",
            "glue:StartBlueprintRun",
            "glue:StartCrawler",
            "glue:StartCrawlerSchedule",
            "glue:StartJobRun",
            "glue:StartWorkflowRun",
            "glue:StopCrawler",
            "glue:StopCrawlerSchedule",
            "glue:StopWorkflowRun",
            "glue:UpdateBlueprint",
            "glue:UpdateColumnStatisticsForPartition",
            "glue:UpdateColumnStatisticsForTable",
            "glue:UpdateConnection",
            "glue:UpdateCrawler",
            "glue:UpdateCrawlerSchedule",
            "glue:UpdateDatabase",
            "glue:UpdateJob",
            "glue:UpdatePartition",
            "glue:UpdateTable",
            "glue:UpdateWorkflow",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:List*",
            "iam:PassRole",
            "kms:DescribeKey",
            "kms:Decrypt",
            "kms:Encrypt",
            "kms:GenerateDataKey",
            "kms:ListKeys",
            "kms:Verify",
            "kms:Sign",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:DescribeMetricFilters",
            "logs:DescribeQueries",
            "logs:DescribeQueryDefinitions",
            "logs:StartQuery",
            "logs:StopQuery",
            "logs:GetLogEvents",
            "logs:GetLogGroupFields",
            "logs:GetQueryResults",
            "logs:GetLogRecord",
            "logs:PutLogEvents",
            "logs:CreateLogStream",
            "logs:FilterLogEvents",
            "lakeformation:GetDataAccess",
            "lakeformation:GetDataLakeSettings",
            "lakeformation:GetResourceLFTags",
            "lakeformation:ListPermissions",
            "redshift-data:ListTables",
            "redshift-data:DescribeTable",
            "redshift-data:ListSchemas",
            "redshift-data:ListDatabases",
            "redshift-data:ExecuteStatement",
            "redshift-data:GetStatementResult",
            "redshift-data:DescribeStatement",
            "redshift:CreateClusterUser",
            "redshift:DescribeClusters",
            "redshift:DescribeDataShares",
            "redshift:GetClusterCredentials",
            "redshift:GetClusterCredentialsWithIAM",
            "redshift:JoinGroup",
            "redshift-serverless:ListNamespaces",
            "redshift-serverless:ListWorkgroups",
            "redshift-serverless:GetNamespace",
            "redshift-serverless:GetWorkgroup",
            "redshift-serverless:GetCredentials",
            "s3:AbortMultipartUpload",
            "s3:DeleteObject",
            "s3:DeleteObjectVersion",
            "s3:GetObject",
            "s3:GetBucketLocation",
            "s3:ListBucket",
            "s3:PutObject",
            "s3:PutObjectRetention",
            "s3:ReplicateObject",
            "s3:RestoreObject",
            "secretsmanager:CreateSecret",
            "secretsmanager:ListSecrets",
            "secretsmanager:TagResource",
            "tag:GetResources"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-17T23:29:08+00:00"
  },
  "AmazonDataZoneFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "datazone:*"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:DescribeKey",
            "kms:ListAliases",
            "iam:ListRoles",
            "sso:DescribeRegisteredRegions",
            "s3:ListAllMyBuckets"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListBucket",
            "s3:GetBucketLocation"
          ],
          "Resource": "arn:aws:s3:::*"
        },
        {
          "Effect": "Allow",
          "Action": "s3:CreateBucket",
          "Resource": "arn:aws:s3:::amazon-datazone*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ram:CreateResourceShare"
          ],
          "Resource": "*",
          "Condition": {
            "StringEqualsIfExists": {
              "ram:RequestedResourceType": "datazone:Domain"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ram:DeleteResourceShare",
            "ram:AssociateResourceShare",
            "ram:DisassociateResourceShare",
            "ram:RejectResourceShareInvitation"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "ram:ResourceShareName": [
                "DataZone*"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ram:GetResourceShares",
            "ram:GetResourceShareInvitations",
            "ram:GetResourceShareAssociations"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": [
            "arn:aws:iam::*:role/AmazonDataZone*",
            "arn:aws:iam::*:role/service-role/AmazonDataZone*"
          ],
          "Condition": {
            "StringEquals": {
              "iam:passedToService": "datazone.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-09-22T20:06:52+00:00"
  },
  "AmazonDataZoneFullUserAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AmazonDataZoneUserOperations",
          "Effect": "Allow",
          "Action": [
            "datazone:GetDomain",
            "datazone:CreateFormType",
            "datazone:GetFormType",
            "datazone:GetIamPortalLoginUrl",
            "datazone:SearchUserProfiles",
            "datazone:SearchGroupProfiles",
            "datazone:GetUserProfile",
            "datazone:GetGroupProfile",
            "datazone:ListGroupsForUser",
            "datazone:DeleteFormType",
            "datazone:CreateAssetType",
            "datazone:GetAssetType",
            "datazone:DeleteAssetType",
            "datazone:CreateGlossary",
            "datazone:GetGlossary",
            "datazone:DeleteGlossary",
            "datazone:UpdateGlossary",
            "datazone:CreateGlossaryTerm",
            "datazone:GetGlossaryTerm",
            "datazone:DeleteGlossaryTerm",
            "datazone:UpdateGlossaryTerm",
            "datazone:CreateAsset",
            "datazone:GetAsset",
            "datazone:DeleteAsset",
            "datazone:CreateAssetRevision",
            "datazone:ListAssetRevisions",
            "datazone:AcceptPredictions",
            "datazone:RejectPredictions",
            "datazone:Search",
            "datazone:SearchTypes",
            "datazone:CreateListingChangeSet",
            "datazone:DeleteListing",
            "datazone:SearchListings",
            "datazone:GetListing",
            "datazone:CreateDataSource",
            "datazone:GetDataSource",
            "datazone:DeleteDataSource",
            "datazone:UpdateDataSource",
            "datazone:ListDataSources",
            "datazone:StartDataSourceRun",
            "datazone:GetDataSourceRun",
            "datazone:ListDataSourceRuns",
            "datazone:ListDataSourceRunActivities",
            "datazone:ListEnvironmentBlueprintConfigurations",
            "datazone:CreateEnvironmentBlueprint",
            "datazone:GetEnvironmentBlueprint",
            "datazone:DeleteEnvironmentBlueprint",
            "datazone:UpdateEnvironmentBlueprint",
            "datazone:ListEnvironmentBlueprints",
            "datazone:CreateProject",
            "datazone:UpdateProject",
            "datazone:GetProject",
            "datazone:DeleteProject",
            "datazone:ListProjects",
            "datazone:CreateProjectMembership",
            "datazone:DeleteProjectMembership",
            "datazone:ListProjectMemberships",
            "datazone:CreateEnvironmentProfile",
            "datazone:GetEnvironmentProfile",
            "datazone:UpdateEnvironmentProfile",
            "datazone:DeleteEnvironmentProfile",
            "datazone:ListEnvironmentProfiles",
            "datazone:CreateEnvironment",
            "datazone:GetEnvironment",
            "datazone:DeleteEnvironment",
            "datazone:UpdateEnvironment",
            "datazone:UpdateEnvironmentDeploymentStatus",
            "datazone:ListEnvironments",
            "datazone:ListAccountEnvironments",
            "datazone:GetEnvironmentActionLink",
            "datazone:GetEnvironmentCredentials",
            "datazone:GetSubscriptionTarget",
            "datazone:DeleteSubscriptionTarget",
            "datazone:ListSubscriptionTargets",
            "datazone:CreateSubscriptionRequest",
            "datazone:AcceptSubscriptionRequest",
            "datazone:UpdateSubscriptionRequest",
            "datazone:ListWarehouseMetadata",
            "datazone:RejectSubscriptionRequest",
            "datazone:GetSubscriptionRequestDetails",
            "datazone:ListSubscriptionRequests",
            "datazone:DeleteSubscriptionRequest",
            "datazone:GetSubscription",
            "datazone:CancelSubscription",
            "datazone:GetSubscriptionEligibility",
            "datazone:ListSubscriptions",
            "datazone:RevokeSubscription",
            "datazone:CreateSubscriptionGrant",
            "datazone:DeleteSubscriptionGrant",
            "datazone:GetSubscriptionGrant",
            "datazone:ListSubscriptionGrants",
            "datazone:UpdateSubscriptionGrantStatus",
            "datazone:ListNotifications"
          ],
          "Resource": "*"
        },
        {
          "Sid": "RAMResourceShareOperations",
          "Effect": "Allow",
          "Action": "ram:GetResourceShareAssociations",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-10-03T21:05:39+00:00"
  },
  "AmazonDataZoneGlueManageAccessRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "GlueTableDatabasePermissions",
          "Effect": "Allow",
          "Action": [
            "glue:CreateTable",
            "glue:DeleteTable",
            "glue:GetDatabases",
            "glue:GetTables"
          ],
          "Resource": [
            "arn:aws:glue:*:*:catalog",
            "arn:aws:glue:*:*:database/*",
            "arn:aws:glue:*:*:table/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        },
        {
          "Sid": "LakeformationResourceSharingPermissions",
          "Effect": "Allow",
          "Action": [
            "lakeformation:BatchGrantPermissions",
            "lakeformation:BatchRevokePermissions",
            "lakeformation:GrantPermissions",
            "lakeformation:RevokePermissions",
            "lakeformation:ListPermissions",
            "lakeformation:GetResourceLFTags",
            "glue:GetDatabase",
            "glue:GetTable",
            "organizations:DescribeOrganization",
            "ram:GetResourceShareInvitations",
            "ram:ListResources"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CrossAccountRAMResourceSharingPermissions",
          "Effect": "Allow",
          "Action": [
            "glue:DeleteResourcePolicy",
            "glue:PutResourcePolicy"
          ],
          "Resource": [
            "arn:aws:glue:*:*:catalog",
            "arn:aws:glue:*:*:database/*",
            "arn:aws:glue:*:*:table/*"
          ],
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "ram.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "CrossAccountLakeFormationResourceSharingPermissions",
          "Effect": "Allow",
          "Action": [
            "ram:CreateResourceShare"
          ],
          "Resource": "*",
          "Condition": {
            "StringEqualsIfExists": {
              "ram:RequestedResourceType": [
                "glue:Table",
                "glue:Database",
                "glue:Catalog"
              ]
            },
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "lakeformation.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "CrossAccountRAMResourceShareInvitationPermission",
          "Effect": "Allow",
          "Action": [
            "ram:AcceptResourceShareInvitation"
          ],
          "Resource": "arn:aws:ram:*:*:resource-share-invitation/*"
        },
        {
          "Sid": "CrossAccountRAMResourceSharingViaLakeFormationPermissions",
          "Effect": "Allow",
          "Action": [
            "ram:AssociateResourceShare",
            "ram:DeleteResourceShare",
            "ram:DisassociateResourceShare",
            "ram:GetResourceShares",
            "ram:UpdateResourceShare"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "ram:ResourceShareName": [
                "LakeFormation*"
              ]
            },
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "lakeformation.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "KMSDecryptPermission",
          "Effect": "Allow",
          "Action": [
            "kms:Decrypt"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/datazone:projectId": "proj-all"
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-09-29T01:53:41+00:00"
  },
  "AmazonDataZonePortalFullAccessPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "datazonecontrol:*",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-26T18:24:35+00:00"
  },
  "AmazonDataZonePreviewConsoleFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "datazonecontrol:*"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:DescribeKey",
            "kms:ListAliases",
            "glue:GetConnections",
            "glue:GetDatabase",
            "redshift:DescribeClusters",
            "ec2:DescribeSubnets",
            "secretsmanager:ListSecrets",
            "iam:ListRoles",
            "sso:DescribeRegisteredRegions"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "glue:CreateConnection"
          ],
          "Resource": [
            "arn:aws:glue:*:*:catalog",
            "arn:aws:glue:*:*:connection/AmazonDataZone-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:CreateSecret"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:secret:AmazonDataZone-*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:GetPolicy",
          "Resource": [
            "arn:aws:iam::*:policy/service-role/AmazonDataZoneBootstrapServicePolicy-AmazonDataZoneBootstrapRole",
            "arn:aws:iam::*:policy/service-role/AmazonDataZoneServicePolicy-AmazonDataZoneServiceRole"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": [
            "arn:aws:iam::*:role/AmazonDataZoneServiceRole*",
            "arn:aws:iam::*:role/service-role/AmazonDataZoneServiceRole*",
            "arn:aws:iam::*:role/AmazonDataZoneBootstrapRole*",
            "arn:aws:iam::*:role/service-role/AmazonDataZoneBootstrapRole",
            "arn:aws:iam::*:role/AmazonDataZoneDomainExecutionRole",
            "arn:aws:iam::*:role/service-role/AmazonDataZoneDomainExecutionRole"
          ],
          "Condition": {
            "StringEquals": {
              "iam:passedToService": "datazonecontrol.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-07-13T18:01:12+00:00"
  },
  "AmazonDataZoneProjectDeploymentPermissionsBoundary": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateRole",
            "iam:DetachRolePolicy",
            "iam:DeleteRolePolicy",
            "iam:AttachRolePolicy",
            "iam:PutRolePolicy"
          ],
          "Resource": "arn:aws:iam::*:role/*datazone*",
          "Condition": {
            "StringEquals": {
              "iam:PermissionsBoundary": "arn:aws:iam::aws:policy/AmazonDataZoneProjectRolePermissionsBoundary"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:DeleteRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/*datazone*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:CreateKey",
            "kms:TagResource",
            "athena:CreateWorkGroup",
            "athena:TagResource",
            "iam:TagRole",
            "iam:TagPolicy",
            "logs:CreateLogGroup",
            "logs:TagLogGroup",
            "ssm:AddTagsToResource"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringLike": {
              "aws:TagKeys": "datazone:*"
            },
            "StringLike": {
              "aws:ResourceTag/datazone:projectId": "proj-*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "athena:DeleteWorkGroup",
            "kms:ScheduleKeyDeletion",
            "kms:DescribeKey",
            "kms:EnableKeyRotation",
            "kms:DisableKeyRotation",
            "kms:GenerateDataKey",
            "kms:Encrypt",
            "kms:Decrypt",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/datazone:projectId": "proj-*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringLike": {
              "aws:TagKeys": "datazone:projectId"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:DeletePolicy",
            "s3:DeleteBucket"
          ],
          "Resource": [
            "arn:aws:iam::*:policy/datazone*",
            "arn:aws:s3:::datazone*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:GetParameter*",
            "ssm:PutParameter",
            "ssm:DeleteParameter"
          ],
          "Resource": [
            "arn:aws:ssm:*:*:parameter/*datazone*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:GetRole",
            "iam:GetPolicy",
            "iam:GetRolePolicy",
            "iam:CreatePolicy",
            "iam:ListPolicyVersions",
            "lakeformation:RegisterResource",
            "lakeformation:DeregisterResource",
            "lakeformation:GrantPermissions",
            "lakeformation:PutDataLakeSettings",
            "lakeformation:GetDataLakeSettings",
            "lakeformation:RevokePermissions",
            "lakeformation:ListPermissions",
            "glue:CreateDatabase",
            "glue:DeleteDatabase",
            "glue:GetDatabases",
            "glue:GetDatabase",
            "sts:GetCallerIdentity"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/*datazone*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:PutEncryptionConfiguration",
            "s3:PutBucketPublicAccessBlock",
            "s3:DeleteBucketPolicy",
            "s3:CreateBucket",
            "s3:PutBucketPolicy",
            "s3:PutBucketAcl",
            "s3:PutBucketVersioning",
            "s3:PutBucketTagging",
            "s3:PutBucketLogging",
            "s3:GetObject*",
            "s3:GetBucket*",
            "s3:List*",
            "s3:GetEncryptionConfiguration",
            "s3:DeleteObject*",
            "s3:PutObject*",
            "s3:Abort*"
          ],
          "Resource": "arn:aws:s3:::*datazone*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "athena:Get*",
            "athena:List*",
            "ec2:CreateSecurityGroup",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:DeleteSecurityGroup",
            "ec2:Describe*",
            "ec2:Get*",
            "ec2:List*",
            "logs:PutRetentionPolicy",
            "logs:DescribeLogGroups",
            "logs:DeleteLogGroup",
            "logs:DeleteRetentionPolicy"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:PutKeyPolicy"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "cloudformation.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateVpcEndpoint",
          "NotResource": "arn:aws:ec2:*:*:vpc-endpoint/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateVpcEndpoint"
          ],
          "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
          "Condition": {
            "StringLike": {
              "ec2:VpceServiceName": [
                "com.amazonaws.*.logs",
                "com.amazonaws.*.s3",
                "com.amazonaws.*.glue",
                "com.amazonaws.*.athena"
              ]
            }
          }
        },
        {
          "Action": [
            "cloudformation:DescribeStacks",
            "cloudformation:DescribeStackEvents",
            "cloudformation:GetTemplate",
            "cloudformation:DescribeChangeSet",
            "cloudformation:CreateChangeSet",
            "cloudformation:ExecuteChangeSet",
            "cloudformation:DeleteChangeSet",
            "cloudformation:CreateStack",
            "cloudformation:UpdateStack",
            "cloudformation:DeleteStack",
            "cloudformation:TagResource",
            "cloudformation:GetTemplateSummary"
          ],
          "Effect": "Allow",
          "Resource": [
            "arn:aws:cloudformation:*:*:stack/DataZone*"
          ]
        },
        {
          "Effect": "Deny",
          "Action": [
            "s3:GetObject*",
            "s3:GetBucket*",
            "s3:List*",
            "s3:GetEncryptionConfiguration",
            "s3:DeleteObject*",
            "s3:PutObject*",
            "s3:Abort*",
            "s3:DeleteBucket"
          ],
          "NotResource": [
            "arn:aws:s3:::*datazone*"
          ]
        },
        {
          "Effect": "Deny",
          "Action": [
            "kms:*"
          ],
          "Resource": "*",
          "Condition": {
            "StringNotEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        },
        {
          "Effect": "Deny",
          "NotAction": [
            "ssm:PutParameter",
            "ssm:DeleteParameter",
            "ssm:AddTagsToResource",
            "ssm:GetParameters",
            "ssm:GetParameter",
            "s3:PutEncryptionConfiguration",
            "s3:PutBucketPublicAccessBlock",
            "s3:DeleteBucketPolicy",
            "s3:CreateBucket",
            "s3:PutBucketAcl",
            "s3:PutBucketPolicy",
            "s3:PutBucketVersioning",
            "s3:PutBucketTagging",
            "s3:ListBucket",
            "s3:PutBucketLogging",
            "s3:DeleteBucket",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:GetPolicy",
            "iam:CreatePolicy",
            "iam:ListPolicyVersions",
            "iam:DeletePolicy",
            "cloudformation:DescribeStacks",
            "cloudformation:DescribeStackEvents",
            "cloudformation:GetTemplate",
            "cloudformation:DescribeChangeSet",
            "cloudformation:CreateChangeSet",
            "cloudformation:ExecuteChangeSet",
            "cloudformation:DeleteChangeSet",
            "cloudformation:TagResource",
            "cloudformation:CreateStack",
            "cloudformation:UpdateStack",
            "cloudformation:DeleteStack",
            "cloudformation:GetTemplateSummary",
            "athena:*",
            "kms:*",
            "glue:CreateDatabase",
            "glue:DeleteDatabase",
            "glue:GetDatabases",
            "glue:GetDatabase",
            "lambda:*",
            "ec2:*",
            "logs:*",
            "servicecatalog:CreateApplication",
            "servicecatalog:DeleteApplication",
            "servicecatalog:GetApplication",
            "lakeformation:RegisterResource",
            "lakeformation:DeregisterResource",
            "lakeformation:GrantPermissions",
            "lakeformation:PutDataLakeSettings",
            "lakeformation:RevokePermissions",
            "lakeformation:GetDataLakeSettings",
            "lakeformation:ListPermissions",
            "iam:CreateRole",
            "iam:DeleteRole",
            "iam:DetachRolePolicy",
            "iam:DeleteRolePolicy",
            "iam:AttachRolePolicy",
            "iam:PutRolePolicy",
            "iam:UntagRole",
            "iam:PassRole",
            "iam:TagRole",
            "s3:GetBucket*",
            "s3:GetObject*",
            "s3:Abort*",
            "s3:GetEncryptionConfiguration",
            "s3:PutObject*"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-04-04T02:48:38+00:00"
  },
  "AmazonDataZoneProjectRolePermissionsBoundary": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:List*",
            "s3:Get*",
            "s3:DeleteObjectVersion",
            "s3:RestoreObject",
            "s3:ReplicateObject",
            "s3:PutObject",
            "s3:AbortMultipartUpload",
            "s3:CreateBucket",
            "s3:PutBucketPublicAccessBlock",
            "s3:PutObjectRetention",
            "s3:DeleteObject"
          ],
          "Resource": "arn:aws:s3:::datazone*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:List*",
            "s3:Get*",
            "kms:List*",
            "kms:Get*",
            "kms:Describe*",
            "kms:Decrypt"
          ],
          "Resource": "*",
          "Condition": {
            "StringNotEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:Describe*",
            "ec2:CreateNetworkInterface",
            "ec2:DeleteNetworkInterface",
            "logs:*",
            "athena:TerminateSession",
            "athena:CreatePreparedStatement",
            "athena:StopCalculationExecution",
            "athena:StartQueryExecution",
            "athena:UpdatePreparedStatement",
            "athena:BatchGet*",
            "athena:List*",
            "athena:UpdateNotebook",
            "athena:DeleteNotebook",
            "athena:DeletePreparedStatement",
            "athena:UpdateNotebookMetadata",
            "athena:DeleteNamedQuery",
            "athena:Get*",
            "athena:UpdateNamedQuery",
            "athena:CreateNamedQuery",
            "athena:ExportNotebook",
            "athena:StopQueryExecution",
            "athena:StartCalculationExecution",
            "athena:StartSession",
            "athena:CreatePresignedNotebookUrl",
            "athena:CreateNotebook",
            "athena:ImportNotebook",
            "organizations:DescribeOrganization",
            "organizations:DescribeAccount",
            "lakeformation:GetDataAccess",
            "lakeformation:BatchGrantPermissions",
            "lakeformation:GrantPermissions",
            "lakeformation:GetDataLakeSettings",
            "lakeformation:PutDataLakeSettings",
            "lakeformation:BatchRevokePermissions",
            "lakeformation:GetResourceLFTags",
            "lakeformation:ListPermissions",
            "ram:CreateResourceShare",
            "ram:UpdateResourceShare",
            "ram:DeleteResourceShare",
            "ram:AssociateResourceShare",
            "ram:DisassociateResourceShare",
            "ram:AcceptResourceShareInvitation",
            "ram:Get*",
            "ram:List*",
            "redshift:DescribeClusters",
            "redshift:JoinGroup",
            "redshift:CreateClusterUser",
            "redshift:GetClusterCredentials",
            "redshift-data:*",
            "redshift:AuthorizeDataShare",
            "redshift:DescribeDataShares",
            "redshift:AssociateDataShareConsumer",
            "tag:GetResources",
            "iam:ListRoles",
            "iam:ListUsers",
            "iam:ListGroups",
            "iam:ListRolePolicies",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "glue:CreateTable",
            "glue:BatchCreatePartition",
            "glue:CreatePartition",
            "glue:CreatePartitionIndex",
            "glue:CreateDataQualityRuleset",
            "glue:CreateBlueprint",
            "glue:CreateJob",
            "glue:CreateConnection",
            "glue:CreateCrawler",
            "glue:CreateWorkflow",
            "sqlworkbench:*",
            "datazone:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags",
            "ec2:DeleteTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:network-interface/*"
          ],
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "aws-glue-service-resource"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:List*",
            "kms:Get*",
            "kms:Describe*",
            "kms:Decrypt",
            "kms:Encrypt",
            "kms:ReEncrypt*",
            "kms:Verify",
            "kms:Sign",
            "kms:GenerateDataKey",
            "glue:*"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/datazone:projectId": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/datazone*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "glue:BatchGet*",
            "glue:SearchTables",
            "glue:List*",
            "glue:Get*",
            "glue:CreateDatabase",
            "glue:UpdateDatabase",
            "glue:DeleteTable",
            "glue:BatchDeleteTable",
            "glue:UpdateTable",
            "glue:DeletePartition",
            "glue:BatchDeletePartition",
            "glue:PutResourcePolicy",
            "glue:BatchUpdatePartition",
            "glue:DeleteTableVersion",
            "glue:DeleteColumnStatisticsForPartition",
            "glue:DeleteColumnStatisticsForTable",
            "glue:DeletePartitionIndex",
            "glue:UpdateColumnStatisticsForPartition",
            "glue:UpdateColumnStatisticsForTable",
            "glue:BatchDeleteTableVersion",
            "glue:UpdatePartition",
            "glue:NotifyEvent",
            "glue:DeleteResourcePolicy"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Deny",
          "NotAction": [
            "s3:List*",
            "s3:Get*",
            "s3:Describe*",
            "s3:DeleteObjectVersion",
            "s3:RestoreObject",
            "s3:ReplicateObject",
            "s3:PutObject",
            "s3:AbortMultipartUpload",
            "s3:CreateBucket",
            "s3:PutBucketPublicAccessBlock",
            "s3:PutObjectRetention",
            "s3:DeleteObject",
            "kms:List*",
            "kms:Get*",
            "kms:Describe*",
            "kms:Decrypt",
            "kms:Encrypt",
            "kms:ReEncrypt*",
            "kms:Verify",
            "kms:Sign",
            "kms:GenerateDataKey",
            "ec2:Describe*",
            "ec2:CreateNetworkInterface",
            "ec2:DeleteNetworkInterface",
            "ec2:CreateTags",
            "ec2:DeleteTags",
            "logs:*",
            "athena:*",
            "glue:BatchGet*",
            "glue:Get*",
            "glue:SearchTables",
            "glue:List*",
            "glue:CreateDatabase",
            "glue:UpdateDatabase",
            "glue:CreateTable",
            "glue:DeleteTable",
            "glue:BatchDeleteTable",
            "glue:UpdateTable",
            "glue:BatchCreatePartition",
            "glue:CreatePartition",
            "glue:DeletePartition",
            "glue:BatchDeletePartition",
            "glue:PutResourcePolicy",
            "glue:CreatePartitionIndex",
            "glue:BatchUpdatePartition",
            "glue:DeleteTableVersion",
            "glue:DeleteColumnStatisticsForPartition",
            "glue:DeleteColumnStatisticsForTable",
            "glue:DeletePartitionIndex",
            "glue:UpdateColumnStatisticsForPartition",
            "glue:UpdateColumnStatisticsForTable",
            "glue:BatchDeleteTableVersion",
            "glue:UpdatePartition",
            "glue:NotifyEvent",
            "glue:StartBlueprintRun",
            "glue:PutWorkflowRunProperties",
            "glue:StopCrawler",
            "glue:DeleteJob",
            "glue:DeleteWorkflow",
            "glue:UpdateCrawler",
            "glue:DeleteBlueprint",
            "glue:UpdateWorkflow",
            "glue:StartCrawler",
            "glue:ResetJobBookmark",
            "glue:UpdateJob",
            "glue:StartWorkflowRun",
            "glue:StopCrawlerSchedule",
            "glue:ResumeWorkflowRun",
            "glue:DeleteCrawler",
            "glue:UpdateBlueprint",
            "glue:BatchStopJobRun",
            "glue:StopWorkflowRun",
            "glue:UpdateCrawlerSchedule",
            "glue:DeleteConnection",
            "glue:UpdateConnection",
            "glue:BatchDeleteConnection",
            "glue:StartCrawlerSchedule",
            "glue:StartJobRun",
            "glue:CreateWorkflow",
            "glue:*DataQuality*",
            "glue:CreateBlueprint",
            "glue:CreateJob",
            "glue:CreateConnection",
            "glue:CreateCrawler",
            "glue:DeleteResourcePolicy",
            "organizations:DescribeOrganization",
            "organizations:DescribeAccount",
            "lakeformation:GetDataAccess",
            "lakeformation:BatchGrantPermissions",
            "lakeformation:GrantPermissions",
            "lakeformation:GetDataLakeSettings",
            "lakeformation:PutDataLakeSettings",
            "lakeformation:BatchRevokePermissions",
            "lakeformation:GetResourceLFTags",
            "lakeformation:ListPermissions",
            "ram:*",
            "redshift:*",
            "redshift-data:*",
            "tag:GetResources",
            "iam:List*",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:PassRole",
            "sqlworkbench:*",
            "datazone:*"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-21T02:51:56+00:00"
  },
  "AmazonDataZoneRedshiftGlueProvisioningPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AmazonDataZonePermissionsToCreateEnvironmentRole",
          "Effect": "Allow",
          "Action": [
            "iam:CreateRole",
            "iam:DetachRolePolicy",
            "iam:DeleteRolePolicy",
            "iam:AttachRolePolicy",
            "iam:PutRolePolicy"
          ],
          "Resource": "arn:aws:iam::*:role/datazone*",
          "Condition": {
            "StringEquals": {
              "iam:PermissionsBoundary": "arn:aws:iam::aws:policy/AmazonDataZoneEnvironmentRolePermissionsBoundary",
              "aws:CalledViaFirst": [
                "cloudformation.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/datazone*"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "glue.amazonaws.com",
                "lakeformation.amazonaws.com"
              ],
              "aws:CalledViaFirst": [
                "cloudformation.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "AmazonDataZonePermissionsToManageCreatedEnvironmentRole",
          "Effect": "Allow",
          "Action": [
            "iam:DeleteRole",
            "iam:GetRole"
          ],
          "Resource": "arn:aws:iam::*:role/datazone*",
          "Condition": {
            "StringEquals": {
              "aws:CalledViaFirst": [
                "cloudformation.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "AmazonDataZoneCFStackCreationForEnvironments",
          "Effect": "Allow",
          "Action": [
            "cloudformation:CreateStack",
            "cloudformation:TagResource"
          ],
          "Resource": [
            "arn:aws:cloudformation:*:*:stack/DataZone*"
          ],
          "Condition": {
            "ForAnyValue:StringLike": {
              "aws:TagKeys": "AmazonDataZoneEnvironment"
            },
            "Null": {
              "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
            }
          }
        },
        {
          "Sid": "AmazonDataZoneCFStackManagementForEnvironments",
          "Effect": "Allow",
          "Action": [
            "cloudformation:DeleteStack",
            "cloudformation:DescribeStacks",
            "cloudformation:DescribeStackEvents"
          ],
          "Resource": [
            "arn:aws:cloudformation:*:*:stack/DataZone*"
          ]
        },
        {
          "Sid": "AmazonDataZoneEnvironmentParameterValidation",
          "Effect": "Allow",
          "Action": [
            "lakeformation:GetDataLakeSettings",
            "lakeformation:PutDataLakeSettings",
            "lakeformation:RevokePermissions",
            "lakeformation:ListPermissions",
            "glue:CreateDatabase",
            "glue:GetDatabase",
            "athena:GetWorkGroup",
            "logs:DescribeLogGroups",
            "redshift-serverless:GetNamespace",
            "redshift-serverless:GetWorkgroup",
            "redshift:DescribeClusters",
            "secretsmanager:ListSecrets"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AmazonDataZoneEnvironmentLakeFormationPermissions",
          "Effect": "Allow",
          "Action": [
            "lakeformation:RegisterResource",
            "lakeformation:DeregisterResource",
            "lakeformation:GrantPermissions",
            "lakeformation:ListResources"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:CalledViaFirst": [
                "cloudformation.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "AmazonDataZoneEnvironmentGlueDeletePermissions",
          "Effect": "Allow",
          "Action": [
            "glue:DeleteDatabase"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:CalledViaFirst": [
                "cloudformation.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "AmazonDataZoneEnvironmentAthenaDeletePermissions",
          "Effect": "Allow",
          "Action": [
            "athena:DeleteWorkGroup"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:CalledViaFirst": [
                "cloudformation.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "AmazonDataZoneEnvironmentAthenaResourceCreation",
          "Effect": "Allow",
          "Action": [
            "athena:CreateWorkGroup",
            "athena:TagResource",
            "iam:TagRole",
            "iam:TagPolicy",
            "logs:TagLogGroup"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringLike": {
              "aws:TagKeys": "AmazonDataZoneEnvironment"
            },
            "Null": {
              "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
            },
            "StringEquals": {
              "aws:CalledViaFirst": [
                "cloudformation.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "AmazonDataZoneEnvironmentLogGroupCreation",
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:DeleteLogGroup"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:datazone-*",
          "Condition": {
            "ForAnyValue:StringLike": {
              "aws:TagKeys": "AmazonDataZoneEnvironment"
            },
            "Null": {
              "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
            },
            "StringEquals": {
              "aws:CalledViaFirst": [
                "cloudformation.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "AmazonDataZoneEnvironmentLogGroupManagement",
          "Action": [
            "logs:PutRetentionPolicy"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:datazone-*",
          "Effect": "Allow",
          "Condition": {
            "StringEquals": {
              "aws:CalledViaFirst": [
                "cloudformation.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "AmazonDataZoneEnvironmentIAMPolicyManagement",
          "Effect": "Allow",
          "Action": [
            "iam:DeletePolicy",
            "iam:CreatePolicy",
            "iam:GetPolicy",
            "iam:ListPolicyVersions"
          ],
          "Resource": [
            "arn:aws:iam::*:policy/datazone*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:CalledViaFirst": [
                "cloudformation.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "AmazonDataZoneEnvironmentS3ValidationPermissions",
          "Effect": "Allow",
          "Action": [
            "s3:ListAllMyBuckets",
            "s3:ListBucket"
          ],
          "Resource": "arn:aws:s3:::*"
        },
        {
          "Sid": "AmazonDataZoneEnvironmentKMSDecryptPermissions",
          "Effect": "Allow",
          "Action": [
            "kms:GenerateDataKey",
            "kms:Decrypt"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
            }
          }
        },
        {
          "Sid": "PermissionsToTagAmazonDataZoneEnvironmentGlueResources",
          "Effect": "Allow",
          "Action": [
            "glue:TagResource"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringLike": {
              "aws:TagKeys": "AmazonDataZoneEnvironment"
            },
            "Null": {
              "aws:RequestTag/AmazonDataZoneEnvironment": "false"
            }
          }
        },
        {
          "Sid": "PermissionsToGetAmazonDataZoneEnvironmentBlueprintTemplates",
          "Effect": "Allow",
          "Action": "s3:GetObject",
          "Resource": "*",
          "Condition": {
            "StringNotEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            },
            "StringEquals": {
              "aws:CalledViaFirst": [
                "cloudformation.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-09-23T00:50:47+00:00"
  },
  "AmazonDataZoneRedshiftManageAccessRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "redshiftDataScopeDownPermissions",
          "Effect": "Allow",
          "Action": [
            "redshift-data:BatchExecuteStatement",
            "redshift-data:DescribeTable",
            "redshift-data:ExecuteStatement",
            "redshift-data:ListTables",
            "redshift-data:ListSchemas",
            "redshift-data:ListDatabases"
          ],
          "Resource": [
            "arn:aws:redshift-serverless:*:*:workgroup/*",
            "arn:aws:redshift:*:*:cluster:*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        },
        {
          "Sid": "listSecretsPermission",
          "Effect": "Allow",
          "Action": "secretsmanager:ListSecrets",
          "Resource": "*"
        },
        {
          "Sid": "getWorkgroupPermission",
          "Effect": "Allow",
          "Action": "redshift-serverless:GetWorkgroup",
          "Resource": [
            "arn:aws:redshift-serverless:*:*:workgroup/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        },
        {
          "Sid": "getNamespacePermission",
          "Effect": "Allow",
          "Action": "redshift-serverless:GetNamespace",
          "Resource": [
            "arn:aws:redshift-serverless:*:*:namespace/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        },
        {
          "Sid": "redshiftDataPermissions",
          "Effect": "Allow",
          "Action": [
            "redshift-data:DescribeStatement",
            "redshift-data:GetStatementResult",
            "redshift:DescribeClusters"
          ],
          "Resource": "*"
        },
        {
          "Sid": "dataSharesPermissions",
          "Effect": "Allow",
          "Action": [
            "redshift:AuthorizeDataShare",
            "redshift:DescribeDataShares"
          ],
          "Resource": [
            "arn:aws:redshift:*:*:datashare:*/datazone*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        },
        {
          "Sid": "associateDataShareConsumerPermission",
          "Effect": "Allow",
          "Action": "redshift:AssociateDataShareConsumer",
          "Resource": "arn:aws:redshift:*:*:datashare:*/datazone*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-16T22:04:02+00:00"
  },
  "AmazonDetectiveFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "detective:*",
            "organizations:DescribeOrganization",
            "organizations:ListAccounts"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "guardduty:ArchiveFindings"
          ],
          "Resource": "arn:aws:guardduty:*:*:detector/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "guardduty:GetFindings",
            "guardduty:ListDetectors"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "securityHub:GetFindings"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2023-05-17T19:39:57+00:00"
  },
  "AmazonDetectiveInvestigatorAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "detective:BatchGetGraphMemberDatasources",
            "detective:BatchGetMembershipDatasources",
            "detective:DescribeOrganizationConfiguration",
            "detective:GetFreeTrialEligibility",
            "detective:GetGraphIngestState",
            "detective:GetMembers",
            "detective:GetPricingInformation",
            "detective:GetUsageInformation",
            "detective:ListDatasourcePackages",
            "detective:ListGraphs",
            "detective:ListHighDegreeEntities",
            "detective:ListInvitations",
            "detective:ListMembers",
            "detective:ListOrganizationAdminAccount",
            "detective:ListTagsForResource",
            "detective:SearchGraph"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "organizations:DescribeOrganization",
            "organizations:ListAccounts"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "guardduty:ArchiveFindings",
            "guardduty:GetFindings",
            "guardduty:ListDetectors"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "securityHub:GetFindings"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-05-17T19:41:09+00:00"
  },
  "AmazonDetectiveMemberAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "detective:AcceptInvitation",
            "detective:BatchGetMembershipDatasources",
            "detective:DisassociateMembership",
            "detective:GetFreeTrialEligibility",
            "detective:GetPricingInformation",
            "detective:GetUsageInformation",
            "detective:ListInvitations",
            "detective:RejectInvitation"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-01-17T15:16:14+00:00"
  },
  "AmazonDetectiveOrganizationsAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "detective:DisableOrganizationAdminAccount",
            "detective:EnableOrganizationAdminAccount",
            "detective:ListOrganizationAdminAccount"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "detective.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "organizations:EnableAWSServiceAccess",
            "organizations:RegisterDelegatedAdministrator",
            "organizations:DeregisterDelegatedAdministrator"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "organizations:ServicePrincipal": [
                "detective.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAccounts"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "organizations:ListDelegatedAdministrators"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "organizations:ServicePrincipal": [
                "detective.amazonaws.com",
                "guardduty.amazonaws.com",
                "macie.amazonaws.com",
                "securityhub.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-02T15:20:50+00:00"
  },
  "AmazonDetectiveServiceLinkedRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "organizations:DescribeAccount",
            "organizations:ListAccounts"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-11-18T19:47:32+00:00"
  },
  "AmazonDevOpsGuruConsoleFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "DevOpsGuruFullAccess",
          "Effect": "Allow",
          "Action": [
            "devops-guru:*"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CloudFormationListStacksAccess",
          "Effect": "Allow",
          "Action": [
            "cloudformation:DescribeStacks",
            "cloudformation:ListStacks"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CloudWatchGetMetricDataAccess",
          "Effect": "Allow",
          "Action": [
            "cloudwatch:GetMetricData"
          ],
          "Resource": "*"
        },
        {
          "Sid": "SnsListTopicsAccess",
          "Effect": "Allow",
          "Action": [
            "sns:ListTopics"
          ],
          "Resource": "*"
        },
        {
          "Sid": "SnsTopicOperations",
          "Effect": "Allow",
          "Action": [
            "sns:CreateTopic",
            "sns:GetTopicAttributes",
            "sns:SetTopicAttributes",
            "sns:Publish"
          ],
          "Resource": "arn:aws:sns:*:*:DevOps-Guru-*"
        },
        {
          "Sid": "DevOpsGuruSlrCreation",
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/devops-guru.amazonaws.com/AWSServiceRoleForDevOpsGuru",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "devops-guru.amazonaws.com"
            }
          }
        },
        {
          "Sid": "DevOpsGuruSlrDeletion",
          "Effect": "Allow",
          "Action": [
            "iam:DeleteServiceLinkedRole",
            "iam:GetServiceLinkedRoleDeletionStatus"
          ],
          "Resource": "arn:aws:iam::*:role/aws-service-role/devops-guru.amazonaws.com/AWSServiceRoleForDevOpsGuru"
        },
        {
          "Sid": "RDSDescribeDBInstancesAccess",
          "Effect": "Allow",
          "Action": [
            "rds:DescribeDBInstances"
          ],
          "Resource": "*"
        },
        {
          "Sid": "PerformanceInsightsMetricsDataAccess",
          "Effect": "Allow",
          "Action": [
            "pi:GetResourceMetrics",
            "pi:DescribeDimensionKeys"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CloudWatchLogsFilterLogEventsAccess",
          "Effect": "Allow",
          "Action": [
            "logs:FilterLogEvents"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/DevOps-Guru-Analysis": "true"
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-08-25T18:18:53+00:00"
  },
  "AmazonDevOpsGuruFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "DevOpsGuruFullAccess",
          "Effect": "Allow",
          "Action": [
            "devops-guru:*"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CloudFormationListStacksAccess",
          "Effect": "Allow",
          "Action": [
            "cloudformation:DescribeStacks",
            "cloudformation:ListStacks"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CloudWatchGetMetricDataAccess",
          "Effect": "Allow",
          "Action": [
            "cloudwatch:GetMetricData"
          ],
          "Resource": "*"
        },
        {
          "Sid": "SnsListTopicsAccess",
          "Effect": "Allow",
          "Action": [
            "sns:ListTopics"
          ],
          "Resource": "*"
        },
        {
          "Sid": "SnsTopicOperations",
          "Effect": "Allow",
          "Action": [
            "sns:CreateTopic",
            "sns:GetTopicAttributes",
            "sns:SetTopicAttributes",
            "sns:Publish"
          ],
          "Resource": "arn:aws:sns:*:*:DevOps-Guru-*"
        },
        {
          "Sid": "DevOpsGuruSlrCreation",
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/devops-guru.amazonaws.com/AWSServiceRoleForDevOpsGuru",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "devops-guru.amazonaws.com"
            }
          }
        },
        {
          "Sid": "DevOpsGuruSlrDeletion",
          "Effect": "Allow",
          "Action": [
            "iam:DeleteServiceLinkedRole",
            "iam:GetServiceLinkedRoleDeletionStatus"
          ],
          "Resource": "arn:aws:iam::*:role/aws-service-role/devops-guru.amazonaws.com/AWSServiceRoleForDevOpsGuru"
        },
        {
          "Sid": "RDSDescribeDBInstancesAccess",
          "Effect": "Allow",
          "Action": [
            "rds:DescribeDBInstances"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CloudWatchLogsFilterLogEventsAccess",
          "Effect": "Allow",
          "Action": [
            "logs:FilterLogEvents"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/DevOps-Guru-Analysis": "true"
            }
          }
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2022-08-25T18:23:41+00:00"
  },
  "AmazonDevOpsGuruOrganizationsAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "DevOpsGuruOrganizationsAccess",
          "Effect": "Allow",
          "Action": [
            "devops-guru:DescribeOrganizationHealth",
            "devops-guru:DescribeOrganizationResourceCollectionHealth",
            "devops-guru:DescribeOrganizationOverview",
            "devops-guru:ListOrganizationInsights",
            "devops-guru:SearchOrganizationInsights"
          ],
          "Resource": "*"
        },
        {
          "Sid": "OrganizationsDataAccess",
          "Effect": "Allow",
          "Action": [
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListChildren",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListRoots"
          ],
          "Resource": "arn:aws:organizations::*:"
        },
        {
          "Sid": "OrganizationsAdminDataAccess",
          "Effect": "Allow",
          "Action": [
            "organizations:DeregisterDelegatedAdministrator",
            "organizations:RegisterDelegatedAdministrator",
            "organizations:ListDelegatedAdministrators",
            "organizations:EnableAWSServiceAccess",
            "organizations:DisableAWSServiceAccess"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "organizations:ServicePrincipal": [
                "devops-guru.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-11-15T23:50:52+00:00"
  },
  "AmazonDevOpsGuruReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "DevOpsGuruReadOnlyAccess",
          "Effect": "Allow",
          "Action": [
            "devops-guru:DescribeAccountHealth",
            "devops-guru:DescribeAccountOverview",
            "devops-guru:DescribeAnomaly",
            "devops-guru:DescribeEventSourcesConfig",
            "devops-guru:DescribeFeedback",
            "devops-guru:DescribeInsight",
            "devops-guru:DescribeResourceCollectionHealth",
            "devops-guru:DescribeServiceIntegration",
            "devops-guru:GetCostEstimation",
            "devops-guru:GetResourceCollection",
            "devops-guru:ListAnomaliesForInsight",
            "devops-guru:ListEvents",
            "devops-guru:ListInsights",
            "devops-guru:ListAnomalousLogGroups",
            "devops-guru:ListMonitoredResources",
            "devops-guru:ListNotificationChannels",
            "devops-guru:ListRecommendations",
            "devops-guru:SearchInsights",
            "devops-guru:StartCostEstimation"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CloudFormationListStacksAccess",
          "Effect": "Allow",
          "Action": [
            "cloudformation:DescribeStacks",
            "cloudformation:ListStacks"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:GetRole"
          ],
          "Resource": "arn:aws:iam::*:role/aws-service-role/devops-guru.amazonaws.com/AWSServiceRoleForDevOpsGuru"
        },
        {
          "Sid": "CloudWatchGetMetricDataAccess",
          "Effect": "Allow",
          "Action": [
            "cloudwatch:GetMetricData"
          ],
          "Resource": "*"
        },
        {
          "Sid": "RDSDescribeDBInstancesAccess",
          "Effect": "Allow",
          "Action": [
            "rds:DescribeDBInstances"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CloudWatchLogsFilterLogEventsAccess",
          "Effect": "Allow",
          "Action": [
            "logs:FilterLogEvents"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/DevOps-Guru-Analysis": "true"
            }
          }
        }
      ]
    },
    "VersionId": "v6",
    "IsDefaultVersion": true,
    "CreateDate": "2022-08-25T18:11:21+00:00"
  },
  "AmazonDevOpsGuruServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "autoscaling:DescribeAutoScalingGroups",
            "cloudtrail:LookupEvents",
            "cloudwatch:GetMetricData",
            "cloudwatch:ListMetrics",
            "cloudwatch:DescribeAnomalyDetectors",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:ListDashboards",
            "cloudwatch:GetDashboard",
            "cloudformation:GetTemplate",
            "cloudformation:ListStacks",
            "cloudformation:ListStackResources",
            "cloudformation:DescribeStacks",
            "cloudformation:ListImports",
            "codedeploy:BatchGetDeployments",
            "codedeploy:GetDeploymentGroup",
            "codedeploy:ListDeployments",
            "config:DescribeConfigurationRecorderStatus",
            "config:GetResourceConfigHistory",
            "events:ListRuleNamesByTarget",
            "xray:GetServiceGraph",
            "organizations:ListRoots",
            "organizations:ListChildren",
            "organizations:ListDelegatedAdministrators",
            "pi:GetResourceMetrics",
            "tag:GetResources",
            "lambda:GetFunction",
            "lambda:GetFunctionConcurrency",
            "lambda:GetAccountSettings",
            "lambda:ListProvisionedConcurrencyConfigs",
            "lambda:ListAliases",
            "lambda:ListEventSourceMappings",
            "lambda:GetPolicy",
            "ec2:DescribeSubnets",
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingPolicies",
            "sqs:GetQueueAttributes",
            "kinesis:DescribeStream",
            "kinesis:DescribeLimits",
            "dynamodb:DescribeTable",
            "dynamodb:DescribeLimits",
            "dynamodb:DescribeContinuousBackups",
            "dynamodb:DescribeStream",
            "dynamodb:ListStreams",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeLoadBalancerAttributes",
            "rds:DescribeDBInstances",
            "rds:DescribeDBClusters",
            "rds:DescribeOptionGroups",
            "rds:DescribeDBClusterParameters",
            "rds:DescribeDBInstanceAutomatedBackups",
            "rds:DescribeAccountAttributes",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "s3:GetBucketNotification",
            "s3:GetBucketPolicy",
            "s3:GetBucketPublicAccessBlock",
            "s3:GetBucketTagging",
            "s3:GetBucketWebsite",
            "s3:GetIntelligentTieringConfiguration",
            "s3:GetLifecycleConfiguration",
            "s3:GetReplicationConfiguration",
            "s3:ListAllMyBuckets",
            "s3:ListStorageLensConfigurations",
            "servicequotas:GetServiceQuota",
            "servicequotas:ListRequestedServiceQuotaChangeHistory",
            "servicequotas:ListServiceQuotas"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AllowPutTargetsOnASpecificRule",
          "Effect": "Allow",
          "Action": [
            "events:PutTargets",
            "events:PutRule"
          ],
          "Resource": "arn:aws:events:*:*:rule/DevOps-Guru-managed-*"
        },
        {
          "Sid": "AllowCreateOpsItem",
          "Effect": "Allow",
          "Action": [
            "ssm:CreateOpsItem"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AllowAddTagsToOpsItem",
          "Effect": "Allow",
          "Action": [
            "ssm:AddTagsToResource"
          ],
          "Resource": "arn:aws:ssm:*:*:opsitem/*"
        },
        {
          "Sid": "AllowAccessOpsItem",
          "Effect": "Allow",
          "Action": [
            "ssm:GetOpsItem",
            "ssm:UpdateOpsItem"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/DevOps-GuruInsightSsmOpsItemRelated": "true"
            }
          }
        },
        {
          "Sid": "AllowCreateManagedRule",
          "Effect": "Allow",
          "Action": "events:PutRule",
          "Resource": "arn:aws:events:*:*:rule/DevOpsGuruManagedRule*"
        },
        {
          "Sid": "AllowAccessManagedRule",
          "Effect": "Allow",
          "Action": [
            "events:DescribeRule",
            "events:ListTargetsByRule"
          ],
          "Resource": "arn:aws:events:*:*:rule/DevOpsGuruManagedRule*"
        },
        {
          "Sid": "AllowOtherOperationsOnManagedRule",
          "Effect": "Allow",
          "Action": [
            "events:DeleteRule",
            "events:EnableRule",
            "events:DisableRule",
            "events:PutTargets",
            "events:RemoveTargets"
          ],
          "Resource": "arn:aws:events:*:*:rule/DevOpsGuruManagedRule*",
          "Condition": {
            "StringEquals": {
              "events:ManagedBy": "devops-guru.amazonaws.com"
            }
          }
        },
        {
          "Sid": "AllowTagBasedFilterLogEvents",
          "Effect": "Allow",
          "Action": [
            "logs:FilterLogEvents"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/DevOps-Guru-Analysis": "true"
            }
          }
        },
        {
          "Sid": "AllowAPIGatewayGetIntegrations",
          "Effect": "Allow",
          "Action": "apigateway:GET",
          "Resource": [
            "arn:aws:apigateway:*::/restapis/??????????",
            "arn:aws:apigateway:*::/restapis/*/resources",
            "arn:aws:apigateway:*::/restapis/*/resources/*/methods/*/integration"
          ]
        }
      ]
    },
    "VersionId": "v9",
    "IsDefaultVersion": true,
    "CreateDate": "2023-01-10T14:36:48+00:00"
  },
  "AmazonDocDB-ElasticServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricData"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": [
                "AWS/DocDB-Elastic"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-30T14:17:05+00:00"
  },
  "AmazonDocDBConsoleFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "docdb-elastic:CreateCluster",
            "docdb-elastic:UpdateCluster",
            "docdb-elastic:GetCluster",
            "docdb-elastic:DeleteCluster",
            "docdb-elastic:ListClusters",
            "docdb-elastic:CreateClusterSnapshot",
            "docdb-elastic:GetClusterSnapshot",
            "docdb-elastic:DeleteClusterSnapshot",
            "docdb-elastic:ListClusterSnapshots",
            "docdb-elastic:RestoreClusterFromSnapshot",
            "docdb-elastic:TagResource",
            "docdb-elastic:UntagResource",
            "docdb-elastic:ListTagsForResource",
            "rds:AddRoleToDBCluster",
            "rds:AddSourceIdentifierToSubscription",
            "rds:AddTagsToResource",
            "rds:ApplyPendingMaintenanceAction",
            "rds:CopyDBClusterParameterGroup",
            "rds:CopyDBClusterSnapshot",
            "rds:CopyDBParameterGroup",
            "rds:CreateDBCluster",
            "rds:CreateDBClusterParameterGroup",
            "rds:CreateDBClusterSnapshot",
            "rds:CreateDBInstance",
            "rds:CreateDBParameterGroup",
            "rds:CreateDBSubnetGroup",
            "rds:CreateEventSubscription",
            "rds:CreateGlobalCluster",
            "rds:DeleteDBCluster",
            "rds:DeleteDBClusterParameterGroup",
            "rds:DeleteDBClusterSnapshot",
            "rds:DeleteDBInstance",
            "rds:DeleteDBParameterGroup",
            "rds:DeleteDBSubnetGroup",
            "rds:DeleteEventSubscription",
            "rds:DeleteGlobalCluster",
            "rds:DescribeAccountAttributes",
            "rds:DescribeCertificates",
            "rds:DescribeDBClusterParameterGroups",
            "rds:DescribeDBClusterParameters",
            "rds:DescribeDBClusterSnapshotAttributes",
            "rds:DescribeDBClusterSnapshots",
            "rds:DescribeDBClusters",
            "rds:DescribeDBEngineVersions",
            "rds:DescribeDBInstances",
            "rds:DescribeDBLogFiles",
            "rds:DescribeDBParameterGroups",
            "rds:DescribeDBParameters",
            "rds:DescribeDBSecurityGroups",
            "rds:DescribeDBSubnetGroups",
            "rds:DescribeEngineDefaultClusterParameters",
            "rds:DescribeEngineDefaultParameters",
            "rds:DescribeEventCategories",
            "rds:DescribeEventSubscriptions",
            "rds:DescribeEvents",
            "rds:DescribeGlobalClusters",
            "rds:DescribeOptionGroups",
            "rds:DescribeOrderableDBInstanceOptions",
            "rds:DescribePendingMaintenanceActions",
            "rds:DescribeValidDBInstanceModifications",
            "rds:DownloadDBLogFilePortion",
            "rds:FailoverDBCluster",
            "rds:ListTagsForResource",
            "rds:ModifyDBCluster",
            "rds:ModifyDBClusterParameterGroup",
            "rds:ModifyDBClusterSnapshotAttribute",
            "rds:ModifyDBInstance",
            "rds:ModifyDBParameterGroup",
            "rds:ModifyDBSubnetGroup",
            "rds:ModifyEventSubscription",
            "rds:ModifyGlobalCluster",
            "rds:PromoteReadReplicaDBCluster",
            "rds:RebootDBInstance",
            "rds:RemoveFromGlobalCluster",
            "rds:RemoveRoleFromDBCluster",
            "rds:RemoveSourceIdentifierFromSubscription",
            "rds:RemoveTagsFromResource",
            "rds:ResetDBClusterParameterGroup",
            "rds:ResetDBParameterGroup",
            "rds:RestoreDBClusterFromSnapshot",
            "rds:RestoreDBClusterToPointInTime"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:GetRole",
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "ec2:AllocateAddress",
            "ec2:AssignIpv6Addresses",
            "ec2:AssignPrivateIpAddresses",
            "ec2:AssociateAddress",
            "ec2:AssociateRouteTable",
            "ec2:AssociateSubnetCidrBlock",
            "ec2:AssociateVpcCidrBlock",
            "ec2:AttachInternetGateway",
            "ec2:AttachNetworkInterface",
            "ec2:CreateCustomerGateway",
            "ec2:CreateDefaultSubnet",
            "ec2:CreateDefaultVpc",
            "ec2:CreateInternetGateway",
            "ec2:CreateNatGateway",
            "ec2:CreateNetworkInterface",
            "ec2:CreateRoute",
            "ec2:CreateRouteTable",
            "ec2:CreateSecurityGroup",
            "ec2:CreateSubnet",
            "ec2:CreateVpc",
            "ec2:CreateVpcEndpoint",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeCustomerGateways",
            "ec2:DescribeInstances",
            "ec2:DescribeNatGateways",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePrefixLists",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroupReferences",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:ModifySubnetAttribute",
            "ec2:ModifyVpcAttribute",
            "ec2:ModifyVpcEndpoint",
            "kms:DescribeKey",
            "kms:ListAliases",
            "kms:ListKeyPolicies",
            "kms:ListKeys",
            "kms:ListRetirableGrants",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "sns:ListSubscriptions",
            "sns:ListTopics",
            "sns:Publish"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "rds.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/docdb-elastic.amazonaws.com/AWSServiceRoleForDocDB-Elastic",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "docdb-elastic.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-30T15:23:27+00:00"
  },
  "AmazonDocDBElasticFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "docdb-elastic:CreateCluster",
            "docdb-elastic:UpdateCluster",
            "docdb-elastic:GetCluster",
            "docdb-elastic:DeleteCluster",
            "docdb-elastic:ListClusters",
            "docdb-elastic:CreateClusterSnapshot",
            "docdb-elastic:GetClusterSnapshot",
            "docdb-elastic:DeleteClusterSnapshot",
            "docdb-elastic:ListClusterSnapshots",
            "docdb-elastic:RestoreClusterFromSnapshot",
            "docdb-elastic:TagResource",
            "docdb-elastic:UntagResource",
            "docdb-elastic:ListTagsForResource"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateVpcEndpoint",
            "ec2:DescribeVpcEndpoints",
            "ec2:DeleteVpcEndpoints",
            "ec2:ModifyVpcEndpoint",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:DescribeAvailabilityZones",
            "secretsmanager:ListSecrets"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:CalledViaFirst": "docdb-elastic.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:Decrypt",
            "kms:DescribeKey",
            "kms:GenerateDataKey"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "kms:ViaService": [
                "docdb-elastic.*.amazonaws.com"
              ],
              "aws:ResourceTag/DocDBElasticFullAccess": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:CreateGrant"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/DocDBElasticFullAccess": "*",
              "kms:ViaService": [
                "docdb-elastic.*.amazonaws.com"
              ]
            },
            "Bool": {
              "kms:GrantIsForAWSResource": true
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:ListSecretVersionIds",
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:GetResourcePolicy"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "secretsmanager:ResourceTag/DocDBElasticFullAccess": "*"
            },
            "StringEquals": {
              "aws:CalledViaFirst": "docdb-elastic.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:GetMetricData",
            "cloudwatch:ListMetrics",
            "cloudwatch:GetMetricStatistics"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/docdb-elastic.amazonaws.com/AWSServiceRoleForDocDB-Elastic",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "docdb-elastic.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-06-21T18:05:47+00:00"
  },
  "AmazonDocDBElasticReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "docdb-elastic:ListClusters",
            "docdb-elastic:GetCluster",
            "docdb-elastic:ListClusterSnapshots",
            "docdb-elastic:GetClusterSnapshot",
            "docdb-elastic:ListTagsForResource"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-06-21T16:57:09+00:00"
  },
  "AmazonDocDBFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "rds:AddRoleToDBCluster",
            "rds:AddSourceIdentifierToSubscription",
            "rds:AddTagsToResource",
            "rds:ApplyPendingMaintenanceAction",
            "rds:CopyDBClusterParameterGroup",
            "rds:CopyDBClusterSnapshot",
            "rds:CopyDBParameterGroup",
            "rds:CreateDBCluster",
            "rds:CreateDBClusterParameterGroup",
            "rds:CreateDBClusterSnapshot",
            "rds:CreateDBInstance",
            "rds:CreateDBParameterGroup",
            "rds:CreateDBSubnetGroup",
            "rds:CreateEventSubscription",
            "rds:DeleteDBCluster",
            "rds:DeleteDBClusterParameterGroup",
            "rds:DeleteDBClusterSnapshot",
            "rds:DeleteDBInstance",
            "rds:DeleteDBParameterGroup",
            "rds:DeleteDBSubnetGroup",
            "rds:DeleteEventSubscription",
            "rds:DescribeAccountAttributes",
            "rds:DescribeCertificates",
            "rds:DescribeDBClusterParameterGroups",
            "rds:DescribeDBClusterParameters",
            "rds:DescribeDBClusterSnapshotAttributes",
            "rds:DescribeDBClusterSnapshots",
            "rds:DescribeDBClusters",
            "rds:DescribeDBEngineVersions",
            "rds:DescribeDBInstances",
            "rds:DescribeDBLogFiles",
            "rds:DescribeDBParameterGroups",
            "rds:DescribeDBParameters",
            "rds:DescribeDBSecurityGroups",
            "rds:DescribeDBSubnetGroups",
            "rds:DescribeEngineDefaultClusterParameters",
            "rds:DescribeEngineDefaultParameters",
            "rds:DescribeEventCategories",
            "rds:DescribeEventSubscriptions",
            "rds:DescribeEvents",
            "rds:DescribeOptionGroups",
            "rds:DescribeOrderableDBInstanceOptions",
            "rds:DescribePendingMaintenanceActions",
            "rds:DescribeValidDBInstanceModifications",
            "rds:DownloadDBLogFilePortion",
            "rds:FailoverDBCluster",
            "rds:ListTagsForResource",
            "rds:ModifyDBCluster",
            "rds:ModifyDBClusterParameterGroup",
            "rds:ModifyDBClusterSnapshotAttribute",
            "rds:ModifyDBInstance",
            "rds:ModifyDBParameterGroup",
            "rds:ModifyDBSubnetGroup",
            "rds:ModifyEventSubscription",
            "rds:PromoteReadReplicaDBCluster",
            "rds:RebootDBInstance",
            "rds:RemoveRoleFromDBCluster",
            "rds:RemoveSourceIdentifierFromSubscription",
            "rds:RemoveTagsFromResource",
            "rds:ResetDBClusterParameterGroup",
            "rds:ResetDBParameterGroup",
            "rds:RestoreDBClusterFromSnapshot",
            "rds:RestoreDBClusterToPointInTime"
          ],
          "Effect": "Allow",
          "Resource": [
            "*"
          ]
        },
        {
          "Action": [
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs",
            "kms:ListAliases",
            "kms:ListKeyPolicies",
            "kms:ListKeys",
            "kms:ListRetirableGrants",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "sns:ListSubscriptions",
            "sns:ListTopics",
            "sns:Publish"
          ],
          "Effect": "Allow",
          "Resource": [
            "*"
          ]
        },
        {
          "Action": "iam:CreateServiceLinkedRole",
          "Effect": "Allow",
          "Resource": "arn:aws:iam::*:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "rds.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-01-09T20:21:44+00:00"
  },
  "AmazonDocDBReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "rds:DescribeAccountAttributes",
            "rds:DescribeCertificates",
            "rds:DescribeDBClusterParameterGroups",
            "rds:DescribeDBClusterParameters",
            "rds:DescribeDBClusterSnapshotAttributes",
            "rds:DescribeDBClusterSnapshots",
            "rds:DescribeDBClusters",
            "rds:DescribeDBEngineVersions",
            "rds:DescribeDBInstances",
            "rds:DescribeDBLogFiles",
            "rds:DescribeDBParameterGroups",
            "rds:DescribeDBParameters",
            "rds:DescribeDBSubnetGroups",
            "rds:DescribeEventCategories",
            "rds:DescribeEventSubscriptions",
            "rds:DescribeEvents",
            "rds:DescribeOrderableDBInstanceOptions",
            "rds:DescribePendingMaintenanceActions",
            "rds:DownloadDBLogFilePortion",
            "rds:ListTagsForResource"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "kms:ListKeys",
            "kms:ListRetirableGrants",
            "kms:ListAliases",
            "kms:ListKeyPolicies"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "logs:DescribeLogStreams",
            "logs:GetLogEvents"
          ],
          "Effect": "Allow",
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/rds/*:log-stream:*",
            "arn:aws:logs:*:*:log-group:/aws/docdb/*:log-stream:*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-01-09T20:30:28+00:00"
  },
  "AmazonDynamoDBFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "dynamodb:*",
            "dax:*",
            "application-autoscaling:DeleteScalingPolicy",
            "application-autoscaling:DeregisterScalableTarget",
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingActivities",
            "application-autoscaling:DescribeScalingPolicies",
            "application-autoscaling:PutScalingPolicy",
            "application-autoscaling:RegisterScalableTarget",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarmHistory",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DescribeAlarmsForMetric",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:GetMetricData",
            "datapipeline:ActivatePipeline",
            "datapipeline:CreatePipeline",
            "datapipeline:DeletePipeline",
            "datapipeline:DescribeObjects",
            "datapipeline:DescribePipelines",
            "datapipeline:GetPipelineDefinition",
            "datapipeline:ListPipelines",
            "datapipeline:PutPipelineDefinition",
            "datapipeline:QueryObjects",
            "ec2:DescribeVpcs",
            "ec2:DescribeSubnets",
            "ec2:DescribeSecurityGroups",
            "iam:GetRole",
            "iam:ListRoles",
            "kms:DescribeKey",
            "kms:ListAliases",
            "sns:CreateTopic",
            "sns:DeleteTopic",
            "sns:ListSubscriptions",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTopics",
            "sns:Subscribe",
            "sns:Unsubscribe",
            "sns:SetTopicAttributes",
            "lambda:CreateFunction",
            "lambda:ListFunctions",
            "lambda:ListEventSourceMappings",
            "lambda:CreateEventSourceMapping",
            "lambda:DeleteEventSourceMapping",
            "lambda:GetFunctionConfiguration",
            "lambda:DeleteFunction",
            "resource-groups:ListGroups",
            "resource-groups:ListGroupResources",
            "resource-groups:GetGroup",
            "resource-groups:GetGroupQuery",
            "resource-groups:DeleteGroup",
            "resource-groups:CreateGroup",
            "tag:GetResources",
            "kinesis:ListStreams",
            "kinesis:DescribeStream",
            "kinesis:DescribeStreamSummary"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": "cloudwatch:GetInsightRuleReport",
          "Effect": "Allow",
          "Resource": "arn:aws:cloudwatch:*:*:insight-rule/DynamoDBContributorInsights*"
        },
        {
          "Action": [
            "iam:PassRole"
          ],
          "Effect": "Allow",
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": [
                "application-autoscaling.amazonaws.com",
                "application-autoscaling.amazonaws.com.cn",
                "dax.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": [
                "replication.dynamodb.amazonaws.com",
                "dax.amazonaws.com",
                "dynamodb.application-autoscaling.amazonaws.com",
                "contributorinsights.dynamodb.amazonaws.com",
                "kinesisreplication.dynamodb.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v15",
    "IsDefaultVersion": true,
    "CreateDate": "2021-01-29T17:38:30+00:00"
  },
  "AmazonDynamoDBFullAccesswithDataPipeline": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarmHistory",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DescribeAlarmsForMetric",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "cloudwatch:PutMetricAlarm",
            "dynamodb:*",
            "sns:CreateTopic",
            "sns:DeleteTopic",
            "sns:ListSubscriptions",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTopics",
            "sns:Subscribe",
            "sns:Unsubscribe",
            "sns:SetTopicAttributes"
          ],
          "Effect": "Allow",
          "Resource": "*",
          "Sid": "DDBConsole"
        },
        {
          "Action": [
            "lambda:*",
            "iam:ListRoles"
          ],
          "Effect": "Allow",
          "Resource": "*",
          "Sid": "DDBConsoleTriggers"
        },
        {
          "Action": [
            "datapipeline:*",
            "iam:ListRoles"
          ],
          "Effect": "Allow",
          "Resource": "*",
          "Sid": "DDBConsoleImportExport"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:GetRolePolicy",
            "iam:PassRole"
          ],
          "Resource": [
            "*"
          ],
          "Sid": "IAMEDPRoles"
        },
        {
          "Action": [
            "ec2:CreateTags",
            "ec2:DescribeInstances",
            "ec2:RunInstances",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances",
            "elasticmapreduce:*",
            "datapipeline:*"
          ],
          "Effect": "Allow",
          "Resource": "*",
          "Sid": "EMR"
        },
        {
          "Action": [
            "s3:DeleteObject",
            "s3:Get*",
            "s3:List*",
            "s3:Put*"
          ],
          "Effect": "Allow",
          "Resource": [
            "*"
          ],
          "Sid": "S3"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2015-11-12T02:17:42+00:00"
  },
  "AmazonDynamoDBReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingActivities",
            "application-autoscaling:DescribeScalingPolicies",
            "cloudwatch:DescribeAlarmHistory",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DescribeAlarmsForMetric",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "cloudwatch:GetMetricData",
            "datapipeline:DescribeObjects",
            "datapipeline:DescribePipelines",
            "datapipeline:GetPipelineDefinition",
            "datapipeline:ListPipelines",
            "datapipeline:QueryObjects",
            "dynamodb:BatchGetItem",
            "dynamodb:Describe*",
            "dynamodb:List*",
            "dynamodb:GetItem",
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:PartiQLSelect",
            "dax:Describe*",
            "dax:List*",
            "dax:GetItem",
            "dax:BatchGetItem",
            "dax:Query",
            "dax:Scan",
            "ec2:DescribeVpcs",
            "ec2:DescribeSubnets",
            "ec2:DescribeSecurityGroups",
            "iam:GetRole",
            "iam:ListRoles",
            "kms:DescribeKey",
            "kms:ListAliases",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTopics",
            "lambda:ListFunctions",
            "lambda:ListEventSourceMappings",
            "lambda:GetFunctionConfiguration",
            "resource-groups:ListGroups",
            "resource-groups:ListGroupResources",
            "resource-groups:GetGroup",
            "resource-groups:GetGroupQuery",
            "tag:GetResources",
            "kinesis:ListStreams",
            "kinesis:DescribeStream",
            "kinesis:DescribeStreamSummary"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": "cloudwatch:GetInsightRuleReport",
          "Effect": "Allow",
          "Resource": "arn:aws:cloudwatch:*:*:insight-rule/DynamoDBContributorInsights*"
        }
      ]
    },
    "VersionId": "v13",
    "IsDefaultVersion": true,
    "CreateDate": "2021-01-27T01:01:47+00:00"
  },
  "AmazonEBSCSIDriverPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSnapshot",
            "ec2:AttachVolume",
            "ec2:DetachVolume",
            "ec2:ModifyVolume",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeInstances",
            "ec2:DescribeSnapshots",
            "ec2:DescribeTags",
            "ec2:DescribeVolumes",
            "ec2:DescribeVolumesModifications"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:volume/*",
            "arn:aws:ec2:*:*:snapshot/*"
          ],
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": [
                "CreateVolume",
                "CreateSnapshot"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:volume/*",
            "arn:aws:ec2:*:*:snapshot/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateVolume"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "aws:RequestTag/ebs.csi.aws.com/cluster": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateVolume"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "aws:RequestTag/CSIVolumeName": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteVolume"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/ebs.csi.aws.com/cluster": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteVolume"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/CSIVolumeName": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteVolume"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/kubernetes.io/created-for/pvc/name": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteSnapshot"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/CSIVolumeSnapshotName": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteSnapshot"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/ebs.csi.aws.com/cluster": "true"
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-18T14:42:46+00:00"
  },
  "AmazonEC2ContainerRegistryFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ecr:*",
            "cloudtrail:LookupEvents"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": [
                "replication.ecr.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-05T00:04:19+00:00"
  },
  "AmazonEC2ContainerRegistryPowerUser": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ecr:GetAuthorizationToken",
            "ecr:BatchCheckLayerAvailability",
            "ecr:GetDownloadUrlForLayer",
            "ecr:GetRepositoryPolicy",
            "ecr:DescribeRepositories",
            "ecr:ListImages",
            "ecr:DescribeImages",
            "ecr:BatchGetImage",
            "ecr:GetLifecyclePolicy",
            "ecr:GetLifecyclePolicyPreview",
            "ecr:ListTagsForResource",
            "ecr:DescribeImageScanFindings",
            "ecr:InitiateLayerUpload",
            "ecr:UploadLayerPart",
            "ecr:CompleteLayerUpload",
            "ecr:PutImage"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2019-12-10T20:48:08+00:00"
  },
  "AmazonEC2ContainerRegistryReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ecr:GetAuthorizationToken",
            "ecr:BatchCheckLayerAvailability",
            "ecr:GetDownloadUrlForLayer",
            "ecr:GetRepositoryPolicy",
            "ecr:DescribeRepositories",
            "ecr:ListImages",
            "ecr:DescribeImages",
            "ecr:BatchGetImage",
            "ecr:GetLifecyclePolicy",
            "ecr:GetLifecyclePolicyPreview",
            "ecr:ListTagsForResource",
            "ecr:DescribeImageScanFindings"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2019-12-10T20:56:32+00:00"
  },
  "AmazonEC2ContainerServiceAutoscaleRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ecs:DescribeServices",
            "ecs:UpdateService"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:DescribeAlarms",
            "cloudwatch:PutMetricAlarm"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2018-02-05T19:15:15+00:00"
  },
  "AmazonEC2ContainerServiceEventsRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ecs:RunTask"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringLike": {
              "iam:PassedToService": "ecs-tasks.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ecs:TagResource",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "ecs:CreateAction": [
                "RunTask"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-06T22:25:12+00:00"
  },
  "AmazonEC2ContainerServiceRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:Describe*",
            "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
            "elasticloadbalancing:DeregisterTargets",
            "elasticloadbalancing:Describe*",
            "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
            "elasticloadbalancing:RegisterTargets"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2016-08-11T13:08:01+00:00"
  },
  "AmazonEC2ContainerServiceforEC2Role": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeTags",
            "ecs:CreateCluster",
            "ecs:DeregisterContainerInstance",
            "ecs:DiscoverPollEndpoint",
            "ecs:Poll",
            "ecs:RegisterContainerInstance",
            "ecs:StartTelemetrySession",
            "ecs:UpdateContainerInstancesState",
            "ecs:Submit*",
            "ecr:GetAuthorizationToken",
            "ecr:BatchCheckLayerAvailability",
            "ecr:GetDownloadUrlForLayer",
            "ecr:BatchGetImage",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "ecs:TagResource",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "ecs:CreateAction": [
                "CreateCluster",
                "RegisterContainerInstance"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v7",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-06T22:19:04+00:00"
  },
  "AmazonEC2FullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": "ec2:*",
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "elasticloadbalancing:*",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "cloudwatch:*",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "autoscaling:*",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": [
                "autoscaling.amazonaws.com",
                "ec2scheduled.amazonaws.com",
                "elasticloadbalancing.amazonaws.com",
                "spot.amazonaws.com",
                "spotfleet.amazonaws.com",
                "transitgateway.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2018-11-27T02:16:56+00:00"
  },
  "AmazonEC2ReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "ec2:Describe*",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "elasticloadbalancing:Describe*",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:ListMetrics",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:Describe*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "autoscaling:Describe*",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:40:17+00:00"
  },
  "AmazonEC2RolePolicyForLaunchWizard": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AttachVolume",
            "ec2:RebootInstances",
            "ec2:StartInstances",
            "ec2:StopInstances"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:volume/*",
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/LaunchWizardResourceGroupID": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:ReplaceRoute"
          ],
          "Resource": "arn:aws:ec2:*:*:route-table/*",
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/LaunchWizardApplicationType": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeAddresses",
            "ec2:AssociateAddress",
            "ec2:DescribeInstances",
            "ec2:DescribeImages",
            "ec2:DescribeRegions",
            "ec2:DescribeVolumes",
            "ec2:DescribeRouteTables",
            "ec2:ModifyInstanceAttribute",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:PutMetricData",
            "ssm:GetCommandInvocation"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags",
            "ec2:CreateVolume"
          ],
          "Resource": "arn:aws:ec2:*:*:volume/*",
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "LaunchWizardResourceGroupID",
                "LaunchWizardApplicationType"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:ListBucket",
            "s3:PutObject",
            "s3:PutObjectTagging",
            "s3:GetBucketLocation",
            "logs:PutLogEvents",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams"
          ],
          "Resource": [
            "arn:aws:logs:*:*:*",
            "arn:aws:s3:::launchwizard*",
            "arn:aws:s3:::aws-sap-data-provider/config.properties"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "logs:Create*",
          "Resource": "arn:aws:logs:*:*:*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:Describe*",
            "cloudformation:DescribeStackResources",
            "cloudformation:SignalResource",
            "cloudformation:DescribeStackResource",
            "cloudformation:DescribeStacks"
          ],
          "Resource": "*",
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": "LaunchWizardResourceGroupID"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:BatchGetItem",
            "dynamodb:PutItem",
            "sqs:ReceiveMessage",
            "sqs:SendMessage",
            "dynamodb:Scan",
            "s3:ListBucket",
            "dynamodb:Query",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteTable",
            "dynamodb:CreateTable",
            "s3:GetObject",
            "dynamodb:DescribeTable",
            "s3:GetBucketLocation",
            "dynamodb:UpdateTable"
          ],
          "Resource": [
            "arn:aws:s3:::launchwizard*",
            "arn:aws:dynamodb:*:*:table/LaunchWizard*",
            "arn:aws:sqs:*:*:LaunchWizard*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "ssm:SendCommand",
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "StringLike": {
              "ssm:resourceTag/LaunchWizardApplicationType": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:SendCommand",
            "ssm:GetDocument"
          ],
          "Resource": [
            "arn:aws:ssm:*:*:document/AWSSAP-InstallBackint"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "fsx:DescribeFileSystems",
            "fsx:ListTagsForResource",
            "fsx:DescribeStorageVirtualMachines"
          ],
          "Resource": "*",
          "Condition": {
            "ForAllValues:StringLike": {
              "aws:TagKeys": "LaunchWizard*"
            }
          }
        }
      ]
    },
    "VersionId": "v10",
    "IsDefaultVersion": true,
    "CreateDate": "2022-05-16T21:16:38+00:00"
  },
  "AmazonEC2RoleforAWSCodeDeploy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:ListBucket"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2017-03-20T17:14:10+00:00"
  },
  "AmazonEC2RoleforAWSCodeDeployLimited": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:ListBucket"
          ],
          "Resource": "arn:aws:s3:::*/CodeDeploy/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:GetObjectVersion"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "s3:ExistingObjectTag/UseWithCodeDeploy": "true"
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-01-20T21:37:31+00:00"
  },
  "AmazonEC2RoleforDataPipelineRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:*",
            "datapipeline:*",
            "dynamodb:*",
            "ec2:Describe*",
            "elasticmapreduce:AddJobFlowSteps",
            "elasticmapreduce:Describe*",
            "elasticmapreduce:ListInstance*",
            "elasticmapreduce:ModifyInstanceGroups",
            "rds:Describe*",
            "redshift:DescribeClusters",
            "redshift:DescribeClusterSecurityGroups",
            "s3:*",
            "sdb:*",
            "sns:*",
            "sqs:*"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2016-02-22T17:24:05+00:00"
  },
  "AmazonEC2RoleforSSM": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ssm:DescribeAssociation",
            "ssm:GetDeployablePatchSnapshotForInstance",
            "ssm:GetDocument",
            "ssm:DescribeDocument",
            "ssm:GetManifest",
            "ssm:GetParameters",
            "ssm:ListAssociations",
            "ssm:ListInstanceAssociations",
            "ssm:PutInventory",
            "ssm:PutComplianceItems",
            "ssm:PutConfigurePackageResult",
            "ssm:UpdateAssociationStatus",
            "ssm:UpdateInstanceAssociationStatus",
            "ssm:UpdateInstanceInformation"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssmmessages:CreateControlChannel",
            "ssmmessages:CreateDataChannel",
            "ssmmessages:OpenControlChannel",
            "ssmmessages:OpenDataChannel"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2messages:AcknowledgeMessage",
            "ec2messages:DeleteMessage",
            "ec2messages:FailMessage",
            "ec2messages:GetEndpoint",
            "ec2messages:GetMessages",
            "ec2messages:SendReply"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricData"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstanceStatus"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ds:CreateComputer",
            "ds:DescribeDirectories"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetBucketLocation",
            "s3:PutObject",
            "s3:GetObject",
            "s3:GetEncryptionConfiguration",
            "s3:AbortMultipartUpload",
            "s3:ListMultipartUploadParts",
            "s3:ListBucket",
            "s3:ListBucketMultipartUploads"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v8",
    "IsDefaultVersion": true,
    "CreateDate": "2019-01-24T19:20:51+00:00"
  },
  "AmazonEC2SpotFleetAutoscaleRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeSpotFleetRequests",
            "ec2:ModifySpotFleetRequest"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:DescribeAlarms",
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:DeleteAlarms"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Action": "iam:CreateServiceLinkedRole",
          "Effect": "Allow",
          "Resource": "arn:aws:iam::*:role/aws-service-role/ec2.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_EC2SpotFleetRequest",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "ec2.application-autoscaling.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2019-02-18T19:17:03+00:00"
  },
  "AmazonEC2SpotFleetTaggingRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeImages",
            "ec2:DescribeSubnets",
            "ec2:RequestSpotInstances",
            "ec2:TerminateInstances",
            "ec2:DescribeInstanceStatus",
            "ec2:CreateTags",
            "ec2:RunInstances"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "ec2.amazonaws.com",
                "ec2.amazonaws.com.cn"
              ]
            }
          },
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
          ],
          "Resource": [
            "arn:aws:elasticloadbalancing:*:*:loadbalancer/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:RegisterTargets"
          ],
          "Resource": [
            "arn:aws:elasticloadbalancing:*:*:*/*"
          ]
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2020-04-23T19:30:49+00:00"
  },
  "AmazonECSServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "ECSTaskManagement",
          "Effect": "Allow",
          "Action": [
            "ec2:AttachNetworkInterface",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:Describe*",
            "ec2:DetachNetworkInterface",
            "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
            "elasticloadbalancing:DeregisterTargets",
            "elasticloadbalancing:Describe*",
            "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
            "elasticloadbalancing:RegisterTargets",
            "route53:ChangeResourceRecordSets",
            "route53:CreateHealthCheck",
            "route53:DeleteHealthCheck",
            "route53:Get*",
            "route53:List*",
            "route53:UpdateHealthCheck",
            "servicediscovery:DeregisterInstance",
            "servicediscovery:Get*",
            "servicediscovery:List*",
            "servicediscovery:RegisterInstance",
            "servicediscovery:UpdateInstanceCustomHealthStatus"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AutoScaling",
          "Effect": "Allow",
          "Action": [
            "autoscaling:Describe*"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AutoScalingManagement",
          "Effect": "Allow",
          "Action": [
            "autoscaling:DeletePolicy",
            "autoscaling:PutScalingPolicy",
            "autoscaling:SetInstanceProtection",
            "autoscaling:UpdateAutoScalingGroup"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "autoscaling:ResourceTag/AmazonECSManaged": "false"
            }
          }
        },
        {
          "Sid": "AutoScalingPlanManagement",
          "Effect": "Allow",
          "Action": [
            "autoscaling-plans:CreateScalingPlan",
            "autoscaling-plans:DeleteScalingPlan",
            "autoscaling-plans:DescribeScalingPlans"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CWAlarmManagement",
          "Effect": "Allow",
          "Action": [
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:PutMetricAlarm"
          ],
          "Resource": "arn:aws:cloudwatch:*:*:alarm:*"
        },
        {
          "Sid": "ECSTagging",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": "arn:aws:ec2:*:*:network-interface/*"
        },
        {
          "Sid": "CWLogGroupManagement",
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:DescribeLogGroups",
            "logs:PutRetentionPolicy"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/ecs/*"
        },
        {
          "Sid": "CWLogStreamManagement",
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/ecs/*:log-stream:*"
        },
        {
          "Sid": "ExecuteCommandSessionManagement",
          "Effect": "Allow",
          "Action": [
            "ssm:DescribeSessions"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ExecuteCommand",
          "Effect": "Allow",
          "Action": [
            "ssm:StartSession"
          ],
          "Resource": [
            "arn:aws:ecs:*:*:task/*",
            "arn:aws:ssm:*:*:document/AmazonECS-ExecuteInteractiveCommand"
          ]
        },
        {
          "Sid": "CloudMapResourceCreation",
          "Effect": "Allow",
          "Action": [
            "servicediscovery:CreateHttpNamespace",
            "servicediscovery:CreateService"
          ],
          "Resource": "*",
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "AmazonECSManaged"
              ]
            }
          }
        },
        {
          "Sid": "CloudMapResourceTagging",
          "Effect": "Allow",
          "Action": "servicediscovery:TagResource",
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "aws:RequestTag/AmazonECSManaged": "*"
            }
          }
        },
        {
          "Sid": "CloudMapResourceDeletion",
          "Effect": "Allow",
          "Action": [
            "servicediscovery:DeleteService"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AmazonECSManaged": "false"
            }
          }
        },
        {
          "Sid": "CloudMapResourceDiscovery",
          "Effect": "Allow",
          "Action": [
            "servicediscovery:DiscoverInstances",
            "servicediscovery:DiscoverInstancesRevision"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v10",
    "IsDefaultVersion": true,
    "CreateDate": "2023-10-10T16:57:39+00:00"
  },
  "AmazonECSTaskExecutionRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ecr:GetAuthorizationToken",
            "ecr:BatchCheckLayerAvailability",
            "ecr:GetDownloadUrlForLayer",
            "ecr:BatchGetImage",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2017-11-16T18:48:22+00:00"
  },
  "AmazonECS_FullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "application-autoscaling:DeleteScalingPolicy",
            "application-autoscaling:DeregisterScalableTarget",
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingActivities",
            "application-autoscaling:DescribeScalingPolicies",
            "application-autoscaling:PutScalingPolicy",
            "application-autoscaling:RegisterScalableTarget",
            "appmesh:DescribeVirtualGateway",
            "appmesh:DescribeVirtualNode",
            "appmesh:ListMeshes",
            "appmesh:ListVirtualGateways",
            "appmesh:ListVirtualNodes",
            "autoscaling:CreateAutoScalingGroup",
            "autoscaling:CreateLaunchConfiguration",
            "autoscaling:DeleteAutoScalingGroup",
            "autoscaling:DeleteLaunchConfiguration",
            "autoscaling:Describe*",
            "autoscaling:UpdateAutoScalingGroup",
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeStack*",
            "cloudformation:UpdateStack",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:PutMetricAlarm",
            "codedeploy:BatchGetApplicationRevisions",
            "codedeploy:BatchGetApplications",
            "codedeploy:BatchGetDeploymentGroups",
            "codedeploy:BatchGetDeployments",
            "codedeploy:ContinueDeployment",
            "codedeploy:CreateApplication",
            "codedeploy:CreateDeployment",
            "codedeploy:CreateDeploymentGroup",
            "codedeploy:GetApplication",
            "codedeploy:GetApplicationRevision",
            "codedeploy:GetDeployment",
            "codedeploy:GetDeploymentConfig",
            "codedeploy:GetDeploymentGroup",
            "codedeploy:GetDeploymentTarget",
            "codedeploy:ListApplicationRevisions",
            "codedeploy:ListApplications",
            "codedeploy:ListDeploymentConfigs",
            "codedeploy:ListDeploymentGroups",
            "codedeploy:ListDeployments",
            "codedeploy:ListDeploymentTargets",
            "codedeploy:RegisterApplicationRevision",
            "codedeploy:StopDeployment",
            "ec2:AssociateRouteTable",
            "ec2:AttachInternetGateway",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CancelSpotFleetRequests",
            "ec2:CreateInternetGateway",
            "ec2:CreateLaunchTemplate",
            "ec2:CreateRoute",
            "ec2:CreateRouteTable",
            "ec2:CreateSecurityGroup",
            "ec2:CreateSubnet",
            "ec2:CreateVpc",
            "ec2:DeleteLaunchTemplate",
            "ec2:DeleteSubnet",
            "ec2:DeleteVpc",
            "ec2:Describe*",
            "ec2:DetachInternetGateway",
            "ec2:DisassociateRouteTable",
            "ec2:ModifySubnetAttribute",
            "ec2:ModifyVpcAttribute",
            "ec2:RequestSpotFleet",
            "ec2:RunInstances",
            "ecs:*",
            "elasticfilesystem:DescribeAccessPoints",
            "elasticfilesystem:DescribeFileSystems",
            "elasticloadbalancing:CreateListener",
            "elasticloadbalancing:CreateLoadBalancer",
            "elasticloadbalancing:CreateRule",
            "elasticloadbalancing:CreateTargetGroup",
            "elasticloadbalancing:DeleteListener",
            "elasticloadbalancing:DeleteLoadBalancer",
            "elasticloadbalancing:DeleteRule",
            "elasticloadbalancing:DeleteTargetGroup",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeRules",
            "elasticloadbalancing:DescribeTargetGroups",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:ListRuleNamesByTarget",
            "events:ListTargetsByRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "fsx:DescribeFileSystems",
            "iam:ListAttachedRolePolicies",
            "iam:ListInstanceProfiles",
            "iam:ListRoles",
            "lambda:ListFunctions",
            "logs:CreateLogGroup",
            "logs:DescribeLogGroups",
            "logs:FilterLogEvents",
            "route53:CreateHostedZone",
            "route53:DeleteHostedZone",
            "route53:GetHealthCheck",
            "route53:GetHostedZone",
            "route53:ListHostedZonesByName",
            "servicediscovery:CreatePrivateDnsNamespace",
            "servicediscovery:CreateService",
            "servicediscovery:DeleteService",
            "servicediscovery:GetNamespace",
            "servicediscovery:GetOperation",
            "servicediscovery:GetService",
            "servicediscovery:ListNamespaces",
            "servicediscovery:ListServices",
            "servicediscovery:UpdateService",
            "sns:ListTopics"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:GetParameter",
            "ssm:GetParameters",
            "ssm:GetParametersByPath"
          ],
          "Resource": "arn:aws:ssm:*:*:parameter/aws/service/ecs*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteInternetGateway",
            "ec2:DeleteRoute",
            "ec2:DeleteRouteTable",
            "ec2:DeleteSecurityGroup"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/aws:cloudformation:stack-name": "EC2ContainerService-*"
            }
          }
        },
        {
          "Action": "iam:PassRole",
          "Effect": "Allow",
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringLike": {
              "iam:PassedToService": "ecs-tasks.amazonaws.com"
            }
          }
        },
        {
          "Action": "iam:PassRole",
          "Effect": "Allow",
          "Resource": [
            "arn:aws:iam::*:role/ecsInstanceRole*"
          ],
          "Condition": {
            "StringLike": {
              "iam:PassedToService": [
                "ec2.amazonaws.com",
                "ec2.amazonaws.com.cn"
              ]
            }
          }
        },
        {
          "Action": "iam:PassRole",
          "Effect": "Allow",
          "Resource": [
            "arn:aws:iam::*:role/ecsAutoscaleRole*"
          ],
          "Condition": {
            "StringLike": {
              "iam:PassedToService": [
                "application-autoscaling.amazonaws.com",
                "application-autoscaling.amazonaws.com.cn"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": [
                "autoscaling.amazonaws.com",
                "ecs.amazonaws.com",
                "ecs.application-autoscaling.amazonaws.com",
                "spot.amazonaws.com",
                "spotfleet.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:AddTags"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "elasticloadbalancing:CreateAction": [
                "CreateTargetGroup",
                "CreateRule",
                "CreateListener",
                "CreateLoadBalancer"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v20",
    "IsDefaultVersion": true,
    "CreateDate": "2023-01-04T16:26:05+00:00"
  },
  "AmazonEFSCSIDriverPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AllowDescribe",
          "Effect": "Allow",
          "Action": [
            "elasticfilesystem:DescribeAccessPoints",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DescribeMountTargets",
            "ec2:DescribeAvailabilityZones"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AllowCreateAccessPoint",
          "Effect": "Allow",
          "Action": [
            "elasticfilesystem:CreateAccessPoint"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "aws:RequestTag/efs.csi.aws.com/cluster": "false"
            },
            "ForAllValues:StringEquals": {
              "aws:TagKeys": "efs.csi.aws.com/cluster"
            }
          }
        },
        {
          "Sid": "AllowTagNewAccessPoints",
          "Effect": "Allow",
          "Action": [
            "elasticfilesystem:TagResource"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "elasticfilesystem:CreateAction": "CreateAccessPoint"
            },
            "Null": {
              "aws:RequestTag/efs.csi.aws.com/cluster": "false"
            },
            "ForAllValues:StringEquals": {
              "aws:TagKeys": "efs.csi.aws.com/cluster"
            }
          }
        },
        {
          "Sid": "AllowDeleteAccessPoint",
          "Effect": "Allow",
          "Action": "elasticfilesystem:DeleteAccessPoint",
          "Resource": "*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/efs.csi.aws.com/cluster": "false"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-07-25T20:10:04+00:00"
  },
  "AmazonEKSClusterPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:UpdateAutoScalingGroup",
            "ec2:AttachVolume",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateRoute",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:CreateVolume",
            "ec2:DeleteRoute",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteVolume",
            "ec2:DescribeInstances",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVolumes",
            "ec2:DescribeVolumesModifications",
            "ec2:DescribeVpcs",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeAvailabilityZones",
            "ec2:DetachVolume",
            "ec2:ModifyInstanceAttribute",
            "ec2:ModifyVolume",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeInternetGateways",
            "elasticloadbalancing:AddTags",
            "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
            "elasticloadbalancing:AttachLoadBalancerToSubnets",
            "elasticloadbalancing:ConfigureHealthCheck",
            "elasticloadbalancing:CreateListener",
            "elasticloadbalancing:CreateLoadBalancer",
            "elasticloadbalancing:CreateLoadBalancerListeners",
            "elasticloadbalancing:CreateLoadBalancerPolicy",
            "elasticloadbalancing:CreateTargetGroup",
            "elasticloadbalancing:DeleteListener",
            "elasticloadbalancing:DeleteLoadBalancer",
            "elasticloadbalancing:DeleteLoadBalancerListeners",
            "elasticloadbalancing:DeleteTargetGroup",
            "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
            "elasticloadbalancing:DeregisterTargets",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancerAttributes",
            "elasticloadbalancing:DescribeLoadBalancerPolicies",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTargetGroupAttributes",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "elasticloadbalancing:DetachLoadBalancerFromSubnets",
            "elasticloadbalancing:ModifyListener",
            "elasticloadbalancing:ModifyLoadBalancerAttributes",
            "elasticloadbalancing:ModifyTargetGroup",
            "elasticloadbalancing:ModifyTargetGroupAttributes",
            "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
            "elasticloadbalancing:RegisterTargets",
            "elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer",
            "elasticloadbalancing:SetLoadBalancerPoliciesOfListener",
            "kms:DescribeKey"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v6",
    "IsDefaultVersion": true,
    "CreateDate": "2023-02-07T17:33:23+00:00"
  },
  "AmazonEKSConnectorServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AccessSSMService",
          "Effect": "Allow",
          "Action": [
            "ssm:CreateActivation",
            "ssm:DescribeInstanceInformation",
            "ssm:DeleteActivation"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ConnectorAgentStartSession",
          "Effect": "Allow",
          "Action": [
            "ssm:StartSession"
          ],
          "Resource": [
            "arn:aws:eks:*:*:cluster/*",
            "arn:aws:ssm:*::document/AmazonEKS-ExecuteNonInteractiveCommand"
          ]
        },
        {
          "Sid": "ConnectorAgentDeregister",
          "Effect": "Allow",
          "Action": [
            "ssm:DeregisterManagedInstance"
          ],
          "Resource": [
            "arn:aws:eks:*:*:cluster/*"
          ]
        },
        {
          "Sid": "PassAnyRoleToSsm",
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "ssm.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "PutManagedEventRule",
          "Effect": "Allow",
          "Action": "events:PutRule",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "events:ManagedBy": "eks-connector.amazonaws.com",
              "events:source": "aws.ssm"
            }
          }
        },
        {
          "Sid": "PutManagedEventTarget",
          "Effect": "Allow",
          "Action": "events:PutTargets",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "events:ManagedBy": "eks-connector.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-09-04T20:31:08+00:00"
  },
  "AmazonEKSFargatePodExecutionRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ecr:GetAuthorizationToken",
            "ecr:BatchCheckLayerAvailability",
            "ecr:GetDownloadUrlForLayer",
            "ecr:BatchGetImage"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-11-22T04:34:29+00:00"
  },
  "AmazonEKSForFargateServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeRouteTables"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-11-22T04:36:25+00:00"
  },
  "AmazonEKSLocalOutpostClusterPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstances",
            "ec2:DescribeRouteTables",
            "ec2:DescribeTags",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeInstanceTypes",
            "ec2messages:AcknowledgeMessage",
            "ec2messages:DeleteMessage",
            "ec2messages:FailMessage",
            "ec2messages:GetEndpoint",
            "ec2messages:GetMessages",
            "ec2messages:SendReply",
            "ssmmessages:CreateControlChannel",
            "ssmmessages:CreateDataChannel",
            "ssmmessages:OpenControlChannel",
            "ssmmessages:OpenDataChannel",
            "ssm:DescribeInstanceProperties",
            "ssm:DescribeDocumentParameters",
            "ssm:ListInstanceAssociations",
            "ssm:RegisterManagedInstance",
            "ssm:UpdateInstanceInformation",
            "ssm:UpdateInstanceAssociationStatus",
            "ssm:PutComplianceItems",
            "ssm:PutInventory",
            "ecr-public:GetAuthorizationToken",
            "ecr:GetAuthorizationToken"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ecr:GetDownloadUrlForLayer",
            "ecr:BatchGetImage"
          ],
          "Resource": [
            "arn:aws:ecr:*:*:repository/eks/*",
            "arn:aws:ecr:*:*:repository/bottlerocket-admin",
            "arn:aws:ecr:*:*:repository/bottlerocket-control-eks",
            "arn:aws:ecr:*:*:repository/diagnostics-collector-eks",
            "arn:aws:ecr:*:*:repository/kubelet-config-updater"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:GetSecretValue",
            "secretsmanager:DeleteSecret"
          ],
          "Resource": "arn:*:secretsmanager:*:*:secret:eks-local.cluster.x-k8s.io/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/eks/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:PutLogEvents",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/eks/*:*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2022-10-17T16:02:34+00:00"
  },
  "AmazonEKSLocalOutpostServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeVpcs",
            "ec2:DescribeSubnets",
            "ec2:DescribeRouteTables",
            "ec2:DescribeAddresses",
            "ec2:DescribeImages",
            "ec2:DescribeInstances",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeNetworkInterfaceAttribute",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribePlacementGroups"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface"
          ],
          "Resource": "arn:aws:ec2:*:*:network-interface/*",
          "Condition": {
            "StringLike": {
              "aws:RequestTag/eks-local:controlplane-name": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:subnet/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:ModifyNetworkInterfaceAttribute"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*",
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:network-interface/*"
          ],
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/eks-local:controlplane-name": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSecurityGroup"
          ],
          "Resource": "arn:aws:ec2:*:*:security-group/*",
          "Condition": {
            "StringLike": {
              "aws:RequestTag/eks-local:controlplane-name": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSecurityGroup"
          ],
          "Resource": "arn:aws:ec2:*:*:vpc/*"
        },
        {
          "Effect": "Allow",
          "Action": "ec2:RunInstances",
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "StringLike": {
              "aws:RequestTag/eks-local:controlplane-name": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:RunInstances",
          "Resource": [
            "arn:aws:ec2:*:*:volume/*",
            "arn:aws:ec2:*:*:image/*",
            "arn:aws:ec2:*:*:launch-template/*",
            "arn:aws:ec2:*:*:network-interface/*",
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:placement-group/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteSecurityGroup",
            "ec2:TerminateInstances",
            "ec2:GetConsoleOutput"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/eks-local:controlplane-name": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": [
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:network-interface/*",
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "ForAnyValue:StringLike": {
              "aws:TagKeys": [
                "kubernetes.io/cluster/*",
                "eks*"
              ]
            },
            "StringEquals": {
              "ec2:CreateAction": [
                "CreateNetworkInterface",
                "CreateSecurityGroup",
                "RunInstances"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:TagResource"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:secret:eks-local.cluster.x-k8s.io/*",
          "Condition": {
            "ForAnyValue:StringLike": {
              "aws:TagKeys": [
                "kubernetes.io/cluster/*",
                "eks*"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:CreateSecret"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:secret:eks-local.cluster.x-k8s.io/*",
          "Condition": {
            "StringLike": {
              "aws:RequestTag/eks-local:controlplane-name": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "secretsmanager:DeleteSecret",
          "Resource": "arn:aws:secretsmanager:*:*:secret:eks-local.cluster.x-k8s.io/*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/eks-local:controlplane-name": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "secretsmanager:DescribeSecret",
          "Resource": "arn:aws:secretsmanager:*:*:secret:eks-local.cluster.x-k8s.io/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "ec2.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:GetInstanceProfile",
            "iam:DeleteInstanceProfile",
            "iam:RemoveRoleFromInstanceProfile"
          ],
          "Resource": "arn:aws:iam::*:instance-profile/eks-local-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:StartSession"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "StringLike": {
              "ssm:resourceTag/eks-local:controlplane-name": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:StartSession"
          ],
          "Resource": "arn:aws:ssm:*::document/AmazonEKS-ControlPlaneInstanceProxy"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:ResumeSession",
            "ssm:TerminateSession"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "outposts:GetOutpost"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-10-24T16:24:51+00:00"
  },
  "AmazonEKSServicePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeInstances",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DetachNetworkInterface",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:ModifyNetworkInterfaceAttribute",
            "iam:ListAttachedRolePolicies",
            "eks:UpdateClusterVersion"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags",
            "ec2:DeleteTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:vpc/*",
            "arn:aws:ec2:*:*:subnet/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "route53:AssociateVPCWithHostedZone",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "logs:CreateLogGroup",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:DescribeLogStreams"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/eks/*:*"
        },
        {
          "Effect": "Allow",
          "Action": "logs:PutLogEvents",
          "Resource": "arn:aws:logs:*:*:log-group:/aws/eks/*:*:*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "eks.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v6",
    "IsDefaultVersion": true,
    "CreateDate": "2020-05-27T19:27:03+00:00"
  },
  "AmazonEKSServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface",
            "ec2:DeleteNetworkInterface",
            "ec2:DetachNetworkInterface",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:DescribeInstances",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:CreateNetworkInterfacePermission",
            "iam:ListAttachedRolePolicies",
            "ec2:CreateSecurityGroup"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteSecurityGroup",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:AuthorizeSecurityGroupIngress"
          ],
          "Resource": "arn:aws:ec2:*:*:security-group/*",
          "Condition": {
            "ForAnyValue:StringLike": {
              "ec2:ResourceTag/Name": "eks-cluster-sg*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags",
            "ec2:DeleteTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:vpc/*",
            "arn:aws:ec2:*:*:subnet/*"
          ],
          "Condition": {
            "ForAnyValue:StringLike": {
              "aws:TagKeys": [
                "kubernetes.io/cluster/*"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags",
            "ec2:DeleteTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:security-group/*"
          ],
          "Condition": {
            "ForAnyValue:StringLike": {
              "aws:TagKeys": [
                "kubernetes.io/cluster/*"
              ],
              "aws:RequestTag/Name": "eks-cluster-sg*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "route53:AssociateVPCWithHostedZone",
          "Resource": "arn:aws:route53:::hostedzone/*"
        },
        {
          "Effect": "Allow",
          "Action": "logs:CreateLogGroup",
          "Resource": "arn:aws:logs:*:*:log-group:/aws/eks/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:DescribeLogStreams"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/eks/*:*"
        },
        {
          "Effect": "Allow",
          "Action": "logs:PutLogEvents",
          "Resource": "arn:aws:logs:*:*:log-group:/aws/eks/*:*:*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2020-05-27T19:30:19+00:00"
  },
  "AmazonEKSVPCResourceController": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "ec2:CreateNetworkInterfacePermission",
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "ec2:ResourceTag/eks:eni:owner": "eks-vpc-resource-controller"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface",
            "ec2:DetachNetworkInterface",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:DeleteNetworkInterface",
            "ec2:AttachNetworkInterface",
            "ec2:UnassignPrivateIpAddresses",
            "ec2:AssignPrivateIpAddresses"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-08-12T00:55:34+00:00"
  },
  "AmazonEKSWorkerNodePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstances",
            "ec2:DescribeInstanceTypes",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVolumes",
            "ec2:DescribeVolumesModifications",
            "ec2:DescribeVpcs",
            "eks:DescribeCluster"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-03-21T22:39:36+00:00"
  },
  "AmazonEKS_CNI_Policy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AssignPrivateIpAddresses",
            "ec2:AttachNetworkInterface",
            "ec2:CreateNetworkInterface",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeInstances",
            "ec2:DescribeTags",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeInstanceTypes",
            "ec2:DetachNetworkInterface",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:UnassignPrivateIpAddresses"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:network-interface/*"
          ]
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2020-04-20T20:52:01+00:00"
  },
  "AmazonEMRCleanupPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Resource": "*",
          "Action": [
            "ec2:DescribeInstances",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeSpotInstanceRequests",
            "ec2:DeleteLaunchTemplate",
            "ec2:ModifyInstanceAttribute",
            "ec2:TerminateInstances",
            "ec2:CancelSpotInstanceRequests",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeVolumeStatus",
            "ec2:DescribeVolumes",
            "ec2:DetachVolume",
            "ec2:DeleteVolume",
            "ec2:DescribePlacementGroups",
            "ec2:DeletePlacementGroup"
          ]
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2020-09-29T21:11:54+00:00"
  },
  "AmazonEMRContainersServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "eks:DescribeCluster",
            "eks:ListNodeGroups",
            "eks:DescribeNodeGroup",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSubnets",
            "ec2:DescribeSecurityGroups",
            "elasticloadbalancing:DescribeInstanceHealth",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "acm:ImportCertificate",
            "acm:AddTagsToCertificate"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/emr-container:endpoint:managed-certificate": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "acm:DeleteCertificate"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/emr-container:endpoint:managed-certificate": "true"
            }
          }
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-10T22:58:13+00:00"
  },
  "AmazonEMRFullAccessPolicy_v2": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "RunJobFlowExplicitlyWithEMRManagedTag",
          "Effect": "Allow",
          "Action": [
            "elasticmapreduce:RunJobFlow"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/for-use-with-amazon-emr-managed-policies": "true"
            }
          }
        },
        {
          "Sid": "ElasticMapReduceActions",
          "Effect": "Allow",
          "Action": [
            "elasticmapreduce:AddInstanceFleet",
            "elasticmapreduce:AddInstanceGroups",
            "elasticmapreduce:AddJobFlowSteps",
            "elasticmapreduce:AddTags",
            "elasticmapreduce:CancelSteps",
            "elasticmapreduce:CreateEditor",
            "elasticmapreduce:CreateSecurityConfiguration",
            "elasticmapreduce:DeleteEditor",
            "elasticmapreduce:DeleteSecurityConfiguration",
            "elasticmapreduce:DescribeCluster",
            "elasticmapreduce:DescribeEditor",
            "elasticmapreduce:DescribeJobFlows",
            "elasticmapreduce:DescribeSecurityConfiguration",
            "elasticmapreduce:DescribeStep",
            "elasticmapreduce:DescribeReleaseLabel",
            "elasticmapreduce:GetBlockPublicAccessConfiguration",
            "elasticmapreduce:GetManagedScalingPolicy",
            "elasticmapreduce:GetAutoTerminationPolicy",
            "elasticmapreduce:ListBootstrapActions",
            "elasticmapreduce:ListClusters",
            "elasticmapreduce:ListEditors",
            "elasticmapreduce:ListInstanceFleets",
            "elasticmapreduce:ListInstanceGroups",
            "elasticmapreduce:ListInstances",
            "elasticmapreduce:ListSecurityConfigurations",
            "elasticmapreduce:ListSteps",
            "elasticmapreduce:ListSupportedInstanceTypes",
            "elasticmapreduce:ModifyCluster",
            "elasticmapreduce:ModifyInstanceFleet",
            "elasticmapreduce:ModifyInstanceGroups",
            "elasticmapreduce:OpenEditorInConsole",
            "elasticmapreduce:PutAutoScalingPolicy",
            "elasticmapreduce:PutBlockPublicAccessConfiguration",
            "elasticmapreduce:PutManagedScalingPolicy",
            "elasticmapreduce:RemoveAutoScalingPolicy",
            "elasticmapreduce:RemoveManagedScalingPolicy",
            "elasticmapreduce:RemoveTags",
            "elasticmapreduce:SetTerminationProtection",
            "elasticmapreduce:StartEditor",
            "elasticmapreduce:StopEditor",
            "elasticmapreduce:TerminateJobFlows",
            "elasticmapreduce:ViewEventsFromAllClustersInConsole"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ViewMetricsInEMRConsole",
          "Effect": "Allow",
          "Action": [
            "cloudwatch:GetMetricStatistics"
          ],
          "Resource": "*"
        },
        {
          "Sid": "PassRoleForElasticMapReduce",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/EMR_DefaultRole_V2",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": "elasticmapreduce.amazonaws.com*"
            }
          }
        },
        {
          "Sid": "PassRoleForEC2",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/EMR_EC2_DefaultRole",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": "ec2.amazonaws.com*"
            }
          }
        },
        {
          "Sid": "PassRoleForAutoScaling",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/EMR_AutoScaling_DefaultRole",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": "application-autoscaling.amazonaws.com*"
            }
          }
        },
        {
          "Sid": "ElasticMapReduceServiceLinkedRole",
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/elasticmapreduce.amazonaws.com*/AWSServiceRoleForEMRCleanup*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": [
                "elasticmapreduce.amazonaws.com",
                "elasticmapreduce.amazonaws.com.cn"
              ]
            }
          }
        },
        {
          "Sid": "ConsoleUIActions",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeImages",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeNatGateways",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpcEndpoints",
            "s3:ListAllMyBuckets",
            "iam:ListRoles"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2023-07-28T14:04:57+00:00"
  },
  "AmazonEMRReadOnlyAccessPolicy_v2": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "ElasticMapReduceActions",
          "Effect": "Allow",
          "Action": [
            "elasticmapreduce:DescribeCluster",
            "elasticmapreduce:DescribeEditor",
            "elasticmapreduce:DescribeJobFlows",
            "elasticmapreduce:DescribeSecurityConfiguration",
            "elasticmapreduce:DescribeStep",
            "elasticmapreduce:DescribeReleaseLabel",
            "elasticmapreduce:GetBlockPublicAccessConfiguration",
            "elasticmapreduce:GetManagedScalingPolicy",
            "elasticmapreduce:GetAutoTerminationPolicy",
            "elasticmapreduce:ListBootstrapActions",
            "elasticmapreduce:ListClusters",
            "elasticmapreduce:ListEditors",
            "elasticmapreduce:ListInstanceFleets",
            "elasticmapreduce:ListInstanceGroups",
            "elasticmapreduce:ListInstances",
            "elasticmapreduce:ListSecurityConfigurations",
            "elasticmapreduce:ListSteps",
            "elasticmapreduce:ListSupportedInstanceTypes",
            "elasticmapreduce:ViewEventsFromAllClustersInConsole"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ViewMetricsInEMRConsole",
          "Effect": "Allow",
          "Action": [
            "cloudwatch:GetMetricStatistics"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-08-02T19:15:33+00:00"
  },
  "AmazonEMRServerlessServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeRouteTables"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricData"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": [
                "AWS/EMRServerless",
                "AWS/Usage"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-04-20T15:47:33+00:00"
  },
  "AmazonEMRServicePolicy_v2": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "CreateInTaggedNetwork",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface",
            "ec2:RunInstances",
            "ec2:CreateFleet",
            "ec2:CreateLaunchTemplate",
            "ec2:CreateLaunchTemplateVersion"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:security-group/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/for-use-with-amazon-emr-managed-policies": "true"
            }
          }
        },
        {
          "Sid": "CreateWithEMRTaggedLaunchTemplate",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateFleet",
            "ec2:RunInstances",
            "ec2:CreateLaunchTemplateVersion"
          ],
          "Resource": "arn:aws:ec2:*:*:launch-template/*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/for-use-with-amazon-emr-managed-policies": "true"
            }
          }
        },
        {
          "Sid": "CreateEMRTaggedLaunchTemplate",
          "Effect": "Allow",
          "Action": "ec2:CreateLaunchTemplate",
          "Resource": "arn:aws:ec2:*:*:launch-template/*",
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/for-use-with-amazon-emr-managed-policies": "true"
            }
          }
        },
        {
          "Sid": "CreateEMRTaggedInstancesAndVolumes",
          "Effect": "Allow",
          "Action": [
            "ec2:RunInstances",
            "ec2:CreateFleet"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*",
            "arn:aws:ec2:*:*:volume/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/for-use-with-amazon-emr-managed-policies": "true"
            }
          }
        },
        {
          "Sid": "ResourcesToLaunchEC2",
          "Effect": "Allow",
          "Action": [
            "ec2:RunInstances",
            "ec2:CreateFleet",
            "ec2:CreateLaunchTemplate",
            "ec2:CreateLaunchTemplateVersion"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:network-interface/*",
            "arn:aws:ec2:*::image/ami-*",
            "arn:aws:ec2:*:*:key-pair/*",
            "arn:aws:ec2:*:*:capacity-reservation/*",
            "arn:aws:ec2:*:*:placement-group/EMR_*",
            "arn:aws:ec2:*:*:fleet/*",
            "arn:aws:ec2:*:*:dedicated-host/*",
            "arn:aws:resource-groups:*:*:group/*"
          ]
        },
        {
          "Sid": "ManageEMRTaggedResources",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateLaunchTemplateVersion",
            "ec2:DeleteLaunchTemplate",
            "ec2:DeleteNetworkInterface",
            "ec2:ModifyInstanceAttribute",
            "ec2:TerminateInstances"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/for-use-with-amazon-emr-managed-policies": "true"
            }
          }
        },
        {
          "Sid": "ManageTagsOnEMRTaggedResources",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags",
            "ec2:DeleteTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*",
            "arn:aws:ec2:*:*:volume/*",
            "arn:aws:ec2:*:*:network-interface/*",
            "arn:aws:ec2:*:*:launch-template/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/for-use-with-amazon-emr-managed-policies": "true"
            }
          }
        },
        {
          "Sid": "CreateNetworkInterfaceNeededForPrivateSubnet",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:network-interface/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/for-use-with-amazon-emr-managed-policies": "true"
            }
          }
        },
        {
          "Sid": "TagOnCreateTaggedEMRResources",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:network-interface/*",
            "arn:aws:ec2:*:*:instance/*",
            "arn:aws:ec2:*:*:volume/*",
            "arn:aws:ec2:*:*:launch-template/*"
          ],
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": [
                "RunInstances",
                "CreateFleet",
                "CreateLaunchTemplate",
                "CreateNetworkInterface"
              ]
            }
          }
        },
        {
          "Sid": "TagPlacementGroups",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags",
            "ec2:DeleteTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:placement-group/EMR_*"
          ]
        },
        {
          "Sid": "ListActionsForEC2Resources",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeCapacityReservations",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeImages",
            "ec2:DescribeInstances",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePlacementGroups",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVolumes",
            "ec2:DescribeVolumeStatus",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CreateDefaultSecurityGroupWithEMRTags",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSecurityGroup"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:security-group/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/for-use-with-amazon-emr-managed-policies": "true"
            }
          }
        },
        {
          "Sid": "CreateDefaultSecurityGroupInVPCWithEMRTags",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSecurityGroup"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:vpc/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/for-use-with-amazon-emr-managed-policies": "true"
            }
          }
        },
        {
          "Sid": "TagOnCreateDefaultSecurityGroupWithEMRTags",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": "arn:aws:ec2:*:*:security-group/*",
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/for-use-with-amazon-emr-managed-policies": "true",
              "ec2:CreateAction": "CreateSecurityGroup"
            }
          }
        },
        {
          "Sid": "ManageSecurityGroups",
          "Effect": "Allow",
          "Action": [
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/for-use-with-amazon-emr-managed-policies": "true"
            }
          }
        },
        {
          "Sid": "CreateEMRPlacementGroups",
          "Effect": "Allow",
          "Action": [
            "ec2:CreatePlacementGroup"
          ],
          "Resource": "arn:aws:ec2:*:*:placement-group/EMR_*"
        },
        {
          "Sid": "DeletePlacementGroups",
          "Effect": "Allow",
          "Action": [
            "ec2:DeletePlacementGroup"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AutoScaling",
          "Effect": "Allow",
          "Action": [
            "application-autoscaling:DeleteScalingPolicy",
            "application-autoscaling:DeregisterScalableTarget",
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingPolicies",
            "application-autoscaling:PutScalingPolicy",
            "application-autoscaling:RegisterScalableTarget"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ResourceGroupsForCapacityReservations",
          "Effect": "Allow",
          "Action": [
            "resource-groups:ListGroupResources"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AutoScalingCloudWatch",
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms"
          ],
          "Resource": "arn:aws:cloudwatch:*:*:alarm:*_EMR_Auto_Scaling"
        },
        {
          "Sid": "PassRoleForAutoScaling",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/EMR_AutoScaling_DefaultRole",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": "application-autoscaling.amazonaws.com*"
            }
          }
        },
        {
          "Sid": "PassRoleForEC2",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/EMR_EC2_DefaultRole",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": "ec2.amazonaws.com*"
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-02-15T16:48:29+00:00"
  },
  "AmazonESCognitoAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cognito-idp:DescribeUserPool",
            "cognito-idp:CreateUserPoolClient",
            "cognito-idp:DeleteUserPoolClient",
            "cognito-idp:UpdateUserPoolClient",
            "cognito-idp:DescribeUserPoolClient",
            "cognito-idp:AdminInitiateAuth",
            "cognito-idp:AdminUserGlobalSignOut",
            "cognito-idp:ListUserPoolClients",
            "cognito-identity:DescribeIdentityPool",
            "cognito-identity:UpdateIdentityPool",
            "cognito-identity:SetIdentityPoolRoles",
            "cognito-identity:GetIdentityPoolRoles"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": [
                "cognito-identity.amazonaws.com",
                "cognito-identity-us-gov.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2021-12-20T14:04:44+00:00"
  },
  "AmazonESFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "es:*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-10-01T19:14:00+00:00"
  },
  "AmazonESReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "es:Describe*",
            "es:List*",
            "es:Get*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2018-10-03T03:32:56+00:00"
  },
  "AmazonElastiCacheFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": "elasticache:*",
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": "iam:CreateServiceLinkedRole",
          "Effect": "Allow",
          "Resource": "arn:aws:iam::*:role/aws-service-role/elasticache.amazonaws.com/AWSServiceRoleForElastiCache",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "elasticache.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2017-12-07T17:48:26+00:00"
  },
  "AmazonElastiCacheReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "elasticache:Describe*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:40:21+00:00"
  },
  "AmazonElasticContainerRegistryPublicFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ecr-public:*",
            "sts:GetServiceBearerToken"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-01T17:25:52+00:00"
  },
  "AmazonElasticContainerRegistryPublicPowerUser": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ecr-public:GetAuthorizationToken",
            "sts:GetServiceBearerToken",
            "ecr-public:BatchCheckLayerAvailability",
            "ecr-public:GetRepositoryPolicy",
            "ecr-public:DescribeRepositories",
            "ecr-public:DescribeRegistries",
            "ecr-public:DescribeImages",
            "ecr-public:DescribeImageTags",
            "ecr-public:GetRepositoryCatalogData",
            "ecr-public:GetRegistryCatalogData",
            "ecr-public:InitiateLayerUpload",
            "ecr-public:UploadLayerPart",
            "ecr-public:CompleteLayerUpload",
            "ecr-public:PutImage"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-01T16:16:54+00:00"
  },
  "AmazonElasticContainerRegistryPublicReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ecr-public:GetAuthorizationToken",
            "sts:GetServiceBearerToken",
            "ecr-public:BatchCheckLayerAvailability",
            "ecr-public:GetRepositoryPolicy",
            "ecr-public:DescribeRepositories",
            "ecr-public:DescribeRegistries",
            "ecr-public:DescribeImages",
            "ecr-public:DescribeImageTags",
            "ecr-public:GetRepositoryCatalogData",
            "ecr-public:GetRegistryCatalogData"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-01T17:27:04+00:00"
  },
  "AmazonElasticFileSystemClientFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "elasticfilesystem:ClientMount",
            "elasticfilesystem:ClientRootAccess",
            "elasticfilesystem:ClientWrite",
            "elasticfilesystem:DescribeMountTargets"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-01-13T16:27:00+00:00"
  },
  "AmazonElasticFileSystemClientReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "elasticfilesystem:ClientMount",
            "elasticfilesystem:DescribeMountTargets"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-01-13T16:24:36+00:00"
  },
  "AmazonElasticFileSystemClientReadWriteAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "elasticfilesystem:ClientMount",
            "elasticfilesystem:ClientWrite",
            "elasticfilesystem:DescribeMountTargets"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-01-13T16:21:55+00:00"
  },
  "AmazonElasticFileSystemFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "cloudwatch:DescribeAlarmsForMetric",
            "cloudwatch:GetMetricData",
            "ec2:CreateNetworkInterface",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeNetworkInterfaceAttribute",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs",
            "ec2:ModifyNetworkInterfaceAttribute",
            "elasticfilesystem:CreateFileSystem",
            "elasticfilesystem:CreateMountTarget",
            "elasticfilesystem:CreateTags",
            "elasticfilesystem:CreateAccessPoint",
            "elasticfilesystem:CreateReplicationConfiguration",
            "elasticfilesystem:DeleteFileSystem",
            "elasticfilesystem:DeleteMountTarget",
            "elasticfilesystem:DeleteTags",
            "elasticfilesystem:DeleteAccessPoint",
            "elasticfilesystem:DeleteFileSystemPolicy",
            "elasticfilesystem:DeleteReplicationConfiguration",
            "elasticfilesystem:DescribeAccountPreferences",
            "elasticfilesystem:DescribeBackupPolicy",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DescribeFileSystemPolicy",
            "elasticfilesystem:DescribeLifecycleConfiguration",
            "elasticfilesystem:DescribeMountTargets",
            "elasticfilesystem:DescribeMountTargetSecurityGroups",
            "elasticfilesystem:DescribeTags",
            "elasticfilesystem:DescribeAccessPoints",
            "elasticfilesystem:DescribeReplicationConfigurations",
            "elasticfilesystem:ModifyMountTargetSecurityGroups",
            "elasticfilesystem:PutAccountPreferences",
            "elasticfilesystem:PutBackupPolicy",
            "elasticfilesystem:PutLifecycleConfiguration",
            "elasticfilesystem:PutFileSystemPolicy",
            "elasticfilesystem:UpdateFileSystem",
            "elasticfilesystem:TagResource",
            "elasticfilesystem:UntagResource",
            "elasticfilesystem:ListTagsForResource",
            "elasticfilesystem:Backup",
            "elasticfilesystem:Restore",
            "kms:DescribeKey",
            "kms:ListAliases"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": "iam:CreateServiceLinkedRole",
          "Effect": "Allow",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": [
                "elasticfilesystem.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v8",
    "IsDefaultVersion": true,
    "CreateDate": "2022-01-10T19:03:16+00:00"
  },
  "AmazonElasticFileSystemReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:DescribeAlarmsForMetric",
            "cloudwatch:GetMetricData",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeNetworkInterfaceAttribute",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs",
            "elasticfilesystem:DescribeAccountPreferences",
            "elasticfilesystem:DescribeBackupPolicy",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DescribeFileSystemPolicy",
            "elasticfilesystem:DescribeLifecycleConfiguration",
            "elasticfilesystem:DescribeMountTargets",
            "elasticfilesystem:DescribeMountTargetSecurityGroups",
            "elasticfilesystem:DescribeTags",
            "elasticfilesystem:DescribeAccessPoints",
            "elasticfilesystem:DescribeReplicationConfigurations",
            "elasticfilesystem:ListTagsForResource",
            "kms:ListAliases"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v7",
    "IsDefaultVersion": true,
    "CreateDate": "2022-01-10T18:53:37+00:00"
  },
  "AmazonElasticFileSystemServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "backup-storage:MountCapsule",
            "ec2:CreateNetworkInterface",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeNetworkInterfaceAttribute",
            "ec2:ModifyNetworkInterfaceAttribute",
            "tag:GetResources"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:DescribeKey"
          ],
          "Resource": "arn:aws:kms:*:*:key/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "backup:CreateBackupVault",
            "backup:PutBackupVaultAccessPolicy"
          ],
          "Resource": [
            "arn:aws:backup:*:*:backup-vault:aws/efs/automatic-backup-vault"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "backup:CreateBackupPlan",
            "backup:CreateBackupSelection"
          ],
          "Resource": [
            "arn:aws:backup:*:*:backup-plan:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": [
                "backup.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/aws-service-role/backup.amazonaws.com/AWSServiceRoleForBackup"
          ],
          "Condition": {
            "StringLike": {
              "iam:PassedToService": "backup.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:CreateReplicationConfiguration",
            "elasticfilesystem:DescribeReplicationConfigurations",
            "elasticfilesystem:DeleteReplicationConfiguration"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2022-01-10T19:27:33+00:00"
  },
  "AmazonElasticFileSystemsUtils": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ssm:DescribeAssociation",
            "ssm:GetDeployablePatchSnapshotForInstance",
            "ssm:GetDocument",
            "ssm:DescribeDocument",
            "ssm:GetManifest",
            "ssm:GetParameter",
            "ssm:GetParameters",
            "ssm:ListAssociations",
            "ssm:ListInstanceAssociations",
            "ssm:PutInventory",
            "ssm:PutComplianceItems",
            "ssm:PutConfigurePackageResult",
            "ssm:UpdateAssociationStatus",
            "ssm:UpdateInstanceAssociationStatus",
            "ssm:UpdateInstanceInformation"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssmmessages:CreateControlChannel",
            "ssmmessages:CreateDataChannel",
            "ssmmessages:OpenControlChannel",
            "ssmmessages:OpenDataChannel"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2messages:AcknowledgeMessage",
            "ec2messages:DeleteMessage",
            "ec2messages:FailMessage",
            "ec2messages:GetEndpoint",
            "ec2messages:GetMessages",
            "ec2messages:SendReply"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticfilesystem:DescribeMountTargets"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeAvailabilityZones"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:PutLogEvents",
            "logs:DescribeLogStreams",
            "logs:DescribeLogGroups",
            "logs:CreateLogStream",
            "logs:CreateLogGroup",
            "logs:PutRetentionPolicy"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-09-29T15:16:47+00:00"
  },
  "AmazonElasticMapReduceEditorsRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateSecurityGroup",
            "ec2:DescribeSecurityGroups",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DescribeNetworkInterfaces",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:DescribeTags",
            "ec2:DescribeInstances",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "elasticmapreduce:ListInstances",
            "elasticmapreduce:DescribeCluster",
            "elasticmapreduce:ListSteps"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": "arn:aws:ec2:*:*:network-interface/*",
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "aws:elasticmapreduce:editor-id",
                "aws:elasticmapreduce:job-flow-id"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-02-09T22:39:29+00:00"
  },
  "AmazonElasticMapReduceFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "cloudwatch:*",
            "cloudformation:CreateStack",
            "cloudformation:DescribeStackEvents",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:CancelSpotInstanceRequests",
            "ec2:CreateRoute",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:DeleteRoute",
            "ec2:DeleteTags",
            "ec2:DeleteSecurityGroup",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeInstances",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSpotInstanceRequests",
            "ec2:DescribeSpotPriceHistory",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs",
            "ec2:DescribeRouteTables",
            "ec2:DescribeNetworkAcls",
            "ec2:CreateVpcEndpoint",
            "ec2:ModifyImageAttribute",
            "ec2:ModifyInstanceAttribute",
            "ec2:RequestSpotInstances",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RunInstances",
            "ec2:TerminateInstances",
            "elasticmapreduce:*",
            "iam:GetPolicy",
            "iam:GetPolicyVersion",
            "iam:ListRoles",
            "iam:PassRole",
            "kms:List*",
            "s3:*",
            "sdb:*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": [
                "elasticmapreduce.amazonaws.com",
                "elasticmapreduce.amazonaws.com.cn"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v7",
    "IsDefaultVersion": true,
    "CreateDate": "2019-10-11T15:19:30+00:00"
  },
  "AmazonElasticMapReducePlacementGroupPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Resource": "*",
          "Effect": "Allow",
          "Action": [
            "ec2:DeletePlacementGroup",
            "ec2:DescribePlacementGroups"
          ]
        },
        {
          "Resource": "arn:aws:ec2:*:*:placement-group/EMR_*",
          "Effect": "Allow",
          "Action": [
            "ec2:CreatePlacementGroup"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-09-29T00:37:08+00:00"
  },
  "AmazonElasticMapReduceReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "elasticmapreduce:Describe*",
            "elasticmapreduce:List*",
            "elasticmapreduce:GetBlockPublicAccessConfiguration",
            "elasticmapreduce:ViewEventsFromAllClustersInConsole",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "sdb:Select",
            "cloudwatch:GetMetricStatistics"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2020-07-29T23:14:09+00:00"
  },
  "AmazonElasticMapReduceRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Resource": "*",
          "Action": [
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CancelSpotInstanceRequests",
            "ec2:CreateFleet",
            "ec2:CreateLaunchTemplate",
            "ec2:CreateNetworkInterface",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:DeleteLaunchTemplate",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteTags",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstances",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePrefixLists",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSpotInstanceRequests",
            "ec2:DescribeSpotPriceHistory",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcEndpointServices",
            "ec2:DescribeVpcs",
            "ec2:DetachNetworkInterface",
            "ec2:ModifyImageAttribute",
            "ec2:ModifyInstanceAttribute",
            "ec2:RequestSpotInstances",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RunInstances",
            "ec2:TerminateInstances",
            "ec2:DeleteVolume",
            "ec2:DescribeVolumeStatus",
            "ec2:DescribeVolumes",
            "ec2:DetachVolume",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:ListInstanceProfiles",
            "iam:ListRolePolicies",
            "iam:PassRole",
            "s3:CreateBucket",
            "s3:Get*",
            "s3:List*",
            "sdb:BatchPutAttributes",
            "sdb:Select",
            "sqs:CreateQueue",
            "sqs:Delete*",
            "sqs:GetQueue*",
            "sqs:PurgeQueue",
            "sqs:ReceiveMessage",
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DeleteAlarms",
            "application-autoscaling:RegisterScalableTarget",
            "application-autoscaling:DeregisterScalableTarget",
            "application-autoscaling:PutScalingPolicy",
            "application-autoscaling:DeleteScalingPolicy",
            "application-autoscaling:Describe*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/spot.amazonaws.com/AWSServiceRoleForEC2Spot*",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "spot.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v10",
    "IsDefaultVersion": true,
    "CreateDate": "2020-06-24T22:24:20+00:00"
  },
  "AmazonElasticMapReduceforAutoScalingRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "cloudwatch:DescribeAlarms",
            "elasticmapreduce:ListInstanceGroups",
            "elasticmapreduce:ModifyInstanceGroups"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2016-11-18T01:09:10+00:00"
  },
  "AmazonElasticMapReduceforEC2Role": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Resource": "*",
          "Action": [
            "cloudwatch:*",
            "dynamodb:*",
            "ec2:Describe*",
            "elasticmapreduce:Describe*",
            "elasticmapreduce:ListBootstrapActions",
            "elasticmapreduce:ListClusters",
            "elasticmapreduce:ListInstanceGroups",
            "elasticmapreduce:ListInstances",
            "elasticmapreduce:ListSteps",
            "kinesis:CreateStream",
            "kinesis:DeleteStream",
            "kinesis:DescribeStream",
            "kinesis:GetRecords",
            "kinesis:GetShardIterator",
            "kinesis:MergeShards",
            "kinesis:PutRecord",
            "kinesis:SplitShard",
            "rds:Describe*",
            "s3:*",
            "sdb:*",
            "sns:*",
            "sqs:*",
            "glue:CreateDatabase",
            "glue:UpdateDatabase",
            "glue:DeleteDatabase",
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:CreateTable",
            "glue:UpdateTable",
            "glue:DeleteTable",
            "glue:GetTable",
            "glue:GetTables",
            "glue:GetTableVersions",
            "glue:CreatePartition",
            "glue:BatchCreatePartition",
            "glue:UpdatePartition",
            "glue:DeletePartition",
            "glue:BatchDeletePartition",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:BatchGetPartition",
            "glue:CreateUserDefinedFunction",
            "glue:UpdateUserDefinedFunction",
            "glue:DeleteUserDefinedFunction",
            "glue:GetUserDefinedFunction",
            "glue:GetUserDefinedFunctions"
          ]
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2017-08-11T23:57:30+00:00"
  },
  "AmazonElasticTranscoderRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListBucket",
            "s3:Get*",
            "s3:PutObject",
            "s3:PutObjectAcl",
            "s3:*MultipartUpload*"
          ],
          "Sid": "1",
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "sns:Publish"
          ],
          "Sid": "2",
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2019-06-13T22:48:22+00:00"
  },
  "AmazonElasticTranscoder_FullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "elastictranscoder:*",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "iam:ListRoles",
            "sns:ListTopics"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "iam:PassRole"
          ],
          "Effect": "Allow",
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": [
                "elastictranscoder.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2019-06-10T22:51:51+00:00"
  },
  "AmazonElasticTranscoder_JobsSubmitter": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "elastictranscoder:Read*",
            "elastictranscoder:List*",
            "elastictranscoder:*Job",
            "elastictranscoder:*Preset",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "iam:ListRoles",
            "sns:ListTopics"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2019-06-10T22:49:34+00:00"
  },
  "AmazonElasticTranscoder_ReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "elastictranscoder:Read*",
            "elastictranscoder:List*",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "iam:ListRoles",
            "sns:ListTopics"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2019-06-10T22:48:32+00:00"
  },
  "AmazonElasticsearchServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "Stmt1480452973134",
          "Action": [
            "ec2:CreateNetworkInterface",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeNetworkInterfaces",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "elasticloadbalancing:AddListenerCertificates",
            "elasticloadbalancing:RemoveListenerCertificates"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Sid": "Stmt1480452973135",
          "Effect": "Allow",
          "Action": [
            "acm:DescribeCertificate"
          ],
          "Resource": "*"
        },
        {
          "Sid": "Stmt1480452973136",
          "Effect": "Allow",
          "Action": "cloudwatch:PutMetricData",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": "AWS/ES"
            }
          }
        },
        {
          "Sid": "Stmt1480452973198",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateVpcEndpoint",
            "ec2:ModifyVpcEndpoint"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:vpc/*",
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:route-table/*"
          ]
        },
        {
          "Sid": "Stmt1480452973199",
          "Effect": "Allow",
          "Action": "ec2:CreateVpcEndpoint",
          "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/OpenSearchManaged": "true"
            }
          }
        },
        {
          "Sid": "Stmt1480452973200",
          "Effect": "Allow",
          "Action": [
            "ec2:ModifyVpcEndpoint",
            "ec2:DeleteVpcEndpoints"
          ],
          "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/OpenSearchManaged": "true"
            }
          }
        },
        {
          "Sid": "Stmt1480452973201",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeVpcEndpoints"
          ],
          "Resource": "*"
        },
        {
          "Sid": "Stmt1480452973149",
          "Effect": "Allow",
          "Action": [
            "ec2:AssignIpv6Addresses"
          ],
          "Resource": "arn:aws:ec2:*:*:network-interface/*"
        },
        {
          "Sid": "Stmt1480452973150",
          "Effect": "Allow",
          "Action": [
            "ec2:UnAssignIpv6Addresses"
          ],
          "Resource": "arn:aws:ec2:*:*:network-interface/*"
        },
        {
          "Sid": "Stmt1480452973202",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "CreateVpcEndpoint"
            }
          }
        }
      ]
    },
    "VersionId": "v7",
    "IsDefaultVersion": true,
    "CreateDate": "2023-10-23T06:58:31+00:00"
  },
  "AmazonEventBridgeApiDestinationsServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:CreateSecret",
            "secretsmanager:UpdateSecret",
            "secretsmanager:DescribeSecret",
            "secretsmanager:DeleteSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:PutSecretValue"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:secret:events!connection/*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-02-11T20:52:05+00:00"
  },
  "AmazonEventBridgeFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "EventBridgeActions",
          "Effect": "Allow",
          "Action": [
            "events:*",
            "schemas:*",
            "scheduler:*",
            "pipes:*"
          ],
          "Resource": "*"
        },
        {
          "Sid": "IAMCreateServiceLinkedRoleForApiDestinations",
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/AmazonEventBridgeApiDestinationsServiceRolePolicy",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "apidestinations.events.amazonaws.com"
            }
          }
        },
        {
          "Sid": "IAMCreateServiceLinkedRoleForAmazonEventBridgeSchemas",
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/schemas.amazonaws.com/AWSServiceRoleForSchemas",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "schemas.amazonaws.com"
            }
          }
        },
        {
          "Sid": "SecretsManagerAccessForApiDestinations",
          "Effect": "Allow",
          "Action": [
            "secretsmanager:CreateSecret",
            "secretsmanager:UpdateSecret",
            "secretsmanager:DeleteSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:PutSecretValue"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:secret:events!*"
        },
        {
          "Sid": "IAMPassRoleAccessForEventBridge",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/*",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": "events.amazonaws.com"
            }
          }
        },
        {
          "Sid": "IAMPassRoleAccessForScheduler",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/*",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": "scheduler.amazonaws.com"
            }
          }
        },
        {
          "Sid": "IAMPassRoleAccessForPipes",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/*",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": "pipes.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2022-12-01T17:00:46+00:00"
  },
  "AmazonEventBridgePipesFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "EventBridgePipesActions",
          "Effect": "Allow",
          "Action": "pipes:*",
          "Resource": "*"
        },
        {
          "Sid": "IAMPassRoleAccessForPipes",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/*",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": "pipes.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-12-01T17:03:20+00:00"
  },
  "AmazonEventBridgePipesOperatorAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "pipes:DescribePipe",
            "pipes:ListPipes",
            "pipes:ListTagsForResource",
            "pipes:StartPipe",
            "pipes:StopPipe"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-12-01T17:04:32+00:00"
  },
  "AmazonEventBridgePipesReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "pipes:DescribePipe",
            "pipes:ListPipes",
            "pipes:ListTagsForResource"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-12-01T17:04:03+00:00"
  },
  "AmazonEventBridgeReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "events:DescribeRule",
            "events:DescribeEventBus",
            "events:DescribeEventSource",
            "events:ListEventBuses",
            "events:ListEventSources",
            "events:ListRuleNamesByTarget",
            "events:ListRules",
            "events:ListTargetsByRule",
            "events:TestEventPattern",
            "events:DescribeArchive",
            "events:ListArchives",
            "events:DescribeReplay",
            "events:ListReplays",
            "events:DescribeConnection",
            "events:ListConnections",
            "events:DescribeApiDestination",
            "events:ListApiDestinations",
            "events:DescribeEndpoint",
            "events:ListEndpoints",
            "schemas:DescribeCodeBinding",
            "schemas:DescribeDiscoverer",
            "schemas:DescribeRegistry",
            "schemas:DescribeSchema",
            "schemas:ExportSchema",
            "schemas:GetCodeBindingSource",
            "schemas:GetDiscoveredSchema",
            "schemas:GetResourcePolicy",
            "schemas:ListDiscoverers",
            "schemas:ListRegistries",
            "schemas:ListSchemas",
            "schemas:ListSchemaVersions",
            "schemas:ListTagsForResource",
            "schemas:SearchSchemas",
            "scheduler:GetSchedule",
            "scheduler:GetScheduleGroup",
            "scheduler:ListSchedules",
            "scheduler:ListScheduleGroups",
            "scheduler:ListTagsForResource",
            "pipes:DescribePipe",
            "pipes:ListPipes",
            "pipes:ListTagsForResource"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v6",
    "IsDefaultVersion": true,
    "CreateDate": "2022-12-01T17:02:48+00:00"
  },
  "AmazonEventBridgeSchedulerFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "scheduler:*",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/*",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": "scheduler.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-10T18:37:25+00:00"
  },
  "AmazonEventBridgeSchedulerReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "scheduler:ListSchedules",
            "scheduler:ListScheduleGroups",
            "scheduler:GetSchedule",
            "scheduler:GetScheduleGroup",
            "scheduler:ListTagsForResource"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-10T18:50:12+00:00"
  },
  "AmazonEventBridgeSchemasFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AmazonEventBridgeSchemasFullAccess",
          "Effect": "Allow",
          "Action": [
            "schemas:*"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AmazonEventBridgeManageRule",
          "Effect": "Allow",
          "Action": [
            "events:PutRule",
            "events:PutTargets",
            "events:EnableRule",
            "events:DisableRule",
            "events:DeleteRule",
            "events:RemoveTargets",
            "events:ListTargetsByRule"
          ],
          "Resource": "arn:aws:events:*:*:rule/*Schemas*"
        },
        {
          "Sid": "IAMCreateServiceLinkedRoleForAmazonEventBridgeSchemas",
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/schemas.amazonaws.com/AWSServiceRoleForSchemas"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-11-28T23:12:53+00:00"
  },
  "AmazonEventBridgeSchemasReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AmazonEventBridgeSchemasReadOnlyAccess",
          "Effect": "Allow",
          "Action": [
            "schemas:ListDiscoverers",
            "schemas:DescribeDiscoverer",
            "schemas:ListRegistries",
            "schemas:DescribeRegistry",
            "schemas:SearchSchemas",
            "schemas:ListSchemas",
            "schemas:ListSchemaVersions",
            "schemas:DescribeSchema",
            "schemas:GetDiscoveredSchema",
            "schemas:DescribeCodeBinding",
            "schemas:GetCodeBindingSource",
            "schemas:ListTagsForResource",
            "schemas:GetResourcePolicy"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2020-05-01T00:50:53+00:00"
  },
  "AmazonEventBridgeSchemasServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "events:PutRule",
            "events:PutTargets",
            "events:EnableRule",
            "events:DisableRule",
            "events:DeleteRule",
            "events:RemoveTargets",
            "events:ListTargetsByRule"
          ],
          "Resource": [
            "arn:aws:events:*:*:rule/*Schemas-*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-11-27T01:10:40+00:00"
  },
  "AmazonFISServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "EventBridge",
          "Effect": "Allow",
          "Action": [
            "events:PutRule",
            "events:DeleteRule",
            "events:PutTargets",
            "events:RemoveTargets"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "events:ManagedBy": "fis.amazonaws.com"
            }
          }
        },
        {
          "Sid": "EventBridgeDescribe",
          "Effect": "Allow",
          "Action": [
            "events:DescribeRule"
          ],
          "Resource": "*"
        },
        {
          "Sid": "Tagging",
          "Effect": "Allow",
          "Action": [
            "tag:GetResources"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CloudWatch",
          "Effect": "Allow",
          "Action": [
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DescribeAlarmHistory"
          ],
          "Resource": "*"
        },
        {
          "Sid": "DescribeUserResources",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstances",
            "ec2:DescribeSubnets",
            "iam:GetUser",
            "iam:GetRole",
            "iam:ListUsers",
            "iam:ListRoles",
            "rds:DescribeDBClusters",
            "rds:DescribeDBInstances",
            "ecs:DescribeClusters",
            "ecs:DescribeTasks",
            "ecs:ListTasks",
            "eks:DescribeNodegroup",
            "eks:DescribeCluster"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v7",
    "IsDefaultVersion": true,
    "CreateDate": "2022-10-25T09:05:23+00:00"
  },
  "AmazonFSxConsoleFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricData",
            "ds:DescribeDirectories",
            "ec2:DescribeNetworkInterfaceAttribute",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "firehose:ListDeliveryStreams",
            "kms:ListAliases",
            "logs:DescribeLogGroups",
            "s3:ListBucket"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "fsx:AssociateFileGateway",
            "fsx:AssociateFileSystemAliases",
            "fsx:CancelDataRepositoryTask",
            "fsx:CopyBackup",
            "fsx:CreateBackup",
            "fsx:CreateDataRepositoryAssociation",
            "fsx:CreateDataRepositoryTask",
            "fsx:CreateFileCache",
            "fsx:CreateFileSystem",
            "fsx:CreateFileSystemFromBackup",
            "fsx:CreateSnapshot",
            "fsx:CreateStorageVirtualMachine",
            "fsx:CreateVolume",
            "fsx:CreateVolumeFromBackup",
            "fsx:DeleteBackup",
            "fsx:DeleteDataRepositoryAssociation",
            "fsx:DeleteFileCache",
            "fsx:DeleteFileSystem",
            "fsx:DeleteSnapshot",
            "fsx:DeleteStorageVirtualMachine",
            "fsx:DeleteVolume",
            "fsx:DescribeAssociatedFileGateways",
            "fsx:DescribeBackups",
            "fsx:DescribeDataRepositoryAssociations",
            "fsx:DescribeDataRepositoryTasks",
            "fsx:DescribeFileCaches",
            "fsx:DescribeFileSystemAliases",
            "fsx:DescribeFileSystems",
            "fsx:DescribeSnapshots",
            "fsx:DescribeStorageVirtualMachines",
            "fsx:DescribeVolumes",
            "fsx:DisassociateFileGateway",
            "fsx:DisassociateFileSystemAliases",
            "fsx:ListTagsForResource",
            "fsx:ManageBackupPrincipalAssociations",
            "fsx:ReleaseFileSystemNfsV3Locks",
            "fsx:RestoreVolumeFromSnapshot",
            "fsx:TagResource",
            "fsx:UntagResource",
            "fsx:UpdateDataRepositoryAssociation",
            "fsx:UpdateFileCache",
            "fsx:UpdateFileSystem",
            "fsx:UpdateSnapshot",
            "fsx:UpdateStorageVirtualMachine",
            "fsx:UpdateVolume"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": [
                "fsx.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": [
                "s3.data-source.lustre.fsx.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:route-table/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/AmazonFSx": "ManagedByAmazonFSx"
            },
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "fsx.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v7",
    "IsDefaultVersion": true,
    "CreateDate": "2023-07-13T18:44:50+00:00"
  },
  "AmazonFSxConsoleReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricData",
            "ds:DescribeDirectories",
            "ec2:DescribeNetworkInterfaceAttribute",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "firehose:ListDeliveryStreams",
            "fsx:Describe*",
            "fsx:ListTagsForResource",
            "kms:DescribeKey",
            "logs:DescribeLogGroups"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2022-09-22T14:07:26+00:00"
  },
  "AmazonFSxFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ds:DescribeDirectories"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "fsx:AssociateFileGateway",
            "fsx:AssociateFileSystemAliases",
            "fsx:CancelDataRepositoryTask",
            "fsx:CopyBackup",
            "fsx:CreateBackup",
            "fsx:CreateDataRepositoryAssociation",
            "fsx:CreateDataRepositoryTask",
            "fsx:CreateFileCache",
            "fsx:CreateFileSystem",
            "fsx:CreateFileSystemFromBackup",
            "fsx:CreateSnapshot",
            "fsx:CreateStorageVirtualMachine",
            "fsx:CreateVolume",
            "fsx:CreateVolumeFromBackup",
            "fsx:DeleteBackup",
            "fsx:DeleteDataRepositoryAssociation",
            "fsx:DeleteFileCache",
            "fsx:DeleteFileSystem",
            "fsx:DeleteSnapshot",
            "fsx:DeleteStorageVirtualMachine",
            "fsx:DeleteVolume",
            "fsx:DescribeAssociatedFileGateways",
            "fsx:DescribeBackups",
            "fsx:DescribeDataRepositoryAssociations",
            "fsx:DescribeDataRepositoryTasks",
            "fsx:DescribeFileCaches",
            "fsx:DescribeFileSystemAliases",
            "fsx:DescribeFileSystems",
            "fsx:DescribeSnapshots",
            "fsx:DescribeStorageVirtualMachines",
            "fsx:DescribeVolumes",
            "fsx:DisassociateFileGateway",
            "fsx:DisassociateFileSystemAliases",
            "fsx:ListTagsForResource",
            "fsx:ManageBackupPrincipalAssociations",
            "fsx:ReleaseFileSystemNfsV3Locks",
            "fsx:RestoreVolumeFromSnapshot",
            "fsx:TagResource",
            "fsx:UntagResource",
            "fsx:UpdateDataRepositoryAssociation",
            "fsx:UpdateFileCache",
            "fsx:UpdateFileSystem",
            "fsx:UpdateSnapshot",
            "fsx:UpdateStorageVirtualMachine",
            "fsx:UpdateVolume"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": [
                "fsx.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": [
                "s3.data-source.lustre.fsx.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/fsx/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "firehose:PutRecord"
          ],
          "Resource": [
            "arn:aws:firehose:*:*:deliverystream/aws-fsx-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:route-table/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/AmazonFSx": "ManagedByAmazonFSx"
            },
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "fsx.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:DescribeRouteTables"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "fsx.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v6",
    "IsDefaultVersion": true,
    "CreateDate": "2023-07-13T18:41:47+00:00"
  },
  "AmazonFSxReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "fsx:Describe*",
            "fsx:ListTagsForResource"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-11-28T16:33:32+00:00"
  },
  "AmazonFSxServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ds:AuthorizeApplication",
            "ds:GetAuthorizedApplicationDetails",
            "ds:UnauthorizeApplication",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeAddresses",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:DisassociateAddress",
            "route53:AssociateVPCWithHostedZone"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricData"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": "AWS/FSx"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:network-interface/*"
          ],
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "CreateNetworkInterface"
            },
            "ForAllValues:StringEquals": {
              "aws:TagKeys": "AmazonFSx.FileSystemId"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AssignPrivateIpAddresses",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:UnassignPrivateIpAddresses"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:network-interface/*"
          ],
          "Condition": {
            "Null": {
              "aws:ResourceTag/AmazonFSx.FileSystemId": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateRoute",
            "ec2:ReplaceRoute",
            "ec2:DeleteRoute"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:route-table/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/AmazonFSx": "ManagedByAmazonFSx"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/fsx/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "firehose:DescribeDeliveryStream",
            "firehose:PutRecord",
            "firehose:PutRecordBatch"
          ],
          "Resource": "arn:aws:firehose:*:*:deliverystream/aws-fsx-*"
        }
      ]
    },
    "VersionId": "v6",
    "IsDefaultVersion": true,
    "CreateDate": "2023-07-26T17:57:34+00:00"
  },
  "AmazonForecastFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "forecast:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "forecast.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-01-18T01:52:29+00:00"
  },
  "AmazonFraudDetectorFullAccessPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "frauddetector:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sagemaker:ListEndpoints",
            "sagemaker:DescribeEndpoint"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListAllMyBuckets",
            "s3:GetBucketLocation"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:ListRoles"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "frauddetector.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-12-03T22:46:26+00:00"
  },
  "AmazonFreeRTOSFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "freertos:*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2017-11-29T15:32:51+00:00"
  },
  "AmazonFreeRTOSOTAUpdate": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObjectVersion",
            "s3:PutObject",
            "s3:GetObject"
          ],
          "Resource": "arn:aws:s3:::afr-ota*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "signer:StartSigningJob",
            "signer:DescribeSigningJob",
            "signer:GetSigningProfile",
            "signer:PutSigningProfile"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListBucketVersions",
            "s3:ListBucket",
            "s3:ListAllMyBuckets",
            "s3:GetBucketLocation"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iot:DeleteJob",
            "iot:DescribeJob"
          ],
          "Resource": "arn:aws:iot:*:*:job/AFR_OTA*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iot:DeleteStream"
          ],
          "Resource": "arn:aws:iot:*:*:stream/AFR_OTA*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iot:CreateStream",
            "iot:CreateJob"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-18T17:47:30+00:00"
  },
  "AmazonGlacierFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": "glacier:*",
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:40:28+00:00"
  },
  "AmazonGlacierReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "glacier:DescribeJob",
            "glacier:DescribeVault",
            "glacier:GetDataRetrievalPolicy",
            "glacier:GetJobOutput",
            "glacier:GetVaultAccessPolicy",
            "glacier:GetVaultLock",
            "glacier:GetVaultNotifications",
            "glacier:ListJobs",
            "glacier:ListMultipartUploads",
            "glacier:ListParts",
            "glacier:ListTagsForVault",
            "glacier:ListVaults"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2016-05-05T18:46:10+00:00"
  },
  "AmazonGrafanaAthenaAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "athena:GetDatabase",
            "athena:GetDataCatalog",
            "athena:GetTableMetadata",
            "athena:ListDatabases",
            "athena:ListDataCatalogs",
            "athena:ListTableMetadata",
            "athena:ListWorkGroups"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "athena:GetQueryExecution",
            "athena:GetQueryResults",
            "athena:GetWorkGroup",
            "athena:StartQueryExecution",
            "athena:StopQueryExecution"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "Null": {
              "aws:ResourceTag/GrafanaDataSource": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:GetTable",
            "glue:GetTables",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:BatchGetPartition"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:ListBucketMultipartUploads",
            "s3:ListMultipartUploadParts",
            "s3:AbortMultipartUpload",
            "s3:CreateBucket",
            "s3:PutObject",
            "s3:PutBucketPublicAccessBlock"
          ],
          "Resource": [
            "arn:aws:s3:::grafana-athena-query-results-*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-11-22T17:11:11+00:00"
  },
  "AmazonGrafanaCloudWatchAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:DescribeAlarmsForMetric",
            "cloudwatch:DescribeAlarmHistory",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:ListMetrics",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:GetMetricData",
            "cloudwatch:GetInsightRuleReport"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:DescribeLogGroups",
            "logs:GetLogGroupFields",
            "logs:StartQuery",
            "logs:StopQuery",
            "logs:GetQueryResults",
            "logs:GetLogEvents"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeTags",
            "ec2:DescribeInstances",
            "ec2:DescribeRegions"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "tag:GetResources",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "oam:ListSinks",
            "oam:ListAttachedLinks"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-24T22:41:53+00:00"
  },
  "AmazonGrafanaRedshiftAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "redshift:DescribeClusters",
            "redshift-data:GetStatementResult",
            "redshift-data:DescribeStatement",
            "secretsmanager:ListSecrets"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "redshift-data:DescribeTable",
            "redshift-data:ExecuteStatement",
            "redshift-data:ListTables",
            "redshift-data:ListSchemas"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/GrafanaDataSource": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "redshift:GetClusterCredentials",
          "Resource": [
            "arn:aws:redshift:*:*:dbname:*/*",
            "arn:aws:redshift:*:*:dbuser:*/redshift_data_api_user"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:GetSecretValue"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "secretsmanager:ResourceTag/RedshiftQueryOwner": "false"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-11-26T23:15:15+00:00"
  },
  "AmazonGrafanaServiceLinkedRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeVpcs",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeSubnets",
            "ec2:DescribeSecurityGroups"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateNetworkInterface",
          "Resource": "*",
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "AmazonGrafanaManaged"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": "arn:aws:ec2:*:*:network-interface/*",
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "CreateNetworkInterface"
            },
            "Null": {
              "aws:RequestTag/AmazonGrafanaManaged": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:DeleteNetworkInterface",
          "Resource": "*",
          "Condition": {
            "Null": {
              "ec2:ResourceTag/AmazonGrafanaManaged": "false"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-08T23:10:33+00:00"
  },
  "AmazonGuardDutyFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AmazonGuardDutyFullAccessSid1",
          "Effect": "Allow",
          "Action": "guardduty:*",
          "Resource": "*"
        },
        {
          "Sid": "CreateServiceLinkedRoleSid1",
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": [
                "guardduty.amazonaws.com",
                "malware-protection.guardduty.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "ActionsForOrganizationsSid1",
          "Effect": "Allow",
          "Action": [
            "organizations:EnableAWSServiceAccess",
            "organizations:RegisterDelegatedAdministrator",
            "organizations:ListDelegatedAdministrators",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAccounts"
          ],
          "Resource": "*"
        },
        {
          "Sid": "IamGetRoleSid1",
          "Effect": "Allow",
          "Action": "iam:GetRole",
          "Resource": "arn:aws:iam::*:role/*AWSServiceRoleForAmazonGuardDutyMalwareProtection"
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-16T23:04:21+00:00"
  },
  "AmazonGuardDutyMalwareProtectionServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstances",
            "ec2:DescribeVolumes",
            "ec2:DescribeSnapshots",
            "ecs:ListClusters",
            "ecs:ListContainerInstances",
            "ecs:ListTasks",
            "ecs:DescribeTasks",
            "eks:DescribeCluster"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateSnapshot",
          "Resource": "arn:aws:ec2:*:*:volume/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/GuardDutyExcluded": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateSnapshot",
          "Resource": "arn:aws:ec2:*:*:snapshot/*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:TagKeys": "GuardDutyScanId"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": "arn:aws:ec2:*:*:*/*",
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "CreateSnapshot"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": "arn:aws:ec2:*:*:snapshot/*",
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/GuardDutyScanId": "*"
            },
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "GuardDutyExcluded",
                "GuardDutyFindingDetected"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteSnapshot",
            "ec2:ModifySnapshotAttribute"
          ],
          "Resource": "arn:aws:ec2:*:*:snapshot/*",
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/GuardDutyScanId": "*"
            },
            "Null": {
              "aws:ResourceTag/GuardDutyExcluded": "true"
            }
          }
        },
        {
          "Effect": "Deny",
          "Action": [
            "ec2:ModifySnapshotAttribute"
          ],
          "Resource": "arn:aws:ec2:*:*:snapshot/*",
          "Condition": {
            "StringEquals": {
              "ec2:Add/group": "all"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "kms:CreateGrant",
          "Resource": "arn:aws:kms:*:*:key/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/GuardDutyExcluded": "true"
            },
            "StringLike": {
              "kms:EncryptionContext:aws:ebs:id": "snap-*"
            },
            "ForAllValues:StringEquals": {
              "kms:GrantOperations": [
                "Decrypt",
                "CreateGrant",
                "GenerateDataKeyWithoutPlaintext",
                "ReEncryptFrom",
                "ReEncryptTo",
                "RetireGrant",
                "DescribeKey"
              ]
            },
            "Bool": {
              "kms:GrantIsForAWSResource": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:ReEncryptTo",
            "kms:ReEncryptFrom"
          ],
          "Resource": "arn:aws:kms:*:*:key/*",
          "Condition": {
            "StringLike": {
              "kms:ViaService": "ec2.*.amazonaws.com"
            },
            "Null": {
              "aws:ResourceTag/GuardDutyExcluded": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "kms:DescribeKey",
          "Resource": "arn:aws:kms:*:*:key/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:DescribeLogGroups",
            "logs:CreateLogGroup",
            "logs:PutRetentionPolicy"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/guardduty/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "logs:DescribeLogStreams"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/guardduty/*:log-stream:*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-07-19T19:06:53+00:00"
  },
  "AmazonGuardDutyReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "guardduty:Describe*",
            "guardduty:Get*",
            "guardduty:List*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "organizations:ListDelegatedAdministrators",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAccounts"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-16T23:07:06+00:00"
  },
  "AmazonGuardDutyServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstances",
            "ec2:DescribeImages",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcPeeringConnections",
            "ec2:DescribeTransitGatewayAttachments",
            "organizations:ListAccounts",
            "organizations:DescribeAccount",
            "s3:GetBucketPublicAccessBlock",
            "s3:GetEncryptionConfiguration",
            "s3:GetBucketTagging",
            "s3:GetAccountPublicAccessBlock",
            "s3:ListAllMyBuckets",
            "s3:GetBucketAcl",
            "s3:GetBucketPolicy",
            "s3:GetBucketPolicyStatus",
            "lambda:GetFunctionConfiguration",
            "lambda:ListTags",
            "eks:ListClusters",
            "eks:DescribeCluster",
            "ec2:DescribeVpcEndpointServices",
            "ec2:DescribeSecurityGroups"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "malware-protection.guardduty.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateVpcEndpoint",
          "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:TagKeys": "GuardDutyManaged"
            },
            "StringLike": {
              "ec2:VpceServiceName": [
                "com.amazonaws.*.guardduty-data",
                "com.amazonaws.*.guardduty-data-fips"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:ModifyVpcEndpoint",
            "ec2:DeleteVpcEndpoints"
          ],
          "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/GuardDutyManaged": false
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateVpcEndpoint",
            "ec2:ModifyVpcEndpoint"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:vpc/*",
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:subnet/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "CreateVpcEndpoint"
            },
            "ForAnyValue:StringEquals": {
              "aws:TagKeys": "GuardDutyManaged"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:DeleteSecurityGroup"
          ],
          "Resource": "arn:aws:ec2:*:*:security-group/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/GuardDutyManaged": false
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateSecurityGroup",
          "Resource": "arn:aws:ec2:*:*:security-group/*",
          "Condition": {
            "StringLike": {
              "aws:RequestTag/GuardDutyManaged": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateSecurityGroup",
          "Resource": "arn:aws:ec2:*:*:vpc/*"
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": "arn:aws:ec2:*:*:security-group/*",
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "CreateSecurityGroup"
            },
            "ForAnyValue:StringEquals": {
              "aws:TagKeys": "GuardDutyManaged"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "eks:CreateAddon",
          "Resource": "arn:aws:eks:*:*:cluster/*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:TagKeys": "GuardDutyManaged"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "eks:DeleteAddon",
            "eks:UpdateAddon",
            "eks:DescribeAddon"
          ],
          "Resource": "arn:aws:eks:*:*:addon/*/aws-guardduty-agent/*"
        },
        {
          "Effect": "Allow",
          "Action": "eks:TagResource",
          "Resource": "arn:aws:eks:*:*:cluster/*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:TagKeys": "GuardDutyManaged"
            }
          }
        }
      ]
    },
    "VersionId": "v6",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-08T19:59:16+00:00"
  },
  "AmazonHealthLakeFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "healthlake:*",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:GetBucketLocation",
            "iam:ListRoles"
          ],
          "Resource": "*",
          "Effect": "Allow"
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "healthlake.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-02-17T01:07:05+00:00"
  },
  "AmazonHealthLakeReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "healthlake:ListFHIRDatastores",
            "healthlake:DescribeFHIRDatastore",
            "healthlake:DescribeFHIRImportJob",
            "healthlake:DescribeFHIRExportJob",
            "healthlake:GetCapabilities",
            "healthlake:ReadResource",
            "healthlake:SearchWithGet",
            "healthlake:SearchWithPost"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-02-17T02:43:31+00:00"
  },
  "AmazonHoneycodeFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "honeycode:*"
          ],
          "Resource": "*",
          "Effect": "Allow"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-06-24T20:28:11+00:00"
  },
  "AmazonHoneycodeReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "honeycode:List*",
            "honeycode:Get*",
            "honeycode:Describe*",
            "honeycode:Query*"
          ],
          "Resource": "*",
          "Effect": "Allow"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-01T17:27:53+00:00"
  },
  "AmazonHoneycodeServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "sso:GetManagedApplicationInstance"
          ],
          "Resource": "*",
          "Effect": "Allow"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-11-18T18:03:08+00:00"
  },
  "AmazonHoneycodeTeamAssociationFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "honeycode:ListTeamAssociations",
            "honeycode:ApproveTeamAssociation",
            "honeycode:RejectTeamAssociation"
          ],
          "Resource": "*",
          "Effect": "Allow"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-06-24T20:28:27+00:00"
  },
  "AmazonHoneycodeTeamAssociationReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "honeycode:ListTeamAssociations"
          ],
          "Resource": "*",
          "Effect": "Allow"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-06-24T20:27:46+00:00"
  },
  "AmazonHoneycodeWorkbookFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "honeycode:GetScreenData",
            "honeycode:InvokeScreenAutomation",
            "honeycode:BatchCreateTableRows",
            "honeycode:BatchDeleteTableRows",
            "honeycode:BatchUpdateTableRows",
            "honeycode:BatchUpsertTableRows",
            "honeycode:DescribeTableDataImportJob",
            "honeycode:ListTableColumns",
            "honeycode:ListTableRows",
            "honeycode:ListTables",
            "honeycode:QueryTableRows",
            "honeycode:StartTableDataImportJob"
          ],
          "Resource": "*",
          "Effect": "Allow"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-01T17:30:06+00:00"
  },
  "AmazonHoneycodeWorkbookReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "honeycode:GetScreenData",
            "honeycode:DescribeTableDataImportJob",
            "honeycode:ListTableColumns",
            "honeycode:ListTableRows",
            "honeycode:ListTables",
            "honeycode:QueryTableRows"
          ],
          "Resource": "*",
          "Effect": "Allow"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-01T17:32:49+00:00"
  },
  "AmazonInspector2FullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "inspector2:*",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "codeguru-security:BatchGetFindings",
            "codeguru-security:GetAccountConfiguration"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "inspector2.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "organizations:EnableAWSServiceAccess",
            "organizations:RegisterDelegatedAdministrator",
            "organizations:ListDelegatedAdministrators",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-08-03T19:28:59+00:00"
  },
  "AmazonInspector2ReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "organizations:ListDelegatedAdministrators",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "inspector2:BatchGet*",
            "inspector2:List*",
            "inspector2:Describe*",
            "inspector2:Get*",
            "inspector2:Search*",
            "codeguru-security:BatchGetFindings",
            "codeguru-security:GetAccountConfiguration"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2023-09-22T20:56:53+00:00"
  },
  "AmazonInspector2ServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "TirosPolicy",
          "Effect": "Allow",
          "Action": [
            "directconnect:DescribeConnections",
            "directconnect:DescribeDirectConnectGatewayAssociations",
            "directconnect:DescribeDirectConnectGatewayAttachments",
            "directconnect:DescribeDirectConnectGateways",
            "directconnect:DescribeVirtualGateways",
            "directconnect:DescribeVirtualInterfaces",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeCustomerGateways",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeManagedPrefixLists",
            "ec2:DescribeNatGateways",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePrefixLists",
            "ec2:DescribeRegions",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeTransitGatewayAttachments",
            "ec2:DescribeTransitGatewayConnects",
            "ec2:DescribeTransitGatewayPeeringAttachments",
            "ec2:DescribeTransitGatewayRouteTables",
            "ec2:DescribeTransitGatewayVpcAttachments",
            "ec2:DescribeTransitGateways",
            "ec2:DescribeVpcEndpointServiceConfigurations",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcPeeringConnections",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpnConnections",
            "ec2:DescribeVpnGateways",
            "ec2:GetManagedPrefixListEntries",
            "ec2:GetTransitGatewayRouteTablePropagations",
            "ec2:SearchTransitGatewayRoutes",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancerAttributes",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeRules",
            "elasticloadbalancing:DescribeTags",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetGroupAttributes",
            "elasticloadbalancing:DescribeTargetHealth",
            "network-firewall:DescribeFirewall",
            "network-firewall:DescribeFirewallPolicy",
            "network-firewall:DescribeResourcePolicy",
            "network-firewall:DescribeRuleGroup",
            "network-firewall:ListFirewallPolicies",
            "network-firewall:ListFirewalls",
            "network-firewall:ListRuleGroups",
            "tiros:CreateQuery",
            "tiros:GetQueryAnswer"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "PackageVulnerabilityScanning",
          "Effect": "Allow",
          "Action": [
            "ecr:BatchGetImage",
            "ecr:BatchGetRepositoryScanningConfiguration",
            "ecr:DescribeImages",
            "ecr:DescribeRegistry",
            "ecr:DescribeRepositories",
            "ecr:GetAuthorizationToken",
            "ecr:GetDownloadUrlForLayer",
            "ecr:GetRegistryScanningConfiguration",
            "ecr:ListImages",
            "ecr:PutRegistryScanningConfiguration",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAccounts",
            "ssm:DescribeAssociation",
            "ssm:DescribeAssociationExecutions",
            "ssm:DescribeInstanceInformation",
            "ssm:ListAssociations",
            "ssm:ListResourceDataSync"
          ],
          "Resource": "*"
        },
        {
          "Sid": "LambdaPackageVulnerabilityScanning",
          "Effect": "Allow",
          "Action": [
            "lambda:ListFunctions",
            "lambda:GetFunction",
            "lambda:GetLayerVersion",
            "cloudwatch:GetMetricData"
          ],
          "Resource": "*"
        },
        {
          "Sid": "GatherInventory",
          "Effect": "Allow",
          "Action": [
            "ssm:CreateAssociation",
            "ssm:StartAssociationsOnce",
            "ssm:DeleteAssociation",
            "ssm:UpdateAssociation"
          ],
          "Resource": [
            "arn:*:ec2:*:*:instance/*",
            "arn:*:ssm:*:*:document/AmazonInspector2-*",
            "arn:*:ssm:*:*:document/AWS-GatherSoftwareInventory",
            "arn:*:ssm:*:*:managed-instance/*",
            "arn:*:ssm:*:*:association/*"
          ]
        },
        {
          "Sid": "DataSyncCleanup",
          "Effect": "Allow",
          "Action": [
            "ssm:CreateResourceDataSync",
            "ssm:DeleteResourceDataSync"
          ],
          "Resource": [
            "arn:*:ssm:*:*:resource-data-sync/InspectorResourceDataSync-do-not-delete"
          ]
        },
        {
          "Sid": "ManagedRules",
          "Effect": "Allow",
          "Action": [
            "events:PutRule",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:ListTargetsByRule",
            "events:PutTargets",
            "events:RemoveTargets"
          ],
          "Resource": [
            "arn:*:events:*:*:rule/DO-NOT-DELETE-AmazonInspector*ManagedRule"
          ]
        },
        {
          "Sid": "LambdaCodeVulnerabilityScanning",
          "Effect": "Allow",
          "Action": [
            "codeguru-security:CreateScan",
            "codeguru-security:GetAccountConfiguration",
            "codeguru-security:GetFindings",
            "codeguru-security:GetScan",
            "codeguru-security:ListFindings",
            "codeguru-security:BatchGetFindings",
            "codeguru-security:DeleteScansByCategory"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "CodeGuruCodeVulnerabilityScanning",
          "Effect": "Allow",
          "Action": [
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:GetPolicy",
            "iam:GetPolicyVersion",
            "iam:ListAttachedRolePolicies",
            "iam:ListPolicies",
            "iam:ListPolicyVersions",
            "iam:ListRolePolicies",
            "lambda:ListVersionsByFunction"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "codeguru-security.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "Ec2DeepInspection",
          "Effect": "Allow",
          "Action": [
            "ssm:PutParameter",
            "ssm:GetParameters",
            "ssm:DeleteParameter"
          ],
          "Resource": [
            "arn:*:ssm:*:*:parameter/inspector-aws/service/inspector-linux-application-paths"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        },
        {
          "Sid": "AllowManagementOfServiceLinkedChannel",
          "Effect": "Allow",
          "Action": [
            "cloudtrail:CreateServiceLinkedChannel",
            "cloudtrail:DeleteServiceLinkedChannel"
          ],
          "Resource": [
            "arn:*:cloudtrail:*:*:channel/aws-service-channel/inspector2/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        },
        {
          "Sid": "AllowListServiceLinkedChannels",
          "Effect": "Allow",
          "Action": [
            "cloudtrail:ListServiceLinkedChannels"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        }
      ]
    },
    "VersionId": "v11",
    "IsDefaultVersion": true,
    "CreateDate": "2023-09-07T13:20:55+00:00"
  },
  "AmazonInspectorFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "inspector:*",
            "ec2:DescribeInstances",
            "ec2:DescribeTags",
            "sns:ListTopics",
            "events:DescribeRule",
            "events:ListRuleNamesByTarget"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "inspector.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/inspector.amazonaws.com/AWSServiceRoleForAmazonInspector",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "inspector.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2017-12-21T14:53:31+00:00"
  },
  "AmazonInspectorReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "inspector:Describe*",
            "inspector:Get*",
            "inspector:List*",
            "inspector:Preview*",
            "ec2:DescribeInstances",
            "ec2:DescribeTags",
            "sns:ListTopics",
            "events:DescribeRule",
            "events:ListRuleNamesByTarget"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2019-10-01T15:17:54+00:00"
  },
  "AmazonInspectorServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "directconnect:DescribeConnections",
            "directconnect:DescribeDirectConnectGateways",
            "directconnect:DescribeDirectConnectGatewayAssociations",
            "directconnect:DescribeDirectConnectGatewayAttachments",
            "directconnect:DescribeVirtualGateways",
            "directconnect:DescribeVirtualInterfaces",
            "directconnect:DescribeTags",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeCustomerGateways",
            "ec2:DescribeInstances",
            "ec2:DescribeTags",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeNatGateways",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePrefixLists",
            "ec2:DescribeRegions",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcPeeringConnections",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpnConnections",
            "ec2:DescribeVpnGateways",
            "ec2:DescribeManagedPrefixLists",
            "ec2:GetManagedPrefixListEntries",
            "ec2:DescribeVpcEndpointServiceConfigurations",
            "ec2:DescribeTransitGateways",
            "ec2:DescribeTransitGatewayAttachments",
            "ec2:DescribeTransitGatewayVpcAttachments",
            "ec2:DescribeTransitGatewayRouteTables",
            "ec2:SearchTransitGatewayRoutes",
            "ec2:DescribeTransitGatewayPeeringAttachments",
            "ec2:GetTransitGatewayRouteTablePropagations",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeLoadBalancerAttributes",
            "elasticloadbalancing:DescribeRules",
            "elasticloadbalancing:DescribeTags",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2020-09-11T17:12:02+00:00"
  },
  "AmazonKendraFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "kendra.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:ListRoles"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeVpcs",
            "ec2:DescribeSubnets"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:ListKeys",
            "kms:ListAliases",
            "kms:DescribeKey"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListAllMyBuckets",
            "s3:GetBucketLocation"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:ListSecrets"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:GetMetricData"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:CreateSecret",
            "secretsmanager:DescribeSecret"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:secret:AmazonKendra-*"
        },
        {
          "Effect": "Allow",
          "Action": "kendra:*",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-12-03T16:15:37+00:00"
  },
  "AmazonKendraReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "kendra:Describe*",
            "kendra:List*",
            "kendra:Query",
            "kendra:GetQuerySuggestions"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2021-05-27T17:01:20+00:00"
  },
  "AmazonKeyspacesFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "CassandraFullAccess",
          "Effect": "Allow",
          "Action": [
            "cassandra:*"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ApplicationAutoscalingFullAccess",
          "Effect": "Allow",
          "Action": [
            "application-autoscaling:DeleteScalingPolicy",
            "application-autoscaling:DeleteScheduledAction",
            "application-autoscaling:DeregisterScalableTarget",
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingActivities",
            "application-autoscaling:DescribeScalingPolicies",
            "application-autoscaling:DescribeScheduledActions",
            "application-autoscaling:PutScheduledAction",
            "application-autoscaling:PutScalingPolicy",
            "application-autoscaling:RegisterScalableTarget",
            "kms:DescribeKey",
            "kms:ListAliases"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CloudwatchAlarmsFullAccess",
          "Effect": "Allow",
          "Action": [
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricData",
            "cloudwatch:PutMetricAlarm"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ApplicationAutoscalingServiceLinkedRole",
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/cassandra.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_CassandraTable",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "cassandra.application-autoscaling.amazonaws.com"
            }
          }
        },
        {
          "Sid": "KeyspacesReplicationServiceLinkedRole",
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/replication.cassandra.amazonaws.com/AWSServiceRoleForKeyspacesReplication",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "replication.cassandra.amazonaws.com"
            }
          }
        },
        {
          "Sid": "Ec2VpcReadAccess",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeVpcEndpoints"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2023-10-03T19:12:30+00:00"
  },
  "AmazonKeyspacesReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cassandra:Select"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingActivities",
            "application-autoscaling:DescribeScalingPolicies",
            "application-autoscaling:DescribeScheduledActions",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricData",
            "kms:DescribeKey",
            "kms:ListAliases"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2022-07-07T14:54:05+00:00"
  },
  "AmazonKeyspacesReadOnlyAccess_v2": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cassandra:Select"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingActivities",
            "application-autoscaling:DescribeScalingPolicies",
            "application-autoscaling:DescribeScheduledActions",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricData",
            "kms:DescribeKey",
            "kms:ListAliases"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeVpcEndpoints"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-09-12T17:01:45+00:00"
  },
  "AmazonKinesisAnalyticsFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "kinesisanalytics:*",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kinesis:CreateStream",
            "kinesis:DeleteStream",
            "kinesis:DescribeStream",
            "kinesis:ListStreams",
            "kinesis:PutRecord",
            "kinesis:PutRecords"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "firehose:DescribeDeliveryStream",
            "firehose:ListDeliveryStreams"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "logs:GetLogEvents",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:ListPolicyVersions",
            "iam:ListRoles"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/service-role/kinesis-analytics*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2016-09-21T19:01:14+00:00"
  },
  "AmazonKinesisAnalyticsReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "kinesisanalytics:Describe*",
            "kinesisanalytics:Get*",
            "kinesisanalytics:List*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kinesis:DescribeStream",
            "kinesis:ListStreams"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "firehose:DescribeDeliveryStream",
            "firehose:ListDeliveryStreams"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "logs:GetLogEvents",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:ListPolicyVersions",
            "iam:ListRoles"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2016-09-21T18:16:43+00:00"
  },
  "AmazonKinesisFirehoseFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "firehose:*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-10-07T18:45:26+00:00"
  },
  "AmazonKinesisFirehoseReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "firehose:Describe*",
            "firehose:List*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-10-07T18:43:39+00:00"
  },
  "AmazonKinesisFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "kinesis:*",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:40:29+00:00"
  },
  "AmazonKinesisReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "kinesis:Get*",
            "kinesis:List*",
            "kinesis:Describe*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:40:30+00:00"
  },
  "AmazonKinesisVideoStreamsFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "kinesisvideo:*",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2017-12-01T23:27:18+00:00"
  },
  "AmazonKinesisVideoStreamsReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "kinesisvideo:Describe*",
            "kinesisvideo:Get*",
            "kinesisvideo:List*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2017-12-01T23:14:32+00:00"
  },
  "AmazonLaunchWizardFullAccessV2": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AppInsightsActions0",
          "Effect": "Allow",
          "Action": "applicationinsights:*",
          "Resource": "*"
        },
        {
          "Sid": "ResourceGroupActions0",
          "Effect": "Allow",
          "Action": "resource-groups:List*",
          "Resource": "*"
        },
        {
          "Sid": "Route53Actions0",
          "Effect": "Allow",
          "Action": [
            "route53:ChangeResourceRecordSets",
            "route53:GetChange",
            "route53:ListResourceRecordSets",
            "route53:ListHostedZones",
            "route53:ListHostedZonesByName"
          ],
          "Resource": "*"
        },
        {
          "Sid": "S3Actions0",
          "Effect": "Allow",
          "Action": [
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:GetBucketLocation"
          ],
          "Resource": "*"
        },
        {
          "Sid": "KmsActions0",
          "Effect": "Allow",
          "Action": [
            "kms:ListKeys",
            "kms:ListAliases"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CloudWatchActions0",
          "Effect": "Allow",
          "Action": [
            "cloudwatch:List*",
            "cloudwatch:Get*",
            "cloudwatch:Describe*"
          ],
          "Resource": "*"
        },
        {
          "Sid": "Ec2Actions0",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateInternetGateway",
            "ec2:CreateNatGateway",
            "ec2:CreateVpc",
            "ec2:CreateKeyPair",
            "ec2:CreateRoute",
            "ec2:CreateRouteTable",
            "ec2:CreateSubnet"
          ],
          "Resource": "*"
        },
        {
          "Sid": "Ec2Actions1",
          "Effect": "Allow",
          "Action": [
            "ec2:AllocateAddress",
            "ec2:AllocateHosts",
            "ec2:AssignPrivateIpAddresses",
            "ec2:AssociateAddress",
            "ec2:CreateDhcpOptions",
            "ec2:CreateEgressOnlyInternetGateway",
            "ec2:CreateNetworkInterface",
            "ec2:CreateVolume",
            "ec2:CreateVpcEndpoint",
            "ec2:CreateTags",
            "ec2:DeleteTags",
            "ec2:RunInstances",
            "ec2:StartInstances",
            "ec2:ModifyInstanceAttribute",
            "ec2:ModifySubnetAttribute",
            "ec2:ModifyVolumeAttribute",
            "ec2:ModifyVpcAttribute",
            "ec2:AssociateDhcpOptions",
            "ec2:AssociateSubnetCidrBlock",
            "ec2:AttachInternetGateway",
            "ec2:AttachNetworkInterface",
            "ec2:AttachVolume",
            "ec2:DeleteDhcpOptions",
            "ec2:DeleteInternetGateway",
            "ec2:DeleteKeyPair",
            "ec2:DeleteNatGateway",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteVolume",
            "ec2:DeleteVpc",
            "ec2:DetachInternetGateway",
            "ec2:DetachVolume",
            "ec2:DeleteSnapshot",
            "ec2:AssociateRouteTable",
            "ec2:AssociateVpcCidrBlock",
            "ec2:DeleteNetworkAcl",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DeleteRoute",
            "ec2:DeleteRouteTable",
            "ec2:DeleteSubnet",
            "ec2:DetachNetworkInterface",
            "ec2:DisassociateAddress",
            "ec2:DisassociateVpcCidrBlock",
            "ec2:GetLaunchTemplateData",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:ModifyVolume",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:GetConsoleOutput",
            "ec2:GetPasswordData",
            "ec2:ReleaseAddress",
            "ec2:ReplaceRoute",
            "ec2:ReplaceRouteTableAssociation",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:DisassociateIamInstanceProfile",
            "ec2:DisassociateRouteTable",
            "ec2:DisassociateSubnetCidrBlock",
            "ec2:ModifyInstancePlacement",
            "ec2:DeletePlacementGroup",
            "ec2:CreatePlacementGroup",
            "elasticfilesystem:DeleteFileSystem",
            "elasticfilesystem:DeleteMountTarget",
            "ds:AddIpRoutes",
            "ds:CreateComputer",
            "ds:CreateMicrosoftAD",
            "ds:DeleteDirectory",
            "servicecatalog:AssociateProductWithPortfolio",
            "cloudformation:GetTemplateSummary",
            "sts:GetCallerIdentity"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "launchwizard.amazonaws.com"
            }
          }
        },
        {
          "Sid": "CloudFormationActions0",
          "Effect": "Allow",
          "Action": [
            "cloudformation:DescribeStack*",
            "cloudformation:Get*",
            "cloudformation:ListStacks",
            "cloudformation:SignalResource",
            "cloudformation:DeleteStack"
          ],
          "Resource": [
            "arn:aws:cloudformation:*:*:stack/LaunchWizard*/*",
            "arn:aws:cloudformation:*:*:stack/ApplicationInsights*/*"
          ]
        },
        {
          "Sid": "Ec2Actions2",
          "Effect": "Allow",
          "Action": [
            "ec2:StopInstances",
            "ec2:TerminateInstances"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/LaunchWizard-*/*"
            }
          }
        },
        {
          "Sid": "IamActions0",
          "Effect": "Allow",
          "Action": [
            "iam:CreateInstanceProfile",
            "iam:DeleteInstanceProfile",
            "iam:RemoveRoleFromInstanceProfile",
            "iam:AddRoleToInstanceProfile"
          ],
          "Resource": [
            "arn:aws:iam::*:role/service-role/AmazonEC2RoleForLaunchWizard*",
            "arn:aws:iam::*:instance-profile/LaunchWizard*"
          ]
        },
        {
          "Sid": "IamActions1",
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/service-role/AmazonEC2RoleForLaunchWizard",
            "arn:aws:iam::*:role/service-role/AmazonLambdaRoleForLaunchWizard",
            "arn:aws:iam::*:instance-profile/LaunchWizard*"
          ],
          "Condition": {
            "StringEqualsIfExists": {
              "iam:PassedToService": [
                "lambda.amazonaws.com",
                "ec2.amazonaws.com",
                "ec2.amazonaws.com.cn"
              ]
            }
          }
        },
        {
          "Sid": "AutoScalingActions0",
          "Effect": "Allow",
          "Action": [
            "autoscaling:AttachInstances",
            "autoscaling:CreateAutoScalingGroup",
            "autoscaling:CreateLaunchConfiguration",
            "autoscaling:DeleteAutoScalingGroup",
            "autoscaling:DeleteLaunchConfiguration",
            "autoscaling:UpdateAutoScalingGroup",
            "autoscaling:CreateOrUpdateTags",
            "resource-groups:CreateGroup",
            "resource-groups:DeleteGroup",
            "sns:ListSubscriptionsByTopic",
            "sns:Publish",
            "ssm:DeleteDocument",
            "ssm:DeleteParameter*",
            "ssm:DescribeDocument*",
            "ssm:GetDocument",
            "ssm:PutParameter"
          ],
          "Resource": [
            "arn:aws:resource-groups:*:*:group/LaunchWizard*",
            "arn:aws:sns:*:*:*",
            "arn:aws:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/LaunchWizard*",
            "arn:aws:autoscaling:*:*:launchConfiguration:*:launchConfigurationName/LaunchWizard*",
            "arn:aws:ssm:*:*:parameter/LaunchWizard*",
            "arn:aws:ssm:*:*:document/LaunchWizard*"
          ]
        },
        {
          "Sid": "SsmActions0",
          "Effect": "Allow",
          "Action": [
            "ssm:GetDocument",
            "ssm:SendCommand"
          ],
          "Resource": [
            "arn:aws:ssm:*::document/AWS-RunShellScript"
          ]
        },
        {
          "Sid": "SsmActions1",
          "Effect": "Allow",
          "Action": [
            "ssm:SendCommand"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/LaunchWizard-*/*"
            }
          }
        },
        {
          "Sid": "SsmActions2",
          "Effect": "Allow",
          "Action": [
            "ssm:AddTagsToResource",
            "ssm:DescribeDocument",
            "ssm:GetDocument",
            "ssm:ListTagsForResource",
            "ssm:RemoveTagsFromResource"
          ],
          "Resource": [
            "arn:aws:ssm:*:*:parameter/LaunchWizard*",
            "arn:aws:ssm:*:*:document/LaunchWizard*"
          ]
        },
        {
          "Sid": "SsmActions3",
          "Effect": "Allow",
          "Action": [
            "autoscaling:Describe*",
            "cloudformation:DescribeAccountLimits",
            "cloudformation:DescribeStackDriftDetectionStatus",
            "cloudformation:List*",
            "cloudformation:ValidateTemplate",
            "ds:Describe*",
            "ds:ListAuthorizedApplications",
            "ec2:Describe*",
            "ec2:Get*",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:GetUser",
            "iam:GetPolicyVersion",
            "iam:GetPolicy",
            "iam:List*",
            "resource-groups:Get*",
            "resource-groups:List*",
            "servicequotas:GetServiceQuota",
            "servicequotas:ListServiceQuotas",
            "sns:ListSubscriptions",
            "sns:ListTopics",
            "ssm:CreateDocument",
            "ssm:DescribeAutomation*",
            "ssm:DescribeInstanceInformation",
            "ssm:DescribeParameters",
            "ssm:GetAutomationExecution",
            "ssm:GetCommandInvocation",
            "ssm:GetParameter*",
            "ssm:GetConnectionStatus",
            "ssm:ListCommand*",
            "ssm:ListDocument*",
            "ssm:ListInstanceAssociations",
            "ssm:SendAutomationSignal",
            "tag:Get*"
          ],
          "Resource": "*"
        },
        {
          "Sid": "SsmActions4",
          "Effect": "Allow",
          "Action": [
            "ssm:StartAutomationExecution",
            "ssm:StopAutomationExecution"
          ],
          "Resource": "arn:aws:ssm:*:*:automation-definition/LaunchWizard-*:*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "launchwizard.amazonaws.com"
            }
          }
        },
        {
          "Sid": "CloudFormationActions1",
          "Effect": "Allow",
          "Action": [
            "cloudformation:List*",
            "cloudformation:Describe*"
          ],
          "Resource": "arn:aws:cloudformation:*:*:stack/LaunchWizard*/"
        },
        {
          "Sid": "IamActions2",
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": [
                "autoscaling.amazonaws.com",
                "application-insights.amazonaws.com",
                "events.amazonaws.com",
                "autoscaling.amazonaws.com.cn",
                "events.amazonaws.com.cn"
              ]
            }
          }
        },
        {
          "Sid": "LaunchWizardActions0",
          "Effect": "Allow",
          "Action": "launchwizard:*",
          "Resource": "*"
        },
        {
          "Sid": "SqsActions0",
          "Effect": "Allow",
          "Action": [
            "sqs:TagQueue",
            "sqs:GetQueueUrl",
            "sqs:AddPermission",
            "sqs:ListQueues",
            "sqs:DeleteQueue",
            "sqs:GetQueueAttributes",
            "sqs:ListQueueTags",
            "sqs:CreateQueue",
            "sqs:SetQueueAttributes"
          ],
          "Resource": "arn:aws:sqs:*:*:LaunchWizard*"
        },
        {
          "Sid": "CloudWatchActions1",
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricAlarm",
            "iam:GetInstanceProfile",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms"
          ],
          "Resource": [
            "arn:aws:cloudwatch:*:*:alarm:LaunchWizard*",
            "arn:aws:iam::*:instance-profile/LaunchWizard*"
          ]
        },
        {
          "Sid": "EfsActions0",
          "Effect": "Allow",
          "Action": [
            "cloudformation:CreateStack",
            "route53:ListHostedZones",
            "ec2:CreateSecurityGroup",
            "ec2:AuthorizeSecurityGroupIngress",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:CreateFileSystem",
            "elasticfilesystem:CreateMountTarget",
            "elasticfilesystem:DescribeMountTargets",
            "elasticfilesystem:DescribeMountTargetSecurityGroups"
          ],
          "Resource": "*"
        },
        {
          "Sid": "S3Actions1",
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:PutObject"
          ],
          "Resource": [
            "arn:aws:s3:::launchwizard*",
            "arn:aws:s3:::launchwizard*/*",
            "arn:aws:s3:::aws-sap-data-provider/config.properties"
          ]
        },
        {
          "Sid": "CloudFormationActions2",
          "Effect": "Allow",
          "Action": "cloudformation:TagResource",
          "Resource": "*",
          "Condition": {
            "ForAllValues:StringLike": {
              "aws:TagKeys": "LaunchWizard*"
            }
          }
        },
        {
          "Sid": "LambdaActions0",
          "Effect": "Allow",
          "Action": [
            "s3:CreateBucket",
            "s3:PutBucketVersioning",
            "s3:DeleteBucket",
            "lambda:CreateFunction",
            "lambda:DeleteFunction",
            "lambda:GetFunction",
            "lambda:GetFunctionConfiguration",
            "lambda:InvokeFunction"
          ],
          "Resource": [
            "arn:aws:lambda:*:*:function:LaunchWizard*",
            "arn:aws:s3:::launchwizard*"
          ]
        },
        {
          "Sid": "DynamodbActions0",
          "Effect": "Allow",
          "Action": [
            "dynamodb:CreateTable",
            "dynamodb:DescribeTable",
            "dynamodb:DeleteTable"
          ],
          "Resource": "arn:aws:dynamodb:*:*:table/LaunchWizard*"
        },
        {
          "Sid": "SecretsManagerActions0",
          "Effect": "Allow",
          "Action": [
            "secretsmanager:CreateSecret",
            "secretsmanager:DeleteSecret",
            "secretsmanager:TagResource",
            "secretsmanager:UntagResource",
            "secretsmanager:PutResourcePolicy",
            "secretsmanager:DeleteResourcePolicy",
            "secretsmanager:ListSecretVersionIds",
            "secretsmanager:GetSecretValue"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:secret:LaunchWizard*"
        },
        {
          "Sid": "SecretsManagerActions1",
          "Effect": "Allow",
          "Action": [
            "secretsmanager:GetRandomPassword",
            "secretsmanager:ListSecrets"
          ],
          "Resource": "*"
        },
        {
          "Sid": "SsmActions5",
          "Effect": "Allow",
          "Action": [
            "ssm:CreateOpsMetadata"
          ],
          "Resource": "*"
        },
        {
          "Sid": "SsmActions6",
          "Effect": "Allow",
          "Action": "ssm:DeleteOpsMetadata",
          "Resource": "arn:aws:ssm:*:*:opsmetadata/aws/ssm/LaunchWizard*"
        },
        {
          "Sid": "SnsActions0",
          "Effect": "Allow",
          "Action": [
            "sns:CreateTopic",
            "sns:DeleteTopic",
            "sns:Subscribe",
            "sns:Unsubscribe"
          ],
          "Resource": "arn:aws:sns:*:*:LaunchWizard*"
        },
        {
          "Sid": "FsxActions0",
          "Effect": "Allow",
          "Action": [
            "fsx:UntagResource",
            "fsx:TagResource",
            "fsx:DeleteFileSystem",
            "fsx:ListTagsForResource"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/Name": "LaunchWizard*"
            }
          }
        },
        {
          "Sid": "FsxActions1",
          "Effect": "Allow",
          "Action": [
            "fsx:CreateFileSystem"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "aws:RequestTag/Name": [
                "LaunchWizard*"
              ]
            }
          }
        },
        {
          "Sid": "FsxActions2",
          "Effect": "Allow",
          "Action": [
            "fsx:DescribeFileSystems"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ServiceCatalogActions0",
          "Effect": "Allow",
          "Action": [
            "servicecatalog:CreatePortfolio",
            "servicecatalog:DescribePortfolio",
            "servicecatalog:CreateConstraint",
            "servicecatalog:CreateProduct",
            "servicecatalog:AssociatePrincipalWithPortfolio",
            "servicecatalog:CreateProvisioningArtifact",
            "servicecatalog:TagResource",
            "servicecatalog:UntagResource"
          ],
          "Resource": [
            "arn:aws:servicecatalog:*:*:*/*",
            "arn:aws:catalog:*:*:*/*"
          ],
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "launchwizard.amazonaws.com"
            }
          }
        },
        {
          "Sid": "SsmActions7",
          "Effect": "Allow",
          "Action": [
            "ssm:CreateAssociation",
            "ssm:DeleteAssociation"
          ],
          "Resource": [
            "arn:aws:ssm:*:*:document/AWS-ConfigureAWSPackage",
            "arn:aws:ssm:*:*:association/*"
          ],
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "launchwizard.amazonaws.com"
            }
          }
        },
        {
          "Sid": "EfsActions1",
          "Effect": "Allow",
          "Action": [
            "elasticfilesystem:UntagResource",
            "elasticfilesystem:TagResource"
          ],
          "Resource": "arn:aws:elasticfilesystem:*:*:file-system/*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "launchwizard.amazonaws.com"
            }
          }
        },
        {
          "Sid": "LogsActions0",
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:DeleteLogGroup",
            "logs:DescribeLogStreams",
            "logs:UntagResource",
            "logs:TagResource",
            "logs:CreateLogGroup",
            "logs:DeleteLogStream",
            "logs:PutLogEvents",
            "logs:GetLogEvents",
            "logs:GetLogDelivery",
            "logs:GetLogGroupFields",
            "logs:GetLogRecord",
            "logs:ListLogDeliveries"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:LaunchWizard*",
            "arn:aws:logs:*:*:log-group:LaunchWizard*:log-stream:*"
          ],
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "launchwizard.amazonaws.com"
            }
          }
        },
        {
          "Sid": "LogsActions1",
          "Effect": "Allow",
          "Action": "logs:DescribeLogGroups",
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "launchwizard.amazonaws.com"
            }
          }
        },
        {
          "Sid": "FsxActions3",
          "Effect": "Allow",
          "Action": [
            "fsx:CreateStorageVirtualMachine",
            "fsx:CreateVolume"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/LaunchWizard-*/*"
            },
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "launchwizard.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "FsxActions4",
          "Effect": "Allow",
          "Action": [
            "fsx:DescribeStorageVirtualMachines",
            "fsx:DescribeVolumes"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "launchwizard.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "FsxActions5",
          "Effect": "Allow",
          "Action": [
            "fsx:DeleteStorageVirtualMachine",
            "fsx:DeleteVolume"
          ],
          "Resource": [
            "arn:aws:fsx:*:*:storage-virtual-machine/*/*",
            "arn:aws:fsx:*:*:backup/*",
            "arn:aws:fsx:*:*:volume/*/*"
          ],
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/LaunchWizard-*/*"
            },
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "launchwizard.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-09-01T17:14:56+00:00"
  },
  "AmazonLaunchWizard_Fullaccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "applicationinsights:*",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "resource-groups:List*",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "route53:ChangeResourceRecordSets",
            "route53:GetChange",
            "route53:ListResourceRecordSets",
            "route53:ListHostedZones",
            "route53:ListHostedZonesByName"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:GetBucketLocation"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:ListKeys",
            "kms:ListAliases"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:List*",
            "cloudwatch:Get*",
            "cloudwatch:Describe*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateInternetGateway",
            "ec2:CreateNatGateway",
            "ec2:CreateVpc",
            "ec2:CreateKeyPair",
            "ec2:CreateRoute",
            "ec2:CreateRouteTable",
            "ec2:CreateSubnet"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AllocateAddress",
            "ec2:AllocateHosts",
            "ec2:AssignPrivateIpAddresses",
            "ec2:AssociateAddress",
            "ec2:CreateDhcpOptions",
            "ec2:CreateEgressOnlyInternetGateway",
            "ec2:CreateNetworkInterface",
            "ec2:CreateVolume",
            "ec2:CreateVpcEndpoint",
            "ec2:CreateTags",
            "ec2:DeleteTags",
            "ec2:RunInstances",
            "ec2:StartInstances",
            "ec2:ModifyInstanceAttribute",
            "ec2:ModifySubnetAttribute",
            "ec2:ModifyVolumeAttribute",
            "ec2:ModifyVpcAttribute",
            "ec2:AssociateDhcpOptions",
            "ec2:AssociateSubnetCidrBlock",
            "ec2:AttachInternetGateway",
            "ec2:AttachNetworkInterface",
            "ec2:AttachVolume",
            "ec2:DeleteDhcpOptions",
            "ec2:DeleteInternetGateway",
            "ec2:DeleteKeyPair",
            "ec2:DeleteNatGateway",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteVolume",
            "ec2:DeleteVpc",
            "ec2:DetachInternetGateway",
            "ec2:DetachVolume",
            "ec2:DeleteSnapshot",
            "ec2:AssociateRouteTable",
            "ec2:AssociateVpcCidrBlock",
            "ec2:DeleteNetworkAcl",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DeleteRoute",
            "ec2:DeleteRouteTable",
            "ec2:DeleteSubnet",
            "ec2:DetachNetworkInterface",
            "ec2:DisassociateAddress",
            "ec2:DisassociateVpcCidrBlock",
            "ec2:GetLaunchTemplateData",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:ModifyVolume",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:GetConsoleOutput",
            "ec2:GetPasswordData",
            "ec2:ReleaseAddress",
            "ec2:ReplaceRoute",
            "ec2:ReplaceRouteTableAssociation",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:DisassociateIamInstanceProfile",
            "ec2:DisassociateRouteTable",
            "ec2:DisassociateSubnetCidrBlock",
            "ec2:ModifyInstancePlacement",
            "ec2:DeletePlacementGroup",
            "ec2:CreatePlacementGroup",
            "elasticfilesystem:DeleteFileSystem",
            "elasticfilesystem:DeleteMountTarget",
            "ds:AddIpRoutes",
            "ds:CreateComputer",
            "ds:CreateMicrosoftAD",
            "ds:DeleteDirectory",
            "servicecatalog:AssociateProductWithPortfolio",
            "cloudformation:GetTemplateSummary",
            "sts:GetCallerIdentity"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "launchwizard.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:DescribeStack*",
            "cloudformation:Get*",
            "cloudformation:ListStacks",
            "cloudformation:SignalResource",
            "cloudformation:DeleteStack"
          ],
          "Resource": [
            "arn:aws:cloudformation:*:*:stack/LaunchWizard*/*",
            "arn:aws:cloudformation:*:*:stack/ApplicationInsights*/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:StopInstances",
            "ec2:TerminateInstances"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/LaunchWizard-*/*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateInstanceProfile",
            "iam:DeleteInstanceProfile",
            "iam:RemoveRoleFromInstanceProfile",
            "iam:AddRoleToInstanceProfile"
          ],
          "Resource": [
            "arn:aws:iam::*:role/service-role/AmazonEC2RoleForLaunchWizard*",
            "arn:aws:iam::*:instance-profile/LaunchWizard*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/service-role/AmazonEC2RoleForLaunchWizard*",
            "arn:aws:iam::*:role/service-role/AmazonLambdaRoleForLaunchWizard*",
            "arn:aws:iam::*:instance-profile/LaunchWizard*"
          ],
          "Condition": {
            "StringEqualsIfExists": {
              "iam:PassedToService": [
                "lambda.amazonaws.com",
                "ec2.amazonaws.com",
                "ec2.amazonaws.com.cn"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "autoscaling:AttachInstances",
            "autoscaling:CreateAutoScalingGroup",
            "autoscaling:CreateLaunchConfiguration",
            "autoscaling:DeleteAutoScalingGroup",
            "autoscaling:DeleteLaunchConfiguration",
            "autoscaling:UpdateAutoScalingGroup",
            "autoscaling:CreateOrUpdateTags",
            "logs:CreateLogStream",
            "logs:DeleteLogGroup",
            "logs:DeleteLogStream",
            "logs:DescribeLog*",
            "logs:PutLogEvents",
            "resource-groups:CreateGroup",
            "resource-groups:DeleteGroup",
            "sns:ListSubscriptionsByTopic",
            "sns:Publish",
            "ssm:DeleteDocument",
            "ssm:DeleteParameter*",
            "ssm:DescribeDocument*",
            "ssm:GetDocument",
            "ssm:PutParameter"
          ],
          "Resource": [
            "arn:aws:resource-groups:*:*:group/LaunchWizard*",
            "arn:aws:sns:*:*:*",
            "arn:aws:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/LaunchWizard*",
            "arn:aws:autoscaling:*:*:launchConfiguration:*:launchConfigurationName/LaunchWizard*",
            "arn:aws:ssm:*:*:parameter/LaunchWizard*",
            "arn:aws:ssm:*:*:document/LaunchWizard*",
            "arn:aws:logs:*:*:log-group:*:*:*",
            "arn:aws:logs:*:*:log-group:LaunchWizard*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:GetDocument",
            "ssm:SendCommand"
          ],
          "Resource": [
            "arn:aws:ssm:*::document/AWS-RunShellScript"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:SendCommand"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/LaunchWizard-*/*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:DeleteLogStream",
            "logs:GetLogEvents",
            "logs:PutLogEvents",
            "ssm:AddTagsToResource",
            "ssm:DescribeDocument",
            "ssm:GetDocument",
            "ssm:ListTagsForResource",
            "ssm:RemoveTagsFromResource"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:*:*:*",
            "arn:aws:logs:*:*:log-group:LaunchWizard*",
            "arn:aws:ssm:*:*:parameter/LaunchWizard*",
            "arn:aws:ssm:*:*:document/LaunchWizard*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "autoscaling:Describe*",
            "cloudformation:DescribeAccountLimits",
            "cloudformation:DescribeStackDriftDetectionStatus",
            "cloudformation:List*",
            "cloudformation:ValidateTemplate",
            "ds:Describe*",
            "ds:ListAuthorizedApplications",
            "ec2:Describe*",
            "ec2:Get*",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:GetUser",
            "iam:GetPolicyVersion",
            "iam:GetPolicy",
            "iam:List*",
            "logs:CreateLogGroup",
            "logs:GetLogDelivery",
            "logs:GetLogRecord",
            "logs:ListLogDeliveries",
            "resource-groups:Get*",
            "resource-groups:List*",
            "servicequotas:GetServiceQuota",
            "servicequotas:ListServiceQuotas",
            "sns:ListSubscriptions",
            "sns:ListTopics",
            "ssm:CreateDocument",
            "ssm:DescribeAutomation*",
            "ssm:DescribeInstanceInformation",
            "ssm:DescribeParameters",
            "ssm:GetAutomationExecution",
            "ssm:GetCommandInvocation",
            "ssm:GetParameter*",
            "ssm:GetConnectionStatus",
            "ssm:ListCommand*",
            "ssm:ListDocument*",
            "ssm:ListInstanceAssociations",
            "ssm:SendAutomationSignal",
            "tag:Get*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:StartAutomationExecution",
            "ssm:StopAutomationExecution"
          ],
          "Resource": "arn:aws:ssm:*:*:automation-definition/LaunchWizard-*:*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "launchwizard.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "logs:GetLog*",
          "Resource": [
            "arn:aws:logs:*:*:log-group:*:*:*",
            "arn:aws:logs:*:*:log-group:LaunchWizard*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:List*",
            "cloudformation:Describe*"
          ],
          "Resource": "arn:aws:cloudformation:*:*:stack/LaunchWizard*/"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": [
                "autoscaling.amazonaws.com",
                "application-insights.amazonaws.com",
                "events.amazonaws.com",
                "autoscaling.amazonaws.com.cn",
                "events.amazonaws.com.cn"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "launchwizard:*",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sqs:TagQueue",
            "sqs:GetQueueUrl",
            "sqs:AddPermission",
            "sqs:ListQueues",
            "sqs:DeleteQueue",
            "sqs:GetQueueAttributes",
            "sqs:ListQueueTags",
            "sqs:CreateQueue",
            "sqs:SetQueueAttributes"
          ],
          "Resource": "arn:aws:sqs:*:*:LaunchWizard*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricAlarm",
            "iam:GetInstanceProfile",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms"
          ],
          "Resource": [
            "arn:aws:cloudwatch:*:*:alarm:LaunchWizard*",
            "arn:aws:iam::*:instance-profile/LaunchWizard*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:CreateStack",
            "route53:ListHostedZones",
            "ec2:CreateSecurityGroup",
            "ec2:AuthorizeSecurityGroupIngress",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:CreateFileSystem",
            "elasticfilesystem:CreateMountTarget",
            "elasticfilesystem:DescribeMountTargets",
            "elasticfilesystem:DescribeMountTargetSecurityGroups"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:PutObject"
          ],
          "Resource": [
            "arn:aws:s3:::launchwizard*",
            "arn:aws:s3:::launchwizard*/*",
            "arn:aws:s3:::aws-sap-data-provider/config.properties"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "cloudformation:TagResource",
          "Resource": "*",
          "Condition": {
            "ForAllValues:StringLike": {
              "aws:TagKeys": "LaunchWizard*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:CreateBucket",
            "s3:PutBucketVersioning",
            "s3:DeleteBucket",
            "lambda:CreateFunction",
            "lambda:DeleteFunction",
            "lambda:GetFunction",
            "lambda:GetFunctionConfiguration",
            "lambda:InvokeFunction"
          ],
          "Resource": [
            "arn:aws:lambda:*:*:function:LaunchWizard*",
            "arn:aws:s3:::launchwizard*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:CreateTable",
            "dynamodb:DescribeTable",
            "dynamodb:DeleteTable"
          ],
          "Resource": "arn:aws:dynamodb:*:*:table/LaunchWizard*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:CreateSecret",
            "secretsmanager:DeleteSecret",
            "secretsmanager:TagResource",
            "secretsmanager:UntagResource",
            "secretsmanager:PutResourcePolicy",
            "secretsmanager:DeleteResourcePolicy",
            "secretsmanager:ListSecretVersionIds",
            "secretsmanager:GetSecretValue"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:secret:LaunchWizard*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:GetRandomPassword",
            "secretsmanager:ListSecrets"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:CreateOpsMetadata"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "ssm:DeleteOpsMetadata",
          "Resource": "arn:aws:ssm:*:*:opsmetadata/aws/ssm/LaunchWizard*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sns:CreateTopic",
            "sns:DeleteTopic",
            "sns:Subscribe",
            "sns:Unsubscribe"
          ],
          "Resource": "arn:aws:sns:*:*:LaunchWizard*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "fsx:UntagResource",
            "fsx:TagResource",
            "fsx:DeleteFileSystem",
            "fsx:ListTagsForResource"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/Name": "LaunchWizard*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "fsx:CreateFileSystem"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "aws:RequestTag/Name": [
                "LaunchWizard*"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "fsx:DescribeFileSystems"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "servicecatalog:CreatePortfolio",
            "servicecatalog:DescribePortfolio",
            "servicecatalog:CreateConstraint",
            "servicecatalog:CreateProduct",
            "servicecatalog:AssociatePrincipalWithPortfolio",
            "servicecatalog:CreateProvisioningArtifact",
            "servicecatalog:TagResource",
            "servicecatalog:UntagResource"
          ],
          "Resource": [
            "arn:aws:servicecatalog:*:*:*/*",
            "arn:aws:catalog:*:*:*/*"
          ],
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "launchwizard.amazonaws.com"
            }
          }
        },
        {
          "Sid": "VisualEditor0",
          "Effect": "Allow",
          "Action": [
            "ssm:CreateAssociation",
            "ssm:DeleteAssociation"
          ],
          "Resource": "arn:aws:ssm:*:*:document/AWS-ConfigureAWSPackage",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "launchwizard.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticfilesystem:UntagResource",
            "elasticfilesystem:TagResource"
          ],
          "Resource": "arn:aws:elasticfilesystem:*:*:file-system/*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "launchwizard.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:TagResource",
            "logs:UntagResource"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:LaunchWizard*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "launchwizard.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v15",
    "IsDefaultVersion": true,
    "CreateDate": "2023-02-22T17:25:14+00:00"
  },
  "AmazonLexChannelsAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "lex:ListBots"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-01-13T20:12:46+00:00"
  },
  "AmazonLexFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DescribeAlarmsForMetric",
            "kms:DescribeKey",
            "kms:ListAliases",
            "lambda:GetPolicy",
            "lambda:ListFunctions",
            "lex:*",
            "polly:DescribeVoices",
            "polly:SynthesizeSpeech",
            "kendra:ListIndices",
            "iam:ListRoles",
            "s3:ListAllMyBuckets",
            "logs:DescribeLogGroups",
            "s3:GetBucketLocation"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "lambda:AddPermission",
            "lambda:RemovePermission"
          ],
          "Resource": "arn:aws:lambda:*:*:function:AmazonLex*",
          "Condition": {
            "StringEquals": {
              "lambda:Principal": "lex.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:GetRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots",
            "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels",
            "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*",
            "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
          ],
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "lex.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
          ],
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "channels.lex.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*"
          ],
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "lexv2.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*"
          ],
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "channels.lexv2.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:DeleteServiceLinkedRole",
            "iam:GetServiceLinkedRoleDeletionStatus"
          ],
          "Resource": [
            "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots",
            "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels",
            "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*",
            "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "lex.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "lexv2.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "channels.lexv2.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v7",
    "IsDefaultVersion": true,
    "CreateDate": "2021-07-26T21:48:05+00:00"
  },
  "AmazonLexReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "lex:GetBot",
            "lex:GetBotAlias",
            "lex:GetBotAliases",
            "lex:GetBots",
            "lex:GetBotChannelAssociation",
            "lex:GetBotChannelAssociations",
            "lex:GetBotVersions",
            "lex:GetBuiltinIntent",
            "lex:GetBuiltinIntents",
            "lex:GetBuiltinSlotTypes",
            "lex:GetIntent",
            "lex:GetIntents",
            "lex:GetIntentVersions",
            "lex:GetSlotType",
            "lex:GetSlotTypes",
            "lex:GetSlotTypeVersions",
            "lex:GetUtterancesView",
            "lex:DescribeBot",
            "lex:DescribeBotAlias",
            "lex:DescribeBotChannel",
            "lex:DescribeBotLocale",
            "lex:DescribeBotRecommendation",
            "lex:DescribeBotVersion",
            "lex:DescribeExport",
            "lex:DescribeImport",
            "lex:DescribeIntent",
            "lex:DescribeResourcePolicy",
            "lex:DescribeSlot",
            "lex:DescribeSlotType",
            "lex:ListBots",
            "lex:ListBotLocales",
            "lex:ListBotAliases",
            "lex:ListBotChannels",
            "lex:ListBotRecommendations",
            "lex:ListBotVersions",
            "lex:ListBuiltInIntents",
            "lex:ListBuiltInSlotTypes",
            "lex:ListExports",
            "lex:ListImports",
            "lex:ListIntents",
            "lex:ListRecommendedIntents",
            "lex:ListSlots",
            "lex:ListSlotTypes",
            "lex:ListTagsForResource",
            "lex:SearchAssociatedTranscripts",
            "lex:ListCustomVocabularyItems"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2023-01-31T19:31:41+00:00"
  },
  "AmazonLexRunBotsOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "lex:PostContent",
            "lex:PostText",
            "lex:PutSession",
            "lex:GetSession",
            "lex:DeleteSession",
            "lex:RecognizeText",
            "lex:RecognizeUtterance",
            "lex:StartConversation"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2021-08-18T00:15:48+00:00"
  },
  "AmazonLexV2BotPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "polly:SynthesizeSpeech"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-01-13T20:10:29+00:00"
  },
  "AmazonLookoutEquipmentFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "lookoutequipment:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "lookoutequipment.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:CreateGrant"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "kms:ViaService": "lookoutequipment.*.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:DescribeKey",
            "kms:ListAliases"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2021-11-24T21:00:13+00:00"
  },
  "AmazonLookoutEquipmentReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "lookoutequipment:Describe*",
            "lookoutequipment:List*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-10T22:04:33+00:00"
  },
  "AmazonLookoutMetricsFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "lookoutmetrics:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "arn:aws:iam::*:role/*LookoutMetrics*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "lookoutmetrics.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-05-07T00:43:38+00:00"
  },
  "AmazonLookoutMetricsReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "lookoutmetrics:DescribeMetricSet",
            "lookoutmetrics:ListMetricSets",
            "lookoutmetrics:DescribeAnomalyDetector",
            "lookoutmetrics:ListAnomalyDetectors",
            "lookoutmetrics:DescribeAnomalyDetectionExecutions",
            "lookoutmetrics:DescribeAlert",
            "lookoutmetrics:ListAlerts",
            "lookoutmetrics:ListTagsForResource",
            "lookoutmetrics:ListAnomalyGroupSummaries",
            "lookoutmetrics:ListAnomalyGroupTimeSeries",
            "lookoutmetrics:ListAnomalyGroupRelatedMetrics",
            "lookoutmetrics:GetAnomalyGroup",
            "lookoutmetrics:GetDataQualityMetrics",
            "lookoutmetrics:GetSampleData",
            "lookoutmetrics:GetFeedback"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-01-04T18:19:27+00:00"
  },
  "AmazonLookoutVisionConsoleFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "LookoutVisionFullAccess",
          "Effect": "Allow",
          "Action": [
            "lookoutvision:*"
          ],
          "Resource": "*"
        },
        {
          "Sid": "LookoutVisionConsoleS3BucketSearchAccess",
          "Effect": "Allow",
          "Action": [
            "s3:ListAllMyBuckets"
          ],
          "Resource": "*"
        },
        {
          "Sid": "LookoutVisionConsoleS3BucketFirstUseSetupAccess",
          "Effect": "Allow",
          "Action": [
            "s3:CreateBucket",
            "s3:PutBucketVersioning",
            "s3:PutLifecycleConfiguration",
            "s3:PutEncryptionConfiguration",
            "s3:PutBucketPublicAccessBlock"
          ],
          "Resource": "arn:aws:s3:::lookoutvision-*"
        },
        {
          "Sid": "LookoutVisionConsoleS3BucketAccess",
          "Effect": "Allow",
          "Action": [
            "s3:ListBucket",
            "s3:GetBucketLocation",
            "s3:GetBucketVersioning"
          ],
          "Resource": "arn:aws:s3:::lookoutvision-*"
        },
        {
          "Sid": "LookoutVisionConsoleS3ObjectAccess",
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:PutObject",
            "s3:AbortMultipartUpload",
            "s3:ListMultipartUploadParts"
          ],
          "Resource": "arn:aws:s3:::lookoutvision-*/*"
        },
        {
          "Sid": "LookoutVisionConsoleDatasetLabelingToolsAccess",
          "Effect": "Allow",
          "Action": [
            "groundtruthlabeling:RunGenerateManifestByCrawlingJob",
            "groundtruthlabeling:AssociatePatchToManifestJob",
            "groundtruthlabeling:DescribeConsoleJob"
          ],
          "Resource": "*"
        },
        {
          "Sid": "LookoutVisionConsoleDashboardAccess",
          "Effect": "Allow",
          "Action": [
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics"
          ],
          "Resource": "*"
        },
        {
          "Sid": "LookoutVisionConsoleTagSelectorAccess",
          "Effect": "Allow",
          "Action": [
            "tag:GetTagKeys",
            "tag:GetTagValues"
          ],
          "Resource": "*"
        },
        {
          "Sid": "LookoutVisionConsoleKmsKeySelectorAccess",
          "Effect": "Allow",
          "Action": [
            "kms:ListAliases"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-05-11T19:37:17+00:00"
  },
  "AmazonLookoutVisionConsoleReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "LookoutVisionReadOnlyAccess",
          "Effect": "Allow",
          "Action": [
            "lookoutvision:DescribeDataset",
            "lookoutvision:DescribeModel",
            "lookoutvision:DescribeProject",
            "lookoutvision:DescribeTrialDetection",
            "lookoutvision:DescribeModelPackagingJob",
            "lookoutvision:ListDatasetEntries",
            "lookoutvision:ListModels",
            "lookoutvision:ListProjects",
            "lookoutvision:ListTagsForResource",
            "lookoutvision:ListTrialDetections",
            "lookoutvision:ListModelPackagingJobs"
          ],
          "Resource": "*"
        },
        {
          "Sid": "LookoutVisionConsoleS3BucketSearchAccess",
          "Effect": "Allow",
          "Action": [
            "s3:ListAllMyBuckets"
          ],
          "Resource": "*"
        },
        {
          "Sid": "LookoutVisionConsoleS3ObjectReadAccess",
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:GetObjectVersion"
          ],
          "Resource": "arn:aws:s3:::lookoutvision-*/*"
        },
        {
          "Sid": "LookoutVisionConsoleDashboardAccess",
          "Effect": "Allow",
          "Action": [
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2021-12-09T02:46:29+00:00"
  },
  "AmazonLookoutVisionFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "LookoutVisionFullAccess",
          "Effect": "Allow",
          "Action": [
            "lookoutvision:*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-05-11T19:24:54+00:00"
  },
  "AmazonLookoutVisionReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "LookoutVisionReadOnlyAccess",
          "Effect": "Allow",
          "Action": [
            "lookoutvision:DescribeDataset",
            "lookoutvision:DescribeModel",
            "lookoutvision:DescribeProject",
            "lookoutvision:DescribeModelPackagingJob",
            "lookoutvision:ListDatasetEntries",
            "lookoutvision:ListModels",
            "lookoutvision:ListProjects",
            "lookoutvision:ListTagsForResource",
            "lookoutvision:ListModelPackagingJobs"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2021-12-09T03:01:51+00:00"
  },
  "AmazonMCSFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "application-autoscaling:DeleteScalingPolicy",
            "application-autoscaling:DeregisterScalableTarget",
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingActivities",
            "application-autoscaling:DescribeScalingPolicies",
            "application-autoscaling:PutScalingPolicy",
            "application-autoscaling:RegisterScalableTarget",
            "application-autoscaling:PutScheduledAction",
            "application-autoscaling:DeleteScheduledAction",
            "application-autoscaling:DescribeScheduledActions"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cassandra:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:PutMetricAlarm"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/cassandra.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_CassandraTable",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "cassandra.application-autoscaling.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2020-04-17T19:19:29+00:00"
  },
  "AmazonMCSReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cassandra:Select"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingActivities",
            "application-autoscaling:DescribeScalingPolicies",
            "application-autoscaling:DescribeScheduledActions",
            "cloudwatch:DescribeAlarms"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2020-04-17T19:21:34+00:00"
  },
  "AmazonMQApiFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "mq:*",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DetachNetworkInterface",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeNetworkInterfacePermissions",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/amazonmq/*"
          ]
        },
        {
          "Action": "iam:CreateServiceLinkedRole",
          "Effect": "Allow",
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "mq.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2020-11-04T16:45:35+00:00"
  },
  "AmazonMQApiReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "mq:Describe*",
            "mq:List*",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-12-18T20:31:13+00:00"
  },
  "AmazonMQFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "mq:*",
            "cloudformation:CreateStack",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DetachNetworkInterface",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeNetworkInterfacePermissions",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:CreateSecurityGroup",
            "ec2:AuthorizeSecurityGroupIngress"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/amazonmq/*"
          ]
        },
        {
          "Action": "iam:CreateServiceLinkedRole",
          "Effect": "Allow",
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "mq.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2020-11-04T16:34:09+00:00"
  },
  "AmazonMQReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "mq:Describe*",
            "mq:List*",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2017-11-28T19:02:03+00:00"
  },
  "AmazonMQServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeVpcEndpoints"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateVpcEndpoint"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:vpc/*",
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:security-group/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateVpcEndpoint"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:vpc-endpoint/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/AMQManaged": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "CreateVpcEndpoint"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteVpcEndpoints"
          ],
          "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
          "Condition": {
            "StringEquals": {
              "ec2:ResourceTag/AMQManaged": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:PutLogEvents",
            "logs:DescribeLogStreams",
            "logs:DescribeLogGroups",
            "logs:CreateLogStream",
            "logs:CreateLogGroup"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/amazonmq/*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-11-04T16:07:17+00:00"
  },
  "AmazonMSKConnectReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "kafkaconnect:ListConnectors",
            "kafkaconnect:ListCustomPlugins",
            "kafkaconnect:ListWorkerConfigurations"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kafkaconnect:DescribeConnector"
          ],
          "Resource": [
            "arn:aws:kafkaconnect:*:*:connector/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "kafkaconnect:DescribeCustomPlugin"
          ],
          "Resource": [
            "arn:aws:kafkaconnect:*:*:custom-plugin/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "kafkaconnect:DescribeWorkerConfiguration"
          ],
          "Resource": [
            "arn:aws:kafkaconnect:*:*:worker-configuration/*"
          ]
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2021-10-18T09:16:26+00:00"
  },
  "AmazonMSKFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "kafka:*",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeRouteTables",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcAttribute",
            "kms:DescribeKey",
            "kms:CreateGrant",
            "logs:CreateLogDelivery",
            "logs:GetLogDelivery",
            "logs:UpdateLogDelivery",
            "logs:DeleteLogDelivery",
            "logs:ListLogDeliveries",
            "logs:PutResourcePolicy",
            "logs:DescribeResourcePolicies",
            "logs:DescribeLogGroups",
            "S3:GetBucketPolicy",
            "firehose:TagDeliveryStream"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateVpcEndpoint"
          ],
          "Resource": [
            "arn:*:ec2:*:*:vpc/*",
            "arn:*:ec2:*:*:subnet/*",
            "arn:*:ec2:*:*:security-group/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateVpcEndpoint"
          ],
          "Resource": [
            "arn:*:ec2:*:*:vpc-endpoint/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/AWSMSKManaged": "true"
            },
            "StringLike": {
              "aws:RequestTag/ClusterArn": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": "arn:*:ec2:*:*:vpc-endpoint/*",
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "CreateVpcEndpoint"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteVpcEndpoints"
          ],
          "Resource": "arn:*:ec2:*:*:vpc-endpoint/*",
          "Condition": {
            "StringEquals": {
              "ec2:ResourceTag/AWSMSKManaged": "true"
            },
            "StringLike": {
              "ec2:ResourceTag/ClusterArn": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "kafka.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/kafka.amazonaws.com/AWSServiceRoleForKafka*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "kafka.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/delivery.logs.amazonaws.com/AWSServiceRoleForLogDelivery*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "delivery.logs.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v7",
    "IsDefaultVersion": true,
    "CreateDate": "2023-10-18T11:33:13+00:00"
  },
  "AmazonMSKReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "kafka:Describe*",
            "kafka:List*",
            "kafka:Get*",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "kms:DescribeKey"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-01-14T22:28:45+00:00"
  },
  "AmazonMWAAServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:CreateLogGroup",
            "logs:DescribeLogGroups"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:airflow-*:*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AttachNetworkInterface",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ec2:DetachNetworkInterface"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateVpcEndpoint",
          "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:TagKeys": "AmazonMWAAManaged"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:ModifyVpcEndpoint",
            "ec2:DeleteVpcEndpoints"
          ],
          "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AmazonMWAAManaged": false
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateVpcEndpoint",
            "ec2:ModifyVpcEndpoint"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:vpc/*",
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:subnet/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "CreateVpcEndpoint"
            },
            "ForAnyValue:StringEquals": {
              "aws:TagKeys": "AmazonMWAAManaged"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "cloudwatch:PutMetricData",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": [
                "AWS/MWAA"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-17T00:56:25+00:00"
  },
  "AmazonMachineLearningBatchPredictionsAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "machinelearning:CreateBatchPrediction",
            "machinelearning:DeleteBatchPrediction",
            "machinelearning:DescribeBatchPredictions",
            "machinelearning:GetBatchPrediction",
            "machinelearning:UpdateBatchPrediction"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-04-09T17:12:19+00:00"
  },
  "AmazonMachineLearningCreateOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "machinelearning:Add*",
            "machinelearning:Create*",
            "machinelearning:Delete*",
            "machinelearning:Describe*",
            "machinelearning:Get*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2016-06-29T20:55:03+00:00"
  },
  "AmazonMachineLearningFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "machinelearning:*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-04-09T17:25:41+00:00"
  },
  "AmazonMachineLearningManageRealTimeEndpointOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "machinelearning:CreateRealtimeEndpoint",
            "machinelearning:DeleteRealtimeEndpoint"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-04-09T17:32:41+00:00"
  },
  "AmazonMachineLearningReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "machinelearning:Describe*",
            "machinelearning:Get*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-04-09T17:40:02+00:00"
  },
  "AmazonMachineLearningRealTimePredictionOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "machinelearning:Predict"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-04-09T17:44:06+00:00"
  },
  "AmazonMachineLearningRoleforRedshiftDataSourceV3": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateSecurityGroup",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeSecurityGroups",
            "ec2:RevokeSecurityGroupIngress",
            "redshift:AuthorizeClusterSecurityGroupIngress",
            "redshift:CreateClusterSecurityGroup",
            "redshift:DescribeClusters",
            "redshift:DescribeClusterSecurityGroups",
            "redshift:ModifyCluster",
            "redshift:RevokeClusterSecurityGroupIngress"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:PutBucketPolicy",
            "s3:GetBucketLocation",
            "s3:GetBucketPolicy",
            "s3:GetObject",
            "s3:PutObject"
          ],
          "Resource": "arn:aws:s3:::amazon-machine-learning*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-06-24T18:00:09+00:00"
  },
  "AmazonMacieFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "macie2:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/macie.amazonaws.com/AWSServiceRoleForAmazonMacie",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "macie.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "pricing:GetProducts",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2022-07-01T00:41:53+00:00"
  },
  "AmazonMacieHandshakeRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "iam:AWSServiceName": "macie.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-06-28T15:46:10+00:00"
  },
  "AmazonMacieReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "macie2:Describe*",
            "macie2:Get*",
            "macie2:List*",
            "macie2:BatchGetCustomDataIdentifiers",
            "macie2:SearchResources"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-06-15T21:50:06+00:00"
  },
  "AmazonMacieServiceRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Resource": "*",
          "Action": [
            "s3:Get*",
            "s3:List*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2017-08-14T14:53:26+00:00"
  },
  "AmazonMacieServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iam:ListAccountAliases",
            "organizations:DescribeAccount",
            "organizations:ListAccounts",
            "s3:GetAccountPublicAccessBlock",
            "s3:ListAllMyBuckets",
            "s3:GetBucketAcl",
            "s3:GetBucketLocation",
            "s3:GetBucketLogging",
            "s3:GetBucketPolicy",
            "s3:GetBucketPolicyStatus",
            "s3:GetBucketPublicAccessBlock",
            "s3:GetBucketTagging",
            "s3:GetBucketVersioning",
            "s3:GetBucketWebsite",
            "s3:GetEncryptionConfiguration",
            "s3:GetLifecycleConfiguration",
            "s3:GetReplicationConfiguration",
            "s3:ListBucket",
            "s3:GetObject",
            "s3:GetObjectAcl",
            "s3:GetObjectTagging"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/macie/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "logs:DescribeLogStreams"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/macie/*:log-stream:*"
          ]
        }
      ]
    },
    "VersionId": "v6",
    "IsDefaultVersion": true,
    "CreateDate": "2022-05-19T19:16:56+00:00"
  },
  "AmazonManagedBlockchainConsoleFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "managedblockchain:*",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:CreateVpcEndpoint",
            "kms:ListAliases",
            "kms:DescribeKey"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-04-29T21:23:25+00:00"
  },
  "AmazonManagedBlockchainFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "managedblockchain:*"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-04-29T21:39:29+00:00"
  },
  "AmazonManagedBlockchainReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "managedblockchain:Get*",
            "managedblockchain:List*"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-04-30T18:17:31+00:00"
  },
  "AmazonManagedBlockchainServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "logs:CreateLogGroup"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:logs:*:*:log-group:/aws/managedblockchain/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "logs:DescribeLogStreams"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/managedblockchain/*:log-stream:*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-01-17T19:51:28+00:00"
  },
  "AmazonMechanicalTurkFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "mechanicalturk:*"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-12-11T19:08:19+00:00"
  },
  "AmazonMechanicalTurkReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "mechanicalturk:Get*",
            "mechanicalturk:List*"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2019-09-25T21:06:26+00:00"
  },
  "AmazonMemoryDBFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "memorydb:*",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/memorydb.amazonaws.com/AWSServiceRoleForMemoryDB",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "memorydb.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-10-08T19:24:16+00:00"
  },
  "AmazonMemoryDBReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "memorydb:Describe*",
            "memorydb:List*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-10-08T19:27:28+00:00"
  },
  "AmazonMobileAnalyticsFinancialReportAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "mobileanalytics:GetReports",
            "mobileanalytics:GetFinancialReports"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:40:35+00:00"
  },
  "AmazonMobileAnalyticsFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "mobileanalytics:*",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:40:34+00:00"
  },
  "AmazonMobileAnalyticsNon-financialReportAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "mobileanalytics:GetReports",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:40:36+00:00"
  },
  "AmazonMobileAnalyticsWriteOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "mobileanalytics:PutEvents",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:40:37+00:00"
  },
  "AmazonMonitronFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "monitron.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "monitron:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:ListKeys",
            "kms:DescribeKey",
            "kms:ListAliases"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "kms:CreateGrant",
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "kms:ViaService": [
                "monitron.*.amazonaws.com"
              ]
            },
            "Bool": {
              "kms:GrantIsForAWSResource": true
            }
          }
        },
        {
          "Sid": "AWSSSOPermissions",
          "Effect": "Allow",
          "Action": [
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "ds:DescribeDirectories",
            "ds:DescribeTrusts"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kinesis:DescribeStream",
            "kinesis:ListStreams"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "logs:CreateLogGroup"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/monitron/*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-06-08T16:27:42+00:00"
  },
  "AmazonNimbleStudio-LaunchProfileWorker": {
    "Document": {
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "fsx:DescribeFileSystems",
            "ds:DescribeDirectories"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:CalledViaLast": "nimble.amazonaws.com"
            }
          },
          "Sid": "GetLaunchProfileInitializationDependencies"
        }
      ],
      "Version": "2012-10-17"
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-04-28T04:47:02+00:00"
  },
  "AmazonNimbleStudio-StudioAdmin": {
    "Document": {
      "Statement": [
        {
          "Sid": "StudioAdminFullAccess",
          "Effect": "Allow",
          "Action": [
            "nimble:CreateStreamingSession",
            "nimble:GetStreamingSession",
            "nimble:StartStreamingSession",
            "nimble:StopStreamingSession",
            "nimble:CreateStreamingSessionStream",
            "nimble:GetStreamingSessionStream",
            "nimble:DeleteStreamingSession",
            "nimble:ListStreamingSessionBackups",
            "nimble:GetStreamingSessionBackup",
            "nimble:ListEulas",
            "nimble:ListEulaAcceptances",
            "nimble:GetEula",
            "nimble:AcceptEulas",
            "nimble:ListStudioMembers",
            "nimble:GetStudioMember",
            "nimble:ListStreamingSessions",
            "nimble:GetStreamingImage",
            "nimble:ListStreamingImages",
            "nimble:GetLaunchProfileInitialization",
            "nimble:GetLaunchProfileDetails",
            "nimble:GetFeatureMap",
            "nimble:PutStudioLogEvents",
            "nimble:ListLaunchProfiles",
            "nimble:GetLaunchProfile",
            "nimble:GetLaunchProfileMember",
            "nimble:ListLaunchProfileMembers",
            "nimble:PutLaunchProfileMembers",
            "nimble:UpdateLaunchProfileMember",
            "nimble:DeleteLaunchProfileMember"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sso-directory:DescribeUsers",
            "sso-directory:SearchUsers",
            "identitystore:DescribeUser",
            "identitystore:ListUsers"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ds:CreateComputer",
            "ds:DescribeDirectories",
            "ec2:DescribeSubnets",
            "ec2:CreateNetworkInterface",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DeleteNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DescribeSecurityGroups",
            "fsx:DescribeFileSystems"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:CalledViaLast": "nimble.amazonaws.com"
            }
          }
        }
      ],
      "Version": "2012-10-17"
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2023-09-22T17:40:41+00:00"
  },
  "AmazonNimbleStudio-StudioUser": {
    "Document": {
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ds:CreateComputer",
            "ec2:DescribeSubnets",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:CreateNetworkInterface",
            "ec2:DescribeSecurityGroups",
            "fsx:DescribeFileSystems",
            "ds:DescribeDirectories"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:CalledViaLast": "nimble.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "sso-directory:DescribeUsers",
            "sso-directory:SearchUsers",
            "identitystore:DescribeUser",
            "identitystore:ListUsers"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "nimble:ListLaunchProfiles"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "nimble:requesterPrincipalId": "${nimble:principalId}"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "nimble:ListStudioMembers",
            "nimble:GetStudioMember",
            "nimble:ListEulas",
            "nimble:ListEulaAcceptances",
            "nimble:GetFeatureMap",
            "nimble:PutStudioLogEvents"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "nimble:DeleteStreamingSession",
            "nimble:GetStreamingSession",
            "nimble:StartStreamingSession",
            "nimble:StopStreamingSession",
            "nimble:CreateStreamingSessionStream",
            "nimble:GetStreamingSessionStream",
            "nimble:ListStreamingSessions",
            "nimble:ListStreamingSessionBackups",
            "nimble:GetStreamingSessionBackup"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "nimble:ownedBy": "${nimble:requesterPrincipalId}"
            }
          }
        }
      ],
      "Version": "2012-10-17"
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2023-09-22T17:45:14+00:00"
  },
  "AmazonOmicsFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "omics:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ram:AcceptResourceShareInvitation",
            "ram:GetResourceShareInvitations"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:CalledViaLast": "omics.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "omics.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-02-24T00:59:33+00:00"
  },
  "AmazonOmicsReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "omics:Get*",
            "omics:List*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-29T04:17:07+00:00"
  },
  "AmazonOpenSearchIngestionFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "osis:CreatePipeline",
            "osis:UpdatePipeline",
            "osis:DeletePipeline",
            "osis:StartPipeline",
            "osis:StopPipeline",
            "osis:ListPipelines",
            "osis:GetPipeline",
            "osis:GetPipelineChangeProgress",
            "osis:ValidatePipeline",
            "osis:GetPipelineBlueprint",
            "osis:ListPipelineBlueprints",
            "osis:TagResource",
            "osis:UntagResource",
            "osis:ListTagsForResource"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/osis.amazonaws.com/AWSServiceRoleForAmazonOpenSearchIngestionService",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "osis.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-04-26T18:11:38+00:00"
  },
  "AmazonOpenSearchIngestionReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "osis:GetPipeline",
            "osis:GetPipelineChangeProgress",
            "osis:GetPipelineBlueprint",
            "osis:ListPipelineBlueprints",
            "osis:ListPipelines",
            "osis:ListTagsForResource"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-04-26T18:09:52+00:00"
  },
  "AmazonOpenSearchIngestionServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeSubnets",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeVpcEndpoints"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateVpcEndpoint"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:vpc/*",
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:route-table/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateVpcEndpoint",
          "Resource": [
            "arn:aws:ec2:*:*:vpc-endpoint/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/OSISManaged": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteVpcEndpoints"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:vpc-endpoint/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/OSISManaged": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "CreateVpcEndpoint"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "cloudwatch:PutMetricData",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": "AWS/OSIS"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-18T16:49:50+00:00"
  },
  "AmazonOpenSearchServerlessServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "cloudwatch:PutMetricData",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": "AWS/AOSS"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-24T19:50:12+00:00"
  },
  "AmazonOpenSearchServiceCognitoAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cognito-idp:DescribeUserPool",
            "cognito-idp:CreateUserPoolClient",
            "cognito-idp:DeleteUserPoolClient",
            "cognito-idp:UpdateUserPoolClient",
            "cognito-idp:DescribeUserPoolClient",
            "cognito-idp:AdminInitiateAuth",
            "cognito-idp:AdminUserGlobalSignOut",
            "cognito-idp:ListUserPoolClients",
            "cognito-identity:DescribeIdentityPool",
            "cognito-identity:UpdateIdentityPool",
            "cognito-identity:GetIdentityPoolRoles"
          ],
          "Resource": [
            "arn:aws:cognito-identity:*:*:identitypool/*",
            "arn:aws:cognito-idp:*:*:userpool/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/*",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": [
                "cognito-identity.amazonaws.com",
                "cognito-identity-us-gov.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "cognito-identity:SetIdentityPoolRoles",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2021-12-20T14:04:18+00:00"
  },
  "AmazonOpenSearchServiceFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "es:*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-09-08T05:33:47+00:00"
  },
  "AmazonOpenSearchServiceReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "es:Describe*",
            "es:List*",
            "es:Get*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-09-08T05:38:13+00:00"
  },
  "AmazonOpenSearchServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "Stmt1480452973134",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:network-interface/*",
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:security-group/*"
          ]
        },
        {
          "Sid": "Stmt1480452973145",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeNetworkInterfaces"
          ],
          "Resource": "*"
        },
        {
          "Sid": "Stmt1480452973144",
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteNetworkInterface"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:network-interface/*"
          ]
        },
        {
          "Sid": "Stmt1480452973165",
          "Effect": "Allow",
          "Action": [
            "ec2:ModifyNetworkInterfaceAttribute"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:network-interface/*",
            "arn:aws:ec2:*:*:security-group/*"
          ]
        },
        {
          "Sid": "Stmt1480452973149",
          "Effect": "Allow",
          "Action": [
            "ec2:AssignIpv6Addresses"
          ],
          "Resource": "arn:aws:ec2:*:*:network-interface/*"
        },
        {
          "Sid": "Stmt1480452973150",
          "Effect": "Allow",
          "Action": [
            "ec2:UnAssignIpv6Addresses"
          ],
          "Resource": "arn:aws:ec2:*:*:network-interface/*"
        },
        {
          "Sid": "Stmt1480452973154",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeSecurityGroups"
          ],
          "Resource": "*"
        },
        {
          "Sid": "Stmt1480452973164",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeSubnets"
          ],
          "Resource": "*"
        },
        {
          "Sid": "Stmt1480452973174",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeVpcs"
          ],
          "Resource": "*"
        },
        {
          "Sid": "Stmt1480452973184",
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:AddListenerCertificates",
            "elasticloadbalancing:RemoveListenerCertificates"
          ],
          "Resource": [
            "arn:aws:elasticloadbalancing:*:*:listener/*"
          ]
        },
        {
          "Sid": "Stmt1480452973194",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:network-interface/*"
          ]
        },
        {
          "Sid": "Stmt1480452973195",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeTags"
          ],
          "Resource": "*"
        },
        {
          "Sid": "Stmt1480452973196",
          "Effect": "Allow",
          "Action": [
            "acm:DescribeCertificate"
          ],
          "Resource": "*"
        },
        {
          "Sid": "Stmt1480452973197",
          "Effect": "Allow",
          "Action": "cloudwatch:PutMetricData",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": "AWS/ES"
            }
          }
        },
        {
          "Sid": "Stmt1480452973198",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateVpcEndpoint",
            "ec2:ModifyVpcEndpoint"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:vpc/*",
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:route-table/*"
          ]
        },
        {
          "Sid": "Stmt1480452973199",
          "Effect": "Allow",
          "Action": "ec2:CreateVpcEndpoint",
          "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/OpenSearchManaged": "true"
            }
          }
        },
        {
          "Sid": "Stmt1480452973200",
          "Effect": "Allow",
          "Action": [
            "ec2:ModifyVpcEndpoint",
            "ec2:DeleteVpcEndpoints"
          ],
          "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/OpenSearchManaged": "true"
            }
          }
        },
        {
          "Sid": "Stmt1480452973201",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeVpcEndpoints"
          ],
          "Resource": "*"
        },
        {
          "Sid": "Stmt1480452973202",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "CreateVpcEndpoint"
            }
          }
        }
      ]
    },
    "VersionId": "v7",
    "IsDefaultVersion": true,
    "CreateDate": "2023-10-23T07:07:31+00:00"
  },
  "AmazonPersonalizeFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "personalize:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricData",
            "cloudwatch:ListMetrics"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:PutObject",
            "s3:DeleteObject",
            "s3:ListBucket"
          ],
          "Resource": [
            "arn:aws:s3:::*Personalize*",
            "arn:aws:s3:::*personalize*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "personalize.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2019-05-30T23:46:59+00:00"
  },
  "AmazonPollyFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "polly:*"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2016-11-30T18:59:06+00:00"
  },
  "AmazonPollyReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "polly:DescribeVoices",
            "polly:GetLexicon",
            "polly:GetSpeechSynthesisTask",
            "polly:ListLexicons",
            "polly:ListSpeechSynthesisTasks",
            "polly:SynthesizeSpeech"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2018-07-17T16:41:07+00:00"
  },
  "AmazonPrometheusConsoleFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "tag:GetTagValues",
            "tag:GetTagKeys"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "aps:CreateWorkspace",
            "aps:DescribeWorkspace",
            "aps:UpdateWorkspaceAlias",
            "aps:DeleteWorkspace",
            "aps:ListWorkspaces",
            "aps:DescribeAlertManagerDefinition",
            "aps:DescribeRuleGroupsNamespace",
            "aps:CreateAlertManagerDefinition",
            "aps:CreateRuleGroupsNamespace",
            "aps:DeleteAlertManagerDefinition",
            "aps:DeleteRuleGroupsNamespace",
            "aps:ListRuleGroupsNamespaces",
            "aps:PutAlertManagerDefinition",
            "aps:PutRuleGroupsNamespace",
            "aps:TagResource",
            "aps:UntagResource",
            "aps:CreateLoggingConfiguration",
            "aps:UpdateLoggingConfiguration",
            "aps:DeleteLoggingConfiguration",
            "aps:DescribeLoggingConfiguration"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2022-10-24T22:25:39+00:00"
  },
  "AmazonPrometheusFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "aps:*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-15T18:10:46+00:00"
  },
  "AmazonPrometheusQueryAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "aps:GetLabels",
            "aps:GetMetricMetadata",
            "aps:GetSeries",
            "aps:QueryMetrics"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-19T01:02:58+00:00"
  },
  "AmazonPrometheusRemoteWriteAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "aps:RemoteWrite"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-19T01:04:32+00:00"
  },
  "AmazonQLDBConsoleFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "qldb:CreateLedger",
            "qldb:UpdateLedger",
            "qldb:UpdateLedgerPermissionsMode",
            "qldb:DeleteLedger",
            "qldb:ListLedgers",
            "qldb:DescribeLedger",
            "qldb:ExportJournalToS3",
            "qldb:ListJournalS3Exports",
            "qldb:ListJournalS3ExportsForLedger",
            "qldb:DescribeJournalS3Export",
            "qldb:CancelJournalKinesisStream",
            "qldb:DescribeJournalKinesisStream",
            "qldb:ListJournalKinesisStreamsForLedger",
            "qldb:StreamJournalToKinesis",
            "qldb:GetBlock",
            "qldb:GetDigest",
            "qldb:GetRevision",
            "qldb:TagResource",
            "qldb:UntagResource",
            "qldb:ListTagsForResource",
            "qldb:SendCommand",
            "qldb:ExecuteStatement",
            "qldb:ShowCatalog",
            "qldb:InsertSampleData",
            "qldb:PartiQLCreateTable",
            "qldb:PartiQLCreateIndex",
            "qldb:PartiQLDropTable",
            "qldb:PartiQLDropIndex",
            "qldb:PartiQLUndropTable",
            "qldb:PartiQLDelete",
            "qldb:PartiQLInsert",
            "qldb:PartiQLUpdate",
            "qldb:PartiQLSelect",
            "qldb:PartiQLHistoryFunction",
            "qldb:PartiQLRedact"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "dbqms:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kinesis:ListStreams",
            "kinesis:DescribeStream"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "qldb.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-04T17:01:10+00:00"
  },
  "AmazonQLDBFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "qldb:CreateLedger",
            "qldb:UpdateLedger",
            "qldb:UpdateLedgerPermissionsMode",
            "qldb:DeleteLedger",
            "qldb:ListLedgers",
            "qldb:DescribeLedger",
            "qldb:ExportJournalToS3",
            "qldb:ListJournalS3Exports",
            "qldb:ListJournalS3ExportsForLedger",
            "qldb:DescribeJournalS3Export",
            "qldb:CancelJournalKinesisStream",
            "qldb:DescribeJournalKinesisStream",
            "qldb:ListJournalKinesisStreamsForLedger",
            "qldb:StreamJournalToKinesis",
            "qldb:GetDigest",
            "qldb:GetRevision",
            "qldb:GetBlock",
            "qldb:TagResource",
            "qldb:UntagResource",
            "qldb:ListTagsForResource",
            "qldb:SendCommand",
            "qldb:PartiQLCreateTable",
            "qldb:PartiQLCreateIndex",
            "qldb:PartiQLDropTable",
            "qldb:PartiQLDropIndex",
            "qldb:PartiQLUndropTable",
            "qldb:PartiQLDelete",
            "qldb:PartiQLInsert",
            "qldb:PartiQLUpdate",
            "qldb:PartiQLSelect",
            "qldb:PartiQLHistoryFunction",
            "qldb:PartiQLRedact"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "qldb.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-04T17:01:27+00:00"
  },
  "AmazonQLDBReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "qldb:ListLedgers",
            "qldb:DescribeLedger",
            "qldb:ListJournalS3Exports",
            "qldb:ListJournalS3ExportsForLedger",
            "qldb:DescribeJournalS3Export",
            "qldb:DescribeJournalKinesisStream",
            "qldb:ListJournalKinesisStreamsForLedger",
            "qldb:GetBlock",
            "qldb:GetDigest",
            "qldb:GetRevision",
            "qldb:ListTagsForResource"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2021-07-02T02:17:25+00:00"
  },
  "AmazonRDSBetaServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AllocateAddress",
            "ec2:AssociateAddress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateCoipPoolPermission",
            "ec2:CreateLocalGatewayRouteTablePermission",
            "ec2:CreateNetworkInterface",
            "ec2:CreateSecurityGroup",
            "ec2:DeleteCoipPoolPermission",
            "ec2:DeleteLocalGatewayRouteTablePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteSecurityGroup",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeCoipPools",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeLocalGatewayRouteTablePermissions",
            "ec2:DescribeLocalGatewayRouteTables",
            "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
            "ec2:DescribeLocalGateways",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs",
            "ec2:DisassociateAddress",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:ModifyVpcEndpoint",
            "ec2:ReleaseAddress",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:CreateVpcEndpoint",
            "ec2:DescribeVpcEndpoints",
            "ec2:DeleteVpcEndpoints"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sns:Publish"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/rds/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "logs:DescribeLogStreams"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/rds/*:log-stream:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricData"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": [
                "AWS/DocDB",
                "AWS/Neptune",
                "AWS/RDS",
                "AWS/Usage"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:GetRandomPassword"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:DeleteSecret",
            "secretsmanager:DescribeSecret",
            "secretsmanager:PutSecretValue",
            "secretsmanager:RotateSecret",
            "secretsmanager:UpdateSecret",
            "secretsmanager:UpdateSecretVersionStage",
            "secretsmanager:ListSecretVersionIds"
          ],
          "Resource": [
            "arn:aws:secretsmanager:*:*:secret:rds-beta-us-east-1!*"
          ],
          "Condition": {
            "StringLike": {
              "secretsmanager:ResourceTag/aws:secretsmanager:owningService": "rds-beta-us-east-1"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "secretsmanager:TagResource",
          "Resource": "arn:aws:secretsmanager:*:*:secret:rds-beta-us-east-1!*",
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "aws:rds:primaryDBInstanceArn",
                "aws:rds:primaryDBClusterArn"
              ]
            },
            "StringLike": {
              "secretsmanager:ResourceTag/aws:secretsmanager:owningService": "rds-beta-us-east-1"
            }
          }
        }
      ]
    },
    "VersionId": "v8",
    "IsDefaultVersion": true,
    "CreateDate": "2022-12-14T18:33:17+00:00"
  },
  "AmazonRDSCustomPreviewServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "ecc1",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstances",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeRegions",
            "ec2:DescribeSnapshots",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeVolumes",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeIamInstanceProfileAssociations",
            "ec2:DescribeImages",
            "ec2:DescribeVpcs",
            "ec2:RegisterImage",
            "ec2:DeregisterImage",
            "ec2:DescribeTags",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeVolumesModifications",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:SearchTransitGatewayMulticastGroups",
            "ec2:GetTransitGatewayMulticastDomainAssociations",
            "ec2:DescribeTransitGatewayMulticastDomains",
            "ec2:DescribeTransitGateways",
            "ec2:DescribeTransitGatewayVpcAttachments",
            "ec2:DescribePlacementGroups",
            "ec2:DescribeRouteTables"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "ecc2",
          "Effect": "Allow",
          "Action": [
            "ec2:DisassociateIamInstanceProfile",
            "ec2:AssociateIamInstanceProfile",
            "ec2:ReplaceIamInstanceProfileAssociation",
            "ec2:TerminateInstances",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:RebootInstances"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "ecc1scoping",
          "Effect": "Allow",
          "Action": [
            "ec2:AllocateAddress"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringLike": {
              "aws:RequestTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "ecc1scoping2",
          "Effect": "Allow",
          "Action": [
            "ec2:AssociateAddress",
            "ec2:DisassociateAddress",
            "ec2:ReleaseAddress"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "ecc1scoping3",
          "Effect": "Allow",
          "Action": [
            "ec2:AssignPrivateIpAddresses"
          ],
          "Resource": "arn:aws:ec2:*:*:network-interface/*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AWSRDSCustom": [
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "eccRunInstances1",
          "Effect": "Allow",
          "Action": "ec2:RunInstances",
          "Resource": [
            "arn:aws:ec2:*:*:instance/*",
            "arn:aws:ec2:*:*:volume/*",
            "arn:aws:ec2:*:*:network-interface/*"
          ],
          "Condition": {
            "StringLike": {
              "aws:RequestTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "eccRunInstances2",
          "Effect": "Allow",
          "Action": [
            "ec2:RunInstances"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*::image/*",
            "arn:aws:ec2:*:*:key-pair/do-not-delete-rds-custom-*",
            "arn:aws:ec2:*:*:placement-group/*"
          ]
        },
        {
          "Sid": "eccRunInstances3",
          "Effect": "Allow",
          "Action": [
            "ec2:RunInstances"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:network-interface/*",
            "arn:aws:ec2:*::snapshot/*"
          ],
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AWSRDSCustom": [
                "custom-oracle-rac",
                "custom-oracle"
              ]
            }
          }
        },
        {
          "Sid": "RequireImdsV2",
          "Effect": "Deny",
          "Action": "ec2:RunInstances",
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "StringNotEquals": {
              "ec2:MetadataHttpTokens": "required"
            },
            "StringLike": {
              "aws:RequestTag/AWSRDSCustom": [
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "eccRunInstances3keyPair1",
          "Effect": "Allow",
          "Action": [
            "ec2:RunInstances",
            "ec2:DeleteKeyPair"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:key-pair/do-not-delete-rds-custom-*"
          ],
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "eccKeyPair2",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateKeyPair"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:key-pair/do-not-delete-rds-custom-*"
          ],
          "Condition": {
            "StringLike": {
              "aws:RequestTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "eccNetworkInterface1",
          "Effect": "Allow",
          "Action": "ec2:CreateNetworkInterface",
          "Resource": "arn:aws:ec2:*:*:network-interface/*",
          "Condition": {
            "StringLike": {
              "aws:RequestTag/AWSRDSCustom": [
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "eccNetworkInterface2",
          "Effect": "Allow",
          "Action": "ec2:CreateNetworkInterface",
          "Resource": [
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:security-group/*"
          ]
        },
        {
          "Sid": "eccNetworkInterface3",
          "Effect": "Allow",
          "Action": "ec2:DeleteNetworkInterface",
          "Resource": "arn:aws:ec2:*:*:network-interface/*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AWSRDSCustom": [
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "eccCreateTag1",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "eccCreateTag2",
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "aws:RequestTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ],
              "ec2:CreateAction": [
                "CreateKeyPair",
                "RunInstances",
                "CreateNetworkInterface",
                "CreateVolume",
                "CreateSnapshots",
                "CopySnapshot",
                "AllocateAddress"
              ]
            }
          }
        },
        {
          "Sid": "eccVolume1",
          "Effect": "Allow",
          "Action": [
            "ec2:DetachVolume",
            "ec2:AttachVolume"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*",
            "arn:aws:ec2:*:*:volume/*"
          ],
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "eccVolume2",
          "Effect": "Allow",
          "Action": "ec2:CreateVolume",
          "Resource": "arn:aws:ec2:*:*:volume/*",
          "Condition": {
            "StringLike": {
              "aws:RequestTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "eccVolume3",
          "Effect": "Allow",
          "Action": [
            "ec2:ModifyVolumeAttribute",
            "ec2:DeleteVolume",
            "ec2:ModifyVolume"
          ],
          "Resource": "arn:aws:ec2:*:*:volume/*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "eccVolume4snapshot1",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateVolume",
            "ec2:DeleteSnapshot"
          ],
          "Resource": "arn:aws:ec2:*::snapshot/*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "eccSnapshot2",
          "Effect": "Allow",
          "Action": [
            "ec2:CopySnapshot",
            "ec2:CreateSnapshots"
          ],
          "Resource": "arn:aws:ec2:*::snapshot/*",
          "Condition": {
            "StringLike": {
              "aws:RequestTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "eccSnapshot3",
          "Effect": "Allow",
          "Action": "ec2:CreateSnapshots",
          "Resource": [
            "arn:aws:ec2:*:*:instance/*",
            "arn:aws:ec2:*:*:volume/*"
          ],
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "iam1",
          "Effect": "Allow",
          "Action": [
            "iam:ListInstanceProfiles",
            "iam:GetInstanceProfile",
            "iam:GetRole",
            "iam:ListRolePolicies",
            "iam:GetRolePolicy",
            "iam:ListAttachedRolePolicies",
            "iam:GetPolicy",
            "iam:GetPolicyVersion"
          ],
          "Resource": "*"
        },
        {
          "Sid": "iam2",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/AWSRDSCustom*",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": "ec2.amazonaws.com"
            }
          }
        },
        {
          "Sid": "cloudtrail1",
          "Effect": "Allow",
          "Action": [
            "cloudtrail:GetTrailStatus"
          ],
          "Resource": "arn:aws:cloudtrail:*:*:trail/do-not-delete-rds-custom-*"
        },
        {
          "Sid": "cw1",
          "Effect": "Allow",
          "Action": [
            "cloudwatch:EnableAlarmActions",
            "cloudwatch:DeleteAlarms"
          ],
          "Resource": "arn:aws:cloudwatch:*:*:alarm:do-not-delete-rds-custom-*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "cw2",
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:TagResource"
          ],
          "Resource": "arn:aws:cloudwatch:*:*:alarm:do-not-delete-rds-custom-*",
          "Condition": {
            "StringLike": {
              "aws:RequestTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "cw3",
          "Effect": "Allow",
          "Action": [
            "cloudwatch:DescribeAlarms"
          ],
          "Resource": "arn:aws:cloudwatch:*:*:alarm:*"
        },
        {
          "Sid": "ssm1",
          "Effect": "Allow",
          "Action": "ssm:SendCommand",
          "Resource": "arn:aws:ssm:*:*:document/*"
        },
        {
          "Sid": "ssm2",
          "Effect": "Allow",
          "Action": "ssm:SendCommand",
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "ssm3",
          "Effect": "Allow",
          "Action": [
            "ssm:GetCommandInvocation",
            "ssm:GetConnectionStatus",
            "ssm:DescribeInstanceInformation"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ssm4",
          "Effect": "Allow",
          "Action": [
            "ssm:PutParameter",
            "ssm:AddTagsToResource"
          ],
          "Resource": "arn:aws:ssm:*:*:parameter/rds/custom-oracle-rac/*",
          "Condition": {
            "StringLike": {
              "aws:RequestTag/AWSRDSCustom": [
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "ssm5",
          "Effect": "Allow",
          "Action": [
            "ssm:DeleteParameter"
          ],
          "Resource": "arn:aws:ssm:*:*:parameter/rds/custom-oracle-rac/*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AWSRDSCustom": [
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "eb1",
          "Effect": "Allow",
          "Action": [
            "events:PutRule",
            "events:TagResource"
          ],
          "Resource": "arn:aws:events:*:*:rule/do-not-delete-rds-custom-*",
          "Condition": {
            "StringLike": {
              "aws:RequestTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "eb2",
          "Effect": "Allow",
          "Action": [
            "events:PutTargets",
            "events:DescribeRule",
            "events:EnableRule",
            "events:ListTargetsByRule",
            "events:DeleteRule",
            "events:RemoveTargets",
            "events:DisableRule"
          ],
          "Resource": "arn:aws:events:*:*:rule/do-not-delete-rds-custom-*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "eb3",
          "Effect": "Allow",
          "Action": [
            "events:PutRule"
          ],
          "Resource": "arn:aws:events:*:*:rule/do-not-delete-rds-custom-*",
          "Condition": {
            "StringLike": {
              "events:ManagedBy": [
                "custom.rds-preview.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "eb4",
          "Effect": "Allow",
          "Action": [
            "events:PutTargets",
            "events:EnableRule",
            "events:DeleteRule",
            "events:RemoveTargets",
            "events:DisableRule"
          ],
          "Resource": "arn:aws:events:*:*:rule/do-not-delete-rds-custom-*",
          "Condition": {
            "StringLike": {
              "events:ManagedBy": [
                "custom.rds-preview.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "eb5",
          "Effect": "Allow",
          "Action": [
            "events:DescribeRule",
            "events:ListTargetsByRule"
          ],
          "Resource": "arn:aws:events:*:*:rule/do-not-delete-rds-custom-*"
        },
        {
          "Sid": "secretmanager1",
          "Effect": "Allow",
          "Action": [
            "secretsmanager:TagResource",
            "secretsmanager:CreateSecret"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:secret:do-not-delete-rds-custom-*",
          "Condition": {
            "StringLike": {
              "aws:RequestTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "secretmanager2",
          "Effect": "Allow",
          "Action": [
            "secretsmanager:TagResource",
            "secretsmanager:DescribeSecret",
            "secretsmanager:DeleteSecret",
            "secretsmanager:PutSecretValue"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:secret:do-not-delete-rds-custom-*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "servicequota1",
          "Effect": "Allow",
          "Action": [
            "servicequotas:GetServiceQuota"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v6",
    "IsDefaultVersion": true,
    "CreateDate": "2023-09-20T17:48:39+00:00"
  },
  "AmazonRDSCustomServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "ecc1",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstances",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeRegions",
            "ec2:DescribeSnapshots",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeVolumes",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeIamInstanceProfileAssociations",
            "ec2:DescribeImages",
            "ec2:DescribeVpcs",
            "ec2:RegisterImage",
            "ec2:DeregisterImage",
            "ec2:DescribeTags",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeVolumesModifications",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:SearchTransitGatewayMulticastGroups",
            "ec2:GetTransitGatewayMulticastDomainAssociations",
            "ec2:DescribeTransitGatewayMulticastDomains",
            "ec2:DescribeTransitGateways",
            "ec2:DescribeTransitGatewayVpcAttachments",
            "ec2:DescribePlacementGroups",
            "ec2:DescribeRouteTables"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "ecc2",
          "Effect": "Allow",
          "Action": [
            "ec2:DisassociateIamInstanceProfile",
            "ec2:AssociateIamInstanceProfile",
            "ec2:ReplaceIamInstanceProfileAssociation",
            "ec2:TerminateInstances",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:RebootInstances"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "ecc1scoping",
          "Effect": "Allow",
          "Action": [
            "ec2:AllocateAddress"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringLike": {
              "aws:RequestTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "ecc1scoping2",
          "Effect": "Allow",
          "Action": [
            "ec2:AssociateAddress",
            "ec2:DisassociateAddress",
            "ec2:ReleaseAddress"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "ecc1scoping3",
          "Effect": "Allow",
          "Action": [
            "ec2:AssignPrivateIpAddresses"
          ],
          "Resource": "arn:aws:ec2:*:*:network-interface/*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AWSRDSCustom": [
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "eccRunInstances1",
          "Effect": "Allow",
          "Action": "ec2:RunInstances",
          "Resource": [
            "arn:aws:ec2:*:*:instance/*",
            "arn:aws:ec2:*:*:volume/*",
            "arn:aws:ec2:*:*:network-interface/*"
          ],
          "Condition": {
            "StringLike": {
              "aws:RequestTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "eccRunInstances2",
          "Effect": "Allow",
          "Action": [
            "ec2:RunInstances"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*::image/*",
            "arn:aws:ec2:*:*:key-pair/do-not-delete-rds-custom-*",
            "arn:aws:ec2:*:*:placement-group/*"
          ]
        },
        {
          "Sid": "eccRunInstances3",
          "Effect": "Allow",
          "Action": [
            "ec2:RunInstances"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:network-interface/*",
            "arn:aws:ec2:*::snapshot/*"
          ],
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AWSRDSCustom": [
                "custom-oracle-rac",
                "custom-oracle"
              ]
            }
          }
        },
        {
          "Sid": "RequireImdsV2",
          "Effect": "Deny",
          "Action": "ec2:RunInstances",
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "StringNotEquals": {
              "ec2:MetadataHttpTokens": "required"
            },
            "StringLike": {
              "aws:RequestTag/AWSRDSCustom": [
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "eccRunInstances3keyPair1",
          "Effect": "Allow",
          "Action": [
            "ec2:RunInstances",
            "ec2:DeleteKeyPair"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:key-pair/do-not-delete-rds-custom-*"
          ],
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "eccKeyPair2",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateKeyPair"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:key-pair/do-not-delete-rds-custom-*"
          ],
          "Condition": {
            "StringLike": {
              "aws:RequestTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "eccNetworkInterface1",
          "Effect": "Allow",
          "Action": "ec2:CreateNetworkInterface",
          "Resource": "arn:aws:ec2:*:*:network-interface/*",
          "Condition": {
            "StringLike": {
              "aws:RequestTag/AWSRDSCustom": [
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "eccNetworkInterface2",
          "Effect": "Allow",
          "Action": "ec2:CreateNetworkInterface",
          "Resource": [
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:security-group/*"
          ]
        },
        {
          "Sid": "eccNetworkInterface3",
          "Effect": "Allow",
          "Action": "ec2:DeleteNetworkInterface",
          "Resource": "arn:aws:ec2:*:*:network-interface/*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AWSRDSCustom": [
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "eccCreateTag1",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "eccCreateTag2",
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "aws:RequestTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ],
              "ec2:CreateAction": [
                "CreateKeyPair",
                "RunInstances",
                "CreateNetworkInterface",
                "CreateVolume",
                "CreateSnapshot",
                "CreateSnapshots",
                "CopySnapshot",
                "AllocateAddress"
              ]
            }
          }
        },
        {
          "Sid": "eccVolume1",
          "Effect": "Allow",
          "Action": [
            "ec2:DetachVolume",
            "ec2:AttachVolume"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*",
            "arn:aws:ec2:*:*:volume/*"
          ],
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "eccVolume2",
          "Effect": "Allow",
          "Action": "ec2:CreateVolume",
          "Resource": "arn:aws:ec2:*:*:volume/*",
          "Condition": {
            "StringLike": {
              "aws:RequestTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "eccVolume3",
          "Effect": "Allow",
          "Action": [
            "ec2:ModifyVolumeAttribute",
            "ec2:DeleteVolume",
            "ec2:ModifyVolume"
          ],
          "Resource": "arn:aws:ec2:*:*:volume/*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "eccVolume4snapshot1",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateVolume",
            "ec2:DeleteSnapshot"
          ],
          "Resource": "arn:aws:ec2:*::snapshot/*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "eccSnapshot2",
          "Effect": "Allow",
          "Action": [
            "ec2:CopySnapshot",
            "ec2:CreateSnapshot",
            "ec2:CreateSnapshots"
          ],
          "Resource": "arn:aws:ec2:*::snapshot/*",
          "Condition": {
            "StringLike": {
              "aws:RequestTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "eccSnapshot3",
          "Effect": "Allow",
          "Action": "ec2:CreateSnapshots",
          "Resource": [
            "arn:aws:ec2:*:*:instance/*",
            "arn:aws:ec2:*:*:volume/*"
          ],
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "eccSnapshot4",
          "Effect": "Allow",
          "Action": "ec2:CreateSnapshot",
          "Resource": [
            "arn:aws:ec2:*:*:volume/*"
          ],
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AWSRDSCustom": [
                "custom-sqlserver"
              ]
            }
          }
        },
        {
          "Sid": "iam1",
          "Effect": "Allow",
          "Action": [
            "iam:ListInstanceProfiles",
            "iam:GetInstanceProfile",
            "iam:GetRole",
            "iam:ListRolePolicies",
            "iam:GetRolePolicy",
            "iam:ListAttachedRolePolicies",
            "iam:GetPolicy",
            "iam:GetPolicyVersion"
          ],
          "Resource": "*"
        },
        {
          "Sid": "iam2",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/AWSRDSCustom*",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": "ec2.amazonaws.com"
            }
          }
        },
        {
          "Sid": "cloudtrail1",
          "Effect": "Allow",
          "Action": [
            "cloudtrail:GetTrailStatus"
          ],
          "Resource": "arn:aws:cloudtrail:*:*:trail/do-not-delete-rds-custom-*"
        },
        {
          "Sid": "cw1",
          "Effect": "Allow",
          "Action": [
            "cloudwatch:EnableAlarmActions",
            "cloudwatch:DeleteAlarms"
          ],
          "Resource": "arn:aws:cloudwatch:*:*:alarm:do-not-delete-rds-custom-*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "cw2",
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:TagResource"
          ],
          "Resource": "arn:aws:cloudwatch:*:*:alarm:do-not-delete-rds-custom-*",
          "Condition": {
            "StringLike": {
              "aws:RequestTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "cw3",
          "Effect": "Allow",
          "Action": [
            "cloudwatch:DescribeAlarms"
          ],
          "Resource": "arn:aws:cloudwatch:*:*:alarm:*"
        },
        {
          "Sid": "ssm1",
          "Effect": "Allow",
          "Action": "ssm:SendCommand",
          "Resource": "arn:aws:ssm:*:*:document/*"
        },
        {
          "Sid": "ssm2",
          "Effect": "Allow",
          "Action": "ssm:SendCommand",
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "ssm3",
          "Effect": "Allow",
          "Action": [
            "ssm:GetCommandInvocation",
            "ssm:GetConnectionStatus",
            "ssm:DescribeInstanceInformation"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ssm4",
          "Effect": "Allow",
          "Action": [
            "ssm:PutParameter",
            "ssm:AddTagsToResource"
          ],
          "Resource": "arn:aws:ssm:*:*:parameter/rds/custom-oracle-rac/*",
          "Condition": {
            "StringLike": {
              "aws:RequestTag/AWSRDSCustom": [
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "ssm5",
          "Effect": "Allow",
          "Action": [
            "ssm:DeleteParameter"
          ],
          "Resource": "arn:aws:ssm:*:*:parameter/rds/custom-oracle-rac/*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AWSRDSCustom": [
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "eb1",
          "Effect": "Allow",
          "Action": [
            "events:PutRule",
            "events:TagResource"
          ],
          "Resource": "arn:aws:events:*:*:rule/do-not-delete-rds-custom-*",
          "Condition": {
            "StringLike": {
              "aws:RequestTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "eb2",
          "Effect": "Allow",
          "Action": [
            "events:PutTargets",
            "events:DescribeRule",
            "events:EnableRule",
            "events:ListTargetsByRule",
            "events:DeleteRule",
            "events:RemoveTargets",
            "events:DisableRule"
          ],
          "Resource": "arn:aws:events:*:*:rule/do-not-delete-rds-custom-*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "eb3",
          "Effect": "Allow",
          "Action": [
            "events:PutRule"
          ],
          "Resource": "arn:aws:events:*:*:rule/do-not-delete-rds-custom-*",
          "Condition": {
            "StringLike": {
              "events:ManagedBy": [
                "custom.rds.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "eb4",
          "Effect": "Allow",
          "Action": [
            "events:PutTargets",
            "events:EnableRule",
            "events:DeleteRule",
            "events:RemoveTargets",
            "events:DisableRule"
          ],
          "Resource": "arn:aws:events:*:*:rule/do-not-delete-rds-custom-*",
          "Condition": {
            "StringLike": {
              "events:ManagedBy": [
                "custom.rds.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "eb5",
          "Effect": "Allow",
          "Action": [
            "events:DescribeRule",
            "events:ListTargetsByRule"
          ],
          "Resource": "arn:aws:events:*:*:rule/do-not-delete-rds-custom-*"
        },
        {
          "Sid": "secretmanager1",
          "Effect": "Allow",
          "Action": [
            "secretsmanager:TagResource",
            "secretsmanager:CreateSecret"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:secret:do-not-delete-rds-custom-*",
          "Condition": {
            "StringLike": {
              "aws:RequestTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "secretmanager2",
          "Effect": "Allow",
          "Action": [
            "secretsmanager:TagResource",
            "secretsmanager:DescribeSecret",
            "secretsmanager:DeleteSecret",
            "secretsmanager:PutSecretValue"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:secret:do-not-delete-rds-custom-*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AWSRDSCustom": [
                "custom-oracle",
                "custom-sqlserver",
                "custom-oracle-rac"
              ]
            }
          }
        },
        {
          "Sid": "sqs1",
          "Effect": "Allow",
          "Action": [
            "sqs:CreateQueue",
            "sqs:TagQueue"
          ],
          "Resource": "arn:aws:sqs:*:*:do-not-delete-rds-custom-*",
          "Condition": {
            "StringLike": {
              "aws:RequestTag/AWSRDSCustom": [
                "custom-sqlserver"
              ]
            }
          }
        },
        {
          "Sid": "sqs2",
          "Effect": "Allow",
          "Action": [
            "sqs:GetQueueAttributes",
            "sqs:SendMessage",
            "sqs:ReceiveMessage",
            "sqs:DeleteMessage",
            "sqs:DeleteQueue"
          ],
          "Resource": "arn:aws:sqs:*:*:do-not-delete-rds-custom-*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/AWSRDSCustom": [
                "custom-sqlserver"
              ]
            }
          }
        },
        {
          "Sid": "servicequota1",
          "Effect": "Allow",
          "Action": [
            "servicequotas:GetServiceQuota"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v7",
    "IsDefaultVersion": true,
    "CreateDate": "2023-09-20T19:16:42+00:00"
  },
  "AmazonRDSDataFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "SecretsManagerDbCredentialsAccess",
          "Effect": "Allow",
          "Action": [
            "secretsmanager:GetSecretValue",
            "secretsmanager:PutResourcePolicy",
            "secretsmanager:PutSecretValue",
            "secretsmanager:DeleteSecret",
            "secretsmanager:DescribeSecret",
            "secretsmanager:TagResource"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:secret:rds-db-credentials/*"
        },
        {
          "Sid": "RDSDataServiceAccess",
          "Effect": "Allow",
          "Action": [
            "dbqms:CreateFavoriteQuery",
            "dbqms:DescribeFavoriteQueries",
            "dbqms:UpdateFavoriteQuery",
            "dbqms:DeleteFavoriteQueries",
            "dbqms:GetQueryString",
            "dbqms:CreateQueryHistory",
            "dbqms:DescribeQueryHistory",
            "dbqms:UpdateQueryHistory",
            "dbqms:DeleteQueryHistory",
            "rds-data:ExecuteSql",
            "rds-data:ExecuteStatement",
            "rds-data:BatchExecuteStatement",
            "rds-data:BeginTransaction",
            "rds-data:CommitTransaction",
            "rds-data:RollbackTransaction",
            "secretsmanager:CreateSecret",
            "secretsmanager:ListSecrets",
            "secretsmanager:GetRandomPassword",
            "tag:GetResources"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2019-11-20T21:58:46+00:00"
  },
  "AmazonRDSDirectoryServiceAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "ds:DescribeDirectories",
            "ds:AuthorizeApplication",
            "ds:UnauthorizeApplication",
            "ds:GetAuthorizedApplicationDetails"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2019-05-15T16:51:50+00:00"
  },
  "AmazonRDSEnhancedMonitoringRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "EnableCreationAndManagementOfRDSCloudwatchLogGroups",
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:PutRetentionPolicy"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:RDS*"
          ]
        },
        {
          "Sid": "EnableCreationAndManagementOfRDSCloudwatchLogStreams",
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:RDS*:log-stream:*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-11-11T19:58:29+00:00"
  },
  "AmazonRDSFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "rds:*",
            "application-autoscaling:DeleteScalingPolicy",
            "application-autoscaling:DeregisterScalableTarget",
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingActivities",
            "application-autoscaling:DescribeScalingPolicies",
            "application-autoscaling:PutScalingPolicy",
            "application-autoscaling:RegisterScalableTarget",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:ListMetrics",
            "cloudwatch:GetMetricData",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeCoipPools",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeLocalGatewayRouteTablePermissions",
            "ec2:DescribeLocalGatewayRouteTables",
            "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
            "ec2:DescribeLocalGateways",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs",
            "ec2:GetCoipPoolUsage",
            "sns:ListSubscriptions",
            "sns:ListTopics",
            "sns:Publish",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "outposts:GetOutpostInstanceTypes",
            "devops-guru:GetResourceCollection"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "pi:*",
          "Resource": [
            "arn:aws:pi:*:*:metrics/rds/*",
            "arn:aws:pi:*:*:perf-reports/rds/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": [
                "rds.amazonaws.com",
                "rds.application-autoscaling.amazonaws.com"
              ]
            }
          }
        },
        {
          "Action": [
            "devops-guru:SearchInsights",
            "devops-guru:ListAnomaliesForInsight"
          ],
          "Effect": "Allow",
          "Resource": "*",
          "Condition": {
            "ForAllValues:StringEquals": {
              "devops-guru:ServiceNames": [
                "RDS"
              ]
            },
            "Null": {
              "devops-guru:ServiceNames": "false"
            }
          }
        }
      ]
    },
    "VersionId": "v14",
    "IsDefaultVersion": true,
    "CreateDate": "2023-08-17T23:00:17+00:00"
  },
  "AmazonRDSPerformanceInsightsFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AmazonRDSPerformanceInsightsReadAccess",
          "Effect": "Allow",
          "Action": [
            "pi:DescribeDimensionKeys",
            "pi:GetDimensionKeyDetails",
            "pi:GetResourceMetadata",
            "pi:GetResourceMetrics",
            "pi:ListAvailableResourceDimensions",
            "pi:ListAvailableResourceMetrics"
          ],
          "Resource": "arn:aws:pi:*:*:metrics/rds/*"
        },
        {
          "Sid": "AmazonRDSPerformanceInsightsAnalisysReportFullAccess",
          "Effect": "Allow",
          "Action": [
            "pi:CreatePerformanceAnalysisReport",
            "pi:GetPerformanceAnalysisReport",
            "pi:ListPerformanceAnalysisReports",
            "pi:DeletePerformanceAnalysisReport"
          ],
          "Resource": "arn:aws:pi:*:*:perf-reports/rds/*/*"
        },
        {
          "Sid": "AmazonRDSPerformanceInsightsTaggingFullAccess",
          "Effect": "Allow",
          "Action": [
            "pi:TagResource",
            "pi:UntagResource",
            "pi:ListTagsForResource"
          ],
          "Resource": "arn:aws:pi:*:*:*/rds/*"
        },
        {
          "Sid": "AmazonRDSDescribeInstanceAccess",
          "Effect": "Allow",
          "Action": [
            "rds:DescribeDBInstances",
            "rds:DescribeDBClusters"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AmazonCloudWatchReadAccess",
          "Effect": "Allow",
          "Action": [
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "cloudwatch:GetMetricData"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-10-23T21:14:27+00:00"
  },
  "AmazonRDSPerformanceInsightsReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AmazonRDSDescribeDBInstances",
          "Effect": "Allow",
          "Action": "rds:DescribeDBInstances",
          "Resource": "*"
        },
        {
          "Sid": "AmazonRDSDescribeDBClusters",
          "Effect": "Allow",
          "Action": "rds:DescribeDBClusters",
          "Resource": "*"
        },
        {
          "Sid": "AmazonRDSPerformanceInsightsDescribeDimensionKeys",
          "Effect": "Allow",
          "Action": "pi:DescribeDimensionKeys",
          "Resource": "arn:aws:pi:*:*:metrics/rds/*"
        },
        {
          "Sid": "AmazonRDSPerformanceInsightsGetDimensionKeyDetails",
          "Effect": "Allow",
          "Action": "pi:GetDimensionKeyDetails",
          "Resource": "arn:aws:pi:*:*:metrics/rds/*"
        },
        {
          "Sid": "AmazonRDSPerformanceInsightsGetResourceMetadata",
          "Effect": "Allow",
          "Action": "pi:GetResourceMetadata",
          "Resource": "arn:aws:pi:*:*:metrics/rds/*"
        },
        {
          "Sid": "AmazonRDSPerformanceInsightsGetResourceMetrics",
          "Effect": "Allow",
          "Action": "pi:GetResourceMetrics",
          "Resource": "arn:aws:pi:*:*:metrics/rds/*"
        },
        {
          "Sid": "AmazonRDSPerformanceInsightsListAvailableResourceDimensions",
          "Effect": "Allow",
          "Action": "pi:ListAvailableResourceDimensions",
          "Resource": "arn:aws:pi:*:*:metrics/rds/*"
        },
        {
          "Sid": "AmazonRDSPerformanceInsightsListAvailableResourceMetrics",
          "Effect": "Allow",
          "Action": "pi:ListAvailableResourceMetrics",
          "Resource": "arn:aws:pi:*:*:metrics/rds/*"
        },
        {
          "Sid": "AmazonRDSPerformanceInsightsGetPerformanceAnalysisReport",
          "Effect": "Allow",
          "Action": "pi:GetPerformanceAnalysisReport",
          "Resource": "arn:aws:pi:*:*:perf-reports/rds/*/*"
        },
        {
          "Sid": "AmazonRDSPerformanceInsightsListPerformanceAnalysisReports",
          "Effect": "Allow",
          "Action": "pi:ListPerformanceAnalysisReports",
          "Resource": "arn:aws:pi:*:*:perf-reports/rds/*/*"
        },
        {
          "Sid": "AmazonRDSPerformanceInsightsListTagsForResource",
          "Effect": "Allow",
          "Action": "pi:ListTagsForResource",
          "Resource": "arn:aws:pi:*:*:*/rds/*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-10-23T21:17:06+00:00"
  },
  "AmazonRDSPreviewServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "rds:CrossRegionCommunication"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AllocateAddress",
            "ec2:AssociateAddress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateCoipPoolPermission",
            "ec2:CreateLocalGatewayRouteTablePermission",
            "ec2:CreateNetworkInterface",
            "ec2:CreateSecurityGroup",
            "ec2:DeleteCoipPoolPermission",
            "ec2:DeleteLocalGatewayRouteTablePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteSecurityGroup",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeCoipPools",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeLocalGatewayRouteTablePermissions",
            "ec2:DescribeLocalGatewayRouteTables",
            "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
            "ec2:DescribeLocalGateways",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs",
            "ec2:DisassociateAddress",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:ReleaseAddress",
            "ec2:RevokeSecurityGroupIngress"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sns:Publish"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/rds/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "logs:DescribeLogStreams"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/rds/*:log-stream:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricData"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": [
                "AWS/DocDB-Preview",
                "AWS/Neptune-Preview",
                "AWS/RDS-Preview",
                "AWS/Usage"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:GetRandomPassword"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:DeleteSecret",
            "secretsmanager:DescribeSecret",
            "secretsmanager:PutSecretValue",
            "secretsmanager:RotateSecret",
            "secretsmanager:UpdateSecret",
            "secretsmanager:UpdateSecretVersionStage",
            "secretsmanager:ListSecretVersionIds"
          ],
          "Resource": [
            "arn:aws:secretsmanager:*:*:secret:rds-preview-us-east-2!*"
          ],
          "Condition": {
            "StringLike": {
              "secretsmanager:ResourceTag/aws:secretsmanager:owningService": "rds-preview-us-east-2"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "secretsmanager:TagResource",
          "Resource": "arn:aws:secretsmanager:*:*:secret:rds-preview-us-east-2!*",
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "aws:rds:primaryDBInstanceArn",
                "aws:rds:primaryDBClusterArn"
              ]
            },
            "StringLike": {
              "secretsmanager:ResourceTag/aws:secretsmanager:owningService": "rds-preview-us-east-2"
            }
          }
        }
      ]
    },
    "VersionId": "v8",
    "IsDefaultVersion": true,
    "CreateDate": "2023-10-04T19:01:52+00:00"
  },
  "AmazonRDSReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "rds:Describe*",
            "rds:ListTagsForResource",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "cloudwatch:GetMetricData",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "devops-guru:GetResourceCollection"
          ],
          "Resource": "*"
        },
        {
          "Action": [
            "devops-guru:SearchInsights",
            "devops-guru:ListAnomaliesForInsight"
          ],
          "Effect": "Allow",
          "Resource": "*",
          "Condition": {
            "ForAllValues:StringEquals": {
              "devops-guru:ServiceNames": [
                "RDS"
              ]
            },
            "Null": {
              "devops-guru:ServiceNames": "false"
            }
          }
        }
      ]
    },
    "VersionId": "v7",
    "IsDefaultVersion": true,
    "CreateDate": "2023-04-14T12:32:09+00:00"
  },
  "AmazonRDSServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "rds:CrossRegionCommunication"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AllocateAddress",
            "ec2:AssociateAddress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateCoipPoolPermission",
            "ec2:CreateLocalGatewayRouteTablePermission",
            "ec2:CreateNetworkInterface",
            "ec2:CreateSecurityGroup",
            "ec2:DeleteCoipPoolPermission",
            "ec2:DeleteLocalGatewayRouteTablePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteSecurityGroup",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeCoipPools",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeLocalGatewayRouteTablePermissions",
            "ec2:DescribeLocalGatewayRouteTables",
            "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
            "ec2:DescribeLocalGateways",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs",
            "ec2:DisassociateAddress",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:ModifyVpcEndpoint",
            "ec2:ReleaseAddress",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:CreateVpcEndpoint",
            "ec2:DescribeVpcEndpoints",
            "ec2:DeleteVpcEndpoints",
            "ec2:AssignPrivateIpAddresses",
            "ec2:UnassignPrivateIpAddresses"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sns:Publish"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/rds/*",
            "arn:aws:logs:*:*:log-group:/aws/docdb/*",
            "arn:aws:logs:*:*:log-group:/aws/neptune/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "logs:DescribeLogStreams"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/rds/*:log-stream:*",
            "arn:aws:logs:*:*:log-group:/aws/docdb/*:log-stream:*",
            "arn:aws:logs:*:*:log-group:/aws/neptune/*:log-stream:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "kinesis:CreateStream",
            "kinesis:PutRecord",
            "kinesis:PutRecords",
            "kinesis:DescribeStream",
            "kinesis:SplitShard",
            "kinesis:MergeShards",
            "kinesis:DeleteStream",
            "kinesis:UpdateShardCount"
          ],
          "Resource": [
            "arn:aws:kinesis:*:*:stream/aws-rds-das-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricData"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": [
                "AWS/DocDB",
                "AWS/Neptune",
                "AWS/RDS",
                "AWS/Usage"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:GetRandomPassword"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:DeleteSecret",
            "secretsmanager:DescribeSecret",
            "secretsmanager:PutSecretValue",
            "secretsmanager:RotateSecret",
            "secretsmanager:UpdateSecret",
            "secretsmanager:UpdateSecretVersionStage",
            "secretsmanager:ListSecretVersionIds"
          ],
          "Resource": [
            "arn:aws:secretsmanager:*:*:secret:rds!*"
          ],
          "Condition": {
            "StringLike": {
              "secretsmanager:ResourceTag/aws:secretsmanager:owningService": "rds"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "secretsmanager:TagResource",
          "Resource": "arn:aws:secretsmanager:*:*:secret:rds!*",
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "aws:rds:primaryDBInstanceArn",
                "aws:rds:primaryDBClusterArn"
              ]
            },
            "StringLike": {
              "secretsmanager:ResourceTag/aws:secretsmanager:owningService": "rds"
            }
          }
        }
      ]
    },
    "VersionId": "v12",
    "IsDefaultVersion": true,
    "CreateDate": "2022-12-13T16:24:27+00:00"
  },
  "AmazonRedshiftAllCommandsFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "sagemaker:CreateTrainingJob",
            "sagemaker:CreateAutoMLJob",
            "sagemaker:CreateCompilationJob",
            "sagemaker:CreateEndpoint",
            "sagemaker:DescribeAutoMLJob",
            "sagemaker:DescribeTrainingJob",
            "sagemaker:DescribeCompilationJob",
            "sagemaker:DescribeProcessingJob",
            "sagemaker:DescribeTransformJob",
            "sagemaker:ListCandidatesForAutoMLJob",
            "sagemaker:StopAutoMLJob",
            "sagemaker:StopCompilationJob",
            "sagemaker:StopTrainingJob",
            "sagemaker:DescribeEndpoint",
            "sagemaker:InvokeEndpoint",
            "sagemaker:StopProcessingJob",
            "sagemaker:CreateModel",
            "sagemaker:CreateProcessingJob"
          ],
          "Resource": [
            "arn:aws:sagemaker:*:*:model/*redshift*",
            "arn:aws:sagemaker:*:*:training-job/*redshift*",
            "arn:aws:sagemaker:*:*:automl-job/*redshift*",
            "arn:aws:sagemaker:*:*:compilation-job/*redshift*",
            "arn:aws:sagemaker:*:*:processing-job/*redshift*",
            "arn:aws:sagemaker:*:*:transform-job/*redshift*",
            "arn:aws:sagemaker:*:*:endpoint/*redshift*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/sagemaker/Endpoints/*redshift*",
            "arn:aws:logs:*:*:log-group:/aws/sagemaker/ProcessingJobs/*redshift*",
            "arn:aws:logs:*:*:log-group:/aws/sagemaker/TrainingJobs/*redshift*",
            "arn:aws:logs:*:*:log-group:/aws/sagemaker/TransformJobs/*redshift*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricData"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": [
                "SageMaker",
                "/aws/sagemaker/Endpoints",
                "/aws/sagemaker/ProcessingJobs",
                "/aws/sagemaker/TrainingJobs",
                "/aws/sagemaker/TransformJobs"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ecr:BatchCheckLayerAvailability",
            "ecr:BatchGetImage",
            "ecr:GetAuthorizationToken",
            "ecr:GetDownloadUrlForLayer"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:GetBucketAcl",
            "s3:GetBucketCors",
            "s3:GetEncryptionConfiguration",
            "s3:GetBucketLocation",
            "s3:ListBucket",
            "s3:ListAllMyBuckets",
            "s3:ListMultipartUploadParts",
            "s3:ListBucketMultipartUploads",
            "s3:PutObject",
            "s3:PutBucketAcl",
            "s3:PutBucketCors",
            "s3:DeleteObject",
            "s3:AbortMultipartUpload",
            "s3:CreateBucket"
          ],
          "Resource": [
            "arn:aws:s3:::redshift-downloads",
            "arn:aws:s3:::redshift-downloads/*",
            "arn:aws:s3:::*redshift*",
            "arn:aws:s3:::*redshift*/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": "*",
          "Condition": {
            "StringEqualsIgnoreCase": {
              "s3:ExistingObjectTag/Redshift": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Scan",
            "dynamodb:DescribeTable",
            "dynamodb:Getitem"
          ],
          "Resource": [
            "arn:aws:dynamodb:*:*:table/*redshift*",
            "arn:aws:dynamodb:*:*:table/*redshift*/index/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticmapreduce:ListInstances"
          ],
          "Resource": [
            "arn:aws:elasticmapreduce:*:*:cluster/*redshift*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticmapreduce:ListInstances"
          ],
          "Resource": "*",
          "Condition": {
            "StringEqualsIgnoreCase": {
              "elasticmapreduce:ResourceTag/Redshift": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "lambda:InvokeFunction"
          ],
          "Resource": "arn:aws:lambda:*:*:function:*redshift*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "glue:CreateDatabase",
            "glue:DeleteDatabase",
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:UpdateDatabase",
            "glue:CreateTable",
            "glue:DeleteTable",
            "glue:BatchDeleteTable",
            "glue:UpdateTable",
            "glue:GetTable",
            "glue:GetTables",
            "glue:BatchCreatePartition",
            "glue:CreatePartition",
            "glue:DeletePartition",
            "glue:BatchDeletePartition",
            "glue:UpdatePartition",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:BatchGetPartition"
          ],
          "Resource": [
            "arn:aws:glue:*:*:table/*redshift*/*",
            "arn:aws:glue:*:*:catalog",
            "arn:aws:glue:*:*:database/*redshift*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:GetResourcePolicy",
            "secretsmanager:GetSecretValue",
            "secretsmanager:DescribeSecret",
            "secretsmanager:ListSecretVersionIds"
          ],
          "Resource": [
            "arn:aws:secretsmanager:*:*:secret:*redshift*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:GetRandomPassword",
            "secretsmanager:ListSecrets"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "arn:aws:iam::*:role/*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "redshift.amazonaws.com",
                "glue.amazonaws.com",
                "sagemaker.amazonaws.com",
                "athena.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2021-11-25T02:27:31+00:00"
  },
  "AmazonRedshiftDataFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "DataAPIPermissions",
          "Effect": "Allow",
          "Action": [
            "redshift-data:BatchExecuteStatement",
            "redshift-data:ExecuteStatement",
            "redshift-data:CancelStatement",
            "redshift-data:ListStatements",
            "redshift-data:GetStatementResult",
            "redshift-data:DescribeStatement",
            "redshift-data:ListDatabases",
            "redshift-data:ListSchemas",
            "redshift-data:ListTables",
            "redshift-data:DescribeTable"
          ],
          "Resource": "*"
        },
        {
          "Sid": "SecretsManagerPermissions",
          "Effect": "Allow",
          "Action": [
            "secretsmanager:GetSecretValue"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:secret:*",
          "Condition": {
            "StringLike": {
              "secretsmanager:ResourceTag/RedshiftDataFullAccess": "*"
            }
          }
        },
        {
          "Sid": "GetCredentialsForAPIUser",
          "Effect": "Allow",
          "Action": "redshift:GetClusterCredentials",
          "Resource": [
            "arn:aws:redshift:*:*:dbname:*/*",
            "arn:aws:redshift:*:*:dbuser:*/redshift_data_api_user"
          ]
        },
        {
          "Sid": "GetCredentialsWithFederatedIAMCredentials",
          "Effect": "Allow",
          "Action": "redshift:GetClusterCredentialsWithIAM",
          "Resource": "arn:aws:redshift:*:*:dbname:*/*"
        },
        {
          "Sid": "GetCredentialsForServerless",
          "Effect": "Allow",
          "Action": "redshift-serverless:GetCredentials",
          "Resource": "arn:aws:redshift-serverless:*:*:workgroup/*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/RedshiftDataFullAccess": "*"
            }
          }
        },
        {
          "Sid": "DenyCreateAPIUser",
          "Effect": "Deny",
          "Action": "redshift:CreateClusterUser",
          "Resource": [
            "arn:aws:redshift:*:*:dbuser:*/redshift_data_api_user"
          ]
        },
        {
          "Sid": "ServiceLinkedRole",
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/redshift-data.amazonaws.com/AWSServiceRoleForRedshift",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "redshift-data.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2023-04-07T18:18:32+00:00"
  },
  "AmazonRedshiftFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "redshift:*",
            "redshift-serverless:*",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:DescribeInternetGateways",
            "sns:CreateTopic",
            "sns:Get*",
            "sns:List*",
            "cloudwatch:Describe*",
            "cloudwatch:Get*",
            "cloudwatch:List*",
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:EnableAlarmActions",
            "cloudwatch:DisableAlarmActions",
            "tag:GetResources",
            "tag:UntagResources",
            "tag:GetTagValues",
            "tag:GetTagKeys",
            "tag:TagResources"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/redshift.amazonaws.com/AWSServiceRoleForRedshift",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "redshift.amazonaws.com"
            }
          }
        },
        {
          "Sid": "DataAPIPermissions",
          "Action": [
            "redshift-data:ExecuteStatement",
            "redshift-data:CancelStatement",
            "redshift-data:ListStatements",
            "redshift-data:GetStatementResult",
            "redshift-data:DescribeStatement",
            "redshift-data:ListDatabases",
            "redshift-data:ListSchemas",
            "redshift-data:ListTables",
            "redshift-data:DescribeTable"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Sid": "SecretsManagerListPermissions",
          "Action": [
            "secretsmanager:ListSecrets"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Sid": "SecretsManagerCreateGetPermissions",
          "Action": [
            "secretsmanager:CreateSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:TagResource"
          ],
          "Effect": "Allow",
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "secretsmanager:ResourceTag/RedshiftDataFullAccess": "*"
            }
          }
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2022-07-07T23:31:13+00:00"
  },
  "AmazonRedshiftQueryEditor": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "redshift:GetClusterCredentials",
            "redshift:ListSchemas",
            "redshift:ListTables",
            "redshift:ListDatabases",
            "redshift:ExecuteQuery",
            "redshift:FetchResults",
            "redshift:CancelQuery",
            "redshift:DescribeClusters",
            "redshift:DescribeQuery",
            "redshift:DescribeTable",
            "redshift:ViewQueriesFromConsole",
            "redshift:DescribeSavedQueries",
            "redshift:CreateSavedQuery",
            "redshift:DeleteSavedQueries",
            "redshift:ModifySavedQuery"
          ],
          "Resource": "*"
        },
        {
          "Sid": "DataAPIPermissions",
          "Action": [
            "redshift-data:ExecuteStatement",
            "redshift-data:ListDatabases",
            "redshift-data:ListSchemas",
            "redshift-data:ListTables",
            "redshift-data:DescribeTable"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Sid": "DataAPIIAMSessionPermissionsRestriction",
          "Action": [
            "redshift-data:GetStatementResult",
            "redshift-data:CancelStatement",
            "redshift-data:DescribeStatement",
            "redshift-data:ListStatements"
          ],
          "Effect": "Allow",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "redshift-data:statement-owner-iam-userid": "${aws:userid}"
            }
          }
        },
        {
          "Sid": "SecretsManagerListPermissions",
          "Action": [
            "secretsmanager:ListSecrets"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Sid": "SecretsManagerCreateGetPermissions",
          "Action": [
            "secretsmanager:CreateSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:TagResource"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:secretsmanager:*:*:secret:*",
          "Condition": {
            "StringEquals": {
              "secretsmanager:ResourceTag/RedshiftQueryOwner": "${aws:userid}"
            }
          }
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2021-02-16T19:33:45+00:00"
  },
  "AmazonRedshiftQueryEditorV2FullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "RedshiftPermissions",
          "Effect": "Allow",
          "Action": "redshift:DescribeClusters",
          "Resource": "*"
        },
        {
          "Sid": "KeyManagementServicePermissions",
          "Effect": "Allow",
          "Action": [
            "kms:DescribeKey",
            "kms:ListAliases"
          ],
          "Resource": "*"
        },
        {
          "Sid": "SecretsManagerPermissions",
          "Effect": "Allow",
          "Action": [
            "secretsmanager:CreateSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:DeleteSecret",
            "secretsmanager:TagResource"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:sqlworkbench!*"
        },
        {
          "Sid": "ResourceGroupsTaggingPermissions",
          "Effect": "Allow",
          "Action": [
            "tag:GetResources"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:CalledViaLast": "sqlworkbench.amazonaws.com"
            }
          }
        },
        {
          "Sid": "AmazonRedshiftQueryEditorV2Permissions",
          "Effect": "Allow",
          "Action": "sqlworkbench:*",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-02-23T17:05:06+00:00"
  },
  "AmazonRedshiftQueryEditorV2NoSharing": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "RedshiftPermissions",
          "Effect": "Allow",
          "Action": "redshift:DescribeClusters",
          "Resource": "*"
        },
        {
          "Sid": "SecretsManagerPermissions",
          "Effect": "Allow",
          "Action": [
            "secretsmanager:CreateSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:DeleteSecret",
            "secretsmanager:TagResource"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:sqlworkbench!*",
          "Condition": {
            "StringEquals": {
              "secretsmanager:ResourceTag/sqlworkbench-resource-owner": "${aws:userid}"
            }
          }
        },
        {
          "Sid": "ResourceGroupsTaggingPermissions",
          "Effect": "Allow",
          "Action": [
            "tag:GetResources"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:CalledViaLast": "sqlworkbench.amazonaws.com"
            }
          }
        },
        {
          "Sid": "AmazonRedshiftQueryEditorV2NonResourceLevelPermissions",
          "Effect": "Allow",
          "Action": [
            "sqlworkbench:CreateFolder",
            "sqlworkbench:PutTab",
            "sqlworkbench:BatchDeleteFolder",
            "sqlworkbench:DeleteTab",
            "sqlworkbench:GenerateSession",
            "sqlworkbench:GetAccountInfo",
            "sqlworkbench:GetAccountSettings",
            "sqlworkbench:GetUserInfo",
            "sqlworkbench:GetUserWorkspaceSettings",
            "sqlworkbench:PutUserWorkspaceSettings",
            "sqlworkbench:ListConnections",
            "sqlworkbench:ListFiles",
            "sqlworkbench:ListTabs",
            "sqlworkbench:UpdateFolder",
            "sqlworkbench:ListRedshiftClusters",
            "sqlworkbench:DriverExecute",
            "sqlworkbench:ListTaggedResources",
            "sqlworkbench:ListQueryExecutionHistory",
            "sqlworkbench:GetQueryExecutionHistory",
            "sqlworkbench:ListNotebooks",
            "sqlworkbench:GetSchemaInference",
            "sqlworkbench:GetAutocompletionMetadata",
            "sqlworkbench:GetAutocompletionResource"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AmazonRedshiftQueryEditorV2CreateOwnedResourcePermissions",
          "Effect": "Allow",
          "Action": [
            "sqlworkbench:CreateConnection",
            "sqlworkbench:CreateSavedQuery",
            "sqlworkbench:CreateChart",
            "sqlworkbench:CreateNotebook",
            "sqlworkbench:DuplicateNotebook",
            "sqlworkbench:CreateNotebookFromVersion",
            "sqlworkbench:ImportNotebook"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/sqlworkbench-resource-owner": "${aws:userid}"
            }
          }
        },
        {
          "Sid": "AmazonRedshiftQueryEditorV2OwnerSpecificPermissions",
          "Effect": "Allow",
          "Action": [
            "sqlworkbench:DeleteChart",
            "sqlworkbench:DeleteConnection",
            "sqlworkbench:DeleteSavedQuery",
            "sqlworkbench:GetChart",
            "sqlworkbench:GetConnection",
            "sqlworkbench:GetSavedQuery",
            "sqlworkbench:ListSavedQueryVersions",
            "sqlworkbench:UpdateChart",
            "sqlworkbench:UpdateConnection",
            "sqlworkbench:UpdateSavedQuery",
            "sqlworkbench:AssociateConnectionWithTab",
            "sqlworkbench:AssociateQueryWithTab",
            "sqlworkbench:AssociateConnectionWithChart",
            "sqlworkbench:AssociateNotebookWithTab",
            "sqlworkbench:UpdateFileFolder",
            "sqlworkbench:ListTagsForResource",
            "sqlworkbench:GetNotebook",
            "sqlworkbench:UpdateNotebook",
            "sqlworkbench:DeleteNotebook",
            "sqlworkbench:DuplicateNotebook",
            "sqlworkbench:CreateNotebookCell",
            "sqlworkbench:DeleteNotebookCell",
            "sqlworkbench:UpdateNotebookCellContent",
            "sqlworkbench:UpdateNotebookCellLayout",
            "sqlworkbench:BatchGetNotebookCell",
            "sqlworkbench:ListNotebookVersions",
            "sqlworkbench:CreateNotebookVersion",
            "sqlworkbench:GetNotebookVersion",
            "sqlworkbench:DeleteNotebookVersion",
            "sqlworkbench:RestoreNotebookVersion",
            "sqlworkbench:CreateNotebookFromVersion",
            "sqlworkbench:ExportNotebook",
            "sqlworkbench:ImportNotebook"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/sqlworkbench-resource-owner": "${aws:userid}"
            }
          }
        },
        {
          "Sid": "AmazonRedshiftQueryEditorV2TagOnlyUserIdPermissions",
          "Effect": "Allow",
          "Action": "sqlworkbench:TagResource",
          "Resource": "*",
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": "sqlworkbench-resource-owner"
            },
            "StringEquals": {
              "aws:ResourceTag/sqlworkbench-resource-owner": "${aws:userid}",
              "aws:RequestTag/sqlworkbench-resource-owner": "${aws:userid}"
            }
          }
        }
      ]
    },
    "VersionId": "v8",
    "IsDefaultVersion": true,
    "CreateDate": "2023-08-16T19:24:59+00:00"
  },
  "AmazonRedshiftQueryEditorV2ReadSharing": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "RedshiftPermissions",
          "Effect": "Allow",
          "Action": "redshift:DescribeClusters",
          "Resource": "*"
        },
        {
          "Sid": "SecretsManagerPermissions",
          "Effect": "Allow",
          "Action": [
            "secretsmanager:CreateSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:DeleteSecret",
            "secretsmanager:TagResource"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:sqlworkbench!*",
          "Condition": {
            "StringEquals": {
              "secretsmanager:ResourceTag/sqlworkbench-resource-owner": "${aws:userid}"
            }
          }
        },
        {
          "Sid": "ResourceGroupsTaggingPermissions",
          "Effect": "Allow",
          "Action": [
            "tag:GetResources"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:CalledViaLast": "sqlworkbench.amazonaws.com"
            }
          }
        },
        {
          "Sid": "AmazonRedshiftQueryEditorV2NonResourceLevelPermissions",
          "Effect": "Allow",
          "Action": [
            "sqlworkbench:CreateFolder",
            "sqlworkbench:PutTab",
            "sqlworkbench:BatchDeleteFolder",
            "sqlworkbench:DeleteTab",
            "sqlworkbench:GenerateSession",
            "sqlworkbench:GetAccountInfo",
            "sqlworkbench:GetAccountSettings",
            "sqlworkbench:GetUserInfo",
            "sqlworkbench:GetUserWorkspaceSettings",
            "sqlworkbench:PutUserWorkspaceSettings",
            "sqlworkbench:ListConnections",
            "sqlworkbench:ListFiles",
            "sqlworkbench:ListTabs",
            "sqlworkbench:UpdateFolder",
            "sqlworkbench:ListRedshiftClusters",
            "sqlworkbench:DriverExecute",
            "sqlworkbench:ListTaggedResources",
            "sqlworkbench:ListQueryExecutionHistory",
            "sqlworkbench:GetQueryExecutionHistory",
            "sqlworkbench:ListNotebooks",
            "sqlworkbench:GetSchemaInference",
            "sqlworkbench:GetAutocompletionMetadata",
            "sqlworkbench:GetAutocompletionResource"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AmazonRedshiftQueryEditorV2CreateOwnedResourcePermissions",
          "Effect": "Allow",
          "Action": [
            "sqlworkbench:CreateConnection",
            "sqlworkbench:CreateSavedQuery",
            "sqlworkbench:CreateChart",
            "sqlworkbench:CreateNotebook",
            "sqlworkbench:DuplicateNotebook",
            "sqlworkbench:CreateNotebookFromVersion",
            "sqlworkbench:ImportNotebook"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/sqlworkbench-resource-owner": "${aws:userid}"
            }
          }
        },
        {
          "Sid": "AmazonRedshiftQueryEditorV2OwnerSpecificPermissions",
          "Effect": "Allow",
          "Action": [
            "sqlworkbench:DeleteChart",
            "sqlworkbench:DeleteConnection",
            "sqlworkbench:DeleteSavedQuery",
            "sqlworkbench:GetChart",
            "sqlworkbench:GetConnection",
            "sqlworkbench:GetSavedQuery",
            "sqlworkbench:ListSavedQueryVersions",
            "sqlworkbench:UpdateChart",
            "sqlworkbench:UpdateConnection",
            "sqlworkbench:UpdateSavedQuery",
            "sqlworkbench:AssociateConnectionWithTab",
            "sqlworkbench:AssociateQueryWithTab",
            "sqlworkbench:AssociateConnectionWithChart",
            "sqlworkbench:AssociateNotebookWithTab",
            "sqlworkbench:UpdateFileFolder",
            "sqlworkbench:ListTagsForResource",
            "sqlworkbench:GetNotebook",
            "sqlworkbench:UpdateNotebook",
            "sqlworkbench:DeleteNotebook",
            "sqlworkbench:DuplicateNotebook",
            "sqlworkbench:CreateNotebookCell",
            "sqlworkbench:DeleteNotebookCell",
            "sqlworkbench:UpdateNotebookCellContent",
            "sqlworkbench:UpdateNotebookCellLayout",
            "sqlworkbench:BatchGetNotebookCell",
            "sqlworkbench:ListNotebookVersions",
            "sqlworkbench:CreateNotebookVersion",
            "sqlworkbench:GetNotebookVersion",
            "sqlworkbench:DeleteNotebookVersion",
            "sqlworkbench:RestoreNotebookVersion",
            "sqlworkbench:CreateNotebookFromVersion",
            "sqlworkbench:ExportNotebook",
            "sqlworkbench:ImportNotebook"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/sqlworkbench-resource-owner": "${aws:userid}"
            }
          }
        },
        {
          "Sid": "AmazonRedshiftQueryEditorV2TagOnlyUserIdPermissions",
          "Effect": "Allow",
          "Action": "sqlworkbench:TagResource",
          "Resource": "*",
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": "sqlworkbench-resource-owner"
            },
            "StringEquals": {
              "aws:ResourceTag/sqlworkbench-resource-owner": "${aws:userid}",
              "aws:RequestTag/sqlworkbench-resource-owner": "${aws:userid}"
            }
          }
        },
        {
          "Sid": "AmazonRedshiftQueryEditorV2TeamReadAccessPermissions",
          "Effect": "Allow",
          "Action": [
            "sqlworkbench:GetChart",
            "sqlworkbench:GetConnection",
            "sqlworkbench:GetSavedQuery",
            "sqlworkbench:ListSavedQueryVersions",
            "sqlworkbench:ListTagsForResource",
            "sqlworkbench:AssociateQueryWithTab",
            "sqlworkbench:AssociateNotebookWithTab",
            "sqlworkbench:GetNotebook",
            "sqlworkbench:DuplicateNotebook",
            "sqlworkbench:BatchGetNotebookCell",
            "sqlworkbench:ListNotebookVersions",
            "sqlworkbench:GetNotebookVersion",
            "sqlworkbench:CreateNotebookFromVersion",
            "sqlworkbench:ExportNotebook"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/sqlworkbench-team": "${aws:PrincipalTag/sqlworkbench-team}"
            }
          }
        },
        {
          "Sid": "AmazonRedshiftQueryEditorV2TagOnlyTeamPermissions",
          "Effect": "Allow",
          "Action": "sqlworkbench:TagResource",
          "Resource": "*",
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": "sqlworkbench-team"
            },
            "StringEquals": {
              "aws:ResourceTag/sqlworkbench-resource-owner": "${aws:userid}",
              "aws:RequestTag/sqlworkbench-team": "${aws:PrincipalTag/sqlworkbench-team}"
            }
          }
        },
        {
          "Sid": "AmazonRedshiftQueryEditorV2UntagOnlyTeamPermissions",
          "Effect": "Allow",
          "Action": "sqlworkbench:UntagResource",
          "Resource": "*",
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": "sqlworkbench-team"
            },
            "StringEquals": {
              "aws:ResourceTag/sqlworkbench-resource-owner": "${aws:userid}"
            }
          }
        }
      ]
    },
    "VersionId": "v8",
    "IsDefaultVersion": true,
    "CreateDate": "2023-08-16T19:23:13+00:00"
  },
  "AmazonRedshiftQueryEditorV2ReadWriteSharing": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "RedshiftPermissions",
          "Effect": "Allow",
          "Action": "redshift:DescribeClusters",
          "Resource": "*"
        },
        {
          "Sid": "SecretsManagerPermissions",
          "Effect": "Allow",
          "Action": [
            "secretsmanager:CreateSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:DeleteSecret",
            "secretsmanager:TagResource"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:sqlworkbench!*",
          "Condition": {
            "StringEquals": {
              "secretsmanager:ResourceTag/sqlworkbench-resource-owner": "${aws:userid}"
            }
          }
        },
        {
          "Sid": "ResourceGroupsTaggingPermissions",
          "Effect": "Allow",
          "Action": [
            "tag:GetResources"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:CalledViaLast": "sqlworkbench.amazonaws.com"
            }
          }
        },
        {
          "Sid": "AmazonRedshiftQueryEditorV2NonResourceLevelPermissions",
          "Effect": "Allow",
          "Action": [
            "sqlworkbench:CreateFolder",
            "sqlworkbench:PutTab",
            "sqlworkbench:BatchDeleteFolder",
            "sqlworkbench:DeleteTab",
            "sqlworkbench:GenerateSession",
            "sqlworkbench:GetAccountInfo",
            "sqlworkbench:GetAccountSettings",
            "sqlworkbench:GetUserInfo",
            "sqlworkbench:GetUserWorkspaceSettings",
            "sqlworkbench:PutUserWorkspaceSettings",
            "sqlworkbench:ListConnections",
            "sqlworkbench:ListFiles",
            "sqlworkbench:ListTabs",
            "sqlworkbench:UpdateFolder",
            "sqlworkbench:ListRedshiftClusters",
            "sqlworkbench:DriverExecute",
            "sqlworkbench:ListTaggedResources",
            "sqlworkbench:ListQueryExecutionHistory",
            "sqlworkbench:GetQueryExecutionHistory",
            "sqlworkbench:ListNotebooks",
            "sqlworkbench:GetSchemaInference",
            "sqlworkbench:GetAutocompletionMetadata",
            "sqlworkbench:GetAutocompletionResource"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AmazonRedshiftQueryEditorV2CreateOwnedResourcePermissions",
          "Effect": "Allow",
          "Action": [
            "sqlworkbench:CreateConnection",
            "sqlworkbench:CreateSavedQuery",
            "sqlworkbench:CreateChart",
            "sqlworkbench:CreateNotebook",
            "sqlworkbench:DuplicateNotebook",
            "sqlworkbench:CreateNotebookFromVersion",
            "sqlworkbench:ImportNotebook"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/sqlworkbench-resource-owner": "${aws:userid}"
            }
          }
        },
        {
          "Sid": "AmazonRedshiftQueryEditorV2OwnerSpecificPermissions",
          "Effect": "Allow",
          "Action": [
            "sqlworkbench:DeleteChart",
            "sqlworkbench:DeleteConnection",
            "sqlworkbench:DeleteSavedQuery",
            "sqlworkbench:GetChart",
            "sqlworkbench:GetConnection",
            "sqlworkbench:GetSavedQuery",
            "sqlworkbench:ListSavedQueryVersions",
            "sqlworkbench:UpdateChart",
            "sqlworkbench:UpdateConnection",
            "sqlworkbench:UpdateSavedQuery",
            "sqlworkbench:AssociateConnectionWithTab",
            "sqlworkbench:AssociateQueryWithTab",
            "sqlworkbench:AssociateConnectionWithChart",
            "sqlworkbench:AssociateNotebookWithTab",
            "sqlworkbench:UpdateFileFolder",
            "sqlworkbench:ListTagsForResource",
            "sqlworkbench:GetNotebook",
            "sqlworkbench:UpdateNotebook",
            "sqlworkbench:DeleteNotebook",
            "sqlworkbench:DuplicateNotebook",
            "sqlworkbench:CreateNotebookCell",
            "sqlworkbench:DeleteNotebookCell",
            "sqlworkbench:UpdateNotebookCellContent",
            "sqlworkbench:UpdateNotebookCellLayout",
            "sqlworkbench:BatchGetNotebookCell",
            "sqlworkbench:ListNotebookVersions",
            "sqlworkbench:CreateNotebookVersion",
            "sqlworkbench:GetNotebookVersion",
            "sqlworkbench:DeleteNotebookVersion",
            "sqlworkbench:RestoreNotebookVersion",
            "sqlworkbench:CreateNotebookFromVersion",
            "sqlworkbench:ExportNotebook",
            "sqlworkbench:ImportNotebook"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/sqlworkbench-resource-owner": "${aws:userid}"
            }
          }
        },
        {
          "Sid": "AmazonRedshiftQueryEditorV2TagOnlyUserIdPermissions",
          "Effect": "Allow",
          "Action": "sqlworkbench:TagResource",
          "Resource": "*",
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": "sqlworkbench-resource-owner"
            },
            "StringEquals": {
              "aws:ResourceTag/sqlworkbench-resource-owner": "${aws:userid}",
              "aws:RequestTag/sqlworkbench-resource-owner": "${aws:userid}"
            }
          }
        },
        {
          "Sid": "AmazonRedshiftQueryEditorV2TeamReadWriteAccessPermissions",
          "Effect": "Allow",
          "Action": [
            "sqlworkbench:GetChart",
            "sqlworkbench:GetConnection",
            "sqlworkbench:GetSavedQuery",
            "sqlworkbench:ListSavedQueryVersions",
            "sqlworkbench:ListTagsForResource",
            "sqlworkbench:UpdateChart",
            "sqlworkbench:UpdateConnection",
            "sqlworkbench:UpdateSavedQuery",
            "sqlworkbench:AssociateConnectionWithTab",
            "sqlworkbench:AssociateQueryWithTab",
            "sqlworkbench:AssociateConnectionWithChart",
            "sqlworkbench:AssociateNotebookWithTab",
            "sqlworkbench:GetNotebook",
            "sqlworkbench:DuplicateNotebook",
            "sqlworkbench:BatchGetNotebookCell",
            "sqlworkbench:ListNotebookVersions",
            "sqlworkbench:GetNotebookVersion",
            "sqlworkbench:CreateNotebookFromVersion",
            "sqlworkbench:ExportNotebook"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/sqlworkbench-team": "${aws:PrincipalTag/sqlworkbench-team}"
            }
          }
        },
        {
          "Sid": "AmazonRedshiftQueryEditorV2TagOnlyTeamPermissions",
          "Effect": "Allow",
          "Action": "sqlworkbench:TagResource",
          "Resource": "*",
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": "sqlworkbench-team"
            },
            "StringEquals": {
              "aws:ResourceTag/sqlworkbench-resource-owner": "${aws:userid}",
              "aws:RequestTag/sqlworkbench-team": "${aws:PrincipalTag/sqlworkbench-team}"
            }
          }
        },
        {
          "Sid": "AmazonRedshiftQueryEditorV2UntagOnlyTeamPermissions",
          "Effect": "Allow",
          "Action": "sqlworkbench:UntagResource",
          "Resource": "*",
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": "sqlworkbench-team"
            },
            "StringEquals": {
              "aws:ResourceTag/sqlworkbench-resource-owner": "${aws:userid}"
            }
          }
        }
      ]
    },
    "VersionId": "v8",
    "IsDefaultVersion": true,
    "CreateDate": "2023-08-16T18:23:05+00:00"
  },
  "AmazonRedshiftReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "redshift:Describe*",
            "redshift:ViewQueriesInConsole",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:DescribeInternetGateways",
            "sns:Get*",
            "sns:List*",
            "cloudwatch:Describe*",
            "cloudwatch:List*",
            "cloudwatch:Get*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:40:51+00:00"
  },
  "AmazonRedshiftServiceLinkedRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeVpcs",
            "ec2:DescribeSubnets",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeAddresses",
            "ec2:AssociateAddress",
            "ec2:DisassociateAddress",
            "ec2:CreateNetworkInterface",
            "ec2:DeleteNetworkInterface",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:CreateVpcEndpoint",
            "ec2:DeleteVpcEndpoints",
            "ec2:DescribeVpcEndpoints",
            "ec2:ModifyVpcEndpoint"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AllocateAddress"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:elastic-ip/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/Redshift": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:ReleaseAddress"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:elastic-ip/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/Redshift": "true"
            }
          }
        },
        {
          "Sid": "EnableCreationAndManagementOfRedshiftCloudwatchLogGroups",
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:PutRetentionPolicy"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/redshift/*"
          ]
        },
        {
          "Sid": "EnableCreationAndManagementOfRedshiftCloudwatchLogStreams",
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/redshift/*:log-stream:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSecurityGroup"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:security-group/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/Redshift": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:ModifySecurityGroupRules",
            "ec2:DeleteSecurityGroup"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:security-group/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/Redshift": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSecurityGroup"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:vpc/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": [
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:route-table/*",
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:vpc/*",
            "arn:aws:ec2:*:*:internet-gateway/*",
            "arn:aws:ec2:*:*:elastic-ip/*"
          ],
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": [
                "CreateVpc",
                "CreateSecurityGroup",
                "CreateSubnet",
                "CreateInternetGateway",
                "CreateRouteTable",
                "AllocateAddress"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeSecurityGroupRules",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeRouteTables"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricData"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": [
                "AWS/Redshift-Serverless",
                "AWS/Redshift"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:DescribeSecret",
            "secretsmanager:DeleteSecret",
            "secretsmanager:PutSecretValue",
            "secretsmanager:UpdateSecret",
            "secretsmanager:UpdateSecretVersionStage",
            "secretsmanager:RotateSecret"
          ],
          "Resource": [
            "arn:aws:secretsmanager:*:*:secret:redshift!*"
          ],
          "Condition": {
            "StringEquals": {
              "secretsmanager:ResourceTag/aws:secretsmanager:owningService": "redshift",
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:GetRandomPassword"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AssignIpv6Addresses",
            "ec2:UnassignIpv6Addresses"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:network-interface/*"
          ]
        }
      ]
    },
    "VersionId": "v12",
    "IsDefaultVersion": true,
    "CreateDate": "2023-10-27T16:20:17+00:00"
  },
  "AmazonRekognitionCustomLabelsFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListBucket",
            "s3:ListAllMyBuckets",
            "s3:GetBucketAcl",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:GetObjectAcl",
            "s3:GetObjectTagging",
            "s3:GetObjectVersion",
            "s3:PutObject"
          ],
          "Resource": "arn:aws:s3:::*custom-labels*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "rekognition:CreateProject",
            "rekognition:CreateProjectVersion",
            "rekognition:StartProjectVersion",
            "rekognition:StopProjectVersion",
            "rekognition:DescribeProjects",
            "rekognition:DescribeProjectVersions",
            "rekognition:DetectCustomLabels",
            "rekognition:DeleteProject",
            "rekognition:DeleteProjectVersion",
            "rekognition:TagResource",
            "rekognition:UntagResource",
            "rekognition:ListTagsForResource",
            "rekognition:CreateDataset",
            "rekognition:ListDatasetEntries",
            "rekognition:ListDatasetLabels",
            "rekognition:DescribeDataset",
            "rekognition:UpdateDatasetEntries",
            "rekognition:DistributeDatasetEntries",
            "rekognition:DeleteDataset",
            "rekognition:CopyProjectVersion",
            "rekognition:PutProjectPolicy",
            "rekognition:ListProjectPolicies",
            "rekognition:DeleteProjectPolicy"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2022-08-16T20:20:43+00:00"
  },
  "AmazonRekognitionFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "rekognition:*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2016-11-30T14:40:44+00:00"
  },
  "AmazonRekognitionReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AmazonRekognitionReadOnlyAccess",
          "Effect": "Allow",
          "Action": [
            "rekognition:CompareFaces",
            "rekognition:DetectFaces",
            "rekognition:DetectLabels",
            "rekognition:ListCollections",
            "rekognition:ListFaces",
            "rekognition:SearchFaces",
            "rekognition:SearchFacesByImage",
            "rekognition:DetectText",
            "rekognition:GetCelebrityInfo",
            "rekognition:RecognizeCelebrities",
            "rekognition:DetectModerationLabels",
            "rekognition:GetLabelDetection",
            "rekognition:GetFaceDetection",
            "rekognition:GetContentModeration",
            "rekognition:GetPersonTracking",
            "rekognition:GetCelebrityRecognition",
            "rekognition:GetFaceSearch",
            "rekognition:GetTextDetection",
            "rekognition:GetSegmentDetection",
            "rekognition:DescribeStreamProcessor",
            "rekognition:ListStreamProcessors",
            "rekognition:DescribeProjects",
            "rekognition:DescribeProjectVersions",
            "rekognition:DetectCustomLabels",
            "rekognition:DetectProtectiveEquipment",
            "rekognition:ListTagsForResource",
            "rekognition:ListDatasetEntries",
            "rekognition:ListDatasetLabels",
            "rekognition:DescribeDataset",
            "rekognition:ListProjectPolicies",
            "rekognition:ListUsers",
            "rekognition:SearchUsers",
            "rekognition:SearchUsersByImage",
            "rekognition:GetMediaAnalysisJob",
            "rekognition:ListMediaAnalysisJobs"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v10",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-08T18:30:22+00:00"
  },
  "AmazonRekognitionServiceRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "sns:Publish"
          ],
          "Resource": "arn:aws:sns:*:*:AmazonRekognition*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kinesis:PutRecord",
            "kinesis:PutRecords"
          ],
          "Resource": "arn:aws:kinesis:*:*:stream/AmazonRekognition*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kinesisvideo:GetDataEndpoint",
            "kinesisvideo:GetMedia"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2017-11-29T16:52:13+00:00"
  },
  "AmazonRoute53AutoNamingFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "route53:GetHostedZone",
            "route53:ListHostedZonesByName",
            "route53:CreateHostedZone",
            "route53:DeleteHostedZone",
            "route53:ChangeResourceRecordSets",
            "route53:CreateHealthCheck",
            "route53:GetHealthCheck",
            "route53:DeleteHealthCheck",
            "route53:UpdateHealthCheck",
            "ec2:DescribeVpcs",
            "ec2:DescribeRegions",
            "servicediscovery:*"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-01-18T18:40:41+00:00"
  },
  "AmazonRoute53AutoNamingReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "servicediscovery:Get*",
            "servicediscovery:List*"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-01-18T03:02:59+00:00"
  },
  "AmazonRoute53AutoNamingRegistrantAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "route53:GetHostedZone",
            "route53:ListHostedZonesByName",
            "route53:ChangeResourceRecordSets",
            "route53:CreateHealthCheck",
            "route53:GetHealthCheck",
            "route53:DeleteHealthCheck",
            "route53:UpdateHealthCheck",
            "servicediscovery:Get*",
            "servicediscovery:List*",
            "servicediscovery:RegisterInstance",
            "servicediscovery:DeregisterInstance"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-03-12T22:33:20+00:00"
  },
  "AmazonRoute53DomainsFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "route53:CreateHostedZone",
            "route53domains:*"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:40:56+00:00"
  },
  "AmazonRoute53DomainsReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "route53domains:Get*",
            "route53domains:List*"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:40:57+00:00"
  },
  "AmazonRoute53FullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "route53:*",
            "route53domains:*",
            "cloudfront:ListDistributions",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticbeanstalk:DescribeEnvironments",
            "s3:ListBucket",
            "s3:GetBucketLocation",
            "s3:GetBucketWebsite",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeRegions",
            "sns:ListTopics",
            "sns:ListSubscriptionsByTopic",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricStatistics"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "apigateway:GET",
          "Resource": "arn:aws:apigateway:*::/domainnames"
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2018-12-20T21:42:00+00:00"
  },
  "AmazonRoute53ReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "route53:Get*",
            "route53:List*",
            "route53:TestDNSAnswer"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2016-11-15T21:15:16+00:00"
  },
  "AmazonRoute53RecoveryClusterFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "route53-recovery-cluster:*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-08-18T18:37:00+00:00"
  },
  "AmazonRoute53RecoveryClusterReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "route53-recovery-cluster:GetRoutingControlState",
            "route53-recovery-cluster:ListRoutingControls"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-04-01T17:37:55+00:00"
  },
  "AmazonRoute53RecoveryControlConfigFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "route53-recovery-control-config:*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-08-18T17:48:35+00:00"
  },
  "AmazonRoute53RecoveryControlConfigReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "route53-recovery-control-config:DescribeCluster",
            "route53-recovery-control-config:DescribeControlPanel",
            "route53-recovery-control-config:DescribeRoutingControl",
            "route53-recovery-control-config:DescribeRoutingControlByName",
            "route53-recovery-control-config:DescribeSafetyRule",
            "route53-recovery-control-config:GetResourcePolicy",
            "route53-recovery-control-config:ListAssociatedRoute53HealthChecks",
            "route53-recovery-control-config:ListClusters",
            "route53-recovery-control-config:ListControlPanels",
            "route53-recovery-control-config:ListRoutingControls",
            "route53-recovery-control-config:ListSafetyRules",
            "route53-recovery-control-config:ListTagsForResource"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-10-18T17:15:33+00:00"
  },
  "AmazonRoute53RecoveryReadinessFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "route53-recovery-readiness:*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-08-18T16:45:07+00:00"
  },
  "AmazonRoute53RecoveryReadinessReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "route53-recovery-readiness:GetCell",
            "route53-recovery-readiness:GetReadinessCheck",
            "route53-recovery-readiness:GetReadinessCheckResourceStatus",
            "route53-recovery-readiness:GetReadinessCheckStatus",
            "route53-recovery-readiness:GetRecoveryGroup",
            "route53-recovery-readiness:GetRecoveryGroupReadinessSummary",
            "route53-recovery-readiness:GetResourceSet",
            "route53-recovery-readiness:ListCells",
            "route53-recovery-readiness:ListCrossAccountAuthorizations",
            "route53-recovery-readiness:ListReadinessChecks",
            "route53-recovery-readiness:ListRecoveryGroups",
            "route53-recovery-readiness:ListResourceSets",
            "route53-recovery-readiness:ListRules",
            "route53-recovery-readiness:ListTagsForResources"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "route53-recovery-readiness:GetArchitectureRecommendations",
            "route53-recovery-readiness:GetCellReadinessSummary"
          ],
          "Resource": "arn:aws:route53-recovery-readiness::*:*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2021-11-09T20:14:51+00:00"
  },
  "AmazonRoute53ResolverFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "route53resolver:*",
            "ec2:DescribeSubnets",
            "ec2:CreateNetworkInterface",
            "ec2:DeleteNetworkInterface",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:DescribeNetworkInterfaces",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeVpcs",
            "ec2:DescribeAvailabilityZones"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2020-07-17T19:03:27+00:00"
  },
  "AmazonRoute53ResolverReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "route53resolver:Get*",
            "route53resolver:List*",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeVpcs",
            "ec2:DescribeSubnets"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2019-09-27T16:37:48+00:00"
  },
  "AmazonS3FullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:*",
            "s3-object-lambda:*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2021-09-27T20:16:37+00:00"
  },
  "AmazonS3ObjectLambdaExecutionRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "s3-object-lambda:WriteGetObjectResponse"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-08-18T10:07:41+00:00"
  },
  "AmazonS3OutpostsFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "s3-outposts:*",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "datasync:ListTasks",
            "datasync:ListLocations",
            "datasync:DescribeTask",
            "datasync:DescribeLocation*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeVpcs",
            "ec2:DescribeSubnets",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeNetworkInterfaces"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "outposts:ListOutposts",
            "outposts:GetOutpost"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-10-02T17:26:30+00:00"
  },
  "AmazonS3OutpostsReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "s3-outposts:Get*",
            "s3-outposts:List*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "datasync:ListTasks",
            "datasync:ListLocations",
            "datasync:DescribeTask",
            "datasync:DescribeLocation*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeVpcs",
            "ec2:DescribeSubnets",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeNetworkInterfaces"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "outposts:ListOutposts",
            "outposts:GetOutpost"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-10-02T18:55:58+00:00"
  },
  "AmazonS3ReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:Get*",
            "s3:List*",
            "s3:Describe*",
            "s3-object-lambda:Get*",
            "s3-object-lambda:List*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-08-10T21:31:39+00:00"
  },
  "AmazonSESFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ses:*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:41:02+00:00"
  },
  "AmazonSESReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ses:Get*",
            "ses:List*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:41:03+00:00"
  },
  "AmazonSNSFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "sns:*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:41:05+00:00"
  },
  "AmazonSNSReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "sns:GetTopicAttributes",
            "sns:List*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:41:06+00:00"
  },
  "AmazonSNSRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "logs:PutMetricFilter",
            "logs:PutRetentionPolicy"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:41:30+00:00"
  },
  "AmazonSQSFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "sqs:*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:41:07+00:00"
  },
  "AmazonSQSReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "sqs:GetQueueAttributes",
            "sqs:GetQueueUrl",
            "sqs:ListDeadLetterSourceQueues",
            "sqs:ListQueues",
            "sqs:ListMessageMoveTasks"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-06-15T15:37:35+00:00"
  },
  "AmazonSSMAutomationApproverAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ssm:DescribeAutomationExecutions",
            "ssm:GetAutomationExecution",
            "ssm:SendAutomationSignal"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2017-08-07T23:07:28+00:00"
  },
  "AmazonSSMAutomationRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "lambda:InvokeFunction"
          ],
          "Resource": [
            "arn:aws:lambda:*:*:function:Automation*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateImage",
            "ec2:CopyImage",
            "ec2:DeregisterImage",
            "ec2:DescribeImages",
            "ec2:DeleteSnapshot",
            "ec2:StartInstances",
            "ec2:RunInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances",
            "ec2:DescribeInstanceStatus",
            "ec2:CreateTags",
            "ec2:DeleteTags",
            "ec2:DescribeTags",
            "cloudformation:CreateStack",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStacks",
            "cloudformation:UpdateStack",
            "cloudformation:DeleteStack"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:*"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "sns:Publish"
          ],
          "Resource": [
            "arn:aws:sns:*:*:Automation*"
          ]
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2017-07-24T23:29:12+00:00"
  },
  "AmazonSSMDirectoryServiceAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ds:CreateComputer",
            "ds:DescribeDirectories"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-03-15T17:44:38+00:00"
  },
  "AmazonSSMFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricData",
            "ds:CreateComputer",
            "ds:DescribeDirectories",
            "ec2:DescribeInstanceStatus",
            "logs:*",
            "ssm:*",
            "ec2messages:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM*",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "ssm.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:DeleteServiceLinkedRole",
            "iam:GetServiceLinkedRoleDeletionStatus"
          ],
          "Resource": "arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssmmessages:CreateControlChannel",
            "ssmmessages:CreateDataChannel",
            "ssmmessages:OpenControlChannel",
            "ssmmessages:OpenDataChannel"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2019-11-20T20:08:56+00:00"
  },
  "AmazonSSMMaintenanceWindowRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ssm:GetAutomationExecution",
            "ssm:GetParameters",
            "ssm:ListCommands",
            "ssm:SendCommand",
            "ssm:StartAutomationExecution"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "lambda:InvokeFunction"
          ],
          "Resource": [
            "arn:aws:lambda:*:*:function:SSM*",
            "arn:aws:lambda:*:*:function:*:SSM*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "states:DescribeExecution",
            "states:StartExecution"
          ],
          "Resource": [
            "arn:aws:states:*:*:stateMachine:SSM*",
            "arn:aws:states:*:*:execution:SSM*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "resource-groups:ListGroups",
            "resource-groups:ListGroupResources"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "tag:GetResources"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2019-07-27T00:16:05+00:00"
  },
  "AmazonSSMManagedEC2InstanceDefaultPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ssm:DescribeAssociation",
            "ssm:GetDeployablePatchSnapshotForInstance",
            "ssm:GetDocument",
            "ssm:DescribeDocument",
            "ssm:GetManifest",
            "ssm:ListAssociations",
            "ssm:ListInstanceAssociations",
            "ssm:PutInventory",
            "ssm:PutComplianceItems",
            "ssm:PutConfigurePackageResult",
            "ssm:UpdateAssociationStatus",
            "ssm:UpdateInstanceAssociationStatus",
            "ssm:UpdateInstanceInformation"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssmmessages:CreateControlChannel",
            "ssmmessages:CreateDataChannel",
            "ssmmessages:OpenControlChannel",
            "ssmmessages:OpenDataChannel"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2messages:AcknowledgeMessage",
            "ec2messages:DeleteMessage",
            "ec2messages:FailMessage",
            "ec2messages:GetEndpoint",
            "ec2messages:GetMessages",
            "ec2messages:SendReply"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-08-30T20:54:27+00:00"
  },
  "AmazonSSMManagedInstanceCore": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ssm:DescribeAssociation",
            "ssm:GetDeployablePatchSnapshotForInstance",
            "ssm:GetDocument",
            "ssm:DescribeDocument",
            "ssm:GetManifest",
            "ssm:GetParameter",
            "ssm:GetParameters",
            "ssm:ListAssociations",
            "ssm:ListInstanceAssociations",
            "ssm:PutInventory",
            "ssm:PutComplianceItems",
            "ssm:PutConfigurePackageResult",
            "ssm:UpdateAssociationStatus",
            "ssm:UpdateInstanceAssociationStatus",
            "ssm:UpdateInstanceInformation"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssmmessages:CreateControlChannel",
            "ssmmessages:CreateDataChannel",
            "ssmmessages:OpenControlChannel",
            "ssmmessages:OpenDataChannel"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2messages:AcknowledgeMessage",
            "ec2messages:DeleteMessage",
            "ec2messages:FailMessage",
            "ec2messages:GetEndpoint",
            "ec2messages:GetMessages",
            "ec2messages:SendReply"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2019-05-23T16:54:21+00:00"
  },
  "AmazonSSMPatchAssociation": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "ssm:DescribeEffectivePatchesForPatchBaseline",
          "Resource": "arn:aws:ssm:*:*:patchbaseline/*"
        },
        {
          "Effect": "Allow",
          "Action": "ssm:GetPatchBaseline",
          "Resource": "arn:aws:ssm:*:*:patchbaseline/*"
        },
        {
          "Effect": "Allow",
          "Action": "tag:GetResources",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "ssm:DescribePatchBaselines",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-05-13T16:00:42+00:00"
  },
  "AmazonSSMReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ssm:Describe*",
            "ssm:Get*",
            "ssm:List*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-05-29T17:44:19+00:00"
  },
  "AmazonSSMServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ssm:CancelCommand",
            "ssm:GetCommandInvocation",
            "ssm:ListCommandInvocations",
            "ssm:ListCommands",
            "ssm:SendCommand",
            "ssm:GetAutomationExecution",
            "ssm:GetParameters",
            "ssm:StartAutomationExecution",
            "ssm:StopAutomationExecution",
            "ssm:ListTagsForResource",
            "ssm:GetCalendarState"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:UpdateServiceSetting",
            "ssm:GetServiceSetting"
          ],
          "Resource": [
            "arn:aws:ssm:*:*:servicesetting/ssm/opsitem/*",
            "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstances"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "lambda:InvokeFunction"
          ],
          "Resource": [
            "arn:aws:lambda:*:*:function:SSM*",
            "arn:aws:lambda:*:*:function:*:SSM*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "states:DescribeExecution",
            "states:StartExecution"
          ],
          "Resource": [
            "arn:aws:states:*:*:stateMachine:SSM*",
            "arn:aws:states:*:*:execution:SSM*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "resource-groups:ListGroups",
            "resource-groups:ListGroupResources",
            "resource-groups:GetGroupQuery"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:DescribeStacks",
            "cloudformation:ListStackResources"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "tag:GetResources"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "config:SelectResourceConfig"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "compute-optimizer:GetEC2InstanceRecommendations",
            "compute-optimizer:GetEnrollmentStatus"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "support:DescribeTrustedAdvisorChecks",
            "support:DescribeTrustedAdvisorCheckSummaries",
            "support:DescribeTrustedAdvisorCheckResult",
            "support:DescribeCases"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "config:DescribeComplianceByConfigRule",
            "config:DescribeComplianceByResource",
            "config:DescribeRemediationConfigurations",
            "config:DescribeConfigurationRecorders"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "cloudwatch:DescribeAlarms",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "ssm.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "organizations:DescribeOrganization",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "cloudformation:ListStackSets",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:ListStackInstances",
            "cloudformation:DescribeStackSetOperation",
            "cloudformation:DeleteStackSet"
          ],
          "Resource": "arn:aws:cloudformation:*:*:stackset/AWS-QuickSetup-SSM*:*"
        },
        {
          "Effect": "Allow",
          "Action": "cloudformation:DeleteStackInstances",
          "Resource": [
            "arn:aws:cloudformation:*:*:stackset/AWS-QuickSetup-SSM*:*",
            "arn:aws:cloudformation:*:*:stackset-target/AWS-QuickSetup-SSM*:*",
            "arn:aws:cloudformation:*:*:type/resource/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "events:PutRule",
            "events:PutTargets"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "events:ManagedBy": "ssm.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "events:RemoveTargets",
            "events:DeleteRule"
          ],
          "Resource": [
            "arn:aws:events:*:*:rule/SSMExplorerManagedRule"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "events:DescribeRule",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "securityhub:DescribeHub",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v14",
    "IsDefaultVersion": true,
    "CreateDate": "2022-09-14T19:46:49+00:00"
  },
  "AmazonSageMakerAdmin-ServiceCatalogProductsServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "apigateway:GET",
            "apigateway:POST",
            "apigateway:PUT",
            "apigateway:PATCH",
            "apigateway:DELETE"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/sagemaker:launch-source": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "apigateway:POST"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringLike": {
              "aws:TagKeys": [
                "sagemaker:launch-source"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "apigateway:PATCH"
          ],
          "Resource": [
            "arn:aws:apigateway:*::/account"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:CreateStack",
            "cloudformation:UpdateStack",
            "cloudformation:DeleteStack"
          ],
          "Resource": "arn:aws:cloudformation:*:*:stack/SC-*",
          "Condition": {
            "ArnLikeIfExists": {
              "cloudformation:RoleArn": [
                "arn:aws:sts::*:assumed-role/AmazonSageMakerServiceCatalog*"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStacks"
          ],
          "Resource": "arn:aws:cloudformation:*:*:stack/SC-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:GetTemplateSummary",
            "cloudformation:ValidateTemplate"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "codebuild:CreateProject",
            "codebuild:DeleteProject",
            "codebuild:UpdateProject"
          ],
          "Resource": [
            "arn:aws:codebuild:*:*:project/sagemaker-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "codecommit:CreateCommit",
            "codecommit:CreateRepository",
            "codecommit:DeleteRepository",
            "codecommit:GetRepository",
            "codecommit:TagResource"
          ],
          "Resource": [
            "arn:aws:codecommit:*:*:sagemaker-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "codecommit:ListRepositories"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "codepipeline:CreatePipeline",
            "codepipeline:DeletePipeline",
            "codepipeline:GetPipeline",
            "codepipeline:GetPipelineState",
            "codepipeline:StartPipelineExecution",
            "codepipeline:TagResource",
            "codepipeline:UpdatePipeline"
          ],
          "Resource": [
            "arn:aws:codepipeline:*:*:sagemaker-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cognito-idp:CreateUserPool",
            "cognito-idp:TagResource"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringLike": {
              "aws:TagKeys": [
                "sagemaker:launch-source"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "cognito-idp:CreateGroup",
            "cognito-idp:CreateUserPoolDomain",
            "cognito-idp:CreateUserPoolClient",
            "cognito-idp:DeleteGroup",
            "cognito-idp:DeleteUserPool",
            "cognito-idp:DeleteUserPoolClient",
            "cognito-idp:DeleteUserPoolDomain",
            "cognito-idp:DescribeUserPool",
            "cognito-idp:DescribeUserPoolClient",
            "cognito-idp:UpdateUserPool",
            "cognito-idp:UpdateUserPoolClient"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/sagemaker:launch-source": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ecr:CreateRepository",
            "ecr:DeleteRepository",
            "ecr:TagResource"
          ],
          "Resource": [
            "arn:aws:ecr:*:*:repository/sagemaker-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "events:DescribeRule",
            "events:DeleteRule",
            "events:DisableRule",
            "events:EnableRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets"
          ],
          "Resource": [
            "arn:aws:events:*:*:rule/sagemaker-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "firehose:CreateDeliveryStream",
            "firehose:DeleteDeliveryStream",
            "firehose:DescribeDeliveryStream",
            "firehose:StartDeliveryStreamEncryption",
            "firehose:StopDeliveryStreamEncryption",
            "firehose:UpdateDestination"
          ],
          "Resource": "arn:aws:firehose:*:*:deliverystream/sagemaker-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "glue:CreateDatabase",
            "glue:DeleteDatabase"
          ],
          "Resource": [
            "arn:aws:glue:*:*:catalog",
            "arn:aws:glue:*:*:database/sagemaker-*",
            "arn:aws:glue:*:*:table/sagemaker-*",
            "arn:aws:glue:*:*:userDefinedFunction/sagemaker-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "glue:CreateClassifier",
            "glue:DeleteClassifier",
            "glue:DeleteCrawler",
            "glue:DeleteJob",
            "glue:DeleteTrigger",
            "glue:DeleteWorkflow",
            "glue:StopCrawler"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "glue:CreateWorkflow"
          ],
          "Resource": [
            "arn:aws:glue:*:*:workflow/sagemaker-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "glue:CreateJob"
          ],
          "Resource": [
            "arn:aws:glue:*:*:job/sagemaker-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "glue:CreateCrawler",
            "glue:GetCrawler"
          ],
          "Resource": [
            "arn:aws:glue:*:*:crawler/sagemaker-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "glue:CreateTrigger",
            "glue:GetTrigger"
          ],
          "Resource": [
            "arn:aws:glue:*:*:trigger/sagemaker-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalog*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "lambda:AddPermission",
            "lambda:CreateFunction",
            "lambda:DeleteFunction",
            "lambda:GetFunction",
            "lambda:GetFunctionConfiguration",
            "lambda:InvokeFunction",
            "lambda:RemovePermission"
          ],
          "Resource": [
            "arn:aws:lambda:*:*:function:sagemaker-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "lambda:TagResource",
          "Resource": [
            "arn:aws:lambda:*:*:function:sagemaker-*"
          ],
          "Condition": {
            "ForAllValues:StringLike": {
              "aws:TagKeys": [
                "sagemaker:*"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DeleteLogGroup",
            "logs:DeleteLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:PutRetentionPolicy"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/apigateway/AccessLogs/*",
            "arn:aws:logs:*:*:log-group::log-stream:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "s3:GetObject",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "s3:ExistingObjectTag/servicecatalog:provisioning": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "s3:GetObject",
          "Resource": [
            "arn:aws:s3:::sagemaker-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:DeleteBucketPolicy",
            "s3:GetBucketPolicy",
            "s3:PutBucketAcl",
            "s3:PutBucketNotification",
            "s3:PutBucketPolicy",
            "s3:PutBucketPublicAccessBlock",
            "s3:PutBucketLogging",
            "s3:PutEncryptionConfiguration",
            "s3:PutBucketCORS",
            "s3:PutBucketTagging",
            "s3:PutObjectTagging"
          ],
          "Resource": "arn:aws:s3:::sagemaker-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sagemaker:CreateEndpoint",
            "sagemaker:CreateEndpointConfig",
            "sagemaker:CreateModel",
            "sagemaker:CreateWorkteam",
            "sagemaker:DeleteEndpoint",
            "sagemaker:DeleteEndpointConfig",
            "sagemaker:DeleteModel",
            "sagemaker:DeleteWorkteam",
            "sagemaker:DescribeModel",
            "sagemaker:DescribeEndpointConfig",
            "sagemaker:DescribeEndpoint",
            "sagemaker:DescribeWorkteam",
            "sagemaker:CreateCodeRepository",
            "sagemaker:DescribeCodeRepository",
            "sagemaker:UpdateCodeRepository",
            "sagemaker:DeleteCodeRepository"
          ],
          "Resource": [
            "arn:aws:sagemaker:*:*:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "sagemaker:AddTags"
          ],
          "Resource": [
            "arn:aws:sagemaker:*:*:endpoint/*",
            "arn:aws:sagemaker:*:*:endpoint-config/*",
            "arn:aws:sagemaker:*:*:model/*",
            "arn:aws:sagemaker:*:*:pipeline/*",
            "arn:aws:sagemaker:*:*:project/*",
            "arn:aws:sagemaker:*:*:model-package/*"
          ],
          "Condition": {
            "ForAllValues:StringLike": {
              "aws:TagKeys": [
                "sagemaker:*"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "sagemaker:CreateImage",
            "sagemaker:DeleteImage",
            "sagemaker:DescribeImage",
            "sagemaker:UpdateImage",
            "sagemaker:ListTags"
          ],
          "Resource": [
            "arn:aws:sagemaker:*:*:image/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "states:CreateStateMachine",
            "states:DeleteStateMachine",
            "states:UpdateStateMachine"
          ],
          "Resource": [
            "arn:aws:states:*:*:stateMachine:sagemaker-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "codestar-connections:PassConnection",
          "Resource": "arn:aws:codestar-connections:*:*:connection/*",
          "Condition": {
            "StringEquals": {
              "codestar-connections:PassedToService": "codepipeline.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v7",
    "IsDefaultVersion": true,
    "CreateDate": "2022-08-02T19:12:55+00:00"
  },
  "AmazonSageMakerCanvasAIServicesAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "textract:AnalyzeDocument",
            "textract:AnalyzeExpense",
            "textract:AnalyzeID",
            "textract:StartDocumentAnalysis",
            "textract:StartExpenseAnalysis",
            "textract:GetDocumentAnalysis",
            "textract:GetExpenseAnalysis"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "rekognition:DetectLabels",
            "rekognition:DetectText"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "comprehend:BatchDetectDominantLanguage",
            "comprehend:BatchDetectEntities",
            "comprehend:BatchDetectSentiment",
            "comprehend:DetectPiiEntities",
            "comprehend:DetectEntities",
            "comprehend:DetectSentiment",
            "comprehend:DetectDominantLanguage"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "bedrock:InvokeModel",
            "bedrock:ListFoundationModels"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-09-30T00:15:02+00:00"
  },
  "AmazonSageMakerCanvasDataPrepFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "SageMakerListFeatureGroupOperation",
          "Effect": "Allow",
          "Action": "sagemaker:ListFeatureGroups",
          "Resource": "*"
        },
        {
          "Sid": "SageMakerFeatureGroupOperations",
          "Effect": "Allow",
          "Action": [
            "sagemaker:CreateFeatureGroup",
            "sagemaker:DescribeFeatureGroup"
          ],
          "Resource": "arn:aws:sagemaker:*:*:feature-group/*"
        },
        {
          "Sid": "SageMakerProcessingJobOperations",
          "Effect": "Allow",
          "Action": [
            "sagemaker:CreateProcessingJob",
            "sagemaker:DescribeProcessingJob",
            "sagemaker:addTags"
          ],
          "Resource": "arn:aws:sagemaker:*:*:processing-job/*canvas-data-prep*"
        },
        {
          "Sid": "SageMakerProcessingJobListOperation",
          "Effect": "Allow",
          "Action": "sagemaker:ListProcessingJobs",
          "Resource": "*"
        },
        {
          "Sid": "SageMakerPipelineOperations",
          "Effect": "Allow",
          "Action": [
            "sagemaker:DescribePipeline",
            "sagemaker:CreatePipeline",
            "sagemaker:UpdatePipeline",
            "sagemaker:DeletePipeline",
            "sagemaker:StartPipelineExecution",
            "sagemaker:ListPipelineExecutionSteps",
            "sagemaker:DescribePipelineExecution"
          ],
          "Resource": "arn:aws:sagemaker:*:*:pipeline/*canvas-data-prep*"
        },
        {
          "Sid": "KMSListOperations",
          "Effect": "Allow",
          "Action": "kms:ListAliases",
          "Resource": "*"
        },
        {
          "Sid": "KMSOperations",
          "Effect": "Allow",
          "Action": "kms:DescribeKey",
          "Resource": "arn:aws:kms:*:*:key/*"
        },
        {
          "Sid": "S3Operations",
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:PutObject",
            "s3:DeleteObject",
            "s3:GetBucketCors",
            "s3:GetBucketLocation",
            "s3:AbortMultipartUpload"
          ],
          "Resource": [
            "arn:aws:s3:::*SageMaker*",
            "arn:aws:s3:::*Sagemaker*",
            "arn:aws:s3:::*sagemaker*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        },
        {
          "Sid": "S3GetObjectOperation",
          "Effect": "Allow",
          "Action": "s3:GetObject",
          "Resource": "arn:aws:s3:::*",
          "Condition": {
            "StringEqualsIgnoreCase": {
              "s3:ExistingObjectTag/SageMaker": "true"
            },
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        },
        {
          "Sid": "S3ListOperations",
          "Effect": "Allow",
          "Action": [
            "s3:ListBucket",
            "s3:ListAllMyBuckets"
          ],
          "Resource": "*"
        },
        {
          "Sid": "IAMListOperations",
          "Effect": "Allow",
          "Action": "iam:ListRoles",
          "Resource": "*"
        },
        {
          "Sid": "IAMGetOperations",
          "Effect": "Allow",
          "Action": "iam:GetRole",
          "Resource": "arn:aws:iam::*:role/*"
        },
        {
          "Sid": "IAMPassOperation",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "sagemaker.amazonaws.com",
                "events.amazon.com"
              ]
            }
          }
        },
        {
          "Sid": "EventBridgeTagBasedOperations",
          "Effect": "Allow",
          "Action": [
            "events:DescribeRule",
            "events:PutRule",
            "events:PutTargets",
            "events:TagResource"
          ],
          "Resource": "arn:aws:events:*:*:rule/*",
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "sagemaker:is-canvas-data-prep-job",
                "sm_canvas_user_profile"
              ]
            },
            "StringEquals": {
              "aws:ResourceTag/sagemaker:is-canvas-data-prep-job": "true"
            }
          }
        },
        {
          "Sid": "EventBridgeListTagOperation",
          "Effect": "Allow",
          "Action": "events:ListTagsForResource",
          "Resource": "*"
        },
        {
          "Sid": "GlueOperations",
          "Effect": "Allow",
          "Action": [
            "glue:GetDatabases",
            "glue:GetTable",
            "glue:GetTables",
            "glue:SearchTables"
          ],
          "Resource": [
            "arn:aws:glue:*:*:table/*",
            "arn:aws:glue:*:*:catalog",
            "arn:aws:glue:*:*:database/*"
          ]
        },
        {
          "Sid": "EMROperations",
          "Effect": "Allow",
          "Action": [
            "elasticmapreduce:DescribeCluster",
            "elasticmapreduce:ListInstanceGroups"
          ],
          "Resource": "arn:aws:elasticmapreduce:*:*:cluster/*"
        },
        {
          "Sid": "EMRListOperation",
          "Effect": "Allow",
          "Action": "elasticmapreduce:ListClusters",
          "Resource": "*"
        },
        {
          "Sid": "AthenaListDataCatalogOperation",
          "Effect": "Allow",
          "Action": "athena:ListDataCatalogs",
          "Resource": "*"
        },
        {
          "Sid": "AthenaQueryExecutionOperations",
          "Effect": "Allow",
          "Action": [
            "athena:GetQueryExecution",
            "athena:GetQueryResults",
            "athena:StartQueryExecution",
            "athena:StopQueryExecution"
          ],
          "Resource": "arn:aws:athena:*:*:workgroup/*"
        },
        {
          "Sid": "AthenaDataCatalogOperations",
          "Effect": "Allow",
          "Action": [
            "athena:ListDatabases",
            "athena:ListTableMetadata"
          ],
          "Resource": "arn:aws:athena:*:*:datacatalog/*"
        },
        {
          "Sid": "RedshiftOperations",
          "Effect": "Allow",
          "Action": [
            "redshift-data:DescribeStatement",
            "redshift-data:CancelStatement",
            "redshift-data:GetStatementResult"
          ],
          "Resource": "*"
        },
        {
          "Sid": "RedshiftArnBasedOperations",
          "Effect": "Allow",
          "Action": [
            "redshift-data:ExecuteStatement",
            "redshift-data:ListSchemas",
            "redshift-data:ListTables"
          ],
          "Resource": "arn:aws:redshift:*:*:cluster:*"
        },
        {
          "Sid": "RedshiftGetCredentialsOperation",
          "Effect": "Allow",
          "Action": "redshift:GetClusterCredentials",
          "Resource": [
            "arn:aws:redshift:*:*:dbuser:*/sagemaker_access*",
            "arn:aws:redshift:*:*:dbname:*"
          ]
        },
        {
          "Sid": "SecretsManagerARNBasedOperation",
          "Effect": "Allow",
          "Action": "secretsmanager:CreateSecret",
          "Resource": "arn:aws:secretsmanager:*:*:secret:AmazonSageMaker-*"
        },
        {
          "Sid": "SecretManagerTagBasedOperation",
          "Effect": "Allow",
          "Action": [
            "secretsmanager:TagResource",
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetSecretValue"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:secret:AmazonSageMaker-*",
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "SageMaker"
              ]
            },
            "StringEquals": {
              "aws:RequestTag/SageMaker": "true"
            }
          }
        },
        {
          "Sid": "RDSOperation",
          "Effect": "Allow",
          "Action": "rds:DescribeDBInstances",
          "Resource": "*"
        },
        {
          "Sid": "LoggingOperation",
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/sagemaker/studio:*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-10-27T22:56:13+00:00"
  },
  "AmazonSageMakerCanvasDirectDeployAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "SageMakerEndpointPerms",
          "Effect": "Allow",
          "Action": [
            "sagemaker:CreateEndpoint",
            "sagemaker:CreateEndpointConfig",
            "sagemaker:DeleteEndpoint",
            "sagemaker:DescribeEndpoint",
            "sagemaker:DescribeEndpointConfig",
            "sagemaker:InvokeEndpoint",
            "sagemaker:UpdateEndpoint"
          ],
          "Resource": [
            "arn:aws:sagemaker:*:*:Canvas*",
            "arn:aws:sagemaker:*:*:canvas*"
          ]
        },
        {
          "Sid": "ReadCWInvocationMetrics",
          "Effect": "Allow",
          "Action": "cloudwatch:GetMetricData",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-10-06T18:11:53+00:00"
  },
  "AmazonSageMakerCanvasForecastAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:PutObject"
          ],
          "Resource": [
            "arn:aws:s3:::sagemaker-*/Canvas*",
            "arn:aws:s3:::sagemaker-*/canvas*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListBucket"
          ],
          "Resource": [
            "arn:aws:s3:::sagemaker-*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-08-24T20:04:20+00:00"
  },
  "AmazonSageMakerCanvasFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "SageMakerUserDetailsAndPackageOperations",
          "Effect": "Allow",
          "Action": [
            "sagemaker:DescribeDomain",
            "sagemaker:DescribeUserProfile",
            "sagemaker:ListTags",
            "sagemaker:ListModelPackages",
            "sagemaker:ListModelPackageGroups"
          ],
          "Resource": "*"
        },
        {
          "Sid": "SageMakerPackageGroupOperations",
          "Effect": "Allow",
          "Action": [
            "sagemaker:CreateModelPackageGroup",
            "sagemaker:CreateModelPackage",
            "sagemaker:DescribeModelPackageGroup",
            "sagemaker:DescribeModelPackage"
          ],
          "Resource": [
            "arn:aws:sagemaker:*:*:model-package/*",
            "arn:aws:sagemaker:*:*:model-package-group/*"
          ]
        },
        {
          "Sid": "SageMakerTrainingOperations",
          "Effect": "Allow",
          "Action": [
            "sagemaker:CreateCompilationJob",
            "sagemaker:CreateEndpoint",
            "sagemaker:CreateEndpointConfig",
            "sagemaker:CreateModel",
            "sagemaker:CreateProcessingJob",
            "sagemaker:CreateAutoMLJob",
            "sagemaker:CreateAutoMLJobV2",
            "sagemaker:DeleteEndpoint",
            "sagemaker:DescribeCompilationJob",
            "sagemaker:DescribeEndpoint",
            "sagemaker:DescribeEndpointConfig",
            "sagemaker:DescribeModel",
            "sagemaker:DescribeProcessingJob",
            "sagemaker:DescribeAutoMLJob",
            "sagemaker:DescribeAutoMLJobV2",
            "sagemaker:ListCandidatesForAutoMLJob",
            "sagemaker:AddTags",
            "sagemaker:DeleteApp"
          ],
          "Resource": [
            "arn:aws:sagemaker:*:*:*Canvas*",
            "arn:aws:sagemaker:*:*:*canvas*",
            "arn:aws:sagemaker:*:*:*model-compilation-*"
          ]
        },
        {
          "Sid": "SageMakerHostingOperations",
          "Effect": "Allow",
          "Action": [
            "sagemaker:DeleteEndpointConfig",
            "sagemaker:DeleteModel",
            "sagemaker:InvokeEndpoint"
          ],
          "Resource": [
            "arn:aws:sagemaker:*:*:*Canvas*",
            "arn:aws:sagemaker:*:*:*canvas*"
          ]
        },
        {
          "Sid": "EC2VPCOperation",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateVpcEndpoint",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcEndpointServices"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ECROperations",
          "Effect": "Allow",
          "Action": [
            "ecr:BatchGetImage",
            "ecr:GetDownloadUrlForLayer",
            "ecr:GetAuthorizationToken"
          ],
          "Resource": "*"
        },
        {
          "Sid": "IAMGetOperations",
          "Effect": "Allow",
          "Action": [
            "iam:GetRole"
          ],
          "Resource": "arn:aws:iam::*:role/*"
        },
        {
          "Sid": "IAMPassOperation",
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "arn:aws:iam::*:role/*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "sagemaker.amazonaws.com"
            }
          }
        },
        {
          "Sid": "LoggingOperation",
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/sagemaker/*"
        },
        {
          "Sid": "S3Operations",
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:PutObject",
            "s3:DeleteObject",
            "s3:CreateBucket",
            "s3:GetBucketCors",
            "s3:GetBucketLocation"
          ],
          "Resource": [
            "arn:aws:s3:::*SageMaker*",
            "arn:aws:s3:::*Sagemaker*",
            "arn:aws:s3:::*sagemaker*"
          ]
        },
        {
          "Sid": "ReadSageMakerJumpstartArtifacts",
          "Effect": "Allow",
          "Action": "s3:GetObject",
          "Resource": [
            "arn:aws:s3:::jumpstart-cache-prod-us-west-2/*",
            "arn:aws:s3:::jumpstart-cache-prod-us-east-1/*",
            "arn:aws:s3:::jumpstart-cache-prod-us-east-2/*",
            "arn:aws:s3:::jumpstart-cache-prod-eu-west-1/*",
            "arn:aws:s3:::jumpstart-cache-prod-eu-central-1/*",
            "arn:aws:s3:::jumpstart-cache-prod-ap-south-1/*",
            "arn:aws:s3:::jumpstart-cache-prod-ap-northeast-2/*",
            "arn:aws:s3:::jumpstart-cache-prod-ap-northeast-1/*",
            "arn:aws:s3:::jumpstart-cache-prod-ap-southeast-1/*",
            "arn:aws:s3:::jumpstart-cache-prod-ap-southeast-2/*"
          ]
        },
        {
          "Sid": "S3ListOperations",
          "Effect": "Allow",
          "Action": [
            "s3:ListBucket",
            "s3:ListAllMyBuckets"
          ],
          "Resource": "*"
        },
        {
          "Sid": "GlueOperations",
          "Effect": "Allow",
          "Action": "glue:SearchTables",
          "Resource": [
            "arn:aws:glue:*:*:table/*/*",
            "arn:aws:glue:*:*:database/*",
            "arn:aws:glue:*:*:catalog"
          ]
        },
        {
          "Sid": "SecretsManagerARNBasedOperation",
          "Effect": "Allow",
          "Action": [
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:CreateSecret",
            "secretsmanager:PutResourcePolicy"
          ],
          "Resource": [
            "arn:aws:secretsmanager:*:*:secret:AmazonSageMaker-*"
          ]
        },
        {
          "Sid": "SecretManagerTagBasedOperation",
          "Effect": "Allow",
          "Action": [
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetSecretValue"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "secretsmanager:ResourceTag/SageMaker": "true"
            }
          }
        },
        {
          "Sid": "RedshiftOperations",
          "Effect": "Allow",
          "Action": [
            "redshift-data:ExecuteStatement",
            "redshift-data:DescribeStatement",
            "redshift-data:CancelStatement",
            "redshift-data:GetStatementResult",
            "redshift-data:ListSchemas",
            "redshift-data:ListTables",
            "redshift-data:DescribeTable"
          ],
          "Resource": "*"
        },
        {
          "Sid": "RedshiftGetCredentialsOperation",
          "Effect": "Allow",
          "Action": [
            "redshift:GetClusterCredentials"
          ],
          "Resource": [
            "arn:aws:redshift:*:*:dbuser:*/sagemaker_access*",
            "arn:aws:redshift:*:*:dbname:*"
          ]
        },
        {
          "Sid": "ForecastOperations",
          "Effect": "Allow",
          "Action": [
            "forecast:CreateExplainabilityExport",
            "forecast:CreateExplainability",
            "forecast:CreateForecastEndpoint",
            "forecast:CreateAutoPredictor",
            "forecast:CreateDatasetImportJob",
            "forecast:CreateDatasetGroup",
            "forecast:CreateDataset",
            "forecast:CreateForecast",
            "forecast:CreateForecastExportJob",
            "forecast:CreatePredictorBacktestExportJob",
            "forecast:CreatePredictor",
            "forecast:DescribeExplainabilityExport",
            "forecast:DescribeExplainability",
            "forecast:DescribeAutoPredictor",
            "forecast:DescribeForecastEndpoint",
            "forecast:DescribeDatasetImportJob",
            "forecast:DescribeDataset",
            "forecast:DescribeForecast",
            "forecast:DescribeForecastExportJob",
            "forecast:DescribePredictorBacktestExportJob",
            "forecast:GetAccuracyMetrics",
            "forecast:InvokeForecastEndpoint",
            "forecast:GetRecentForecastContext",
            "forecast:DescribePredictor",
            "forecast:TagResource",
            "forecast:DeleteResourceTree"
          ],
          "Resource": [
            "arn:aws:forecast:*:*:*Canvas*"
          ]
        },
        {
          "Sid": "RDSOperation",
          "Effect": "Allow",
          "Action": "rds:DescribeDBInstances",
          "Resource": "*"
        },
        {
          "Sid": "IAMPassOperationForForecast",
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "arn:aws:iam::*:role/*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "forecast.amazonaws.com"
            }
          }
        },
        {
          "Sid": "AutoscalingOperations",
          "Effect": "Allow",
          "Action": [
            "application-autoscaling:PutScalingPolicy",
            "application-autoscaling:RegisterScalableTarget"
          ],
          "Resource": "arn:aws:application-autoscaling:*:*:scalable-target/*",
          "Condition": {
            "StringEquals": {
              "application-autoscaling:service-namespace": "sagemaker",
              "application-autoscaling:scalable-dimension": "sagemaker:variant:DesiredInstanceCount"
            }
          }
        }
      ]
    },
    "VersionId": "v7",
    "IsDefaultVersion": true,
    "CreateDate": "2023-09-30T00:15:42+00:00"
  },
  "AmazonSageMakerCoreServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterfacePermission"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "ec2:AuthorizedService": "sagemaker.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-21T21:40:47+00:00"
  },
  "AmazonSageMakerEdgeDeviceFleetPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "DeviceS3Access",
          "Effect": "Allow",
          "Action": [
            "s3:PutObject",
            "s3:GetBucketLocation"
          ],
          "Resource": [
            "arn:aws:s3:::*SageMaker*",
            "arn:aws:s3:::*Sagemaker*",
            "arn:aws:s3:::*sagemaker*"
          ]
        },
        {
          "Sid": "SageMakerEdgeApis",
          "Effect": "Allow",
          "Action": [
            "sagemaker:SendHeartbeat",
            "sagemaker:GetDeviceRegistration"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CreateIoTRoleAlias",
          "Effect": "Allow",
          "Action": [
            "iot:CreateRoleAlias",
            "iot:DescribeRoleAlias",
            "iot:UpdateRoleAlias",
            "iot:ListTagsForResource",
            "iot:TagResource"
          ],
          "Resource": [
            "arn:aws:iot:*:*:rolealias/SageMakerEdge*"
          ]
        },
        {
          "Sid": "CreateIoTRoleAliasIamPermissionsGetRole",
          "Effect": "Allow",
          "Action": [
            "iam:GetRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/*SageMaker*",
            "arn:aws:iam::*:role/*Sagemaker*",
            "arn:aws:iam::*:role/*sagemaker*"
          ]
        },
        {
          "Sid": "CreateIoTRoleAliasIamPermissionsPassRole",
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/*SageMaker*",
            "arn:aws:iam::*:role/*Sagemaker*",
            "arn:aws:iam::*:role/*sagemaker*"
          ],
          "Condition": {
            "StringEqualsIfExists": {
              "iam:PassedToService": [
                "iot.amazonaws.com",
                "credentials.iot.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-08T16:17:22+00:00"
  },
  "AmazonSageMakerFeatureStoreAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:PutObject",
            "s3:GetBucketAcl",
            "s3:PutObjectAcl"
          ],
          "Resource": [
            "arn:aws:s3:::*SageMaker*",
            "arn:aws:s3:::*Sagemaker*",
            "arn:aws:s3:::*sagemaker*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": [
            "arn:aws:s3:::*SageMaker*/metadata/*",
            "arn:aws:s3:::*Sagemaker*/metadata/*",
            "arn:aws:s3:::*sagemaker*/metadata/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "glue:GetTable",
            "glue:UpdateTable"
          ],
          "Resource": [
            "arn:aws:glue:*:*:catalog",
            "arn:aws:glue:*:*:database/sagemaker_featurestore",
            "arn:aws:glue:*:*:table/sagemaker_featurestore/*"
          ]
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2022-12-05T14:19:58+00:00"
  },
  "AmazonSageMakerFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "sagemaker:*",
            "sagemaker-geospatial:*"
          ],
          "NotResource": [
            "arn:aws:sagemaker:*:*:domain/*",
            "arn:aws:sagemaker:*:*:user-profile/*",
            "arn:aws:sagemaker:*:*:app/*",
            "arn:aws:sagemaker:*:*:space/*",
            "arn:aws:sagemaker:*:*:flow-definition/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "sagemaker:AddTags"
          ],
          "Resource": [
            "arn:aws:sagemaker:*:*:app/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "sagemaker:CreatePresignedDomainUrl",
            "sagemaker:DescribeDomain",
            "sagemaker:ListDomains",
            "sagemaker:DescribeUserProfile",
            "sagemaker:ListUserProfiles",
            "sagemaker:DescribeSpace",
            "sagemaker:ListSpaces",
            "sagemaker:*App",
            "sagemaker:ListApps"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "sagemaker:*",
          "Resource": [
            "arn:aws:sagemaker:*:*:flow-definition/*"
          ],
          "Condition": {
            "StringEqualsIfExists": {
              "sagemaker:WorkteamType": [
                "private-crowd",
                "vendor-crowd"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "application-autoscaling:DeleteScalingPolicy",
            "application-autoscaling:DeleteScheduledAction",
            "application-autoscaling:DeregisterScalableTarget",
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingActivities",
            "application-autoscaling:DescribeScalingPolicies",
            "application-autoscaling:DescribeScheduledActions",
            "application-autoscaling:PutScalingPolicy",
            "application-autoscaling:PutScheduledAction",
            "application-autoscaling:RegisterScalableTarget",
            "aws-marketplace:ViewSubscriptions",
            "cloudformation:GetTemplateSummary",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:PutMetricData",
            "codecommit:BatchGetRepositories",
            "codecommit:CreateRepository",
            "codecommit:GetRepository",
            "codecommit:List*",
            "cognito-idp:AdminAddUserToGroup",
            "cognito-idp:AdminCreateUser",
            "cognito-idp:AdminDeleteUser",
            "cognito-idp:AdminDisableUser",
            "cognito-idp:AdminEnableUser",
            "cognito-idp:AdminRemoveUserFromGroup",
            "cognito-idp:CreateGroup",
            "cognito-idp:CreateUserPool",
            "cognito-idp:CreateUserPoolClient",
            "cognito-idp:CreateUserPoolDomain",
            "cognito-idp:DescribeUserPool",
            "cognito-idp:DescribeUserPoolClient",
            "cognito-idp:List*",
            "cognito-idp:UpdateUserPool",
            "cognito-idp:UpdateUserPoolClient",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:CreateVpcEndpoint",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ecr:BatchCheckLayerAvailability",
            "ecr:BatchGetImage",
            "ecr:CreateRepository",
            "ecr:Describe*",
            "ecr:GetAuthorizationToken",
            "ecr:GetDownloadUrlForLayer",
            "ecr:StartImageScan",
            "elastic-inference:Connect",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DescribeMountTargets",
            "fsx:DescribeFileSystems",
            "glue:CreateJob",
            "glue:DeleteJob",
            "glue:GetJob*",
            "glue:GetTable*",
            "glue:GetWorkflowRun",
            "glue:ResetJobBookmark",
            "glue:StartJobRun",
            "glue:StartWorkflowRun",
            "glue:UpdateJob",
            "groundtruthlabeling:*",
            "iam:ListRoles",
            "kms:DescribeKey",
            "kms:ListAliases",
            "lambda:ListFunctions",
            "logs:CreateLogDelivery",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DeleteLogDelivery",
            "logs:Describe*",
            "logs:GetLogDelivery",
            "logs:GetLogEvents",
            "logs:ListLogDeliveries",
            "logs:PutLogEvents",
            "logs:PutResourcePolicy",
            "logs:UpdateLogDelivery",
            "robomaker:CreateSimulationApplication",
            "robomaker:DescribeSimulationApplication",
            "robomaker:DeleteSimulationApplication",
            "robomaker:CreateSimulationJob",
            "robomaker:DescribeSimulationJob",
            "robomaker:CancelSimulationJob",
            "secretsmanager:ListSecrets",
            "servicecatalog:Describe*",
            "servicecatalog:List*",
            "servicecatalog:ScanProvisionedProducts",
            "servicecatalog:SearchProducts",
            "servicecatalog:SearchProvisionedProducts",
            "sns:ListTopics",
            "tag:GetResources"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ecr:SetRepositoryPolicy",
            "ecr:CompleteLayerUpload",
            "ecr:BatchDeleteImage",
            "ecr:UploadLayerPart",
            "ecr:DeleteRepositoryPolicy",
            "ecr:InitiateLayerUpload",
            "ecr:DeleteRepository",
            "ecr:PutImage"
          ],
          "Resource": [
            "arn:aws:ecr:*:*:repository/*sagemaker*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "codecommit:GitPull",
            "codecommit:GitPush"
          ],
          "Resource": [
            "arn:aws:codecommit:*:*:*sagemaker*",
            "arn:aws:codecommit:*:*:*SageMaker*",
            "arn:aws:codecommit:*:*:*Sagemaker*"
          ]
        },
        {
          "Action": [
            "codebuild:BatchGetBuilds",
            "codebuild:StartBuild"
          ],
          "Resource": [
            "arn:aws:codebuild:*:*:project/sagemaker*",
            "arn:aws:codebuild:*:*:build/*"
          ],
          "Effect": "Allow"
        },
        {
          "Action": [
            "states:DescribeExecution",
            "states:GetExecutionHistory",
            "states:StartExecution",
            "states:StopExecution",
            "states:UpdateStateMachine"
          ],
          "Resource": [
            "arn:aws:states:*:*:statemachine:*sagemaker*",
            "arn:aws:states:*:*:execution:*sagemaker*:*"
          ],
          "Effect": "Allow"
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:CreateSecret"
          ],
          "Resource": [
            "arn:aws:secretsmanager:*:*:secret:AmazonSageMaker-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetSecretValue"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "secretsmanager:ResourceTag/SageMaker": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "servicecatalog:ProvisionProduct"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "servicecatalog:TerminateProvisionedProduct",
            "servicecatalog:UpdateProvisionedProduct"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "servicecatalog:userLevel": "self"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:PutObject",
            "s3:DeleteObject",
            "s3:AbortMultipartUpload"
          ],
          "Resource": [
            "arn:aws:s3:::*SageMaker*",
            "arn:aws:s3:::*Sagemaker*",
            "arn:aws:s3:::*sagemaker*",
            "arn:aws:s3:::*aws-glue*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": [
            "arn:aws:s3:::*"
          ],
          "Condition": {
            "StringEqualsIgnoreCase": {
              "s3:ExistingObjectTag/SageMaker": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": [
            "arn:aws:s3:::*"
          ],
          "Condition": {
            "StringEquals": {
              "s3:ExistingObjectTag/servicecatalog:provisioning": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:CreateBucket",
            "s3:GetBucketLocation",
            "s3:ListBucket",
            "s3:ListAllMyBuckets",
            "s3:GetBucketCors",
            "s3:PutBucketCors"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetBucketAcl",
            "s3:PutObjectAcl"
          ],
          "Resource": [
            "arn:aws:s3:::*SageMaker*",
            "arn:aws:s3:::*Sagemaker*",
            "arn:aws:s3:::*sagemaker*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "lambda:InvokeFunction"
          ],
          "Resource": [
            "arn:aws:lambda:*:*:function:*SageMaker*",
            "arn:aws:lambda:*:*:function:*sagemaker*",
            "arn:aws:lambda:*:*:function:*Sagemaker*",
            "arn:aws:lambda:*:*:function:*LabelingFunction*"
          ]
        },
        {
          "Action": "iam:CreateServiceLinkedRole",
          "Effect": "Allow",
          "Resource": "arn:aws:iam::*:role/aws-service-role/sagemaker.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_SageMakerEndpoint",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "sagemaker.application-autoscaling.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "robomaker.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "sns:Subscribe",
            "sns:CreateTopic",
            "sns:Publish"
          ],
          "Resource": [
            "arn:aws:sns:*:*:*SageMaker*",
            "arn:aws:sns:*:*:*Sagemaker*",
            "arn:aws:sns:*:*:*sagemaker*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "arn:aws:iam::*:role/*AmazonSageMaker*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "glue.amazonaws.com",
                "robomaker.amazonaws.com",
                "states.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "arn:aws:iam::*:role/*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "sagemaker.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "athena:ListDataCatalogs",
            "athena:ListDatabases",
            "athena:ListTableMetadata",
            "athena:GetQueryExecution",
            "athena:GetQueryResults",
            "athena:StartQueryExecution",
            "athena:StopQueryExecution"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "glue:CreateTable"
          ],
          "Resource": [
            "arn:aws:glue:*:*:table/*/sagemaker_tmp_*",
            "arn:aws:glue:*:*:table/sagemaker_featurestore/*",
            "arn:aws:glue:*:*:catalog",
            "arn:aws:glue:*:*:database/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "glue:UpdateTable"
          ],
          "Resource": [
            "arn:aws:glue:*:*:table/sagemaker_featurestore/*",
            "arn:aws:glue:*:*:catalog",
            "arn:aws:glue:*:*:database/sagemaker_featurestore"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "glue:DeleteTable"
          ],
          "Resource": [
            "arn:aws:glue:*:*:table/*/sagemaker_tmp_*",
            "arn:aws:glue:*:*:catalog",
            "arn:aws:glue:*:*:database/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "glue:GetDatabases",
            "glue:GetTable",
            "glue:GetTables"
          ],
          "Resource": [
            "arn:aws:glue:*:*:table/*",
            "arn:aws:glue:*:*:catalog",
            "arn:aws:glue:*:*:database/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "glue:CreateDatabase",
            "glue:GetDatabase"
          ],
          "Resource": [
            "arn:aws:glue:*:*:catalog",
            "arn:aws:glue:*:*:database/sagemaker_featurestore",
            "arn:aws:glue:*:*:database/sagemaker_processing",
            "arn:aws:glue:*:*:database/default",
            "arn:aws:glue:*:*:database/sagemaker_data_wrangler"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "redshift-data:ExecuteStatement",
            "redshift-data:DescribeStatement",
            "redshift-data:CancelStatement",
            "redshift-data:GetStatementResult",
            "redshift-data:ListSchemas",
            "redshift-data:ListTables"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "redshift:GetClusterCredentials"
          ],
          "Resource": [
            "arn:aws:redshift:*:*:dbuser:*/sagemaker_access*",
            "arn:aws:redshift:*:*:dbname:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "sagemaker:ListTags"
          ],
          "Resource": [
            "arn:aws:sagemaker:*:*:user-profile/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:ListStackResources"
          ],
          "Resource": "arn:aws:cloudformation:*:*:stack/SC-*"
        }
      ]
    },
    "VersionId": "v24",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-30T17:14:54+00:00"
  },
  "AmazonSageMakerGeospatialExecutionRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:AbortMultipartUpload",
            "s3:PutObject",
            "s3:GetObject",
            "s3:ListBucketMultipartUploads"
          ],
          "Resource": [
            "arn:aws:s3:::*SageMaker*",
            "arn:aws:s3:::*Sagemaker*",
            "arn:aws:s3:::*sagemaker*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "sagemaker-geospatial:GetEarthObservationJob",
          "Resource": "arn:aws:sagemaker-geospatial:*:*:earth-observation-job/*"
        },
        {
          "Effect": "Allow",
          "Action": "sagemaker-geospatial:GetRasterDataCollection",
          "Resource": "arn:aws:sagemaker-geospatial:*:*:raster-data-collection/*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-05-10T20:28:02+00:00"
  },
  "AmazonSageMakerGeospatialFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "sagemaker-geospatial:*",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "arn:aws:iam::*:role/*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "sagemaker-geospatial.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-30T10:06:48+00:00"
  },
  "AmazonSageMakerGroundTruthExecution": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "CustomLabelingJobs",
          "Effect": "Allow",
          "Action": [
            "lambda:InvokeFunction"
          ],
          "Resource": [
            "arn:aws:lambda:*:*:function:*GtRecipe*",
            "arn:aws:lambda:*:*:function:*LabelingFunction*",
            "arn:aws:lambda:*:*:function:*SageMaker*",
            "arn:aws:lambda:*:*:function:*sagemaker*",
            "arn:aws:lambda:*:*:function:*Sagemaker*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:AbortMultipartUpload",
            "s3:GetObject",
            "s3:PutObject"
          ],
          "Resource": [
            "arn:aws:s3:::*GroundTruth*",
            "arn:aws:s3:::*Groundtruth*",
            "arn:aws:s3:::*groundtruth*",
            "arn:aws:s3:::*SageMaker*",
            "arn:aws:s3:::*Sagemaker*",
            "arn:aws:s3:::*sagemaker*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": "*",
          "Condition": {
            "StringEqualsIgnoreCase": {
              "s3:ExistingObjectTag/SageMaker": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetBucketLocation",
            "s3:ListBucket"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CloudWatch",
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricData",
            "logs:CreateLogStream",
            "logs:CreateLogGroup",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents"
          ],
          "Resource": "*"
        },
        {
          "Sid": "StreamingQueue",
          "Effect": "Allow",
          "Action": [
            "sqs:CreateQueue",
            "sqs:DeleteMessage",
            "sqs:GetQueueAttributes",
            "sqs:GetQueueUrl",
            "sqs:ReceiveMessage",
            "sqs:SendMessage",
            "sqs:SetQueueAttributes"
          ],
          "Resource": "arn:aws:sqs:*:*:*GroundTruth*"
        },
        {
          "Sid": "StreamingTopicSubscribe",
          "Effect": "Allow",
          "Action": "sns:Subscribe",
          "Resource": [
            "arn:aws:sns:*:*:*GroundTruth*",
            "arn:aws:sns:*:*:*Groundtruth*",
            "arn:aws:sns:*:*:*groundTruth*",
            "arn:aws:sns:*:*:*groundtruth*",
            "arn:aws:sns:*:*:*SageMaker*",
            "arn:aws:sns:*:*:*Sagemaker*",
            "arn:aws:sns:*:*:*sageMaker*",
            "arn:aws:sns:*:*:*sagemaker*"
          ],
          "Condition": {
            "StringEquals": {
              "sns:Protocol": "sqs"
            },
            "StringLike": {
              "sns:Endpoint": "arn:aws:sqs:*:*:*GroundTruth*"
            }
          }
        },
        {
          "Sid": "StreamingTopic",
          "Effect": "Allow",
          "Action": [
            "sns:Publish"
          ],
          "Resource": [
            "arn:aws:sns:*:*:*GroundTruth*",
            "arn:aws:sns:*:*:*Groundtruth*",
            "arn:aws:sns:*:*:*groundTruth*",
            "arn:aws:sns:*:*:*groundtruth*",
            "arn:aws:sns:*:*:*SageMaker*",
            "arn:aws:sns:*:*:*Sagemaker*",
            "arn:aws:sns:*:*:*sageMaker*",
            "arn:aws:sns:*:*:*sagemaker*"
          ]
        },
        {
          "Sid": "StreamingTopicUnsubscribe",
          "Effect": "Allow",
          "Action": [
            "sns:Unsubscribe"
          ],
          "Resource": "*"
        },
        {
          "Sid": "WorkforceVPC",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateVpcEndpoint",
            "ec2:DescribeVpcEndpoints",
            "ec2:DeleteVpcEndpoints"
          ],
          "Resource": "*",
          "Condition": {
            "StringLikeIfExists": {
              "ec2:VpceServiceName": [
                "*sagemaker-task-resources*",
                "aws.sagemaker*labeling*"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2022-04-29T20:49:54+00:00"
  },
  "AmazonSageMakerMechanicalTurkAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "sagemaker:*FlowDefinition",
            "sagemaker:*FlowDefinitions"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-12-03T16:19:36+00:00"
  },
  "AmazonSageMakerModelGovernanceUseAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "sagemaker:ListMonitoringAlerts",
            "sagemaker:ListMonitoringExecutions",
            "sagemaker:UpdateMonitoringAlert",
            "sagemaker:StartMonitoringSchedule",
            "sagemaker:StopMonitoringSchedule",
            "sagemaker:ListMonitoringAlertHistory",
            "sagemaker:DescribeModelPackage",
            "sagemaker:DescribeModelPackageGroup",
            "sagemaker:CreateModelCard",
            "sagemaker:DescribeModelCard",
            "sagemaker:UpdateModelCard",
            "sagemaker:DeleteModelCard",
            "sagemaker:ListModelCards",
            "sagemaker:ListModelCardVersions",
            "sagemaker:CreateModelCardExportJob",
            "sagemaker:DescribeModelCardExportJob",
            "sagemaker:ListModelCardExportJobs"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sagemaker:ListTrainingJobs",
            "sagemaker:DescribeTrainingJob",
            "sagemaker:ListModels",
            "sagemaker:DescribeModel",
            "sagemaker:Search",
            "sagemaker:AddTags",
            "sagemaker:DeleteTags",
            "sagemaker:ListTags"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:ListAliases"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:PutObject",
            "s3:CreateBucket",
            "s3:GetBucketLocation"
          ],
          "Resource": [
            "arn:aws:s3:::*SageMaker*",
            "arn:aws:s3:::*Sagemaker*",
            "arn:aws:s3:::*sagemaker*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListBucket",
            "s3:ListAllMyBuckets"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-07-17T22:31:07+00:00"
  },
  "AmazonSageMakerModelRegistryFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "sagemaker:DescribeAction",
            "sagemaker:DescribeInferenceRecommendationsJob",
            "sagemaker:DescribeModelPackage",
            "sagemaker:DescribeModelPackageGroup",
            "sagemaker:DescribePipeline",
            "sagemaker:DescribePipelineExecution",
            "sagemaker:ListAssociations",
            "sagemaker:ListArtifacts",
            "sagemaker:ListModelMetadata",
            "sagemaker:ListModelPackages",
            "sagemaker:Search",
            "sagemaker:GetSearchSuggestions"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sagemaker:AddTags",
            "sagemaker:CreateModel",
            "sagemaker:CreateModelPackage",
            "sagemaker:CreateModelPackageGroup",
            "sagemaker:CreateEndpoint",
            "sagemaker:CreateEndpointConfig",
            "sagemaker:CreateInferenceRecommendationsJob",
            "sagemaker:DeleteModelPackage",
            "sagemaker:DeleteModelPackageGroup",
            "sagemaker:DeleteTags",
            "sagemaker:UpdateModelPackage"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": [
            "arn:aws:s3:::*SageMaker*",
            "arn:aws:s3:::*Sagemaker*",
            "arn:aws:s3:::*sagemaker*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListBucket",
            "s3:ListAllMyBuckets"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ecr:BatchGetImage",
            "ecr:DescribeImages"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "arn:aws:iam::*:role/*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "sagemaker.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "tag:GetResources"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "resource-groups:GetGroupQuery"
          ],
          "Resource": "arn:aws:resource-groups:*:*:group/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "resource-groups:ListGroupResources"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "resource-groups:CreateGroup",
            "resource-groups:Tag"
          ],
          "Resource": "arn:aws:resource-groups:*:*:group/*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:TagKeys": "sagemaker:collection"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "resource-groups:DeleteGroup",
          "Resource": "arn:aws:resource-groups:*:*:group/*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/sagemaker:collection": "true"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-04-13T05:20:48+00:00"
  },
  "AmazonSageMakerNotebooksServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "elasticfilesystem:CreateAccessPoint",
          "Resource": "arn:aws:elasticfilesystem:*:*:file-system/*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/ManagedByAmazonSageMakerResource": "*",
              "aws:RequestTag/ManagedByAmazonSageMakerResource": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticfilesystem:DeleteAccessPoint"
          ],
          "Resource": "arn:aws:elasticfilesystem:*:*:access-point/*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/ManagedByAmazonSageMakerResource": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "elasticfilesystem:CreateFileSystem",
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "aws:RequestTag/ManagedByAmazonSageMakerResource": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticfilesystem:CreateMountTarget",
            "elasticfilesystem:DeleteFileSystem",
            "elasticfilesystem:DeleteMountTarget"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/ManagedByAmazonSageMakerResource": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticfilesystem:DescribeAccessPoints",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DescribeMountTargets"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "elasticfilesystem:TagResource",
          "Resource": [
            "arn:aws:elasticfilesystem:*:*:access-point/*",
            "arn:aws:elasticfilesystem:*:*:file-system/*"
          ],
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/ManagedByAmazonSageMakerResource": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": [
            "arn:aws:ec2:*:*:network-interface/*",
            "arn:aws:ec2:*:*:security-group/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface",
            "ec2:CreateSecurityGroup",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:ModifyNetworkInterfaceAttribute"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DeleteSecurityGroup",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/ManagedByAmazonSageMakerResource": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "sso:CreateManagedApplicationInstance",
            "sso:DeleteManagedApplicationInstance",
            "sso:GetManagedApplicationInstance"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sagemaker:CreateUserProfile",
            "sagemaker:DescribeUserProfile"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v7",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-09T18:20:35+00:00"
  },
  "AmazonSageMakerPartnerServiceCatalogProductsApiGatewayServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "lambda:InvokeFunction",
          "Resource": "arn:aws:lambda:*:*:function:sagemaker-*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/sagemaker:project-name": "false",
              "aws:ResourceTag/sagemaker:partner": "false"
            },
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "sagemaker:InvokeEndpoint",
          "Resource": "arn:aws:sagemaker:*:*:endpoint/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/sagemaker:project-name": "false",
              "aws:ResourceTag/sagemaker:partner": "false"
            },
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-08-01T15:06:24+00:00"
  },
  "AmazonSageMakerPartnerServiceCatalogProductsCloudFormationServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsLambdaRole"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "lambda.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsApiGatewayRole"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "apigateway.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "lambda:DeleteFunction",
            "lambda:UpdateFunctionCode",
            "lambda:ListTags",
            "lambda:InvokeFunction"
          ],
          "Resource": [
            "arn:aws:lambda:*:*:function:sagemaker-*"
          ],
          "Condition": {
            "Null": {
              "aws:ResourceTag/sagemaker:project-name": "false",
              "aws:ResourceTag/sagemaker:partner": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "lambda:CreateFunction",
            "lambda:TagResource"
          ],
          "Resource": [
            "arn:aws:lambda:*:*:function:sagemaker-*"
          ],
          "Condition": {
            "Null": {
              "aws:ResourceTag/sagemaker:project-name": "false",
              "aws:ResourceTag/sagemaker:partner": "false"
            },
            "ForAnyValue:StringEquals": {
              "aws:TagKeys": [
                "sagemaker:project-name",
                "sagemaker:partner"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "lambda:PublishLayerVersion",
            "lambda:GetLayerVersion",
            "lambda:DeleteLayerVersion",
            "lambda:GetFunction"
          ],
          "Resource": [
            "arn:aws:lambda:*:*:layer:sagemaker-*",
            "arn:aws:lambda:*:*:function:sagemaker-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "apigateway:GET",
            "apigateway:DELETE",
            "apigateway:PATCH",
            "apigateway:POST",
            "apigateway:PUT"
          ],
          "Resource": [
            "arn:aws:apigateway:*::/restapis/*",
            "arn:aws:apigateway:*::/restapis"
          ],
          "Condition": {
            "Null": {
              "aws:ResourceTag/sagemaker:project-name": "false",
              "aws:ResourceTag/sagemaker:partner": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "apigateway:POST",
            "apigateway:PUT"
          ],
          "Resource": [
            "arn:aws:apigateway:*::/restapis",
            "arn:aws:apigateway:*::/tags/*"
          ],
          "Condition": {
            "Null": {
              "aws:ResourceTag/sagemaker:project-name": "false",
              "aws:ResourceTag/sagemaker:partner": "false"
            },
            "ForAnyValue:StringEquals": {
              "aws:TagKeys": [
                "sagemaker:project-name",
                "sagemaker:partner"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": [
            "arn:aws:s3:::sagemaker-*/lambda-auth-code/layer.zip"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-08-01T15:06:46+00:00"
  },
  "AmazonSageMakerPartnerServiceCatalogProductsLambdaServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "secretsmanager:GetSecretValue",
          "Resource": "arn:aws:secretsmanager:*:*:secret:*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/sagemaker:partner": false
            },
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-08-01T15:05:51+00:00"
  },
  "AmazonSageMakerPipelinesIntegrations": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "lambda:CreateFunction",
            "lambda:DeleteFunction",
            "lambda:GetFunction",
            "lambda:InvokeFunction",
            "lambda:UpdateFunctionCode"
          ],
          "Resource": [
            "arn:aws:lambda:*:*:function:*sagemaker*",
            "arn:aws:lambda:*:*:function:*sageMaker*",
            "arn:aws:lambda:*:*:function:*SageMaker*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "sqs:CreateQueue",
            "sqs:SendMessage"
          ],
          "Resource": [
            "arn:aws:sqs:*:*:*sagemaker*",
            "arn:aws:sqs:*:*:*sageMaker*",
            "arn:aws:sqs:*:*:*SageMaker*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "arn:aws:iam::*:role/*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "lambda.amazonaws.com",
                "elasticmapreduce.amazonaws.com",
                "ec2.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "events:DescribeRule",
            "events:PutRule",
            "events:PutTargets"
          ],
          "Resource": [
            "arn:aws:events:*:*:rule/SageMakerPipelineExecutionEMRStepStatusUpdateRule",
            "arn:aws:events:*:*:rule/SageMakerPipelineExecutionEMRClusterStatusUpdateRule"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticmapreduce:AddJobFlowSteps",
            "elasticmapreduce:CancelSteps",
            "elasticmapreduce:DescribeStep",
            "elasticmapreduce:RunJobFlow",
            "elasticmapreduce:DescribeCluster",
            "elasticmapreduce:TerminateJobFlows",
            "elasticmapreduce:ListSteps"
          ],
          "Resource": [
            "arn:aws:elasticmapreduce:*:*:cluster/*"
          ]
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-02-17T21:28:19+00:00"
  },
  "AmazonSageMakerReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "sagemaker:Describe*",
            "sagemaker:List*",
            "sagemaker:BatchGetMetrics",
            "sagemaker:GetDeviceRegistration",
            "sagemaker:GetDeviceFleetReport",
            "sagemaker:GetSearchSuggestions",
            "sagemaker:BatchGetRecord",
            "sagemaker:GetRecord",
            "sagemaker:Search",
            "sagemaker:QueryLineage",
            "sagemaker:GetLineageGroupPolicy",
            "sagemaker:BatchDescribeModelPackage",
            "sagemaker:GetModelPackageGroupPolicy"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingActivities",
            "application-autoscaling:DescribeScalingPolicies",
            "application-autoscaling:DescribeScheduledActions",
            "aws-marketplace:ViewSubscriptions",
            "cloudwatch:DescribeAlarms",
            "cognito-idp:DescribeUserPool",
            "cognito-idp:DescribeUserPoolClient",
            "cognito-idp:ListGroups",
            "cognito-idp:ListIdentityProviders",
            "cognito-idp:ListUserPoolClients",
            "cognito-idp:ListUserPools",
            "cognito-idp:ListUsers",
            "cognito-idp:ListUsersInGroup",
            "ecr:Describe*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v11",
    "IsDefaultVersion": true,
    "CreateDate": "2021-12-01T16:29:20+00:00"
  },
  "AmazonSageMakerServiceCatalogProductsApiGatewayServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogDelivery",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DeleteLogDelivery",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:DescribeResourcePolicies",
            "logs:DescribeDestinations",
            "logs:DescribeExportTasks",
            "logs:DescribeMetricFilters",
            "logs:DescribeQueries",
            "logs:DescribeQueryDefinitions",
            "logs:DescribeSubscriptionFilters",
            "logs:GetLogDelivery",
            "logs:GetLogEvents",
            "logs:PutLogEvents",
            "logs:PutResourcePolicy",
            "logs:UpdateLogDelivery"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/apigateway/*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-03-25T04:25:36+00:00"
  },
  "AmazonSageMakerServiceCatalogProductsCloudformationServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "sagemaker:AddAssociation",
            "sagemaker:AddTags",
            "sagemaker:AssociateTrialComponent",
            "sagemaker:BatchDescribeModelPackage",
            "sagemaker:BatchGetMetrics",
            "sagemaker:BatchGetRecord",
            "sagemaker:BatchPutMetrics",
            "sagemaker:CreateAction",
            "sagemaker:CreateAlgorithm",
            "sagemaker:CreateApp",
            "sagemaker:CreateAppImageConfig",
            "sagemaker:CreateArtifact",
            "sagemaker:CreateAutoMLJob",
            "sagemaker:CreateCodeRepository",
            "sagemaker:CreateCompilationJob",
            "sagemaker:CreateContext",
            "sagemaker:CreateDataQualityJobDefinition",
            "sagemaker:CreateDeviceFleet",
            "sagemaker:CreateDomain",
            "sagemaker:CreateEdgePackagingJob",
            "sagemaker:CreateEndpoint",
            "sagemaker:CreateEndpointConfig",
            "sagemaker:CreateExperiment",
            "sagemaker:CreateFeatureGroup",
            "sagemaker:CreateFlowDefinition",
            "sagemaker:CreateHumanTaskUi",
            "sagemaker:CreateHyperParameterTuningJob",
            "sagemaker:CreateImage",
            "sagemaker:CreateImageVersion",
            "sagemaker:CreateInferenceRecommendationsJob",
            "sagemaker:CreateLabelingJob",
            "sagemaker:CreateLineageGroupPolicy",
            "sagemaker:CreateModel",
            "sagemaker:CreateModelBiasJobDefinition",
            "sagemaker:CreateModelExplainabilityJobDefinition",
            "sagemaker:CreateModelPackage",
            "sagemaker:CreateModelPackageGroup",
            "sagemaker:CreateModelQualityJobDefinition",
            "sagemaker:CreateMonitoringSchedule",
            "sagemaker:CreateNotebookInstance",
            "sagemaker:CreateNotebookInstanceLifecycleConfig",
            "sagemaker:CreatePipeline",
            "sagemaker:CreatePresignedDomainUrl",
            "sagemaker:CreatePresignedNotebookInstanceUrl",
            "sagemaker:CreateProcessingJob",
            "sagemaker:CreateProject",
            "sagemaker:CreateTrainingJob",
            "sagemaker:CreateTransformJob",
            "sagemaker:CreateTrial",
            "sagemaker:CreateTrialComponent",
            "sagemaker:CreateUserProfile",
            "sagemaker:CreateWorkforce",
            "sagemaker:CreateWorkteam",
            "sagemaker:DeleteAction",
            "sagemaker:DeleteAlgorithm",
            "sagemaker:DeleteApp",
            "sagemaker:DeleteAppImageConfig",
            "sagemaker:DeleteArtifact",
            "sagemaker:DeleteAssociation",
            "sagemaker:DeleteCodeRepository",
            "sagemaker:DeleteContext",
            "sagemaker:DeleteDataQualityJobDefinition",
            "sagemaker:DeleteDeviceFleet",
            "sagemaker:DeleteDomain",
            "sagemaker:DeleteEndpoint",
            "sagemaker:DeleteEndpointConfig",
            "sagemaker:DeleteExperiment",
            "sagemaker:DeleteFeatureGroup",
            "sagemaker:DeleteFlowDefinition",
            "sagemaker:DeleteHumanLoop",
            "sagemaker:DeleteHumanTaskUi",
            "sagemaker:DeleteImage",
            "sagemaker:DeleteImageVersion",
            "sagemaker:DeleteLineageGroupPolicy",
            "sagemaker:DeleteModel",
            "sagemaker:DeleteModelBiasJobDefinition",
            "sagemaker:DeleteModelExplainabilityJobDefinition",
            "sagemaker:DeleteModelPackage",
            "sagemaker:DeleteModelPackageGroup",
            "sagemaker:DeleteModelPackageGroupPolicy",
            "sagemaker:DeleteModelQualityJobDefinition",
            "sagemaker:DeleteMonitoringSchedule",
            "sagemaker:DeleteNotebookInstance",
            "sagemaker:DeleteNotebookInstanceLifecycleConfig",
            "sagemaker:DeletePipeline",
            "sagemaker:DeleteProject",
            "sagemaker:DeleteRecord",
            "sagemaker:DeleteTags",
            "sagemaker:DeleteTrial",
            "sagemaker:DeleteTrialComponent",
            "sagemaker:DeleteUserProfile",
            "sagemaker:DeleteWorkforce",
            "sagemaker:DeleteWorkteam",
            "sagemaker:DeregisterDevices",
            "sagemaker:DescribeAction",
            "sagemaker:DescribeAlgorithm",
            "sagemaker:DescribeApp",
            "sagemaker:DescribeAppImageConfig",
            "sagemaker:DescribeArtifact",
            "sagemaker:DescribeAutoMLJob",
            "sagemaker:DescribeCodeRepository",
            "sagemaker:DescribeCompilationJob",
            "sagemaker:DescribeContext",
            "sagemaker:DescribeDataQualityJobDefinition",
            "sagemaker:DescribeDevice",
            "sagemaker:DescribeDeviceFleet",
            "sagemaker:DescribeDomain",
            "sagemaker:DescribeEdgePackagingJob",
            "sagemaker:DescribeEndpoint",
            "sagemaker:DescribeEndpointConfig",
            "sagemaker:DescribeExperiment",
            "sagemaker:DescribeFeatureGroup",
            "sagemaker:DescribeFlowDefinition",
            "sagemaker:DescribeHumanLoop",
            "sagemaker:DescribeHumanTaskUi",
            "sagemaker:DescribeHyperParameterTuningJob",
            "sagemaker:DescribeImage",
            "sagemaker:DescribeImageVersion",
            "sagemaker:DescribeInferenceRecommendationsJob",
            "sagemaker:DescribeLabelingJob",
            "sagemaker:DescribeLineageGroup",
            "sagemaker:DescribeModel",
            "sagemaker:DescribeModelBiasJobDefinition",
            "sagemaker:DescribeModelExplainabilityJobDefinition",
            "sagemaker:DescribeModelPackage",
            "sagemaker:DescribeModelPackageGroup",
            "sagemaker:DescribeModelQualityJobDefinition",
            "sagemaker:DescribeMonitoringSchedule",
            "sagemaker:DescribeNotebookInstance",
            "sagemaker:DescribeNotebookInstanceLifecycleConfig",
            "sagemaker:DescribePipeline",
            "sagemaker:DescribePipelineDefinitionForExecution",
            "sagemaker:DescribePipelineExecution",
            "sagemaker:DescribeProcessingJob",
            "sagemaker:DescribeProject",
            "sagemaker:DescribeSubscribedWorkteam",
            "sagemaker:DescribeTrainingJob",
            "sagemaker:DescribeTransformJob",
            "sagemaker:DescribeTrial",
            "sagemaker:DescribeTrialComponent",
            "sagemaker:DescribeUserProfile",
            "sagemaker:DescribeWorkforce",
            "sagemaker:DescribeWorkteam",
            "sagemaker:DisableSagemakerServicecatalogPortfolio",
            "sagemaker:DisassociateTrialComponent",
            "sagemaker:EnableSagemakerServicecatalogPortfolio",
            "sagemaker:GetDeviceFleetReport",
            "sagemaker:GetDeviceRegistration",
            "sagemaker:GetLineageGroupPolicy",
            "sagemaker:GetModelPackageGroupPolicy",
            "sagemaker:GetRecord",
            "sagemaker:GetSagemakerServicecatalogPortfolioStatus",
            "sagemaker:GetSearchSuggestions",
            "sagemaker:InvokeEndpoint",
            "sagemaker:InvokeEndpointAsync",
            "sagemaker:ListActions",
            "sagemaker:ListAlgorithms",
            "sagemaker:ListAppImageConfigs",
            "sagemaker:ListApps",
            "sagemaker:ListArtifacts",
            "sagemaker:ListAssociations",
            "sagemaker:ListAutoMLJobs",
            "sagemaker:ListCandidatesForAutoMLJob",
            "sagemaker:ListCodeRepositories",
            "sagemaker:ListCompilationJobs",
            "sagemaker:ListContexts",
            "sagemaker:ListDataQualityJobDefinitions",
            "sagemaker:ListDeviceFleets",
            "sagemaker:ListDevices",
            "sagemaker:ListDomains",
            "sagemaker:ListEdgePackagingJobs",
            "sagemaker:ListEndpointConfigs",
            "sagemaker:ListEndpoints",
            "sagemaker:ListExperiments",
            "sagemaker:ListFeatureGroups",
            "sagemaker:ListFlowDefinitions",
            "sagemaker:ListHumanLoops",
            "sagemaker:ListHumanTaskUis",
            "sagemaker:ListHyperParameterTuningJobs",
            "sagemaker:ListImageVersions",
            "sagemaker:ListImages",
            "sagemaker:ListInferenceRecommendationsJobs",
            "sagemaker:ListLabelingJobs",
            "sagemaker:ListLabelingJobsForWorkteam",
            "sagemaker:ListLineageGroups",
            "sagemaker:ListModelBiasJobDefinitions",
            "sagemaker:ListModelExplainabilityJobDefinitions",
            "sagemaker:ListModelMetadata",
            "sagemaker:ListModelPackageGroups",
            "sagemaker:ListModelPackages",
            "sagemaker:ListModelQualityJobDefinitions",
            "sagemaker:ListModels",
            "sagemaker:ListMonitoringExecutions",
            "sagemaker:ListMonitoringSchedules",
            "sagemaker:ListNotebookInstanceLifecycleConfigs",
            "sagemaker:ListNotebookInstances",
            "sagemaker:ListPipelineExecutionSteps",
            "sagemaker:ListPipelineExecutions",
            "sagemaker:ListPipelineParametersForExecution",
            "sagemaker:ListPipelines",
            "sagemaker:ListProcessingJobs",
            "sagemaker:ListProjects",
            "sagemaker:ListSubscribedWorkteams",
            "sagemaker:ListTags",
            "sagemaker:ListTrainingJobs",
            "sagemaker:ListTrainingJobsForHyperParameterTuningJob",
            "sagemaker:ListTransformJobs",
            "sagemaker:ListTrialComponents",
            "sagemaker:ListTrials",
            "sagemaker:ListUserProfiles",
            "sagemaker:ListWorkforces",
            "sagemaker:ListWorkteams",
            "sagemaker:PutLineageGroupPolicy",
            "sagemaker:PutModelPackageGroupPolicy",
            "sagemaker:PutRecord",
            "sagemaker:QueryLineage",
            "sagemaker:RegisterDevices",
            "sagemaker:RenderUiTemplate",
            "sagemaker:Search",
            "sagemaker:SendHeartbeat",
            "sagemaker:SendPipelineExecutionStepFailure",
            "sagemaker:SendPipelineExecutionStepSuccess",
            "sagemaker:StartHumanLoop",
            "sagemaker:StartMonitoringSchedule",
            "sagemaker:StartNotebookInstance",
            "sagemaker:StartPipelineExecution",
            "sagemaker:StopAutoMLJob",
            "sagemaker:StopCompilationJob",
            "sagemaker:StopEdgePackagingJob",
            "sagemaker:StopHumanLoop",
            "sagemaker:StopHyperParameterTuningJob",
            "sagemaker:StopInferenceRecommendationsJob",
            "sagemaker:StopLabelingJob",
            "sagemaker:StopMonitoringSchedule",
            "sagemaker:StopNotebookInstance",
            "sagemaker:StopPipelineExecution",
            "sagemaker:StopProcessingJob",
            "sagemaker:StopTrainingJob",
            "sagemaker:StopTransformJob",
            "sagemaker:UpdateAction",
            "sagemaker:UpdateAppImageConfig",
            "sagemaker:UpdateArtifact",
            "sagemaker:UpdateCodeRepository",
            "sagemaker:UpdateContext",
            "sagemaker:UpdateDeviceFleet",
            "sagemaker:UpdateDevices",
            "sagemaker:UpdateDomain",
            "sagemaker:UpdateEndpoint",
            "sagemaker:UpdateEndpointWeightsAndCapacities",
            "sagemaker:UpdateExperiment",
            "sagemaker:UpdateImage",
            "sagemaker:UpdateModelPackage",
            "sagemaker:UpdateMonitoringSchedule",
            "sagemaker:UpdateNotebookInstance",
            "sagemaker:UpdateNotebookInstanceLifecycleConfig",
            "sagemaker:UpdatePipeline",
            "sagemaker:UpdatePipelineExecution",
            "sagemaker:UpdateProject",
            "sagemaker:UpdateTrainingJob",
            "sagemaker:UpdateTrial",
            "sagemaker:UpdateTrialComponent",
            "sagemaker:UpdateUserProfile",
            "sagemaker:UpdateWorkforce",
            "sagemaker:UpdateWorkteam"
          ],
          "NotResource": [
            "arn:aws:sagemaker:*:*:domain/*",
            "arn:aws:sagemaker:*:*:user-profile/*",
            "arn:aws:sagemaker:*:*:app/*",
            "arn:aws:sagemaker:*:*:flow-definition/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsCodeBuildRole",
            "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsExecutionRole"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-03-25T04:26:40+00:00"
  },
  "AmazonSageMakerServiceCatalogProductsCodeBuildServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "codecommit:CancelUploadArchive",
            "codecommit:GetBranch",
            "codecommit:GetCommit",
            "codecommit:GetUploadArchiveStatus",
            "codecommit:UploadArchive"
          ],
          "Resource": "arn:aws:codecommit:*:*:sagemaker-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ecr:BatchCheckLayerAvailability",
            "ecr:BatchGetImage",
            "ecr:DescribeImageScanFindings",
            "ecr:DescribeRegistry",
            "ecr:DescribeImageReplicationStatus",
            "ecr:DescribeRepositories",
            "ecr:DescribeImageReplicationStatus",
            "ecr:GetAuthorizationToken",
            "ecr:GetDownloadUrlForLayer"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ecr:CompleteLayerUpload",
            "ecr:CreateRepository",
            "ecr:InitiateLayerUpload",
            "ecr:PutImage",
            "ecr:UploadLayerPart"
          ],
          "Resource": [
            "arn:aws:ecr:*:*:repository/sagemaker-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsEventsRole",
            "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsCodePipelineRole",
            "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsCloudformationRole",
            "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsCodeBuildRole",
            "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsExecutionRole"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "events.amazonaws.com",
                "codepipeline.amazonaws.com",
                "cloudformation.amazonaws.com",
                "codebuild.amazonaws.com",
                "sagemaker.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogDelivery",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DeleteLogDelivery",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:DescribeResourcePolicies",
            "logs:DescribeDestinations",
            "logs:DescribeExportTasks",
            "logs:DescribeMetricFilters",
            "logs:DescribeQueries",
            "logs:DescribeQueryDefinitions",
            "logs:DescribeSubscriptionFilters",
            "logs:GetLogDelivery",
            "logs:GetLogEvents",
            "logs:ListLogDeliveries",
            "logs:PutLogEvents",
            "logs:PutResourcePolicy",
            "logs:UpdateLogDelivery"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/codebuild/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:GetBucketAcl",
            "s3:GetBucketCors",
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ListBucketMultipartUploads",
            "s3:PutBucketCors",
            "s3:AbortMultipartUpload",
            "s3:DeleteObject",
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:PutObject"
          ],
          "Resource": [
            "arn:aws:s3:::aws-glue-*",
            "arn:aws:s3:::sagemaker-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "sagemaker:AddAssociation",
            "sagemaker:AddTags",
            "sagemaker:AssociateTrialComponent",
            "sagemaker:BatchDescribeModelPackage",
            "sagemaker:BatchGetMetrics",
            "sagemaker:BatchGetRecord",
            "sagemaker:BatchPutMetrics",
            "sagemaker:CreateAction",
            "sagemaker:CreateAlgorithm",
            "sagemaker:CreateApp",
            "sagemaker:CreateAppImageConfig",
            "sagemaker:CreateArtifact",
            "sagemaker:CreateAutoMLJob",
            "sagemaker:CreateCodeRepository",
            "sagemaker:CreateCompilationJob",
            "sagemaker:CreateContext",
            "sagemaker:CreateDataQualityJobDefinition",
            "sagemaker:CreateDeviceFleet",
            "sagemaker:CreateDomain",
            "sagemaker:CreateEdgePackagingJob",
            "sagemaker:CreateEndpoint",
            "sagemaker:CreateEndpointConfig",
            "sagemaker:CreateExperiment",
            "sagemaker:CreateFeatureGroup",
            "sagemaker:CreateFlowDefinition",
            "sagemaker:CreateHumanTaskUi",
            "sagemaker:CreateHyperParameterTuningJob",
            "sagemaker:CreateImage",
            "sagemaker:CreateImageVersion",
            "sagemaker:CreateInferenceRecommendationsJob",
            "sagemaker:CreateLabelingJob",
            "sagemaker:CreateLineageGroupPolicy",
            "sagemaker:CreateModel",
            "sagemaker:CreateModelBiasJobDefinition",
            "sagemaker:CreateModelExplainabilityJobDefinition",
            "sagemaker:CreateModelPackage",
            "sagemaker:CreateModelPackageGroup",
            "sagemaker:CreateModelQualityJobDefinition",
            "sagemaker:CreateMonitoringSchedule",
            "sagemaker:CreateNotebookInstance",
            "sagemaker:CreateNotebookInstanceLifecycleConfig",
            "sagemaker:CreatePipeline",
            "sagemaker:CreatePresignedDomainUrl",
            "sagemaker:CreatePresignedNotebookInstanceUrl",
            "sagemaker:CreateProcessingJob",
            "sagemaker:CreateProject",
            "sagemaker:CreateTrainingJob",
            "sagemaker:CreateTransformJob",
            "sagemaker:CreateTrial",
            "sagemaker:CreateTrialComponent",
            "sagemaker:CreateUserProfile",
            "sagemaker:CreateWorkforce",
            "sagemaker:CreateWorkteam",
            "sagemaker:DeleteAction",
            "sagemaker:DeleteAlgorithm",
            "sagemaker:DeleteApp",
            "sagemaker:DeleteAppImageConfig",
            "sagemaker:DeleteArtifact",
            "sagemaker:DeleteAssociation",
            "sagemaker:DeleteCodeRepository",
            "sagemaker:DeleteContext",
            "sagemaker:DeleteDataQualityJobDefinition",
            "sagemaker:DeleteDeviceFleet",
            "sagemaker:DeleteDomain",
            "sagemaker:DeleteEndpoint",
            "sagemaker:DeleteEndpointConfig",
            "sagemaker:DeleteExperiment",
            "sagemaker:DeleteFeatureGroup",
            "sagemaker:DeleteFlowDefinition",
            "sagemaker:DeleteHumanLoop",
            "sagemaker:DeleteHumanTaskUi",
            "sagemaker:DeleteImage",
            "sagemaker:DeleteImageVersion",
            "sagemaker:DeleteLineageGroupPolicy",
            "sagemaker:DeleteModel",
            "sagemaker:DeleteModelBiasJobDefinition",
            "sagemaker:DeleteModelExplainabilityJobDefinition",
            "sagemaker:DeleteModelPackage",
            "sagemaker:DeleteModelPackageGroup",
            "sagemaker:DeleteModelPackageGroupPolicy",
            "sagemaker:DeleteModelQualityJobDefinition",
            "sagemaker:DeleteMonitoringSchedule",
            "sagemaker:DeleteNotebookInstance",
            "sagemaker:DeleteNotebookInstanceLifecycleConfig",
            "sagemaker:DeletePipeline",
            "sagemaker:DeleteProject",
            "sagemaker:DeleteRecord",
            "sagemaker:DeleteTags",
            "sagemaker:DeleteTrial",
            "sagemaker:DeleteTrialComponent",
            "sagemaker:DeleteUserProfile",
            "sagemaker:DeleteWorkforce",
            "sagemaker:DeleteWorkteam",
            "sagemaker:DeregisterDevices",
            "sagemaker:DescribeAction",
            "sagemaker:DescribeAlgorithm",
            "sagemaker:DescribeApp",
            "sagemaker:DescribeAppImageConfig",
            "sagemaker:DescribeArtifact",
            "sagemaker:DescribeAutoMLJob",
            "sagemaker:DescribeCodeRepository",
            "sagemaker:DescribeCompilationJob",
            "sagemaker:DescribeContext",
            "sagemaker:DescribeDataQualityJobDefinition",
            "sagemaker:DescribeDevice",
            "sagemaker:DescribeDeviceFleet",
            "sagemaker:DescribeDomain",
            "sagemaker:DescribeEdgePackagingJob",
            "sagemaker:DescribeEndpoint",
            "sagemaker:DescribeEndpointConfig",
            "sagemaker:DescribeExperiment",
            "sagemaker:DescribeFeatureGroup",
            "sagemaker:DescribeFlowDefinition",
            "sagemaker:DescribeHumanLoop",
            "sagemaker:DescribeHumanTaskUi",
            "sagemaker:DescribeHyperParameterTuningJob",
            "sagemaker:DescribeImage",
            "sagemaker:DescribeImageVersion",
            "sagemaker:DescribeInferenceRecommendationsJob",
            "sagemaker:DescribeLabelingJob",
            "sagemaker:DescribeLineageGroup",
            "sagemaker:DescribeModel",
            "sagemaker:DescribeModelBiasJobDefinition",
            "sagemaker:DescribeModelExplainabilityJobDefinition",
            "sagemaker:DescribeModelPackage",
            "sagemaker:DescribeModelPackageGroup",
            "sagemaker:DescribeModelQualityJobDefinition",
            "sagemaker:DescribeMonitoringSchedule",
            "sagemaker:DescribeNotebookInstance",
            "sagemaker:DescribeNotebookInstanceLifecycleConfig",
            "sagemaker:DescribePipeline",
            "sagemaker:DescribePipelineDefinitionForExecution",
            "sagemaker:DescribePipelineExecution",
            "sagemaker:DescribeProcessingJob",
            "sagemaker:DescribeProject",
            "sagemaker:DescribeSubscribedWorkteam",
            "sagemaker:DescribeTrainingJob",
            "sagemaker:DescribeTransformJob",
            "sagemaker:DescribeTrial",
            "sagemaker:DescribeTrialComponent",
            "sagemaker:DescribeUserProfile",
            "sagemaker:DescribeWorkforce",
            "sagemaker:DescribeWorkteam",
            "sagemaker:DisableSagemakerServicecatalogPortfolio",
            "sagemaker:DisassociateTrialComponent",
            "sagemaker:EnableSagemakerServicecatalogPortfolio",
            "sagemaker:GetDeviceFleetReport",
            "sagemaker:GetDeviceRegistration",
            "sagemaker:GetLineageGroupPolicy",
            "sagemaker:GetModelPackageGroupPolicy",
            "sagemaker:GetRecord",
            "sagemaker:GetSagemakerServicecatalogPortfolioStatus",
            "sagemaker:GetSearchSuggestions",
            "sagemaker:InvokeEndpoint",
            "sagemaker:InvokeEndpointAsync",
            "sagemaker:ListActions",
            "sagemaker:ListAlgorithms",
            "sagemaker:ListAppImageConfigs",
            "sagemaker:ListApps",
            "sagemaker:ListArtifacts",
            "sagemaker:ListAssociations",
            "sagemaker:ListAutoMLJobs",
            "sagemaker:ListCandidatesForAutoMLJob",
            "sagemaker:ListCodeRepositories",
            "sagemaker:ListCompilationJobs",
            "sagemaker:ListContexts",
            "sagemaker:ListDataQualityJobDefinitions",
            "sagemaker:ListDeviceFleets",
            "sagemaker:ListDevices",
            "sagemaker:ListDomains",
            "sagemaker:ListEdgePackagingJobs",
            "sagemaker:ListEndpointConfigs",
            "sagemaker:ListEndpoints",
            "sagemaker:ListExperiments",
            "sagemaker:ListFeatureGroups",
            "sagemaker:ListFlowDefinitions",
            "sagemaker:ListHumanLoops",
            "sagemaker:ListHumanTaskUis",
            "sagemaker:ListHyperParameterTuningJobs",
            "sagemaker:ListImageVersions",
            "sagemaker:ListImages",
            "sagemaker:ListInferenceRecommendationsJobs",
            "sagemaker:ListLabelingJobs",
            "sagemaker:ListLabelingJobsForWorkteam",
            "sagemaker:ListLineageGroups",
            "sagemaker:ListModelBiasJobDefinitions",
            "sagemaker:ListModelExplainabilityJobDefinitions",
            "sagemaker:ListModelMetadata",
            "sagemaker:ListModelPackageGroups",
            "sagemaker:ListModelPackages",
            "sagemaker:ListModelQualityJobDefinitions",
            "sagemaker:ListModels",
            "sagemaker:ListMonitoringExecutions",
            "sagemaker:ListMonitoringSchedules",
            "sagemaker:ListNotebookInstanceLifecycleConfigs",
            "sagemaker:ListNotebookInstances",
            "sagemaker:ListPipelineExecutionSteps",
            "sagemaker:ListPipelineExecutions",
            "sagemaker:ListPipelineParametersForExecution",
            "sagemaker:ListPipelines",
            "sagemaker:ListProcessingJobs",
            "sagemaker:ListProjects",
            "sagemaker:ListSubscribedWorkteams",
            "sagemaker:ListTags",
            "sagemaker:ListTrainingJobs",
            "sagemaker:ListTrainingJobsForHyperParameterTuningJob",
            "sagemaker:ListTransformJobs",
            "sagemaker:ListTrialComponents",
            "sagemaker:ListTrials",
            "sagemaker:ListUserProfiles",
            "sagemaker:ListWorkforces",
            "sagemaker:ListWorkteams",
            "sagemaker:PutLineageGroupPolicy",
            "sagemaker:PutModelPackageGroupPolicy",
            "sagemaker:PutRecord",
            "sagemaker:QueryLineage",
            "sagemaker:RegisterDevices",
            "sagemaker:RenderUiTemplate",
            "sagemaker:Search",
            "sagemaker:SendHeartbeat",
            "sagemaker:SendPipelineExecutionStepFailure",
            "sagemaker:SendPipelineExecutionStepSuccess",
            "sagemaker:StartHumanLoop",
            "sagemaker:StartMonitoringSchedule",
            "sagemaker:StartNotebookInstance",
            "sagemaker:StartPipelineExecution",
            "sagemaker:StopAutoMLJob",
            "sagemaker:StopCompilationJob",
            "sagemaker:StopEdgePackagingJob",
            "sagemaker:StopHumanLoop",
            "sagemaker:StopHyperParameterTuningJob",
            "sagemaker:StopInferenceRecommendationsJob",
            "sagemaker:StopLabelingJob",
            "sagemaker:StopMonitoringSchedule",
            "sagemaker:StopNotebookInstance",
            "sagemaker:StopPipelineExecution",
            "sagemaker:StopProcessingJob",
            "sagemaker:StopTrainingJob",
            "sagemaker:StopTransformJob",
            "sagemaker:UpdateAction",
            "sagemaker:UpdateAppImageConfig",
            "sagemaker:UpdateArtifact",
            "sagemaker:UpdateCodeRepository",
            "sagemaker:UpdateContext",
            "sagemaker:UpdateDeviceFleet",
            "sagemaker:UpdateDevices",
            "sagemaker:UpdateDomain",
            "sagemaker:UpdateEndpoint",
            "sagemaker:UpdateEndpointWeightsAndCapacities",
            "sagemaker:UpdateExperiment",
            "sagemaker:UpdateImage",
            "sagemaker:UpdateModelPackage",
            "sagemaker:UpdateMonitoringSchedule",
            "sagemaker:UpdateNotebookInstance",
            "sagemaker:UpdateNotebookInstanceLifecycleConfig",
            "sagemaker:UpdatePipeline",
            "sagemaker:UpdatePipelineExecution",
            "sagemaker:UpdateProject",
            "sagemaker:UpdateTrainingJob",
            "sagemaker:UpdateTrial",
            "sagemaker:UpdateTrialComponent",
            "sagemaker:UpdateUserProfile",
            "sagemaker:UpdateWorkforce",
            "sagemaker:UpdateWorkteam"
          ],
          "Resource": [
            "arn:aws:sagemaker:*:*:endpoint/*",
            "arn:aws:sagemaker:*:*:endpoint-config/*",
            "arn:aws:sagemaker:*:*:model/*",
            "arn:aws:sagemaker:*:*:pipeline/*",
            "arn:aws:sagemaker:*:*:project/*",
            "arn:aws:sagemaker:*:*:model-package/*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-03-25T04:27:46+00:00"
  },
  "AmazonSageMakerServiceCatalogProductsCodePipelineServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:CreateChangeSet",
            "cloudformation:CreateStack",
            "cloudformation:DescribeChangeSet",
            "cloudformation:DeleteChangeSet",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeStacks",
            "cloudformation:ExecuteChangeSet",
            "cloudformation:SetStackPolicy",
            "cloudformation:UpdateStack"
          ],
          "Resource": "arn:aws:cloudformation:*:*:stack/sagemaker-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:AbortMultipartUpload",
            "s3:DeleteObject",
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:PutObject"
          ],
          "Resource": [
            "arn:aws:s3:::sagemaker-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsCloudformationRole"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "codebuild:BatchGetBuilds",
            "codebuild:StartBuild"
          ],
          "Resource": [
            "arn:aws:codebuild:*:*:project/sagemaker-*",
            "arn:aws:codebuild:*:*:build/sagemaker-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "codecommit:CancelUploadArchive",
            "codecommit:GetBranch",
            "codecommit:GetCommit",
            "codecommit:GetUploadArchiveStatus",
            "codecommit:UploadArchive"
          ],
          "Resource": "arn:aws:codecommit:*:*:sagemaker-*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-02-22T09:53:17+00:00"
  },
  "AmazonSageMakerServiceCatalogProductsEventsServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "codepipeline:StartPipelineExecution",
          "Resource": "arn:aws:codepipeline:*:*:sagemaker-*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-02-22T09:53:59+00:00"
  },
  "AmazonSageMakerServiceCatalogProductsFirehoseServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "firehose:PutRecord",
            "firehose:PutRecordBatch"
          ],
          "Resource": "arn:aws:firehose:*:*:deliverystream/sagemaker-*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-02-22T09:54:35+00:00"
  },
  "AmazonSageMakerServiceCatalogProductsGlueServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "glue:BatchCreatePartition",
            "glue:BatchDeletePartition",
            "glue:BatchDeleteTable",
            "glue:BatchDeleteTableVersion",
            "glue:BatchGetPartition",
            "glue:CreateDatabase",
            "glue:CreatePartition",
            "glue:CreateTable",
            "glue:DeletePartition",
            "glue:DeleteTable",
            "glue:DeleteTableVersion",
            "glue:GetDatabase",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:GetTable",
            "glue:GetTables",
            "glue:GetTableVersion",
            "glue:GetTableVersions",
            "glue:SearchTables",
            "glue:UpdatePartition",
            "glue:UpdateTable",
            "glue:GetUserDefinedFunctions"
          ],
          "Resource": [
            "arn:aws:glue:*:*:catalog",
            "arn:aws:glue:*:*:database/default",
            "arn:aws:glue:*:*:database/global_temp",
            "arn:aws:glue:*:*:database/sagemaker-*",
            "arn:aws:glue:*:*:table/sagemaker-*",
            "arn:aws:glue:*:*:tableVersion/sagemaker-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:GetBucketAcl",
            "s3:GetBucketCors",
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ListBucketMultipartUploads",
            "s3:PutBucketCors"
          ],
          "Resource": [
            "arn:aws:s3:::aws-glue-*",
            "arn:aws:s3:::sagemaker-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:AbortMultipartUpload",
            "s3:DeleteObject",
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:PutObject"
          ],
          "Resource": [
            "arn:aws:s3:::aws-glue-*",
            "arn:aws:s3:::sagemaker-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogDelivery",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DeleteLogDelivery",
            "logs:Describe*",
            "logs:GetLogDelivery",
            "logs:GetLogEvents",
            "logs:ListLogDeliveries",
            "logs:PutLogEvents",
            "logs:PutResourcePolicy",
            "logs:UpdateLogDelivery"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/glue/*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-08-26T19:13:02+00:00"
  },
  "AmazonSageMakerServiceCatalogProductsLambdaServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ecr:DescribeImages",
            "ecr:BatchDeleteImage",
            "ecr:CompleteLayerUpload",
            "ecr:CreateRepository",
            "ecr:DeleteRepository",
            "ecr:InitiateLayerUpload",
            "ecr:PutImage",
            "ecr:UploadLayerPart"
          ],
          "Resource": [
            "arn:aws:ecr:*:*:repository/sagemaker-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "events:DeleteRule",
            "events:DescribeRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets"
          ],
          "Resource": [
            "arn:aws:events:*:*:rule/sagemaker-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:GetBucketAcl",
            "s3:GetBucketCors",
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ListBucketMultipartUploads",
            "s3:PutBucketCors"
          ],
          "Resource": [
            "arn:aws:s3:::aws-glue-*",
            "arn:aws:s3:::sagemaker-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:AbortMultipartUpload",
            "s3:DeleteObject",
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:PutObject"
          ],
          "Resource": [
            "arn:aws:s3:::aws-glue-*",
            "arn:aws:s3:::sagemaker-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "sagemaker:AddAssociation",
            "sagemaker:AddTags",
            "sagemaker:AssociateTrialComponent",
            "sagemaker:BatchDescribeModelPackage",
            "sagemaker:BatchGetMetrics",
            "sagemaker:BatchGetRecord",
            "sagemaker:BatchPutMetrics",
            "sagemaker:CreateAction",
            "sagemaker:CreateAlgorithm",
            "sagemaker:CreateApp",
            "sagemaker:CreateAppImageConfig",
            "sagemaker:CreateArtifact",
            "sagemaker:CreateAutoMLJob",
            "sagemaker:CreateCodeRepository",
            "sagemaker:CreateCompilationJob",
            "sagemaker:CreateContext",
            "sagemaker:CreateDataQualityJobDefinition",
            "sagemaker:CreateDeviceFleet",
            "sagemaker:CreateDomain",
            "sagemaker:CreateEdgePackagingJob",
            "sagemaker:CreateEndpoint",
            "sagemaker:CreateEndpointConfig",
            "sagemaker:CreateExperiment",
            "sagemaker:CreateFeatureGroup",
            "sagemaker:CreateFlowDefinition",
            "sagemaker:CreateHumanTaskUi",
            "sagemaker:CreateHyperParameterTuningJob",
            "sagemaker:CreateImage",
            "sagemaker:CreateImageVersion",
            "sagemaker:CreateInferenceRecommendationsJob",
            "sagemaker:CreateLabelingJob",
            "sagemaker:CreateLineageGroupPolicy",
            "sagemaker:CreateModel",
            "sagemaker:CreateModelBiasJobDefinition",
            "sagemaker:CreateModelExplainabilityJobDefinition",
            "sagemaker:CreateModelPackage",
            "sagemaker:CreateModelPackageGroup",
            "sagemaker:CreateModelQualityJobDefinition",
            "sagemaker:CreateMonitoringSchedule",
            "sagemaker:CreateNotebookInstance",
            "sagemaker:CreateNotebookInstanceLifecycleConfig",
            "sagemaker:CreatePipeline",
            "sagemaker:CreatePresignedDomainUrl",
            "sagemaker:CreatePresignedNotebookInstanceUrl",
            "sagemaker:CreateProcessingJob",
            "sagemaker:CreateProject",
            "sagemaker:CreateTrainingJob",
            "sagemaker:CreateTransformJob",
            "sagemaker:CreateTrial",
            "sagemaker:CreateTrialComponent",
            "sagemaker:CreateUserProfile",
            "sagemaker:CreateWorkforce",
            "sagemaker:CreateWorkteam",
            "sagemaker:DeleteAction",
            "sagemaker:DeleteAlgorithm",
            "sagemaker:DeleteApp",
            "sagemaker:DeleteAppImageConfig",
            "sagemaker:DeleteArtifact",
            "sagemaker:DeleteAssociation",
            "sagemaker:DeleteCodeRepository",
            "sagemaker:DeleteContext",
            "sagemaker:DeleteDataQualityJobDefinition",
            "sagemaker:DeleteDeviceFleet",
            "sagemaker:DeleteDomain",
            "sagemaker:DeleteEndpoint",
            "sagemaker:DeleteEndpointConfig",
            "sagemaker:DeleteExperiment",
            "sagemaker:DeleteFeatureGroup",
            "sagemaker:DeleteFlowDefinition",
            "sagemaker:DeleteHumanLoop",
            "sagemaker:DeleteHumanTaskUi",
            "sagemaker:DeleteImage",
            "sagemaker:DeleteImageVersion",
            "sagemaker:DeleteLineageGroupPolicy",
            "sagemaker:DeleteModel",
            "sagemaker:DeleteModelBiasJobDefinition",
            "sagemaker:DeleteModelExplainabilityJobDefinition",
            "sagemaker:DeleteModelPackage",
            "sagemaker:DeleteModelPackageGroup",
            "sagemaker:DeleteModelPackageGroupPolicy",
            "sagemaker:DeleteModelQualityJobDefinition",
            "sagemaker:DeleteMonitoringSchedule",
            "sagemaker:DeleteNotebookInstance",
            "sagemaker:DeleteNotebookInstanceLifecycleConfig",
            "sagemaker:DeletePipeline",
            "sagemaker:DeleteProject",
            "sagemaker:DeleteRecord",
            "sagemaker:DeleteTags",
            "sagemaker:DeleteTrial",
            "sagemaker:DeleteTrialComponent",
            "sagemaker:DeleteUserProfile",
            "sagemaker:DeleteWorkforce",
            "sagemaker:DeleteWorkteam",
            "sagemaker:DeregisterDevices",
            "sagemaker:DescribeAction",
            "sagemaker:DescribeAlgorithm",
            "sagemaker:DescribeApp",
            "sagemaker:DescribeAppImageConfig",
            "sagemaker:DescribeArtifact",
            "sagemaker:DescribeAutoMLJob",
            "sagemaker:DescribeCodeRepository",
            "sagemaker:DescribeCompilationJob",
            "sagemaker:DescribeContext",
            "sagemaker:DescribeDataQualityJobDefinition",
            "sagemaker:DescribeDevice",
            "sagemaker:DescribeDeviceFleet",
            "sagemaker:DescribeDomain",
            "sagemaker:DescribeEdgePackagingJob",
            "sagemaker:DescribeEndpoint",
            "sagemaker:DescribeEndpointConfig",
            "sagemaker:DescribeExperiment",
            "sagemaker:DescribeFeatureGroup",
            "sagemaker:DescribeFlowDefinition",
            "sagemaker:DescribeHumanLoop",
            "sagemaker:DescribeHumanTaskUi",
            "sagemaker:DescribeHyperParameterTuningJob",
            "sagemaker:DescribeImage",
            "sagemaker:DescribeImageVersion",
            "sagemaker:DescribeInferenceRecommendationsJob",
            "sagemaker:DescribeLabelingJob",
            "sagemaker:DescribeLineageGroup",
            "sagemaker:DescribeModel",
            "sagemaker:DescribeModelBiasJobDefinition",
            "sagemaker:DescribeModelExplainabilityJobDefinition",
            "sagemaker:DescribeModelPackage",
            "sagemaker:DescribeModelPackageGroup",
            "sagemaker:DescribeModelQualityJobDefinition",
            "sagemaker:DescribeMonitoringSchedule",
            "sagemaker:DescribeNotebookInstance",
            "sagemaker:DescribeNotebookInstanceLifecycleConfig",
            "sagemaker:DescribePipeline",
            "sagemaker:DescribePipelineDefinitionForExecution",
            "sagemaker:DescribePipelineExecution",
            "sagemaker:DescribeProcessingJob",
            "sagemaker:DescribeProject",
            "sagemaker:DescribeSubscribedWorkteam",
            "sagemaker:DescribeTrainingJob",
            "sagemaker:DescribeTransformJob",
            "sagemaker:DescribeTrial",
            "sagemaker:DescribeTrialComponent",
            "sagemaker:DescribeUserProfile",
            "sagemaker:DescribeWorkforce",
            "sagemaker:DescribeWorkteam",
            "sagemaker:DisableSagemakerServicecatalogPortfolio",
            "sagemaker:DisassociateTrialComponent",
            "sagemaker:EnableSagemakerServicecatalogPortfolio",
            "sagemaker:GetDeviceFleetReport",
            "sagemaker:GetDeviceRegistration",
            "sagemaker:GetLineageGroupPolicy",
            "sagemaker:GetModelPackageGroupPolicy",
            "sagemaker:GetRecord",
            "sagemaker:GetSagemakerServicecatalogPortfolioStatus",
            "sagemaker:GetSearchSuggestions",
            "sagemaker:InvokeEndpoint",
            "sagemaker:InvokeEndpointAsync",
            "sagemaker:ListActions",
            "sagemaker:ListAlgorithms",
            "sagemaker:ListAppImageConfigs",
            "sagemaker:ListApps",
            "sagemaker:ListArtifacts",
            "sagemaker:ListAssociations",
            "sagemaker:ListAutoMLJobs",
            "sagemaker:ListCandidatesForAutoMLJob",
            "sagemaker:ListCodeRepositories",
            "sagemaker:ListCompilationJobs",
            "sagemaker:ListContexts",
            "sagemaker:ListDataQualityJobDefinitions",
            "sagemaker:ListDeviceFleets",
            "sagemaker:ListDevices",
            "sagemaker:ListDomains",
            "sagemaker:ListEdgePackagingJobs",
            "sagemaker:ListEndpointConfigs",
            "sagemaker:ListEndpoints",
            "sagemaker:ListExperiments",
            "sagemaker:ListFeatureGroups",
            "sagemaker:ListFlowDefinitions",
            "sagemaker:ListHumanLoops",
            "sagemaker:ListHumanTaskUis",
            "sagemaker:ListHyperParameterTuningJobs",
            "sagemaker:ListImageVersions",
            "sagemaker:ListImages",
            "sagemaker:ListInferenceRecommendationsJobs",
            "sagemaker:ListLabelingJobs",
            "sagemaker:ListLabelingJobsForWorkteam",
            "sagemaker:ListLineageGroups",
            "sagemaker:ListModelBiasJobDefinitions",
            "sagemaker:ListModelExplainabilityJobDefinitions",
            "sagemaker:ListModelMetadata",
            "sagemaker:ListModelPackageGroups",
            "sagemaker:ListModelPackages",
            "sagemaker:ListModelQualityJobDefinitions",
            "sagemaker:ListModels",
            "sagemaker:ListMonitoringExecutions",
            "sagemaker:ListMonitoringSchedules",
            "sagemaker:ListNotebookInstanceLifecycleConfigs",
            "sagemaker:ListNotebookInstances",
            "sagemaker:ListPipelineExecutionSteps",
            "sagemaker:ListPipelineExecutions",
            "sagemaker:ListPipelineParametersForExecution",
            "sagemaker:ListPipelines",
            "sagemaker:ListProcessingJobs",
            "sagemaker:ListProjects",
            "sagemaker:ListSubscribedWorkteams",
            "sagemaker:ListTags",
            "sagemaker:ListTrainingJobs",
            "sagemaker:ListTrainingJobsForHyperParameterTuningJob",
            "sagemaker:ListTransformJobs",
            "sagemaker:ListTrialComponents",
            "sagemaker:ListTrials",
            "sagemaker:ListUserProfiles",
            "sagemaker:ListWorkforces",
            "sagemaker:ListWorkteams",
            "sagemaker:PutLineageGroupPolicy",
            "sagemaker:PutModelPackageGroupPolicy",
            "sagemaker:PutRecord",
            "sagemaker:QueryLineage",
            "sagemaker:RegisterDevices",
            "sagemaker:RenderUiTemplate",
            "sagemaker:Search",
            "sagemaker:SendHeartbeat",
            "sagemaker:SendPipelineExecutionStepFailure",
            "sagemaker:SendPipelineExecutionStepSuccess",
            "sagemaker:StartHumanLoop",
            "sagemaker:StartMonitoringSchedule",
            "sagemaker:StartNotebookInstance",
            "sagemaker:StartPipelineExecution",
            "sagemaker:StopAutoMLJob",
            "sagemaker:StopCompilationJob",
            "sagemaker:StopEdgePackagingJob",
            "sagemaker:StopHumanLoop",
            "sagemaker:StopHyperParameterTuningJob",
            "sagemaker:StopInferenceRecommendationsJob",
            "sagemaker:StopLabelingJob",
            "sagemaker:StopMonitoringSchedule",
            "sagemaker:StopNotebookInstance",
            "sagemaker:StopPipelineExecution",
            "sagemaker:StopProcessingJob",
            "sagemaker:StopTrainingJob",
            "sagemaker:StopTransformJob",
            "sagemaker:UpdateAction",
            "sagemaker:UpdateAppImageConfig",
            "sagemaker:UpdateArtifact",
            "sagemaker:UpdateCodeRepository",
            "sagemaker:UpdateContext",
            "sagemaker:UpdateDeviceFleet",
            "sagemaker:UpdateDevices",
            "sagemaker:UpdateDomain",
            "sagemaker:UpdateEndpoint",
            "sagemaker:UpdateEndpointWeightsAndCapacities",
            "sagemaker:UpdateExperiment",
            "sagemaker:UpdateImage",
            "sagemaker:UpdateModelPackage",
            "sagemaker:UpdateMonitoringSchedule",
            "sagemaker:UpdateNotebookInstance",
            "sagemaker:UpdateNotebookInstanceLifecycleConfig",
            "sagemaker:UpdatePipeline",
            "sagemaker:UpdatePipelineExecution",
            "sagemaker:UpdateProject",
            "sagemaker:UpdateTrainingJob",
            "sagemaker:UpdateTrial",
            "sagemaker:UpdateTrialComponent",
            "sagemaker:UpdateUserProfile",
            "sagemaker:UpdateWorkforce",
            "sagemaker:UpdateWorkteam"
          ],
          "Resource": [
            "arn:aws:sagemaker:*:*:action/*",
            "arn:aws:sagemaker:*:*:algorithm/*",
            "arn:aws:sagemaker:*:*:app-image-config/*",
            "arn:aws:sagemaker:*:*:artifact/*",
            "arn:aws:sagemaker:*:*:automl-job/*",
            "arn:aws:sagemaker:*:*:code-repository/*",
            "arn:aws:sagemaker:*:*:compilation-job/*",
            "arn:aws:sagemaker:*:*:context/*",
            "arn:aws:sagemaker:*:*:data-quality-job-definition/*",
            "arn:aws:sagemaker:*:*:device-fleet/*/device/*",
            "arn:aws:sagemaker:*:*:device-fleet/*",
            "arn:aws:sagemaker:*:*:edge-packaging-job/*",
            "arn:aws:sagemaker:*:*:endpoint/*",
            "arn:aws:sagemaker:*:*:endpoint-config/*",
            "arn:aws:sagemaker:*:*:experiment/*",
            "arn:aws:sagemaker:*:*:experiment-trial/*",
            "arn:aws:sagemaker:*:*:experiment-trial-component/*",
            "arn:aws:sagemaker:*:*:feature-group/*",
            "arn:aws:sagemaker:*:*:human-loop/*",
            "arn:aws:sagemaker:*:*:human-task-ui/*",
            "arn:aws:sagemaker:*:*:hyper-parameter-tuning-job/*",
            "arn:aws:sagemaker:*:*:image/*",
            "arn:aws:sagemaker:*:*:image-version/*/*",
            "arn:aws:sagemaker:*:*:inference-recommendations-job/*",
            "arn:aws:sagemaker:*:*:labeling-job/*",
            "arn:aws:sagemaker:*:*:model/*",
            "arn:aws:sagemaker:*:*:model-bias-job-definition/*",
            "arn:aws:sagemaker:*:*:model-explainability-job-definition/*",
            "arn:aws:sagemaker:*:*:model-package/*",
            "arn:aws:sagemaker:*:*:model-package-group/*",
            "arn:aws:sagemaker:*:*:model-quality-job-definition/*",
            "arn:aws:sagemaker:*:*:monitoring-schedule/*",
            "arn:aws:sagemaker:*:*:notebook-instance/*",
            "arn:aws:sagemaker:*:*:notebook-instance-lifecycle-config/*",
            "arn:aws:sagemaker:*:*:pipeline/*",
            "arn:aws:sagemaker:*:*:pipeline/*/execution/*",
            "arn:aws:sagemaker:*:*:processing-job/*",
            "arn:aws:sagemaker:*:*:project/*",
            "arn:aws:sagemaker:*:*:training-job/*",
            "arn:aws:sagemaker:*:*:transform-job/*",
            "arn:aws:sagemaker:*:*:workforce/*",
            "arn:aws:sagemaker:*:*:workteam/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsExecutionRole"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogDelivery",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DeleteLogDelivery",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:DescribeResourcePolicies",
            "logs:DescribeDestinations",
            "logs:DescribeExportTasks",
            "logs:DescribeMetricFilters",
            "logs:DescribeQueries",
            "logs:DescribeQueryDefinitions",
            "logs:DescribeSubscriptionFilters",
            "logs:GetLogDelivery",
            "logs:GetLogEvents",
            "logs:ListLogDeliveries",
            "logs:PutLogEvents",
            "logs:PutResourcePolicy",
            "logs:UpdateLogDelivery"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/lambda/*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-04-04T16:34:43+00:00"
  },
  "AmazonSecurityLakeAdministrator": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AllowActionsWithAnyResource",
          "Effect": "Allow",
          "Action": [
            "securitylake:*",
            "organizations:DescribeOrganization",
            "organizations:ListDelegatedServicesForAccount",
            "organizations:ListAccounts",
            "iam:ListRoles",
            "ram:GetResourceShareAssociations"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AllowActionsWithAnyResourceViaSecurityLake",
          "Effect": "Allow",
          "Action": [
            "glue:CreateCrawler",
            "glue:StopCrawlerSchedule",
            "lambda:CreateEventSourceMapping",
            "lakeformation:GrantPermissions",
            "lakeformation:ListPermissions",
            "lakeformation:RegisterResource",
            "lakeformation:RevokePermissions",
            "lakeformation:GetDatalakeSettings",
            "events:ListConnections",
            "events:ListApiDestinations",
            "iam:GetRole",
            "kms:DescribeKey"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "securitylake.amazonaws.com"
            }
          }
        },
        {
          "Sid": "AllowManagingSecurityLakeS3Buckets",
          "Effect": "Allow",
          "Action": [
            "s3:CreateBucket",
            "s3:PutBucketPolicy",
            "s3:PutBucketPublicAccessBlock",
            "s3:PutBucketNotification",
            "s3:PutBucketTagging",
            "s3:PutEncryptionConfiguration",
            "s3:PutBucketVersioning",
            "s3:PutReplicationConfiguration",
            "s3:PutLifecycleConfiguration",
            "s3:ListBucket",
            "s3:PutObject",
            "s3:GetBucketNotification"
          ],
          "Resource": "arn:aws:s3:::aws-security-data-lake*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "securitylake.amazonaws.com"
            }
          }
        },
        {
          "Sid": "AllowLambdaCreateFunction",
          "Effect": "Allow",
          "Action": "lambda:CreateFunction",
          "Resource": "arn:aws:lambda:*:*:function:SecurityLake_Glue_Partition_Updater_Lambda*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "securitylake.amazonaws.com"
            }
          }
        },
        {
          "Sid": "AllowGlueActions",
          "Effect": "Allow",
          "Action": [
            "glue:CreateDatabase",
            "glue:GetDatabase",
            "glue:CreateTable",
            "glue:GetTable"
          ],
          "Resource": [
            "arn:aws:glue:*:*:catalog",
            "arn:aws:glue:*:*:database/amazon_security_lake_glue_db*",
            "arn:aws:glue:*:*:table/amazon_security_lake_glue_db*/*"
          ],
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "securitylake.amazonaws.com"
            }
          }
        },
        {
          "Sid": "AllowEventBridgeActions",
          "Effect": "Allow",
          "Action": [
            "events:PutTargets",
            "events:PutRule",
            "events:DescribeRule",
            "events:CreateApiDestination",
            "events:CreateConnection",
            "events:UpdateConnection",
            "events:UpdateApiDestination",
            "events:DeleteConnection",
            "events:DeleteApiDestination",
            "events:ListTargetsByRule",
            "events:RemoveTargets",
            "events:DeleteRule"
          ],
          "Resource": [
            "arn:aws:events:*:*:rule/AmazonSecurityLake*",
            "arn:aws:events:*:*:rule/SecurityLake*",
            "arn:aws:events:*:*:api-destination/AmazonSecurityLake*",
            "arn:aws:events:*:*:connection/AmazonSecurityLake*"
          ],
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "securitylake.amazonaws.com"
            }
          }
        },
        {
          "Sid": "AllowSQSActions",
          "Effect": "Allow",
          "Action": [
            "sqs:CreateQueue",
            "sqs:SetQueueAttributes",
            "sqs:GetQueueURL",
            "sqs:AddPermission",
            "sqs:GetQueueAttributes",
            "sqs:DeleteQueue"
          ],
          "Resource": [
            "arn:aws:sqs:*:*:SecurityLake*",
            "arn:aws:sqs:*:*:AmazonSecurityLake*"
          ],
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "securitylake.amazonaws.com"
            }
          }
        },
        {
          "Sid": "AllowKmsCmkGrantForSecurityLake",
          "Effect": "Allow",
          "Action": "kms:CreateGrant",
          "Resource": "arn:aws:kms:*:*:key/*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "securitylake.amazonaws.com"
            },
            "StringLike": {
              "kms:EncryptionContext:aws:s3:arn": "arn:aws:s3:::aws-security-data-lake*"
            },
            "ForAllValues:StringEquals": {
              "kms:GrantOperations": [
                "GenerateDataKey",
                "RetireGrant"
              ]
            }
          }
        },
        {
          "Sid": "AllowEnablingQueryBasedSubscribers",
          "Effect": "Allow",
          "Action": [
            "ram:CreateResourceShare",
            "ram:AssociateResourceShare"
          ],
          "Resource": "*",
          "Condition": {
            "StringLikeIfExists": {
              "ram:ResourceArn": [
                "arn:aws:glue:*:*:catalog",
                "arn:aws:glue:*:*:database/amazon_security_lake_glue_db*",
                "arn:aws:glue:*:*:table/amazon_security_lake_glue_db*/*"
              ]
            },
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "securitylake.amazonaws.com"
            }
          }
        },
        {
          "Sid": "AllowConfiguringQueryBasedSubscribers",
          "Effect": "Allow",
          "Action": [
            "ram:UpdateResourceShare",
            "ram:GetResourceShares",
            "ram:DisassociateResourceShare",
            "ram:DeleteResourceShare"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "ram:ResourceShareName": "LakeFormation*"
            },
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "securitylake.amazonaws.com"
            }
          }
        },
        {
          "Sid": "AllowConfiguringCredentialsForSubscriberNotification",
          "Effect": "Allow",
          "Action": [
            "secretsmanager:CreateSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:PutSecretValue"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:secret:events!connection/AmazonSecurityLake-*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "securitylake.amazonaws.com"
            }
          }
        },
        {
          "Sid": "AllowPassRoleForUpdatingGluePartitionsSecLakeArn",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/service-role/AmazonSecurityLakeMetaStoreManager",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "lambda.amazonaws.com"
            },
            "StringLike": {
              "iam:AssociatedResourceARN": "arn:aws:securitylake:*:*:data-lake/default"
            }
          }
        },
        {
          "Sid": "AllowPassRoleForUpdatingGluePartitionsLambdaArn",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/service-role/AmazonSecurityLakeMetaStoreManager",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "lambda.amazonaws.com"
            },
            "StringLike": {
              "iam:AssociatedResourceARN": "arn:aws:lambda:*:*:function:SecurityLake_Glue_Partition_Updater_Lambda*"
            },
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "securitylake.amazonaws.com"
            }
          }
        },
        {
          "Sid": "AllowPassRoleForCrossRegionReplicationSecLakeArn",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/service-role/AmazonSecurityLakeS3ReplicationRole",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "s3.amazonaws.com"
            },
            "StringLike": {
              "iam:AssociatedResourceARN": "arn:aws:securitylake:*:*:data-lake/default"
            }
          }
        },
        {
          "Sid": "AllowPassRoleForCrossRegionReplicationS3Arn",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/service-role/AmazonSecurityLakeS3ReplicationRole",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "s3.amazonaws.com"
            },
            "StringLike": {
              "iam:AssociatedResourceARN": "arn:aws:s3:::aws-security-data-lake*"
            },
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "securitylake.amazonaws.com"
            }
          }
        },
        {
          "Sid": "AllowPassRoleForCustomSourceCrawlerSecLakeArn",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/service-role/AmazonSecurityLakeCustomDataGlueCrawler*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "glue.amazonaws.com"
            },
            "StringLike": {
              "iam:AssociatedResourceARN": "arn:aws:securitylake:*:*:data-lake/default"
            }
          }
        },
        {
          "Sid": "AllowPassRoleForCustomSourceCrawlerGlueArn",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/service-role/AmazonSecurityLakeCustomDataGlueCrawler*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "glue.amazonaws.com"
            },
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "securitylake.amazonaws.com"
            }
          }
        },
        {
          "Sid": "AllowPassRoleForSubscriberNotificationSecLakeArn",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/service-role/AmazonSecurityLakeSubscriberEventBridge",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "events.amazonaws.com"
            },
            "StringLike": {
              "iam:AssociatedResourceARN": "arn:aws:securitylake:*:*:subscriber/*"
            }
          }
        },
        {
          "Sid": "AllowPassRoleForSubscriberNotificationEventsArn",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/service-role/AmazonSecurityLakeSubscriberEventBridge",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "events.amazonaws.com"
            },
            "StringLike": {
              "iam:AssociatedResourceARN": "arn:aws:events:*:*:rule/AmazonSecurityLake*"
            },
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "securitylake.amazonaws.com"
            }
          }
        },
        {
          "Sid": "AllowOnboardingToSecurityLakeDependencies",
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": [
            "arn:aws:iam::*:role/aws-service-role/securitylake.amazonaws.com/AWSServiceRoleForSecurityLake",
            "arn:aws:iam::*:role/aws-service-role/lakeformation.amazonaws.com/AWSServiceRoleForLakeFormationDataAccess",
            "arn:aws:iam::*:role/aws-service-role/apidestinations.events.amazonaws.com/AWSServiceRoleForAmazonEventBridgeApiDestinations"
          ],
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": [
                "securitylake.amazonaws.com",
                "lakeformation.amazonaws.com",
                "apidestinations.events.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "AllowRolePolicyActionsforSubscibersandSources",
          "Effect": "Allow",
          "Action": [
            "iam:CreateRole",
            "iam:PutRolePolicy",
            "iam:DeleteRolePolicy"
          ],
          "Resource": "arn:aws:iam::*:role/AmazonSecurityLake*",
          "Condition": {
            "StringEquals": {
              "iam:PermissionsBoundary": "arn:aws:iam::aws:policy/AmazonSecurityLakePermissionsBoundary"
            },
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "securitylake.amazonaws.com"
            }
          }
        },
        {
          "Sid": "AllowRegisterS3LocationInLakeFormation",
          "Effect": "Allow",
          "Action": [
            "iam:PutRolePolicy",
            "iam:GetRolePolicy"
          ],
          "Resource": "arn:aws:iam::*:role/aws-service-role/lakeformation.amazonaws.com/AWSServiceRoleForLakeFormationDataAccess",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "securitylake.amazonaws.com"
            }
          }
        },
        {
          "Sid": "AllowIAMActionsByResource",
          "Effect": "Allow",
          "Action": [
            "iam:ListRolePolicies",
            "iam:DeleteRole"
          ],
          "Resource": "arn:aws:iam::*:role/AmazonSecurityLake*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": "securitylake.amazonaws.com"
            }
          }
        },
        {
          "Sid": "S3ReadAccessToSecurityLakes",
          "Effect": "Allow",
          "Action": [
            "s3:Get*",
            "s3:List*"
          ],
          "Resource": "arn:aws:s3:::aws-security-data-lake-*"
        },
        {
          "Sid": "S3ResourcelessReadOnly",
          "Effect": "Allow",
          "Action": [
            "s3:GetAccountPublicAccessBlock",
            "s3:ListAccessPoints",
            "s3:ListAllMyBuckets"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-05-30T22:04:10+00:00"
  },
  "AmazonSecurityLakePermissionsBoundary": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:ListBucket",
            "s3:ListBucketVersions",
            "s3:PutObject",
            "s3:GetBucketLocation",
            "kms:Decrypt",
            "kms:GenerateDataKey",
            "sqs:ReceiveMessage",
            "sqs:ChangeMessageVisibility",
            "sqs:DeleteMessage",
            "sqs:GetQueueUrl",
            "sqs:SendMessage",
            "sqs:GetQueueAttributes",
            "sqs:ListQueues"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Deny",
          "NotAction": [
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:ListBucket",
            "s3:ListBucketVersions",
            "s3:PutObject",
            "s3:GetBucketLocation",
            "kms:Decrypt",
            "kms:GenerateDataKey",
            "sqs:ReceiveMessage",
            "sqs:ChangeMessageVisibility",
            "sqs:DeleteMessage",
            "sqs:GetQueueUrl",
            "sqs:SendMessage",
            "sqs:GetQueueAttributes",
            "sqs:ListQueues"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Deny",
          "Action": [
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:ListBucket",
            "s3:ListBucketVersions",
            "s3:PutObject",
            "s3:GetBucketLocation"
          ],
          "NotResource": [
            "arn:aws:s3:::aws-security-data-lake*"
          ]
        },
        {
          "Effect": "Deny",
          "Action": [
            "sqs:ReceiveMessage",
            "sqs:ChangeMessageVisibility",
            "sqs:DeleteMessage",
            "sqs:GetQueueUrl",
            "sqs:SendMessage",
            "sqs:GetQueueAttributes",
            "sqs:ListQueues"
          ],
          "NotResource": "arn:aws:sqs:*:*:AmazonSecurityLake*"
        },
        {
          "Effect": "Deny",
          "Action": [
            "kms:Decrypt",
            "kms:GenerateDataKey"
          ],
          "Resource": "*",
          "Condition": {
            "StringNotLike": {
              "kms:ViaService": [
                "s3.*.amazonaws.com",
                "sqs.*.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Deny",
          "Action": [
            "kms:Decrypt",
            "kms:GenerateDataKey"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "kms:EncryptionContext:aws:s3:arn": "false"
            },
            "StringNotLikeIfExists": {
              "kms:EncryptionContext:aws:s3:arn": [
                "arn:aws:s3:::aws-security-data-lake*"
              ]
            }
          }
        },
        {
          "Effect": "Deny",
          "Action": [
            "kms:Decrypt",
            "kms:GenerateDataKey"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "kms:EncryptionContext:aws:sqs:arn": "false"
            },
            "StringNotLikeIfExists": {
              "kms:EncryptionContext:aws:sqs:arn": [
                "arn:aws:sqs:*:*:AmazonSecurityLake*"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-29T14:11:12+00:00"
  },
  "AmazonSumerianFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "sumerian:*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-04-24T20:14:16+00:00"
  },
  "AmazonTextractFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "textract:*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-11-28T19:07:42+00:00"
  },
  "AmazonTextractServiceRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "sns:Publish"
          ],
          "Resource": "arn:aws:sns:*:*:AmazonTextract*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-11-28T19:12:16+00:00"
  },
  "AmazonTimestreamConsoleFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "timestream:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:DescribeKey",
            "kms:ListKeys",
            "kms:ListAliases"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:CreateGrant"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "kms:EncryptionContextKeys": "aws:timestream:database-name"
            },
            "Bool": {
              "kms:GrantIsForAWSResource": true
            },
            "StringLike": {
              "kms:ViaService": "timestream.*.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "dbqms:CreateFavoriteQuery",
            "dbqms:DescribeFavoriteQueries",
            "dbqms:UpdateFavoriteQuery",
            "dbqms:DeleteFavoriteQueries",
            "dbqms:GetQueryString",
            "dbqms:CreateQueryHistory",
            "dbqms:DescribeQueryHistory",
            "dbqms:UpdateQueryHistory",
            "dbqms:DeleteQueryHistory"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListAllMyBuckets"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sns:ListTopics",
            "iam:ListRoles"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2022-02-01T21:37:31+00:00"
  },
  "AmazonTimestreamFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "timestream:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:DescribeKey"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:CreateGrant"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "kms:EncryptionContextKeys": "aws:timestream:database-name"
            },
            "Bool": {
              "kms:GrantIsForAWSResource": true
            },
            "StringLike": {
              "kms:ViaService": "timestream.*.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListAllMyBuckets"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2021-11-26T23:42:00+00:00"
  },
  "AmazonTimestreamReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "timestream:CancelQuery",
            "timestream:DescribeDatabase",
            "timestream:DescribeEndpoints",
            "timestream:DescribeTable",
            "timestream:ListDatabases",
            "timestream:ListMeasures",
            "timestream:ListTables",
            "timestream:ListTagsForResource",
            "timestream:Select",
            "timestream:SelectValues",
            "timestream:DescribeScheduledQuery",
            "timestream:ListScheduledQueries",
            "timestream:DescribeBatchLoadTask",
            "timestream:ListBatchLoadTasks"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-02-28T18:22:57+00:00"
  },
  "AmazonTranscribeFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "transcribe:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": [
            "arn:aws:s3:::*transcribe*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-04-04T16:06:16+00:00"
  },
  "AmazonTranscribeReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "transcribe:Get*",
            "transcribe:List*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-04-04T16:05:06+00:00"
  },
  "AmazonVPCCrossAccountNetworkInterfaceOperations": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeRouteTables",
            "ec2:CreateRoute",
            "ec2:DeleteRoute",
            "ec2:ReplaceRoute"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeNetworkInterfaces",
            "ec2:CreateNetworkInterface",
            "ec2:DeleteNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DescribeNetworkInterfacePermissions",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:DescribeNetworkInterfaceAttribute",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeRegions",
            "ec2:DescribeVpcs",
            "ec2:DescribeSubnets"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AssignPrivateIpAddresses",
            "ec2:UnassignPrivateIpAddresses"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AssignIpv6Addresses",
            "ec2:UnassignIpv6Addresses"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2023-09-25T15:12:17+00:00"
  },
  "AmazonVPCFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AcceptVpcPeeringConnection",
            "ec2:AcceptVpcEndpointConnections",
            "ec2:AllocateAddress",
            "ec2:AssignIpv6Addresses",
            "ec2:AssignPrivateIpAddresses",
            "ec2:AssociateAddress",
            "ec2:AssociateDhcpOptions",
            "ec2:AssociateRouteTable",
            "ec2:AssociateSubnetCidrBlock",
            "ec2:AssociateVpcCidrBlock",
            "ec2:AttachClassicLinkVpc",
            "ec2:AttachInternetGateway",
            "ec2:AttachNetworkInterface",
            "ec2:AttachVpnGateway",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateCarrierGateway",
            "ec2:CreateCustomerGateway",
            "ec2:CreateDefaultSubnet",
            "ec2:CreateDefaultVpc",
            "ec2:CreateDhcpOptions",
            "ec2:CreateEgressOnlyInternetGateway",
            "ec2:CreateFlowLogs",
            "ec2:CreateInternetGateway",
            "ec2:CreateLocalGatewayRouteTableVpcAssociation",
            "ec2:CreateNatGateway",
            "ec2:CreateNetworkAcl",
            "ec2:CreateNetworkAclEntry",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:CreateRoute",
            "ec2:CreateRouteTable",
            "ec2:CreateSecurityGroup",
            "ec2:CreateSubnet",
            "ec2:CreateTags",
            "ec2:CreateVpc",
            "ec2:CreateVpcEndpoint",
            "ec2:CreateVpcEndpointConnectionNotification",
            "ec2:CreateVpcEndpointServiceConfiguration",
            "ec2:CreateVpcPeeringConnection",
            "ec2:CreateVpnConnection",
            "ec2:CreateVpnConnectionRoute",
            "ec2:CreateVpnGateway",
            "ec2:DeleteCarrierGateway",
            "ec2:DeleteCustomerGateway",
            "ec2:DeleteDhcpOptions",
            "ec2:DeleteEgressOnlyInternetGateway",
            "ec2:DeleteFlowLogs",
            "ec2:DeleteInternetGateway",
            "ec2:DeleteLocalGatewayRouteTableVpcAssociation",
            "ec2:DeleteNatGateway",
            "ec2:DeleteNetworkAcl",
            "ec2:DeleteNetworkAclEntry",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DeleteRoute",
            "ec2:DeleteRouteTable",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteSubnet",
            "ec2:DeleteTags",
            "ec2:DeleteVpc",
            "ec2:DeleteVpcEndpoints",
            "ec2:DeleteVpcEndpointConnectionNotifications",
            "ec2:DeleteVpcEndpointServiceConfigurations",
            "ec2:DeleteVpcPeeringConnection",
            "ec2:DeleteVpnConnection",
            "ec2:DeleteVpnConnectionRoute",
            "ec2:DeleteVpnGateway",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeCarrierGateways",
            "ec2:DescribeClassicLinkInstances",
            "ec2:DescribeCustomerGateways",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeEgressOnlyInternetGateways",
            "ec2:DescribeFlowLogs",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeIpv6Pools",
            "ec2:DescribeLocalGatewayRouteTables",
            "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeMovingAddresses",
            "ec2:DescribeNatGateways",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeNetworkInterfaceAttribute",
            "ec2:DescribeNetworkInterfacePermissions",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePrefixLists",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroupReferences",
            "ec2:DescribeSecurityGroupRules",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeStaleSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcClassicLink",
            "ec2:DescribeVpcClassicLinkDnsSupport",
            "ec2:DescribeVpcEndpointConnectionNotifications",
            "ec2:DescribeVpcEndpointConnections",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcEndpointServiceConfigurations",
            "ec2:DescribeVpcEndpointServicePermissions",
            "ec2:DescribeVpcEndpointServices",
            "ec2:DescribeVpcPeeringConnections",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpnConnections",
            "ec2:DescribeVpnGateways",
            "ec2:DetachClassicLinkVpc",
            "ec2:DetachInternetGateway",
            "ec2:DetachNetworkInterface",
            "ec2:DetachVpnGateway",
            "ec2:DisableVgwRoutePropagation",
            "ec2:DisableVpcClassicLink",
            "ec2:DisableVpcClassicLinkDnsSupport",
            "ec2:DisassociateAddress",
            "ec2:DisassociateRouteTable",
            "ec2:DisassociateSubnetCidrBlock",
            "ec2:DisassociateVpcCidrBlock",
            "ec2:EnableVgwRoutePropagation",
            "ec2:EnableVpcClassicLink",
            "ec2:EnableVpcClassicLinkDnsSupport",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:ModifySecurityGroupRules",
            "ec2:ModifySubnetAttribute",
            "ec2:ModifyVpcAttribute",
            "ec2:ModifyVpcEndpoint",
            "ec2:ModifyVpcEndpointConnectionNotification",
            "ec2:ModifyVpcEndpointServiceConfiguration",
            "ec2:ModifyVpcEndpointServicePermissions",
            "ec2:ModifyVpcPeeringConnectionOptions",
            "ec2:ModifyVpcTenancy",
            "ec2:MoveAddressToVpc",
            "ec2:RejectVpcEndpointConnections",
            "ec2:RejectVpcPeeringConnection",
            "ec2:ReleaseAddress",
            "ec2:ReplaceNetworkAclAssociation",
            "ec2:ReplaceNetworkAclEntry",
            "ec2:ReplaceRoute",
            "ec2:ReplaceRouteTableAssociation",
            "ec2:ResetNetworkInterfaceAttribute",
            "ec2:RestoreAddressToClassic",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:UnassignIpv6Addresses",
            "ec2:UnassignPrivateIpAddresses",
            "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
            "ec2:UpdateSecurityGroupRuleDescriptionsIngress"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v9",
    "IsDefaultVersion": true,
    "CreateDate": "2021-08-02T19:12:14+00:00"
  },
  "AmazonVPCNetworkAccessAnalyzerFullAccessPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "directconnect:DescribeConnections",
            "directconnect:DescribeDirectConnectGatewayAssociations",
            "directconnect:DescribeDirectConnectGatewayAttachments",
            "directconnect:DescribeDirectConnectGateways",
            "directconnect:DescribeVirtualGateways",
            "directconnect:DescribeVirtualInterfaces"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInsightsAccessScope",
            "ec2:DeleteNetworkInsightsAccessScope",
            "ec2:DeleteNetworkInsightsAccessScopeAnalysis",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeCustomerGateways",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeManagedPrefixLists",
            "ec2:DescribeNatGateways",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeNetworkInsightsAccessScopeAnalyses",
            "ec2:DescribeNetworkInsightsAccessScopes",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePrefixLists",
            "ec2:DescribeRegions",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeTransitGatewayAttachments",
            "ec2:DescribeTransitGatewayConnects",
            "ec2:DescribeTransitGatewayPeeringAttachments",
            "ec2:DescribeTransitGatewayRouteTables",
            "ec2:DescribeTransitGateways",
            "ec2:DescribeTransitGatewayVpcAttachments",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcEndpointServiceConfigurations",
            "ec2:DescribeVpcPeeringConnections",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpnConnections",
            "ec2:DescribeVpnGateways",
            "ec2:GetManagedPrefixListEntries",
            "ec2:GetNetworkInsightsAccessScopeAnalysisFindings",
            "ec2:GetNetworkInsightsAccessScopeContent",
            "ec2:GetTransitGatewayRouteTablePropagations",
            "ec2:SearchTransitGatewayRoutes",
            "ec2:StartNetworkInsightsAccessScopeAnalysis"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags",
            "ec2:DeleteTags"
          ],
          "Resource": [
            "arn:*:ec2:*:*:network-insights-access-scope/*",
            "arn:*:ec2:*:*:network-insights-access-scope-analysis/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancerAttributes",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeRules",
            "elasticloadbalancing:DescribeTags",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "globalaccelerator:ListAccelerators",
            "globalaccelerator:ListCustomRoutingAccelerators",
            "globalaccelerator:ListCustomRoutingEndpointGroups",
            "globalaccelerator:ListCustomRoutingListeners",
            "globalaccelerator:ListCustomRoutingPortMappings",
            "globalaccelerator:ListEndpointGroups",
            "globalaccelerator:ListListeners"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "network-firewall:DescribeFirewall",
            "network-firewall:DescribeFirewallPolicy",
            "network-firewall:DescribeResourcePolicy",
            "network-firewall:DescribeRuleGroup",
            "network-firewall:ListFirewallPolicies",
            "network-firewall:ListFirewalls",
            "network-firewall:ListRuleGroups"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "resource-groups:ListGroupResources"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "tag:GetResources"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "tiros:CreateQuery",
            "tiros:GetQueryAnswer"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-03T19:31:09+00:00"
  },
  "AmazonVPCReachabilityAnalyzerFullAccessPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "directconnect:DescribeConnections",
            "directconnect:DescribeDirectConnectGatewayAssociations",
            "directconnect:DescribeDirectConnectGatewayAttachments",
            "directconnect:DescribeDirectConnectGateways",
            "directconnect:DescribeVirtualGateways",
            "directconnect:DescribeVirtualInterfaces"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInsightsPath",
            "ec2:DeleteNetworkInsightsAnalysis",
            "ec2:DeleteNetworkInsightsPath",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeCustomerGateways",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeManagedPrefixLists",
            "ec2:DescribeNatGateways",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeNetworkInsightsAnalyses",
            "ec2:DescribeNetworkInsightsPaths",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePrefixLists",
            "ec2:DescribeRegions",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeTransitGatewayAttachments",
            "ec2:DescribeTransitGatewayConnects",
            "ec2:DescribeTransitGatewayPeeringAttachments",
            "ec2:DescribeTransitGatewayRouteTables",
            "ec2:DescribeTransitGateways",
            "ec2:DescribeTransitGatewayVpcAttachments",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcEndpointServiceConfigurations",
            "ec2:DescribeVpcPeeringConnections",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpnConnections",
            "ec2:DescribeVpnGateways",
            "ec2:GetManagedPrefixListEntries",
            "ec2:GetTransitGatewayRouteTablePropagations",
            "ec2:SearchTransitGatewayRoutes",
            "ec2:StartNetworkInsightsAnalysis"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags",
            "ec2:DeleteTags"
          ],
          "Resource": [
            "arn:*:ec2:*:*:network-insights-path/*",
            "arn:*:ec2:*:*:network-insights-analysis/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancerAttributes",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeRules",
            "elasticloadbalancing:DescribeTags",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "globalaccelerator:ListAccelerators",
            "globalaccelerator:ListCustomRoutingAccelerators",
            "globalaccelerator:ListCustomRoutingEndpointGroups",
            "globalaccelerator:ListCustomRoutingListeners",
            "globalaccelerator:ListCustomRoutingPortMappings",
            "globalaccelerator:ListEndpointGroups",
            "globalaccelerator:ListListeners"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "network-firewall:DescribeFirewall",
            "network-firewall:DescribeFirewallPolicy",
            "network-firewall:DescribeResourcePolicy",
            "network-firewall:DescribeRuleGroup",
            "network-firewall:ListFirewallPolicies",
            "network-firewall:ListFirewalls",
            "network-firewall:ListRuleGroups"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "tiros:CreateQuery",
            "tiros:ExtendQuery",
            "tiros:GetQueryAnswer",
            "tiros:GetQueryExplanation",
            "tiros:GetQueryExtensionAccounts"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-03T19:37:28+00:00"
  },
  "AmazonVPCReachabilityAnalyzerPathComponentReadPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "NetworkFirewallPermissions",
          "Effect": "Allow",
          "Action": [
            "network-firewall:Describe*",
            "network-firewall:List*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-05-01T20:38:22+00:00"
  },
  "AmazonVPCReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeCarrierGateways",
            "ec2:DescribeClassicLinkInstances",
            "ec2:DescribeCustomerGateways",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeEgressOnlyInternetGateways",
            "ec2:DescribeFlowLogs",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeLocalGatewayRouteTables",
            "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
            "ec2:DescribeMovingAddresses",
            "ec2:DescribeNatGateways",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeNetworkInterfaceAttribute",
            "ec2:DescribeNetworkInterfacePermissions",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePrefixLists",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroupReferences",
            "ec2:DescribeSecurityGroupRules",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeStaleSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcClassicLink",
            "ec2:DescribeVpcClassicLinkDnsSupport",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcEndpointConnectionNotifications",
            "ec2:DescribeVpcEndpointConnections",
            "ec2:DescribeVpcEndpointServiceConfigurations",
            "ec2:DescribeVpcEndpointServicePermissions",
            "ec2:DescribeVpcEndpointServices",
            "ec2:DescribeVpcPeeringConnections",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpnConnections",
            "ec2:DescribeVpnGateways"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v8",
    "IsDefaultVersion": true,
    "CreateDate": "2021-08-02T15:47:38+00:00"
  },
  "AmazonWorkDocsFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "workdocs:*",
            "ds:DescribeDirectories",
            "ec2:DescribeVpcs",
            "ec2:DescribeSubnets"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-04-16T23:05:11+00:00"
  },
  "AmazonWorkDocsReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "workdocs:Describe*",
            "ds:DescribeDirectories",
            "ec2:DescribeVpcs",
            "ec2:DescribeSubnets"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-01-08T23:49:59+00:00"
  },
  "AmazonWorkLinkFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "worklink:*"
          ],
          "Resource": "arn:aws:worklink:*:*:*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2019-09-23T18:37:42+00:00"
  },
  "AmazonWorkLinkReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "worklink:Describe*",
            "worklink:List*",
            "worklink:Search*"
          ],
          "Resource": "arn:aws:worklink:*:*:*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2019-09-23T18:37:21+00:00"
  },
  "AmazonWorkLinkServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:DeleteNetworkInterface"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kinesis:PutRecord",
            "kinesis:PutRecords"
          ],
          "Resource": "arn:aws:kinesis:*:*:stream/AmazonWorkLink-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:ModifyListener",
            "elasticloadbalancing:AddListenerCertificates",
            "elasticloadbalancing:RemoveListenerCertificates"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2020-02-07T20:48:49+00:00"
  },
  "AmazonWorkMailEventsServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-04-16T16:52:43+00:00"
  },
  "AmazonWorkMailFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ds:AuthorizeApplication",
            "ds:CheckAlias",
            "ds:CreateAlias",
            "ds:CreateDirectory",
            "ds:CreateIdentityPoolDirectory",
            "ds:DeleteDirectory",
            "ds:DescribeDirectories",
            "ds:GetDirectoryLimits",
            "ds:ListAuthorizedApplications",
            "ds:UnauthorizeApplication",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateNetworkInterface",
            "ec2:CreateSecurityGroup",
            "ec2:CreateSubnet",
            "ec2:CreateTags",
            "ec2:CreateVpc",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteSubnet",
            "ec2:DeleteVpc",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress",
            "kms:DescribeKey",
            "kms:ListAliases",
            "lambda:ListFunctions",
            "route53:ChangeResourceRecordSets",
            "route53:ListHostedZones",
            "route53:ListResourceRecordSets",
            "route53:GetHostedZone",
            "route53domains:CheckDomainAvailability",
            "route53domains:ListDomains",
            "ses:*",
            "workmail:*",
            "iam:ListRoles",
            "logs:DescribeLogGroups",
            "logs:CreateLogGroup",
            "logs:PutRetentionPolicy",
            "cloudwatch:GetMetricData"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "events.workmail.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:DeleteServiceLinkedRole",
            "iam:GetServiceLinkedRoleDeletionStatus"
          ],
          "Resource": "arn:aws:iam::*:role/aws-service-role/events.workmail.amazonaws.com/AWSServiceRoleForAmazonWorkMailEvents*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/*workmail*",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": "events.workmail.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v10",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-21T14:13:40+00:00"
  },
  "AmazonWorkMailMessageFlowFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "workmailmessageflow:*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-02-11T11:08:35+00:00"
  },
  "AmazonWorkMailMessageFlowReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "workmailmessageflow:Get*"
          ],
          "Resource": "*",
          "Effect": "Allow"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-01-28T12:40:08+00:00"
  },
  "AmazonWorkMailReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ses:Describe*",
            "ses:Get*",
            "workmail:Describe*",
            "workmail:Get*",
            "workmail:List*",
            "workmail:Search*",
            "lambda:ListFunctions",
            "iam:ListRoles",
            "logs:DescribeLogGroups",
            "cloudwatch:GetMetricData"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2019-07-25T08:24:50+00:00"
  },
  "AmazonWorkSpacesAdmin": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "kms:DescribeKey",
            "kms:ListAliases",
            "kms:ListKeys",
            "workspaces:CreateTags",
            "workspaces:CreateWorkspaceImage",
            "workspaces:CreateWorkspaces",
            "workspaces:CreateStandbyWorkspaces",
            "workspaces:DeleteTags",
            "workspaces:DescribeTags",
            "workspaces:DescribeWorkspaceBundles",
            "workspaces:DescribeWorkspaceDirectories",
            "workspaces:DescribeWorkspaces",
            "workspaces:DescribeWorkspacesConnectionStatus",
            "workspaces:ModifyCertificateBasedAuthProperties",
            "workspaces:ModifySamlProperties",
            "workspaces:ModifyWorkspaceProperties",
            "workspaces:RebootWorkspaces",
            "workspaces:RebuildWorkspaces",
            "workspaces:RestoreWorkspace",
            "workspaces:StartWorkspaces",
            "workspaces:StopWorkspaces",
            "workspaces:TerminateWorkspaces"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2023-08-03T23:57:36+00:00"
  },
  "AmazonWorkSpacesApplicationManagerAdminAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "wam:AuthenticatePackager",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-04-09T14:03:18+00:00"
  },
  "AmazonWorkSpacesSelfServiceAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "workspaces:RebootWorkspaces",
            "workspaces:RebuildWorkspaces",
            "workspaces:ModifyWorkspaceProperties"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-06-27T19:22:52+00:00"
  },
  "AmazonWorkSpacesServiceAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "ec2:CreateNetworkInterface",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeNetworkInterfaces"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2020-03-18T23:32:10+00:00"
  },
  "AmazonWorkSpacesWebReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "workspaces-web:GetBrowserSettings",
            "workspaces-web:GetIdentityProvider",
            "workspaces-web:GetNetworkSettings",
            "workspaces-web:GetPortal",
            "workspaces-web:GetPortalServiceProviderMetadata",
            "workspaces-web:GetTrustStore",
            "workspaces-web:GetTrustStoreCertificate",
            "workspaces-web:GetUserSettings",
            "workspaces-web:GetUserAccessLoggingSettings",
            "workspaces-web:ListBrowserSettings",
            "workspaces-web:ListIdentityProviders",
            "workspaces-web:ListNetworkSettings",
            "workspaces-web:ListPortals",
            "workspaces-web:ListTagsForResource",
            "workspaces-web:ListTrustStoreCertificates",
            "workspaces-web:ListTrustStores",
            "workspaces-web:ListUserSettings",
            "workspaces-web:ListUserAccessLoggingSettings"
          ],
          "Resource": "arn:aws:workspaces-web:*:*:*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeVpcs",
            "ec2:DescribeSubnets",
            "ec2:DescribeSecurityGroups",
            "kinesis:ListStreams"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-02T20:20:44+00:00"
  },
  "AmazonWorkSpacesWebServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeVpcs",
            "ec2:DescribeSubnets",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeNetworkInterfaces",
            "ec2:AssociateAddress",
            "ec2:DisassociateAddress",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeVpcEndpoints"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:security-group/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface"
          ],
          "Resource": "arn:aws:ec2:*:*:network-interface/*",
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/WorkSpacesWebManaged": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": "arn:aws:ec2:*:*:network-interface/*",
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "CreateNetworkInterface"
            },
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "WorkSpacesWebManaged"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteNetworkInterface"
          ],
          "Resource": "arn:aws:ec2:*:*:network-interface/*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/WorkSpacesWebManaged": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricData"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": [
                "AWS/WorkSpacesWeb",
                "AWS/Usage"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "kinesis:PutRecord",
            "kinesis:PutRecords",
            "kinesis:DescribeStreamSummary"
          ],
          "Resource": "arn:aws:kinesis:*:*:stream/amazon-workspaces-web-*"
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2022-12-15T22:46:33+00:00"
  },
  "AmazonWorkspacesPCAAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "acm-pca:IssueCertificate",
            "acm-pca:GetCertificate",
            "acm-pca:DescribeCertificateAuthority"
          ],
          "Resource": "arn:*:acm-pca:*:*:*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/euc-private-ca": "*"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-08T00:25:55+00:00"
  },
  "AmazonZocaloFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "zocalo:*",
            "ds:*",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateNetworkInterface",
            "ec2:CreateSecurityGroup",
            "ec2:CreateSubnet",
            "ec2:CreateTags",
            "ec2:CreateVpc",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteSecurityGroup",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:41:13+00:00"
  },
  "AmazonZocaloReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "zocalo:Describe*",
            "ds:DescribeDirectories",
            "ec2:DescribeVpcs",
            "ec2:DescribeSubnets"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:41:14+00:00"
  },
  "AmplifyBackendDeployFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "CDKPreDeploy",
          "Effect": "Allow",
          "Action": [
            "cloudformation:DescribeStacks",
            "cloudformation:DescribeStackEvents",
            "cloudformation:GetTemplate",
            "cloudformation:ListStackResources",
            "cloudformation:GetTemplateSummary"
          ],
          "Resource": [
            "arn:aws:cloudformation:*:*:stack/amplify-*",
            "arn:aws:cloudformation:*:*:stack/CDKToolkit/*"
          ]
        },
        {
          "Sid": "AmplifyMetadata",
          "Effect": "Allow",
          "Action": [
            "amplify:ListApps",
            "cloudformation:ListStacks",
            "ssm:DescribeParameters",
            "appsync:GetIntrospectionSchema",
            "amplify:GetBackendEnvironment"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "AmplifyHotSwappableResources",
          "Effect": "Allow",
          "Action": [
            "appsync:GetSchemaCreationStatus",
            "appsync:StartSchemaCreation",
            "appsync:UpdateResolver",
            "appsync:ListFunctions",
            "appsync:UpdateFunction",
            "appsync:UpdateApiKey"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "AmplifySchema",
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": [
            "arn:aws:s3:::*amplify*",
            "arn:aws:s3:::cdk-*-assets-*-*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        },
        {
          "Sid": "CDKDeploy",
          "Effect": "Allow",
          "Action": [
            "sts:AssumeRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/cdk-*-deploy-role-*-*",
            "arn:aws:iam::*:role/cdk-*-file-publishing-role-*-*",
            "arn:aws:iam::*:role/cdk-*-image-publishing-role-*-*",
            "arn:aws:iam::*:role/cdk-*-lookup-role-*-*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        },
        {
          "Sid": "AmplifySSM",
          "Effect": "Allow",
          "Action": [
            "ssm:GetParametersByPath",
            "ssm:GetParameters",
            "ssm:GetParameter"
          ],
          "Resource": [
            "arn:aws:ssm:*:*:parameter/amplify/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        },
        {
          "Sid": "AmplifyModifySSMParam",
          "Effect": "Allow",
          "Action": [
            "ssm:PutParameter",
            "ssm:DeleteParameter",
            "ssm:DeleteParameters"
          ],
          "Resource": "arn:aws:ssm:*:*:parameter/amplify/*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-17T23:27:43+00:00"
  },
  "AppIntegrationsServiceLinkedRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricData"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": "AWS/AppIntegrations"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "appflow:DescribeConnectorEntity",
            "appflow:ListConnectorEntities"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "appflow:DescribeConnectorProfiles",
            "appflow:UseConnectorProfile"
          ],
          "Resource": "arn:aws:appflow:*:*:connector-profile/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "appflow:DeleteFlow",
            "appflow:DescribeFlow",
            "appflow:DescribeFlowExecutionRecords",
            "appflow:StartFlow",
            "appflow:StopFlow",
            "appflow:UpdateFlow"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/AppIntegrationsManaged": "true"
            }
          },
          "Resource": "arn:aws:appflow:*:*:flow/FlowCreatedByAppIntegrations-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "appflow:TagResource"
          ],
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "AppIntegrationsManaged"
              ]
            }
          },
          "Resource": "arn:aws:appflow:*:*:flow/FlowCreatedByAppIntegrations-*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-09-30T19:42:56+00:00"
  },
  "AppRunnerNetworkingServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeVpcs",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeSubnets",
            "ec2:DescribeSecurityGroups"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateNetworkInterface",
          "Resource": "*",
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "AWSAppRunnerManaged"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": "arn:aws:ec2:*:*:network-interface/*",
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "CreateNetworkInterface"
            },
            "StringLike": {
              "aws:RequestTag/AWSAppRunnerManaged": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:DeleteNetworkInterface",
          "Resource": "*",
          "Condition": {
            "Null": {
              "ec2:ResourceTag/AWSAppRunnerManaged": "false"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-01-12T21:02:40+00:00"
  },
  "AppRunnerServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "logs:CreateLogGroup",
            "logs:PutRetentionPolicy"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:logs:*:*:log-group:/aws/apprunner/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "logs:DescribeLogStreams"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/apprunner/*:log-stream:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "events:PutRule",
            "events:PutTargets",
            "events:DeleteRule",
            "events:RemoveTargets",
            "events:DescribeRule",
            "events:EnableRule",
            "events:DisableRule"
          ],
          "Resource": "arn:aws:events:*:*:rule/AWSAppRunnerManagedRule*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-05-14T19:15:04+00:00"
  },
  "ApplicationAutoScalingForAmazonAppStreamAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "appstream:UpdateFleet",
            "appstream:DescribeFleets"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:DescribeAlarms"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2017-02-06T21:39:56+00:00"
  },
  "ApplicationDiscoveryServiceContinuousExportServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "glue:CreateDatabase",
            "glue:UpdateDatabase",
            "glue:CreateTable",
            "glue:UpdateTable",
            "firehose:CreateDeliveryStream",
            "firehose:DescribeDeliveryStream",
            "logs:CreateLogGroup"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "firehose:DeleteDeliveryStream",
            "firehose:PutRecord",
            "firehose:PutRecordBatch",
            "firehose:UpdateDestination"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:firehose:*:*:deliverystream/aws-application-discovery-service*"
        },
        {
          "Action": [
            "s3:CreateBucket",
            "s3:ListBucket",
            "s3:PutBucketLogging",
            "s3:PutEncryptionConfiguration"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:s3:::aws-application-discovery-service*"
        },
        {
          "Action": [
            "s3:GetObject"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:s3:::aws-application-discovery-service*/*"
        },
        {
          "Action": [
            "logs:CreateLogStream",
            "logs:PutRetentionPolicy"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:logs:*:*:log-group:/aws/application-discovery-service/firehose*"
        },
        {
          "Action": [
            "iam:PassRole"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:iam::*:role/AWSApplicationDiscoveryServiceFirehose",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": "firehose.amazonaws.com"
            }
          }
        },
        {
          "Action": [
            "iam:PassRole"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:iam::*:role/service-role/AWSApplicationDiscoveryServiceFirehose",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": "firehose.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2018-08-13T22:31:21+00:00"
  },
  "AutoScalingConsoleFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateKeyPair",
            "ec2:CreateSecurityGroup",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstances",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DescribePlacementGroups",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSpotInstanceRequests",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpcClassicLink",
            "ec2:ImportKeyPair"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "elasticloadbalancing:Describe*",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:ListMetrics",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:Describe*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "autoscaling:*",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sns:ListSubscriptions",
            "sns:ListTopics"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:ListRoles",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "autoscaling.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2018-02-06T23:15:36+00:00"
  },
  "AutoScalingConsoleReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeVpcs",
            "ec2:DescribeVpcClassicLink",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeSubnets"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "elasticloadbalancing:Describe*",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:ListMetrics",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:Describe*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "autoscaling:Describe*",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sns:ListSubscriptions",
            "sns:ListTopics"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2017-01-12T19:48:53+00:00"
  },
  "AutoScalingFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "autoscaling:*",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "cloudwatch:PutMetricAlarm",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstances",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DescribePlacementGroups",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSpotInstanceRequests",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcClassicLink"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTargetGroups"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "autoscaling.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2018-02-06T21:59:13+00:00"
  },
  "AutoScalingNotificationAccessRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Resource": "*",
          "Action": [
            "sqs:SendMessage",
            "sqs:GetQueueUrl",
            "sns:Publish"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:41:22+00:00"
  },
  "AutoScalingReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "autoscaling:Describe*",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2017-01-12T19:39:35+00:00"
  },
  "AutoScalingServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "EC2InstanceManagement",
          "Effect": "Allow",
          "Action": [
            "ec2:AttachClassicLinkVpc",
            "ec2:CancelSpotInstanceRequests",
            "ec2:CreateFleet",
            "ec2:CreateTags",
            "ec2:DeleteTags",
            "ec2:Describe*",
            "ec2:DetachClassicLinkVpc",
            "ec2:ModifyInstanceAttribute",
            "ec2:RequestSpotInstances",
            "ec2:RunInstances",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances"
          ],
          "Resource": "*"
        },
        {
          "Sid": "EC2InstanceProfileManagement",
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "iam:PassedToService": "ec2.amazonaws.com*"
            }
          }
        },
        {
          "Sid": "EC2SpotManagement",
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "spot.amazonaws.com"
            }
          }
        },
        {
          "Sid": "ELBManagement",
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:Register*",
            "elasticloadbalancing:Deregister*",
            "elasticloadbalancing:Describe*"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CWManagement",
          "Effect": "Allow",
          "Action": [
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricData",
            "cloudwatch:PutMetricAlarm"
          ],
          "Resource": "*"
        },
        {
          "Sid": "SNSManagement",
          "Effect": "Allow",
          "Action": [
            "sns:Publish"
          ],
          "Resource": "*"
        },
        {
          "Sid": "EventBridgeRuleManagement",
          "Effect": "Allow",
          "Action": [
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "events:DeleteRule",
            "events:DescribeRule"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "events:ManagedBy": "autoscaling.amazonaws.com"
            }
          }
        },
        {
          "Sid": "SystemsManagerParameterManagement",
          "Effect": "Allow",
          "Action": [
            "ssm:GetParameters"
          ],
          "Resource": "*"
        },
        {
          "Sid": "VpcLatticeManagement",
          "Effect": "Allow",
          "Action": [
            "vpc-lattice:DeregisterTargets",
            "vpc-lattice:GetTargetGroup",
            "vpc-lattice:ListTargets",
            "vpc-lattice:ListTargetGroups",
            "vpc-lattice:RegisterTargets"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v7",
    "IsDefaultVersion": true,
    "CreateDate": "2022-12-06T20:15:29+00:00"
  },
  "AwsGlueDataBrewFullAccessPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "databrew:CreateDataset",
            "databrew:DescribeDataset",
            "databrew:ListDatasets",
            "databrew:UpdateDataset",
            "databrew:DeleteDataset",
            "databrew:CreateProject",
            "databrew:DescribeProject",
            "databrew:ListProjects",
            "databrew:StartProjectSession",
            "databrew:SendProjectSessionAction",
            "databrew:UpdateProject",
            "databrew:DeleteProject",
            "databrew:CreateRecipe",
            "databrew:DescribeRecipe",
            "databrew:ListRecipes",
            "databrew:ListRecipeVersions",
            "databrew:PublishRecipe",
            "databrew:UpdateRecipe",
            "databrew:BatchDeleteRecipeVersion",
            "databrew:DeleteRecipeVersion",
            "databrew:CreateRecipeJob",
            "databrew:CreateProfileJob",
            "databrew:DescribeJob",
            "databrew:DescribeJobRun",
            "databrew:ListJobRuns",
            "databrew:ListJobs",
            "databrew:StartJobRun",
            "databrew:StopJobRun",
            "databrew:UpdateProfileJob",
            "databrew:UpdateRecipeJob",
            "databrew:DeleteJob",
            "databrew:CreateSchedule",
            "databrew:DescribeSchedule",
            "databrew:ListSchedules",
            "databrew:UpdateSchedule",
            "databrew:DeleteSchedule",
            "databrew:CreateRuleset",
            "databrew:DeleteRuleset",
            "databrew:DescribeRuleset",
            "databrew:ListRulesets",
            "databrew:UpdateRuleset",
            "databrew:ListTagsForResource",
            "databrew:TagResource",
            "databrew:UntagResource"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "appflow:DescribeFlow",
            "appflow:DescribeFlowExecutionRecords",
            "appflow:ListFlows",
            "glue:GetConnection",
            "glue:GetConnections",
            "glue:GetDatabases",
            "glue:GetPartitions",
            "glue:GetTable",
            "glue:GetTables",
            "glue:GetDataCatalogEncryptionSettings",
            "dataexchange:ListDataSets",
            "dataexchange:ListDataSetRevisions",
            "dataexchange:ListRevisionAssets",
            "dataexchange:CreateJob",
            "dataexchange:StartJob",
            "dataexchange:GetJob",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeVpcs",
            "ec2:DescribeSubnets",
            "kms:DescribeKey",
            "kms:ListKeys",
            "kms:ListAliases",
            "redshift:DescribeClusters",
            "redshift:DescribeClusterSubnetGroups",
            "redshift-data:DescribeStatement",
            "redshift-data:ListDatabases",
            "redshift-data:ListSchemas",
            "redshift-data:ListTables",
            "s3:ListAllMyBuckets",
            "s3:GetBucketCORS",
            "s3:GetBucketLocation",
            "s3:GetEncryptionConfiguration",
            "s3:GetLifecycleConfiguration",
            "secretsmanager:ListSecrets",
            "secretsmanager:DescribeSecret",
            "sts:GetCallerIdentity",
            "cloudtrail:LookupEvents",
            "iam:ListRoles",
            "iam:GetRole"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "glue:CreateConnection"
          ],
          "Resource": [
            "arn:aws:glue:*:*:catalog",
            "arn:aws:glue:*:*:connection/AwsGlueDataBrew-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "glue:GetDatabases"
          ],
          "Resource": [
            "arn:aws:glue:*:*:catalog",
            "arn:aws:glue:*:*:database/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "glue:CreateTable"
          ],
          "Resource": [
            "arn:aws:glue:*:*:catalog",
            "arn:aws:glue:*:*:database/*",
            "arn:aws:glue:*:*:table/*/awsgluedatabrew*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListBucket",
            "s3:GetObject"
          ],
          "Resource": [
            "arn:aws:s3:::databrew-public-datasets-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:GenerateDataKey"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringLike": {
              "kms:ViaService": "s3.*.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:CreateSecret"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:secret:AwsGlueDataBrew-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:GenerateRandom"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:GetSecretValue"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:secret:databrew!default-*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "databrew.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:CreateSecret"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:secret:databrew!default-*",
          "Condition": {
            "StringLike": {
              "secretsmanager:Name": "databrew!default"
            },
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "databrew.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "arn:aws:iam::*:role/*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "databrew.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v8",
    "IsDefaultVersion": true,
    "CreateDate": "2022-02-04T18:28:33+00:00"
  },
  "AwsGlueSessionUserRestrictedNotebookPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "glue:CreateSession"
          ],
          "Resource": [
            "arn:aws:glue:*:*:session/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/owner": "${aws:PrincipalTag/owner}"
            },
            "ForAnyValue:StringEquals": {
              "aws:TagKeys": [
                "owner"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "glue:RunStatement",
            "glue:GetStatement",
            "glue:ListStatements",
            "glue:CancelStatement",
            "glue:StopSession",
            "glue:DeleteSession",
            "glue:GetSession"
          ],
          "Resource": [
            "arn:aws:glue:*:*:session/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/owner": "${aws:PrincipalTag/owner}"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "glue:ListSessions"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Deny",
          "Action": [
            "glue:TagResource",
            "glue:UntagResource",
            "tag:TagResources",
            "tag:UntagResources"
          ],
          "Resource": [
            "arn:aws:glue:*:*:session/*"
          ],
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:TagKeys": [
                "owner"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/service-role/AwsGlueSessionServiceRoleUserRestrictedForNotebook*"
          ],
          "Condition": {
            "StringLike": {
              "iam:PassedToService": [
                "glue.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-04-18T15:24:56+00:00"
  },
  "AwsGlueSessionUserRestrictedNotebookServiceRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "glue:*",
          "Resource": [
            "arn:aws:glue:*:*:catalog/*",
            "arn:aws:glue:*:*:database/*",
            "arn:aws:glue:*:*:table/*",
            "arn:aws:glue:*:*:tableVersion/*",
            "arn:aws:glue:*:*:connection/*",
            "arn:aws:glue:*:*:userDefinedFunction/*",
            "arn:aws:glue:*:*:devEndpoint/*",
            "arn:aws:glue:*:*:job/*",
            "arn:aws:glue:*:*:trigger/*",
            "arn:aws:glue:*:*:crawler/*",
            "arn:aws:glue:*:*:workflow/*",
            "arn:aws:glue:*:*:mlTransform/*",
            "arn:aws:glue:*:*:registry/*",
            "arn:aws:glue:*:*:schema/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "glue:CreateSession"
          ],
          "Resource": [
            "arn:aws:glue:*:*:session/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/owner": "${aws:PrincipalTag/owner}"
            },
            "ForAnyValue:StringEquals": {
              "aws:TagKeys": [
                "owner"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "glue:RunStatement",
            "glue:GetStatement",
            "glue:ListStatements",
            "glue:CancelStatement",
            "glue:StopSession",
            "glue:DeleteSession",
            "glue:GetSession"
          ],
          "Resource": [
            "arn:aws:glue:*:*:session/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/owner": "${aws:PrincipalTag/owner}"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "glue:ListSessions"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Deny",
          "Action": [
            "glue:TagResource",
            "glue:UntagResource",
            "tag:TagResources",
            "tag:UntagResources"
          ],
          "Resource": [
            "arn:aws:glue:*:*:session/*"
          ],
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:TagKeys": [
                "owner"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:CreateBucket"
          ],
          "Resource": [
            "arn:aws:s3:::aws-glue-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:PutObject",
            "s3:DeleteObject"
          ],
          "Resource": [
            "arn:aws:s3:::aws-glue-*/*",
            "arn:aws:s3:::*/*aws-glue-*/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": [
            "arn:aws:s3:::crawler-public*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
          ],
          "Resource": [
            "arn:aws:logs:*:*:/aws-glue/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags",
            "ec2:DeleteTags"
          ],
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "aws-glue-service-resource"
              ]
            }
          },
          "Resource": [
            "arn:aws:ec2:*:*:network-interface/*",
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:instance/*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-04-18T15:27:11+00:00"
  },
  "AwsGlueSessionUserRestrictedPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "glue:CreateSession"
          ],
          "Resource": [
            "arn:aws:glue:*:*:session/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/owner": "${aws:userid}"
            },
            "ForAnyValue:StringEquals": {
              "aws:TagKeys": [
                "owner"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "glue:RunStatement",
            "glue:GetStatement",
            "glue:ListStatements",
            "glue:CancelStatement",
            "glue:StopSession",
            "glue:DeleteSession",
            "glue:GetSession"
          ],
          "Resource": [
            "arn:aws:glue:*:*:session/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/owner": "${aws:userid}"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "glue:ListSessions"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Deny",
          "Action": [
            "glue:TagResource",
            "glue:UntagResource",
            "tag:TagResources",
            "tag:UntagResources"
          ],
          "Resource": [
            "arn:aws:glue:*:*:session/*"
          ],
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:TagKeys": [
                "owner"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/service-role/AwsGlueSessionServiceRoleUserRestricted*"
          ],
          "Condition": {
            "StringLike": {
              "iam:PassedToService": [
                "glue.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-04-14T21:31:01+00:00"
  },
  "AwsGlueSessionUserRestrictedServiceRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "glue:*",
          "Resource": [
            "arn:aws:glue:*:*:catalog/*",
            "arn:aws:glue:*:*:database/*",
            "arn:aws:glue:*:*:table/*",
            "arn:aws:glue:*:*:tableVersion/*",
            "arn:aws:glue:*:*:connection/*",
            "arn:aws:glue:*:*:userDefinedFunction/*",
            "arn:aws:glue:*:*:devEndpoint/*",
            "arn:aws:glue:*:*:job/*",
            "arn:aws:glue:*:*:trigger/*",
            "arn:aws:glue:*:*:crawler/*",
            "arn:aws:glue:*:*:workflow/*",
            "arn:aws:glue:*:*:mlTransform/*",
            "arn:aws:glue:*:*:registry/*",
            "arn:aws:glue:*:*:schema/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "glue:CreateSession"
          ],
          "Resource": [
            "arn:aws:glue:*:*:session/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/owner": "${aws:userid}"
            },
            "ForAnyValue:StringEquals": {
              "aws:TagKeys": [
                "owner"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "glue:RunStatement",
            "glue:GetStatement",
            "glue:ListStatements",
            "glue:CancelStatement",
            "glue:StopSession",
            "glue:DeleteSession",
            "glue:GetSession"
          ],
          "Resource": [
            "arn:aws:glue:*:*:session/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/owner": "${aws:userid}"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "glue:ListSessions"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Deny",
          "Action": [
            "glue:TagResource",
            "glue:UntagResource",
            "tag:TagResources",
            "tag:UntagResources"
          ],
          "Resource": [
            "arn:aws:glue:*:*:session/*"
          ],
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:TagKeys": [
                "owner"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:CreateBucket"
          ],
          "Resource": [
            "arn:aws:s3:::aws-glue-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:PutObject",
            "s3:DeleteObject"
          ],
          "Resource": [
            "arn:aws:s3:::aws-glue-*/*",
            "arn:aws:s3:::*/*aws-glue-*/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": [
            "arn:aws:s3:::crawler-public*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
          ],
          "Resource": [
            "arn:aws:logs:*:*:/aws-glue/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags",
            "ec2:DeleteTags"
          ],
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "aws-glue-service-resource"
              ]
            }
          },
          "Resource": [
            "arn:aws:ec2:*:*:network-interface/*",
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:instance/*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-04-14T21:30:07+00:00"
  },
  "BatchServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeInstances",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeSubnets",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeImages",
            "ec2:DescribeImageAttribute",
            "ec2:DescribeSpotInstanceRequests",
            "ec2:DescribeSpotFleetInstances",
            "ec2:DescribeSpotFleetRequests",
            "ec2:DescribeSpotPriceHistory",
            "ec2:DescribeVpcClassicLink",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:RequestSpotFleet",
            "autoscaling:DescribeAccountLimits",
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribeLaunchConfigurations",
            "autoscaling:DescribeAutoScalingInstances",
            "eks:DescribeCluster",
            "ecs:DescribeClusters",
            "ecs:DescribeContainerInstances",
            "ecs:DescribeTaskDefinition",
            "ecs:DescribeTasks",
            "ecs:ListClusters",
            "ecs:ListContainerInstances",
            "ecs:ListTaskDefinitionFamilies",
            "ecs:ListTaskDefinitions",
            "ecs:ListTasks",
            "ecs:DeregisterTaskDefinition",
            "ecs:TagResource",
            "ecs:ListAccountSettings",
            "logs:DescribeLogGroups",
            "iam:GetInstanceProfile",
            "iam:GetRole"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/batch/job*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:PutLogEvents"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/batch/job*:log-stream:*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "autoscaling:CreateOrUpdateTags"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "aws:RequestTag/AWSBatchServiceTag": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "ec2.amazonaws.com",
                "ec2.amazonaws.com.cn",
                "ecs-tasks.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": [
                "spot.amazonaws.com",
                "spotfleet.amazonaws.com",
                "autoscaling.amazonaws.com",
                "ecs.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateLaunchTemplate"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "aws:RequestTag/AWSBatchServiceTag": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:TerminateInstances",
            "ec2:CancelSpotFleetRequests",
            "ec2:ModifySpotFleetRequest",
            "ec2:DeleteLaunchTemplate"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/AWSBatchServiceTag": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "autoscaling:CreateLaunchConfiguration",
            "autoscaling:DeleteLaunchConfiguration"
          ],
          "Resource": "arn:aws:autoscaling:*:*:launchConfiguration:*:launchConfigurationName/AWSBatch*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "autoscaling:CreateAutoScalingGroup",
            "autoscaling:UpdateAutoScalingGroup",
            "autoscaling:SetDesiredCapacity",
            "autoscaling:DeleteAutoScalingGroup",
            "autoscaling:SuspendProcesses",
            "autoscaling:PutNotificationConfiguration",
            "autoscaling:TerminateInstanceInAutoScalingGroup"
          ],
          "Resource": "arn:aws:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/AWSBatch*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ecs:DeleteCluster",
            "ecs:DeregisterContainerInstance",
            "ecs:RunTask",
            "ecs:StartTask",
            "ecs:StopTask"
          ],
          "Resource": "arn:aws:ecs:*:*:cluster/AWSBatch*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ecs:RunTask",
            "ecs:StartTask",
            "ecs:StopTask"
          ],
          "Resource": "arn:aws:ecs:*:*:task-definition/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ecs:StopTask"
          ],
          "Resource": "arn:aws:ecs:*:*:task/*/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ecs:CreateCluster",
            "ecs:RegisterTaskDefinition"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "aws:RequestTag/AWSBatchServiceTag": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:RunInstances",
          "Resource": [
            "arn:aws:ec2:*::image/*",
            "arn:aws:ec2:*::snapshot/*",
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:network-interface/*",
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:volume/*",
            "arn:aws:ec2:*:*:key-pair/*",
            "arn:aws:ec2:*:*:launch-template/*",
            "arn:aws:ec2:*:*:placement-group/*",
            "arn:aws:ec2:*:*:capacity-reservation/*",
            "arn:aws:ec2:*:*:elastic-gpu/*",
            "arn:aws:elastic-inference:*:*:elastic-inference-accelerator/*",
            "arn:aws:resource-groups:*:*:group/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "ec2:RunInstances",
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "Null": {
              "aws:RequestTag/AWSBatchServiceTag": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": [
                "RunInstances",
                "CreateLaunchTemplate",
                "RequestSpotFleet"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v6",
    "IsDefaultVersion": true,
    "CreateDate": "2022-10-17T17:20:22+00:00"
  },
  "Billing": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "VisualEditor0",
          "Effect": "Allow",
          "Action": [
            "account:GetAccountInformation",
            "aws-portal:*Billing",
            "aws-portal:*PaymentMethods",
            "aws-portal:*Usage",
            "billing:GetBillingData",
            "billing:GetBillingDetails",
            "billing:GetBillingNotifications",
            "billing:GetBillingPreferences",
            "billing:GetContractInformation",
            "billing:GetCredits",
            "billing:GetIAMAccessPreference",
            "billing:GetSellerOfRecord",
            "billing:ListBillingViews",
            "billing:PutContractInformation",
            "billing:RedeemCredits",
            "billing:UpdateBillingPreferences",
            "billing:UpdateIAMAccessPreference",
            "budgets:ModifyBudget",
            "budgets:ViewBudget",
            "ce:CreateNotificationSubscription",
            "ce:CreateReport",
            "ce:DeleteNotificationSubscription",
            "ce:DeleteReport",
            "ce:ListCostAllocationTags",
            "ce:UpdateCostAllocationTagsStatus",
            "ce:UpdateNotificationSubscription",
            "ce:UpdatePreferences",
            "ce:UpdateReport",
            "consolidatedbilling:GetAccountBillingRole",
            "consolidatedbilling:ListLinkedAccounts",
            "cur:DeleteReportDefinition",
            "cur:DescribeReportDefinitions",
            "cur:GetClassicReport",
            "cur:GetClassicReportPreferences",
            "cur:GetUsageReport",
            "cur:ModifyReportDefinition",
            "cur:PutClassicReportPreferences",
            "cur:PutReportDefinition",
            "cur:ValidateReportDestination",
            "freetier:GetFreeTierAlertPreference",
            "freetier:GetFreeTierUsage",
            "freetier:PutFreeTierAlertPreference",
            "invoicing:GetInvoiceEmailDeliveryPreferences",
            "invoicing:GetInvoicePDF",
            "invoicing:ListInvoiceSummaries",
            "invoicing:PutInvoiceEmailDeliveryPreferences",
            "payments:CreatePaymentInstrument",
            "payments:DeletePaymentInstrument",
            "payments:GetPaymentInstrument",
            "payments:GetPaymentStatus",
            "payments:ListPaymentPreferences",
            "payments:MakePayment",
            "payments:UpdatePaymentPreferences",
            "purchase-orders:AddPurchaseOrder",
            "purchase-orders:DeletePurchaseOrder",
            "purchase-orders:GetPurchaseOrder",
            "purchase-orders:ListPurchaseOrderInvoices",
            "purchase-orders:ListPurchaseOrders",
            "purchase-orders:ListTagsForResource",
            "purchase-orders:ModifyPurchaseOrders",
            "purchase-orders:TagResource",
            "purchase-orders:UntagResource",
            "purchase-orders:UpdatePurchaseOrder",
            "purchase-orders:UpdatePurchaseOrderStatus",
            "purchase-orders:ViewPurchaseOrders",
            "tax:BatchPutTaxRegistration",
            "tax:DeleteTaxRegistration",
            "tax:GetExemptions",
            "tax:GetTaxInheritance",
            "tax:GetTaxInterview",
            "tax:GetTaxRegistration",
            "tax:GetTaxRegistrationDocument",
            "tax:ListTaxRegistrations",
            "tax:PutTaxInheritance",
            "tax:PutTaxInterview",
            "tax:PutTaxRegistration",
            "tax:UpdateExemptions"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v8",
    "IsDefaultVersion": true,
    "CreateDate": "2023-07-26T19:58:17+00:00"
  },
  "CertificateManagerServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "acm-pca:IssueCertificate",
            "acm-pca:GetCertificate"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-06-25T17:56:49+00:00"
  },
  "ClientVPNServiceConnectionsRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "lambda:InvokeFunction"
          ],
          "Resource": "arn:aws:lambda:*:*:function:AWSClientVPN-*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-08-12T19:48:06+00:00"
  },
  "ClientVPNServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeVpcs",
            "ec2:DescribeSubnets",
            "ec2:DescribeInternetGateways",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeAccountAttributes",
            "ds:AuthorizeApplication",
            "ds:DescribeDirectories",
            "ds:GetDirectoryLimits",
            "ds:UnauthorizeApplication",
            "logs:DescribeLogStreams",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "logs:DescribeLogGroups",
            "acm:GetCertificate",
            "acm:DescribeCertificate",
            "iam:GetSAMLProvider",
            "lambda:GetFunctionConfiguration"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2020-08-12T19:39:34+00:00"
  },
  "CloudFormationStackSetsOrgAdminServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AllowsAWSOrganizationsReadAPIs",
          "Effect": "Allow",
          "Action": [
            "organizations:List*",
            "organizations:Describe*"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AllowAssumeRoleInMemberAccounts",
          "Effect": "Allow",
          "Action": "sts:AssumeRole",
          "Resource": "arn:aws:iam::*:role/stacksets-exec-*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-12-10T00:20:05+00:00"
  },
  "CloudFormationStackSetsOrgMemberServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "iam:CreateRole",
            "iam:DeleteRole",
            "iam:GetRole"
          ],
          "Effect": "Allow",
          "Resource": [
            "arn:aws:iam::*:role/stacksets-exec-*"
          ]
        },
        {
          "Action": [
            "iam:DetachRolePolicy",
            "iam:AttachRolePolicy"
          ],
          "Effect": "Allow",
          "Resource": [
            "arn:aws:iam::*:role/stacksets-exec-*"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PolicyARN": "arn:aws:iam::aws:policy/AdministratorAccess"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-12-09T23:52:37+00:00"
  },
  "CloudFrontFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "s3:ListAllMyBuckets"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:s3:::*"
        },
        {
          "Action": [
            "acm:ListCertificates",
            "cloudfront:*",
            "iam:ListServerCertificates",
            "waf:ListWebACLs",
            "waf:GetWebACL",
            "wafv2:ListWebACLs",
            "wafv2:GetWebACL",
            "kinesis:ListStreams"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "kinesis:DescribeStream"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:kinesis:*:*:*"
        },
        {
          "Action": [
            "iam:ListRoles"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:iam::*:*"
        }
      ]
    },
    "VersionId": "v6",
    "IsDefaultVersion": true,
    "CreateDate": "2020-09-03T20:18:42+00:00"
  },
  "CloudFrontReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "acm:ListCertificates",
            "cloudfront:DescribeFunction",
            "cloudfront:Get*",
            "cloudfront:List*",
            "iam:ListServerCertificates",
            "route53:List*",
            "waf:ListWebACLs",
            "waf:GetWebACL",
            "wafv2:ListWebACLs",
            "wafv2:GetWebACL"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2021-09-08T22:10:54+00:00"
  },
  "CloudHSMServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "logs:DescribeLogStreams"
          ],
          "Resource": [
            "arn:aws:logs:*:*:*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2017-11-06T19:12:46+00:00"
  },
  "CloudSearchFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "cloudsearch:*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:39:56+00:00"
  },
  "CloudSearchReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "cloudsearch:Describe*",
            "cloudsearch:List*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:39:57+00:00"
  },
  "CloudTrailServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "CloudTrailFullAccess",
          "Effect": "Allow",
          "Action": [
            "cloudtrail:*"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AwsOrgsAccess",
          "Effect": "Allow",
          "Action": [
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAccounts",
            "organizations:ListAWSServiceAccessForOrganization"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "AwsOrgsDelegatedAdminAccess",
          "Effect": "Allow",
          "Action": "organizations:ListDelegatedAdministrators",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "organizations:ServicePrincipal": [
                "cloudtrail.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-03T20:35:01+00:00"
  },
  "CloudWatch-CrossAccountAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "sts:AssumeRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/CloudWatch-CrossAccountSharing*"
          ],
          "Effect": "Allow"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-07-23T09:59:27+00:00"
  },
  "CloudWatchActionsEC2Access": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:Describe*",
            "ec2:Describe*",
            "ec2:RebootInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-07-07T00:00:33+00:00"
  },
  "CloudWatchAgentAdminPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricData",
            "ec2:DescribeTags",
            "logs:PutLogEvents",
            "logs:DescribeLogStreams",
            "logs:DescribeLogGroups",
            "logs:CreateLogStream",
            "logs:CreateLogGroup"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:GetParameter",
            "ssm:PutParameter"
          ],
          "Resource": "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-03-07T00:52:31+00:00"
  },
  "CloudWatchAgentServerPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricData",
            "ec2:DescribeVolumes",
            "ec2:DescribeTags",
            "logs:PutLogEvents",
            "logs:DescribeLogStreams",
            "logs:DescribeLogGroups",
            "logs:CreateLogStream",
            "logs:CreateLogGroup"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:GetParameter"
          ],
          "Resource": "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2019-10-17T23:08:51+00:00"
  },
  "CloudWatchApplicationInsightsFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "applicationinsights:*",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstances",
            "ec2:DescribeVolumes",
            "rds:DescribeDBInstances",
            "rds:DescribeDBClusters",
            "sqs:ListQueues",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "autoscaling:DescribeAutoScalingGroups",
            "lambda:ListFunctions",
            "dynamodb:ListTables",
            "s3:ListAllMyBuckets",
            "sns:ListTopics",
            "states:ListStateMachines",
            "apigateway:GET",
            "ecs:ListClusters",
            "ecs:DescribeTaskDefinition",
            "ecs:ListServices",
            "ecs:ListTasks",
            "eks:ListClusters",
            "eks:ListNodegroups",
            "fsx:DescribeFileSystems",
            "logs:DescribeLogGroups"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/aws-service-role/application-insights.amazonaws.com/AWSServiceRoleForApplicationInsights"
          ],
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "application-insights.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2022-01-25T17:51:29+00:00"
  },
  "CloudWatchApplicationInsightsReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "applicationinsights:Describe*",
            "applicationinsights:List*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-11-24T18:48:00+00:00"
  },
  "CloudWatchApplicationSignalsServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "XRayPermission",
          "Effect": "Allow",
          "Action": [
            "xray:GetServiceGraph"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        },
        {
          "Sid": "CWLogsPermission",
          "Effect": "Allow",
          "Action": [
            "logs:StartQuery",
            "logs:GetQueryResults"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/appsignals/eks:*",
            "arn:aws:logs:*:*:log-group:/aws/appsignals/generic:*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        },
        {
          "Sid": "CWMetricsPermission",
          "Effect": "Allow",
          "Action": [
            "cloudwatch:GetMetricData",
            "cloudwatch:ListMetrics"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        },
        {
          "Sid": "TagsPermission",
          "Effect": "Allow",
          "Action": [
            "tag:GetResources"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceAccount": "${aws:PrincipalAccount}"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-09T18:09:57+00:00"
  },
  "CloudWatchAutomaticDashboardsAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "autoscaling:DescribeAutoScalingGroups",
            "cloudfront:GetDistribution",
            "cloudfront:ListDistributions",
            "dynamodb:DescribeTable",
            "dynamodb:ListTables",
            "ec2:DescribeInstances",
            "ec2:DescribeVolumes",
            "ecs:DescribeClusters",
            "ecs:DescribeContainerInstances",
            "ecs:ListClusters",
            "ecs:ListContainerInstances",
            "ecs:ListServices",
            "elasticache:DescribeCacheClusters",
            "elasticbeanstalk:DescribeEnvironments",
            "elasticfilesystem:DescribeFileSystems",
            "elasticloadbalancing:DescribeLoadBalancers",
            "kinesis:DescribeStream",
            "kinesis:ListStreams",
            "lambda:GetFunction",
            "lambda:ListFunctions",
            "rds:DescribeDBClusters",
            "rds:DescribeDBInstances",
            "resource-groups:ListGroupResources",
            "resource-groups:ListGroups",
            "route53:GetHealthCheck",
            "route53:ListHealthChecks",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "sns:ListTopics",
            "sqs:GetQueueAttributes",
            "sqs:GetQueueUrl",
            "sqs:ListQueues",
            "synthetics:DescribeCanariesLastRun",
            "tag:GetResources"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "apigateway:GET"
          ],
          "Effect": "Allow",
          "Resource": [
            "arn:aws:apigateway:*::/restapis*"
          ]
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2021-04-20T13:05:40+00:00"
  },
  "CloudWatchCrossAccountSharingConfiguration": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:Link",
            "oam:ListLinks"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "oam:DeleteLink",
            "oam:GetLink",
            "oam:TagResource"
          ],
          "Resource": "arn:aws:oam:*:*:link/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "oam:CreateLink",
            "oam:UpdateLink"
          ],
          "Resource": [
            "arn:aws:oam:*:*:link/*",
            "arn:aws:oam:*:*:sink/*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-27T14:01:10+00:00"
  },
  "CloudWatchEventsBuiltInTargetExecutionAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "CloudWatchEventsBuiltInTargetExecutionAccess",
          "Effect": "Allow",
          "Action": [
            "ec2:Describe*",
            "ec2:RebootInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances",
            "ec2:CreateSnapshot"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2016-01-14T18:35:49+00:00"
  },
  "CloudWatchEventsFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "EventBridgeActions",
          "Effect": "Allow",
          "Action": [
            "events:*",
            "schemas:*",
            "scheduler:*",
            "pipes:*"
          ],
          "Resource": "*"
        },
        {
          "Sid": "IAMCreateServiceLinkedRoleForApiDestinations",
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/AmazonEventBridgeApiDestinationsServiceRolePolicy",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "apidestinations.events.amazonaws.com"
            }
          }
        },
        {
          "Sid": "IAMCreateServiceLinkedRoleForAmazonEventBridgeSchemas",
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/schemas.amazonaws.com/AWSServiceRoleForSchemas",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "schemas.amazonaws.com"
            }
          }
        },
        {
          "Sid": "SecretsManagerAccessForApiDestinations",
          "Effect": "Allow",
          "Action": [
            "secretsmanager:CreateSecret",
            "secretsmanager:UpdateSecret",
            "secretsmanager:DeleteSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:PutSecretValue"
          ],
          "Resource": "arn:aws:secretsmanager:*:*:secret:events!*"
        },
        {
          "Sid": "IAMPassRoleForCloudWatchEvents",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/AWS_Events_Invoke_Targets"
        },
        {
          "Sid": "IAMPassRoleAccessForScheduler",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "scheduler.amazonaws.com"
            }
          }
        },
        {
          "Sid": "IAMPassRoleAccessForPipes",
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "arn:aws:iam::*:role/*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "pipes.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-12-01T17:05:05+00:00"
  },
  "CloudWatchEventsInvocationAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "CloudWatchEventsInvocationAccess",
          "Effect": "Allow",
          "Action": [
            "kinesis:PutRecord"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2016-01-14T18:36:33+00:00"
  },
  "CloudWatchEventsReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "events:DescribeRule",
            "events:DescribeEventBus",
            "events:DescribeEventSource",
            "events:ListEventBuses",
            "events:ListEventSources",
            "events:ListRuleNamesByTarget",
            "events:ListRules",
            "events:ListTargetsByRule",
            "events:TestEventPattern",
            "events:DescribeArchive",
            "events:ListArchives",
            "events:DescribeReplay",
            "events:ListReplays",
            "events:DescribeConnection",
            "events:ListConnections",
            "events:DescribeApiDestination",
            "events:ListApiDestinations",
            "events:DescribeEndpoint",
            "events:ListEndpoints",
            "schemas:DescribeCodeBinding",
            "schemas:DescribeDiscoverer",
            "schemas:DescribeRegistry",
            "schemas:DescribeSchema",
            "schemas:ExportSchema",
            "schemas:GetCodeBindingSource",
            "schemas:GetDiscoveredSchema",
            "schemas:GetResourcePolicy",
            "schemas:ListDiscoverers",
            "schemas:ListRegistries",
            "schemas:ListSchemas",
            "schemas:ListSchemaVersions",
            "schemas:ListTagsForResource",
            "schemas:SearchSchemas",
            "scheduler:GetSchedule",
            "scheduler:GetScheduleGroup",
            "scheduler:ListSchedules",
            "scheduler:ListScheduleGroups",
            "scheduler:ListTagsForResource",
            "pipes:DescribePipe",
            "pipes:ListPipes",
            "pipes:ListTagsForResource"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2022-12-01T16:29:31+00:00"
  },
  "CloudWatchEventsServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:DescribeAlarms",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstances",
            "ec2:DescribeSnapshots",
            "ec2:DescribeVolumeStatus",
            "ec2:DescribeVolumes",
            "ec2:RebootInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances",
            "ec2:CreateSnapshot"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2017-11-17T00:42:04+00:00"
  },
  "CloudWatchFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "autoscaling:Describe*",
            "cloudwatch:*",
            "logs:*",
            "sns:*",
            "iam:GetPolicy",
            "iam:GetPolicyVersion",
            "iam:GetRole",
            "oam:ListSinks"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/events.amazonaws.com/AWSServiceRoleForCloudWatchEvents*",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "events.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "oam:ListAttachedLinks"
          ],
          "Resource": "arn:aws:oam:*:*:sink/*"
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-27T13:23:49+00:00"
  },
  "CloudWatchFullAccessV2": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "CloudWatchFullAccessPermissions",
          "Effect": "Allow",
          "Action": [
            "application-autoscaling:DescribeScalingPolicies",
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribePolicies",
            "cloudwatch:*",
            "logs:*",
            "sns:CreateTopic",
            "sns:ListSubscriptions",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTopics",
            "sns:Subscribe",
            "iam:GetPolicy",
            "iam:GetPolicyVersion",
            "iam:GetRole",
            "oam:ListSinks"
          ],
          "Resource": "*"
        },
        {
          "Sid": "EventsServicePermissions",
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/events.amazonaws.com/AWSServiceRoleForCloudWatchEvents*",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "events.amazonaws.com"
            }
          }
        },
        {
          "Sid": "OAMReadPermissions",
          "Effect": "Allow",
          "Action": [
            "oam:ListAttachedLinks"
          ],
          "Resource": "arn:aws:oam:*:*:sink/*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-08-01T11:32:57+00:00"
  },
  "CloudWatchInternetMonitorServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudfront:GetDistribution",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeVpcs",
            "elasticloadbalancing:DescribeLoadBalancers",
            "workspaces:DescribeWorkspaceDirectories"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "logs:CreateLogGroup",
          "Resource": "arn:aws:logs:*:*:log-group:/aws/internet-monitor/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/internet-monitor/*:log-stream:*"
        },
        {
          "Effect": "Allow",
          "Action": "cloudwatch:PutMetricData",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": "AWS/InternetMonitor"
            }
          },
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-07-20T04:46:37+00:00"
  },
  "CloudWatchLambdaInsightsExecutionRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "logs:CreateLogGroup",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:PutLogEvents"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/lambda-insights:*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-10-07T19:27:06+00:00"
  },
  "CloudWatchLogsCrossAccountSharingConfiguration": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "logs:Link",
            "oam:ListLinks"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "oam:DeleteLink",
            "oam:GetLink",
            "oam:TagResource"
          ],
          "Resource": "arn:aws:oam:*:*:link/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "oam:CreateLink",
            "oam:UpdateLink"
          ],
          "Resource": [
            "arn:aws:oam:*:*:link/*",
            "arn:aws:oam:*:*:sink/*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-27T13:55:22+00:00"
  },
  "CloudWatchLogsFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "logs:*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:40:02+00:00"
  },
  "CloudWatchLogsReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "logs:Describe*",
            "logs:Get*",
            "logs:List*",
            "logs:StartQuery",
            "logs:StopQuery",
            "logs:TestMetricFilter",
            "logs:FilterLogEvents",
            "logs:StartLiveTail",
            "logs:StopLiveTail"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2023-06-06T17:16:08+00:00"
  },
  "CloudWatchReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "application-autoscaling:DescribeScalingPolicies",
            "autoscaling:Describe*",
            "cloudwatch:Describe*",
            "cloudwatch:Get*",
            "cloudwatch:List*",
            "logs:Get*",
            "logs:List*",
            "logs:StartQuery",
            "logs:StopQuery",
            "logs:Describe*",
            "logs:TestMetricFilter",
            "logs:FilterLogEvents",
            "logs:StartLiveTail",
            "logs:StopLiveTail",
            "oam:ListSinks",
            "sns:Get*",
            "sns:List*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "oam:ListAttachedLinks"
          ],
          "Resource": "arn:aws:oam:*:*:sink/*"
        }
      ]
    },
    "VersionId": "v7",
    "IsDefaultVersion": true,
    "CreateDate": "2023-09-14T11:15:56+00:00"
  },
  "CloudWatchSyntheticsFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "synthetics:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:CreateBucket",
            "s3:PutEncryptionConfiguration"
          ],
          "Resource": [
            "arn:aws:s3:::cw-syn-results-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:ListRoles",
            "s3:ListAllMyBuckets",
            "xray:GetTraceSummaries",
            "xray:BatchGetTraces",
            "apigateway:GET"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetBucketLocation"
          ],
          "Resource": "arn:aws:s3:::*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:ListBucket"
          ],
          "Resource": "arn:aws:s3:::cw-syn-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObjectVersion"
          ],
          "Resource": "arn:aws:s3:::aws-synthetics-library-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/service-role/CloudWatchSyntheticsRole*"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "lambda.amazonaws.com",
                "synthetics.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:GetRole",
            "iam:ListAttachedRolePolicies"
          ],
          "Resource": [
            "arn:aws:iam::*:role/service-role/CloudWatchSyntheticsRole*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:DeleteAlarms"
          ],
          "Resource": [
            "arn:aws:cloudwatch:*:*:alarm:Synthetics-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:DescribeAlarms"
          ],
          "Resource": [
            "arn:aws:cloudwatch:*:*:alarm:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "lambda:CreateFunction",
            "lambda:AddPermission",
            "lambda:PublishVersion",
            "lambda:UpdateFunctionCode",
            "lambda:UpdateFunctionConfiguration",
            "lambda:GetFunctionConfiguration",
            "lambda:DeleteFunction"
          ],
          "Resource": [
            "arn:aws:lambda:*:*:function:cwsyn-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "lambda:GetLayerVersion",
            "lambda:PublishLayerVersion",
            "lambda:DeleteLayerVersion"
          ],
          "Resource": [
            "arn:aws:lambda:*:*:layer:cwsyn-*",
            "arn:aws:lambda:*:*:layer:Synthetics:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeVpcs",
            "ec2:DescribeSubnets",
            "ec2:DescribeSecurityGroups"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "sns:ListTopics"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "sns:CreateTopic",
            "sns:Subscribe",
            "sns:ListSubscriptionsByTopic"
          ],
          "Resource": [
            "arn:*:sns:*:*:Synthetics-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:ListAliases"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:DescribeKey"
          ],
          "Resource": "arn:aws:kms:*:*:key/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:Decrypt"
          ],
          "Resource": "arn:aws:kms:*:*:key/*",
          "Condition": {
            "StringLike": {
              "kms:ViaService": [
                "s3.*.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v9",
    "IsDefaultVersion": true,
    "CreateDate": "2022-05-06T18:14:01+00:00"
  },
  "CloudWatchSyntheticsReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "synthetics:Describe*",
            "synthetics:Get*",
            "synthetics:List*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2020-03-06T19:26:01+00:00"
  },
  "CloudwatchApplicationInsightsServiceLinkedRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:DescribeAlarmHistory",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricData",
            "cloudwatch:ListMetrics",
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:PutAnomalyDetector",
            "cloudwatch:DeleteAnomalyDetector",
            "cloudwatch:DescribeAnomalyDetectors"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:FilterLogEvents",
            "logs:GetLogEvents",
            "logs:DescribeLogStreams",
            "logs:DescribeLogGroups"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "events:DescribeRule"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudFormation:CreateStack",
            "cloudFormation:UpdateStack",
            "cloudFormation:DeleteStack",
            "cloudFormation:DescribeStackResources"
          ],
          "Resource": [
            "arn:aws:cloudformation:*:*:stack/ApplicationInsights-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudFormation:DescribeStacks",
            "cloudFormation:ListStackResources",
            "cloudFormation:ListStacks"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "tag:GetResources"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "resource-groups:ListGroupResources",
            "resource-groups:GetGroupQuery",
            "resource-groups:GetGroup"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "resource-groups:CreateGroup",
            "resource-groups:DeleteGroup"
          ],
          "Resource": [
            "arn:aws:resource-groups:*:*:group/ApplicationInsights-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "autoscaling:DescribeAutoScalingGroups"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:PutParameter",
            "ssm:DeleteParameter",
            "ssm:AddTagsToResource",
            "ssm:RemoveTagsFromResource",
            "ssm:GetParameters"
          ],
          "Resource": "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-ApplicationInsights-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:CreateAssociation",
            "ssm:UpdateAssociation",
            "ssm:DeleteAssociation",
            "ssm:DescribeAssociation"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*",
            "arn:aws:ssm:*:*:association/*",
            "arn:aws:ssm:*:*:managed-instance/*",
            "arn:aws:ssm:*:*:document/AWSEC2-ApplicationInsightsCloudwatchAgentInstallAndConfigure",
            "arn:aws:ssm:*:*:document/AWS-ConfigureAWSPackage",
            "arn:aws:ssm:*:*:document/AmazonCloudWatch-ManageAgent"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:GetOpsItem",
            "ssm:CreateOpsItem",
            "ssm:DescribeOpsItems",
            "ssm:UpdateOpsItem",
            "ssm:DescribeInstanceInformation"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:AddTagsToResource"
          ],
          "Resource": "arn:aws:ssm:*:*:opsitem/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:ListCommandInvocations",
            "ssm:GetCommandInvocation"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "ssm:SendCommand",
          "Resource": [
            "arn:aws:ec2:*:*:instance/*",
            "arn:aws:ssm:*:*:document/AWSEC2-CheckPerformanceCounterSets",
            "arn:aws:ssm:*:*:document/AWS-ConfigureAWSPackage",
            "arn:aws:ssm:*:*:document/AWSEC2-DetectWorkload",
            "arn:aws:ssm:*:*:document/AmazonCloudWatch-ManageAgent"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstances",
            "ec2:DescribeVolumes",
            "ec2:DescribeVolumeStatus",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeNatGateways"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "rds:DescribeDBInstances",
            "rds:DescribeDBClusters"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "lambda:ListFunctions",
            "lambda:GetFunctionConfiguration",
            "lambda:ListEventSourceMappings"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "events:DeleteRule"
          ],
          "Resource": [
            "arn:aws:events:*:*:rule/AmazonCloudWatch-ApplicationInsights-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "xray:GetServiceGraph",
            "xray:GetTraceSummaries",
            "xray:GetTimeSeriesServiceStatistics",
            "xray:GetTraceGraph"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:ListTables",
            "dynamodb:DescribeTable",
            "dynamodb:DescribeContributorInsights",
            "dynamodb:DescribeTimeToLive"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "application-autoscaling:DescribeScalableTargets"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListAllMyBuckets",
            "s3:GetMetricsConfiguration",
            "s3:GetReplicationConfiguration"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "states:ListStateMachines",
            "states:DescribeExecution",
            "states:DescribeStateMachine",
            "states:GetExecutionHistory"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "apigateway:GET"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ecs:DescribeClusters",
            "ecs:DescribeContainerInstances",
            "ecs:DescribeServices",
            "ecs:DescribeTaskDefinition",
            "ecs:DescribeTasks",
            "ecs:DescribeTaskSets",
            "ecs:ListClusters",
            "ecs:ListContainerInstances",
            "ecs:ListServices",
            "ecs:ListTasks"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ecs:UpdateClusterSettings"
          ],
          "Resource": [
            "arn:aws:ecs:*:*:cluster/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "eks:DescribeCluster",
            "eks:DescribeFargateProfile",
            "eks:DescribeNodegroup",
            "eks:ListClusters",
            "eks:ListFargateProfiles",
            "eks:ListNodegroups",
            "fsx:DescribeFileSystems",
            "fsx:DescribeVolumes"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "sns:GetSubscriptionAttributes",
            "sns:GetTopicAttributes",
            "sns:GetSMSAttributes",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTopics"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "sqs:ListQueues"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:DeleteSubscriptionFilter"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:PutSubscriptionFilter"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:*",
            "arn:aws:logs:*:*:destination:AmazonCloudWatch-ApplicationInsights-LogIngestionDestination*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticfilesystem:DescribeFileSystems"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "route53:GetHostedZone",
            "route53:GetHealthCheck",
            "route53:ListHostedZones",
            "route53:ListHealthChecks",
            "route53:ListQueryLoggingConfigs"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "route53resolver:ListFirewallRuleGroupAssociations",
            "route53resolver:GetFirewallRuleGroup",
            "route53resolver:ListFirewallRuleGroups",
            "route53resolver:ListResolverEndpoints",
            "route53resolver:GetResolverQueryLogConfig",
            "route53resolver:ListResolverQueryLogConfigs",
            "route53resolver:ListResolverQueryLogConfigAssociations",
            "route53resolver:GetResolverEndpoint",
            "route53resolver:GetFirewallRuleGroupAssociation"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v24",
    "IsDefaultVersion": true,
    "CreateDate": "2023-05-11T16:34:40+00:00"
  },
  "ComprehendDataAccessRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:ListBucket",
          "s3:PutObject"
        ],
        "Resource": [
          "arn:aws:s3:::*Comprehend*",
          "arn:aws:s3:::*comprehend*"
        ]
      }
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-03-06T22:28:15+00:00"
  },
  "ComprehendFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "comprehend:*",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:GetBucketLocation",
            "iam:ListRoles",
            "iam:GetRole"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2017-12-05T01:36:24+00:00"
  },
  "ComprehendMedicalFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "comprehendmedical:*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-11-27T17:55:52+00:00"
  },
  "ComprehendReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "comprehend:DetectDominantLanguage",
            "comprehend:BatchDetectDominantLanguage",
            "comprehend:DetectEntities",
            "comprehend:BatchDetectEntities",
            "comprehend:DetectKeyPhrases",
            "comprehend:BatchDetectKeyPhrases",
            "comprehend:DetectPiiEntities",
            "comprehend:ContainsPiiEntities",
            "comprehend:DetectSentiment",
            "comprehend:BatchDetectSentiment",
            "comprehend:DetectSyntax",
            "comprehend:BatchDetectSyntax",
            "comprehend:ClassifyDocument",
            "comprehend:DescribeTopicsDetectionJob",
            "comprehend:ListTopicsDetectionJobs",
            "comprehend:DescribeDominantLanguageDetectionJob",
            "comprehend:ListDominantLanguageDetectionJobs",
            "comprehend:DescribeEntitiesDetectionJob",
            "comprehend:ListEntitiesDetectionJobs",
            "comprehend:DescribeKeyPhrasesDetectionJob",
            "comprehend:ListKeyPhrasesDetectionJobs",
            "comprehend:DescribePiiEntitiesDetectionJob",
            "comprehend:ListPiiEntitiesDetectionJobs",
            "comprehend:DescribeSentimentDetectionJob",
            "comprehend:DescribeTargetedSentimentDetectionJob",
            "comprehend:ListSentimentDetectionJobs",
            "comprehend:ListTargetedSentimentDetectionJobs",
            "comprehend:DescribeDocumentClassifier",
            "comprehend:ListDocumentClassifiers",
            "comprehend:DescribeDocumentClassificationJob",
            "comprehend:ListDocumentClassificationJobs",
            "comprehend:DescribeEntityRecognizer",
            "comprehend:ListEntityRecognizers",
            "comprehend:ListTagsForResource",
            "comprehend:DescribeEndpoint",
            "comprehend:ListEndpoints",
            "comprehend:ListDocumentClassifierSummaries",
            "comprehend:ListEntityRecognizerSummaries",
            "comprehend:DescribeResourcePolicy"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v11",
    "IsDefaultVersion": true,
    "CreateDate": "2022-04-26T21:32:41+00:00"
  },
  "ComputeOptimizerReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "compute-optimizer:DescribeRecommendationExportJobs",
            "compute-optimizer:GetEnrollmentStatus",
            "compute-optimizer:GetEnrollmentStatusesForOrganization",
            "compute-optimizer:GetRecommendationSummaries",
            "compute-optimizer:GetEC2InstanceRecommendations",
            "compute-optimizer:GetEC2RecommendationProjectedMetrics",
            "compute-optimizer:GetAutoScalingGroupRecommendations",
            "compute-optimizer:GetEBSVolumeRecommendations",
            "compute-optimizer:GetLambdaFunctionRecommendations",
            "compute-optimizer:GetRecommendationPreferences",
            "compute-optimizer:GetEffectiveRecommendationPreferences",
            "compute-optimizer:GetECSServiceRecommendations",
            "compute-optimizer:GetECSServiceRecommendationProjectedMetrics",
            "compute-optimizer:GetLicenseRecommendations",
            "ec2:DescribeInstances",
            "ec2:DescribeVolumes",
            "ecs:ListServices",
            "ecs:ListClusters",
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribeAutoScalingInstances",
            "lambda:ListFunctions",
            "lambda:ListProvisionedConcurrencyConfigs",
            "cloudwatch:GetMetricData",
            "organizations:ListAccounts",
            "organizations:DescribeOrganization",
            "organizations:DescribeAccount"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v7",
    "IsDefaultVersion": true,
    "CreateDate": "2023-08-28T19:22:58+00:00"
  },
  "ComputeOptimizerServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "ComputeOptimizerFullAccess",
          "Effect": "Allow",
          "Action": [
            "compute-optimizer:*"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AwsOrgsAccess",
          "Effect": "Allow",
          "Action": [
            "organizations:DescribeOrganization",
            "organizations:ListAccounts",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListDelegatedAdministrators"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "CloudWatchAccess",
          "Effect": "Allow",
          "Action": [
            "cloudwatch:GetMetricData"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AutoScalingAccess",
          "Effect": "Allow",
          "Action": [
            "autoscaling:DescribeAutoScalingInstances",
            "autoscaling:DescribeAutoScalingGroups"
          ],
          "Resource": "*"
        },
        {
          "Sid": "Ec2Access",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstances",
            "ec2:DescribeVolumes"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2022-06-13T19:05:04+00:00"
  },
  "ConfigConformsServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "config:PutConfigRule",
            "config:DeleteConfigRule"
          ],
          "Resource": "arn:aws:config:*:*:config-rule/aws-service-rule/config-conforms.amazonaws.com*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "config:DescribeConfigRules"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "config:DescribeRemediationConfigurations",
            "config:DeleteRemediationConfiguration",
            "config:PutRemediationConfigurations"
          ],
          "Resource": "arn:aws:config:*:*:remediation-configuration/aws-service-remediation-configuration/config-conforms.amazonaws.com*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:GetRole"
          ],
          "Resource": "arn:aws:iam::*:role/aws-service-role/config-conforms.amazonaws.com/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:GetRole"
          ],
          "Resource": "arn:aws:iam::*:role/aws-service-role/remediation.config.amazonaws.com/AWSServiceRoleForConfigRemediation"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/remediation.config.amazonaws.com/AWSServiceRoleForConfigRemediation",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "remediation.config.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "ssm.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:DescribeDocument",
            "ssm:GetDocument"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:PutObject",
            "s3:PutObjectAcl",
            "s3:GetObject",
            "s3:GetBucketAcl"
          ],
          "Resource": "arn:aws:s3:::awsconfigconforms*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStackResource",
            "cloudformation:DescribeStackResources",
            "cloudformation:DescribeStacks",
            "cloudformation:GetStackPolicy",
            "cloudformation:SetStackPolicy",
            "cloudformation:UpdateStack",
            "cloudformation:UpdateTerminationProtection",
            "cloudformation:ValidateTemplate",
            "cloudformation:ListStackResources"
          ],
          "Resource": "arn:aws:cloudformation:*:*:stack/awsconfigconforms-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricData"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": "AWS/Config"
            }
          }
        }
      ]
    },
    "VersionId": "v6",
    "IsDefaultVersion": true,
    "CreateDate": "2023-01-12T04:17:34+00:00"
  },
  "CustomerProfilesServiceLinkedRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricData"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": "AWS/CustomerProfiles"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:DeleteRole"
          ],
          "Resource": "arn:aws:iam::*:role/aws-service-role/profile.amazonaws.com/AWSServiceRoleForProfile_*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-07T22:56:52+00:00"
  },
  "DAXServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateNetworkInterface",
            "ec2:CreateSecurityGroup",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteSecurityGroup",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:RevokeSecurityGroupIngress"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-03-05T17:51:25+00:00"
  },
  "DataScientist": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "autoscaling:*",
            "cloudwatch:*",
            "cloudformation:CreateStack",
            "cloudformation:DescribeStackEvents",
            "datapipeline:Describe*",
            "datapipeline:ListPipelines",
            "datapipeline:GetPipelineDefinition",
            "datapipeline:QueryObjects",
            "dynamodb:*",
            "ec2:CancelSpotInstanceRequests",
            "ec2:CancelSpotFleetRequests",
            "ec2:CreateTags",
            "ec2:DeleteTags",
            "ec2:Describe*",
            "ec2:ModifyImageAttribute",
            "ec2:ModifyInstanceAttribute",
            "ec2:ModifySpotFleetRequest",
            "ec2:RequestSpotInstances",
            "ec2:RequestSpotFleet",
            "elasticfilesystem:*",
            "elasticmapreduce:*",
            "es:*",
            "firehose:*",
            "fsx:DescribeFileSystems",
            "iam:GetInstanceProfile",
            "iam:GetRole",
            "iam:GetPolicy",
            "iam:GetPolicyVersion",
            "iam:ListRoles",
            "kinesis:*",
            "kms:List*",
            "lambda:Create*",
            "lambda:Delete*",
            "lambda:Get*",
            "lambda:InvokeFunction",
            "lambda:PublishVersion",
            "lambda:Update*",
            "lambda:List*",
            "machinelearning:*",
            "sdb:*",
            "rds:*",
            "sns:ListSubscriptions",
            "sns:ListTopics",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "redshift:*",
            "s3:CreateBucket",
            "sns:CreateTopic",
            "sns:Get*",
            "sns:List*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:Abort*",
            "s3:DeleteObject",
            "s3:Get*",
            "s3:List*",
            "s3:PutAccelerateConfiguration",
            "s3:PutBucketCors",
            "s3:PutBucketLogging",
            "s3:PutBucketNotification",
            "s3:PutBucketTagging",
            "s3:PutObject",
            "s3:Replicate*",
            "s3:RestoreObject"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:RunInstances",
            "ec2:TerminateInstances"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/DataPipelineDefaultRole",
            "arn:aws:iam::*:role/DataPipelineDefaultResourceRole",
            "arn:aws:iam::*:role/EMR_EC2_DefaultRole",
            "arn:aws:iam::*:role/EMR_DefaultRole",
            "arn:aws:iam::*:role/kinesis-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "sagemaker.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "sagemaker:*"
          ],
          "NotResource": [
            "arn:aws:sagemaker:*:*:domain/*",
            "arn:aws:sagemaker:*:*:user-profile/*",
            "arn:aws:sagemaker:*:*:app/*",
            "arn:aws:sagemaker:*:*:flow-definition/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "sagemaker:CreatePresignedDomainUrl",
            "sagemaker:DescribeDomain",
            "sagemaker:ListDomains",
            "sagemaker:DescribeUserProfile",
            "sagemaker:ListUserProfiles",
            "sagemaker:*App",
            "sagemaker:ListApps"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sagemaker:*FlowDefinition",
            "sagemaker:*FlowDefinitions"
          ],
          "Resource": "*",
          "Condition": {
            "StringEqualsIfExists": {
              "sagemaker:WorkteamType": [
                "private-crowd",
                "vendor-crowd"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2019-12-03T16:48:34+00:00"
  },
  "DatabaseAdministrator": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:DeleteAlarms",
            "cloudwatch:Describe*",
            "cloudwatch:DisableAlarmActions",
            "cloudwatch:EnableAlarmActions",
            "cloudwatch:Get*",
            "cloudwatch:List*",
            "cloudwatch:PutMetricAlarm",
            "datapipeline:ActivatePipeline",
            "datapipeline:CreatePipeline",
            "datapipeline:DeletePipeline",
            "datapipeline:DescribeObjects",
            "datapipeline:DescribePipelines",
            "datapipeline:GetPipelineDefinition",
            "datapipeline:ListPipelines",
            "datapipeline:PutPipelineDefinition",
            "datapipeline:QueryObjects",
            "dynamodb:*",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "elasticache:*",
            "iam:ListRoles",
            "iam:GetRole",
            "kms:ListKeys",
            "lambda:CreateEventSourceMapping",
            "lambda:CreateFunction",
            "lambda:DeleteEventSourceMapping",
            "lambda:DeleteFunction",
            "lambda:GetFunctionConfiguration",
            "lambda:ListEventSourceMappings",
            "lambda:ListFunctions",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:FilterLogEvents",
            "logs:GetLogEvents",
            "logs:Create*",
            "logs:PutLogEvents",
            "logs:PutMetricFilter",
            "rds:*",
            "redshift:*",
            "s3:CreateBucket",
            "sns:CreateTopic",
            "sns:DeleteTopic",
            "sns:Get*",
            "sns:List*",
            "sns:SetTopicAttributes",
            "sns:Subscribe",
            "sns:Unsubscribe"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:AbortMultipartUpload",
            "s3:DeleteObject*",
            "s3:Get*",
            "s3:List*",
            "s3:PutAccelerateConfiguration",
            "s3:PutBucketTagging",
            "s3:PutBucketVersioning",
            "s3:PutBucketWebsite",
            "s3:PutLifecycleConfiguration",
            "s3:PutReplicationConfiguration",
            "s3:PutObject*",
            "s3:Replicate*",
            "s3:RestoreObject"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/rds-monitoring-role",
            "arn:aws:iam::*:role/rdbms-lambda-access",
            "arn:aws:iam::*:role/lambda_exec_role",
            "arn:aws:iam::*:role/lambda-dynamodb-*",
            "arn:aws:iam::*:role/lambda-vpc-execution-role",
            "arn:aws:iam::*:role/DataPipelineDefaultRole",
            "arn:aws:iam::*:role/DataPipelineDefaultResourceRole"
          ]
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2019-01-08T00:48:02+00:00"
  },
  "DynamoDBCloudWatchContributorInsightsServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "cloudwatch:DeleteInsightRules",
            "cloudwatch:PutInsightRule"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:cloudwatch:*:*:insight-rule/DynamoDBContributorInsights*"
        },
        {
          "Action": [
            "cloudwatch:DescribeInsightRules"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-11-15T21:13:58+00:00"
  },
  "DynamoDBKinesisReplicationServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "kms:GenerateDataKey",
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "kms:ViaService": "kinesis.*.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "kinesis:PutRecord",
            "kinesis:PutRecords",
            "kinesis:DescribeStream"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-11-12T00:43:25+00:00"
  },
  "DynamoDBReplicationServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem",
            "dynamodb:DescribeTable",
            "dynamodb:UpdateTable",
            "dynamodb:Scan",
            "dynamodb:DescribeStream",
            "dynamodb:GetRecords",
            "dynamodb:GetShardIterator",
            "dynamodb:DescribeTimeToLive",
            "dynamodb:UpdateTimeToLive",
            "dynamodb:DescribeLimits",
            "application-autoscaling:RegisterScalableTarget",
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:PutScalingPolicy",
            "application-autoscaling:DescribeScalingPolicies",
            "account:ListRegions"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": [
                "dynamodb.application-autoscaling.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v7",
    "IsDefaultVersion": true,
    "CreateDate": "2023-05-10T17:04:21+00:00"
  },
  "EC2FastLaunchServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:RunInstances"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:network-interface/*",
            "arn:aws:ec2:*::image/*",
            "arn:aws:ec2:*:*:key-pair/*",
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:launch-template/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:RunInstances"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:volume/*",
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/CreatedBy": "EC2 Fast Launch"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "ec2.amazonaws.com",
                "ec2.amazonaws.com.cn"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:StopInstances",
            "ec2:TerminateInstances"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/CreatedBy": "EC2 Fast Launch"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateSnapshot",
          "Resource": [
            "arn:aws:ec2:*:*:volume/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/CreatedBy": "EC2 Fast Launch"
            }
          }
        },
        {
          "Sid": "AllowCreateTaggedSnapshot",
          "Effect": "Allow",
          "Action": "ec2:CreateSnapshot",
          "Resource": [
            "arn:aws:ec2:*:*:snapshot/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/CreatedBy": "EC2 Fast Launch"
            },
            "StringLike": {
              "aws:RequestTag/CreatedByLaunchTemplateVersion": "*"
            },
            "ForAnyValue:StringEquals": {
              "aws:TagKeys": [
                "CreatedByLaunchTemplateName",
                "CreatedByLaunchTemplateId"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateLaunchTemplate",
          "Resource": "arn:aws:ec2:*:*:launch-template/*",
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/CreatedBy": "EC2 Fast Launch"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": [
            "arn:aws:ec2:*:*:volume/*",
            "arn:aws:ec2:*:*:instance/*",
            "arn:aws:ec2:*:*:snapshot/*",
            "arn:aws:ec2:*:*:launch-template/*"
          ],
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": [
                "CreateSnapshot",
                "RunInstances",
                "CreateLaunchTemplate"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteSnapshot"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:snapshot/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/CreatedBy": "EC2 Fast Launch"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeImages",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSubnets",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstances",
            "ec2:DescribeInstanceTypeOfferings",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DescribeLaunchTemplates"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "cloudwatch:PutMetricData",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": "AWS/EC2"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-01-10T13:08:21+00:00"
  },
  "EC2FleetTimeShiftableServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeImages",
            "ec2:DescribeSubnets",
            "ec2:DescribeInstances",
            "ec2:RunInstances",
            "ec2:CreateFleet"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "ec2.amazonaws.com",
                "ec2.amazonaws.com.cn"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*",
            "arn:aws:ec2:*:*:spot-instances-request/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:TerminateInstances"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/aws:ec2:fleet-id": "*"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-12-23T19:47:15+00:00"
  },
  "EC2ImageBuilderLifecycleExecutionPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "Ec2ImagePermission",
          "Effect": "Allow",
          "Action": [
            "ec2:EnableImage",
            "ec2:DeregisterImage",
            "ec2:EnableImageDeprecation",
            "ec2:DescribeImageAttribute",
            "ec2:DisableImage",
            "ec2:DisableImageDeprecation"
          ],
          "Resource": "arn:aws:ec2:*::image/*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/CreatedBy": "EC2 Image Builder"
            }
          }
        },
        {
          "Sid": "EC2DeleteSnapshotPermission",
          "Effect": "Allow",
          "Action": "ec2:DeleteSnapshot",
          "Resource": "arn:aws:ec2:*::snapshot/*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/CreatedBy": "EC2 Image Builder"
            }
          }
        },
        {
          "Sid": "EC2TagsPermission",
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteTags",
            "ec2:CreateTags"
          ],
          "Resource": [
            "arn:aws:ec2:*::snapshot/*",
            "arn:aws:ec2:*::image/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/DeprecatedBy": "EC2 Image Builder",
              "aws:ResourceTag/CreatedBy": "EC2 Image Builder"
            },
            "ForAllValues:StringEquals": {
              "aws:TagKeys": "DeprecatedBy"
            }
          }
        },
        {
          "Sid": "ECRImagePermission",
          "Effect": "Allow",
          "Action": [
            "ecr:BatchGetImage",
            "ecr:BatchDeleteImage"
          ],
          "Resource": "arn:aws:ecr:*:*:repository/*",
          "Condition": {
            "StringEquals": {
              "ecr:ResourceTag/LifecycleExecutionAccess": "EC2 Image Builder"
            }
          }
        },
        {
          "Sid": "ImageBuilderEC2TagServicePermission",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeImages",
            "tag:GetResources",
            "imagebuilder:DeleteImage"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-16T23:23:09+00:00"
  },
  "EC2InstanceConnect": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "EC2InstanceConnect",
          "Action": [
            "ec2:DescribeInstances",
            "ec2-instance-connect:SendSSHPublicKey"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-06-27T18:53:34+00:00"
  },
  "EC2InstanceProfileForImageBuilder": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "imagebuilder:GetComponent"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:Decrypt"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "kms:EncryptionContextKeys": "aws:imagebuilder:arn",
              "aws:CalledVia": [
                "imagebuilder.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": "arn:aws:s3:::ec2imagebuilder*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:CreateLogGroup",
            "logs:PutLogEvents"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/imagebuilder/*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2020-08-27T16:40:50+00:00"
  },
  "EC2InstanceProfileForImageBuilderECRContainerBuilds": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "imagebuilder:GetComponent",
            "imagebuilder:GetContainerRecipe",
            "ecr:GetAuthorizationToken",
            "ecr:BatchGetImage",
            "ecr:InitiateLayerUpload",
            "ecr:UploadLayerPart",
            "ecr:CompleteLayerUpload",
            "ecr:BatchCheckLayerAvailability",
            "ecr:GetDownloadUrlForLayer",
            "ecr:PutImage"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:Decrypt"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "kms:EncryptionContextKeys": "aws:imagebuilder:arn",
              "aws:CalledVia": [
                "imagebuilder.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": "arn:aws:s3:::ec2imagebuilder*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:CreateLogGroup",
            "logs:PutLogEvents"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/imagebuilder/*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-11T19:48:15+00:00"
  },
  "ECRReplicationServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ecr:CreateRepository",
            "ecr:ReplicateImage"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-04T22:11:28+00:00"
  },
  "EMRDescribeClusterPolicyForEMRWAL": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "elasticmapreduce:DescribeCluster"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-06-15T23:30:22+00:00"
  },
  "Ec2ImageBuilderCrossAccountDistributionAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": "arn:aws:ec2:*::image/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeImages",
            "ec2:CopyImage",
            "ec2:ModifyImageAttribute"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-09-30T19:22:54+00:00"
  },
  "Ec2InstanceConnectEndpoint": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeAvailabilityZones"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface"
          ],
          "Resource": "arn:aws:ec2:*:*:subnet/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface"
          ],
          "Resource": "arn:aws:ec2:*:*:network-interface/*",
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "InstanceConnectEndpointId"
              ]
            },
            "Null": {
              "aws:RequestTag/InstanceConnectEndpointId": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:ModifyNetworkInterfaceAttribute"
          ],
          "Resource": "arn:aws:ec2:*:*:network-interface/*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/InstanceConnectEndpointId": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": "arn:aws:ec2:*:*:network-interface/*",
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "CreateNetworkInterface"
            },
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "InstanceConnectEndpointId"
              ]
            },
            "Null": {
              "aws:RequestTag/InstanceConnectEndpointId": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteNetworkInterface"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/InstanceConnectEndpointId": [
                "eice-*"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-01-24T20:19:21+00:00"
  },
  "ElastiCacheServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateNetworkInterface",
            "ec2:CreateSecurityGroup",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteSecurityGroup",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:RevokeSecurityGroupIngress",
            "cloudwatch:PutMetricData",
            "outposts:GetOutpost",
            "outposts:GetOutpostInstanceTypes",
            "outposts:ListOutposts",
            "outposts:ListSites"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2020-02-06T21:27:13+00:00"
  },
  "ElasticLoadBalancingFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "elasticloadbalancing:*",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpcClassicLink",
            "ec2:DescribeInstances",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeClassicLinkInstances",
            "ec2:DescribeRouteTables",
            "ec2:DescribeCoipPools",
            "ec2:GetCoipPoolUsage",
            "ec2:DescribeVpcPeeringConnections",
            "cognito-idp:DescribeUserPoolClient"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "arc-zonal-shift:*",
          "Resource": "arn:aws:elasticloadbalancing:*:*:loadbalancer/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "arc-zonal-shift:ListManagedResources",
            "arc-zonal-shift:ListZonalShifts"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v7",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-29T01:45:49+00:00"
  },
  "ElasticLoadBalancingReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "elasticloadbalancing:Describe*",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstances",
            "ec2:DescribeClassicLinkInstances",
            "ec2:DescribeSecurityGroups"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "arc-zonal-shift:GetManagedResource",
          "Resource": "arn:aws:elasticloadbalancing:*:*:loadbalancer/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "arc-zonal-shift:ListManagedResources",
            "arc-zonal-shift:ListZonalShifts"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-29T01:44:23+00:00"
  },
  "ElementalActivationsDownloadSoftwareAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "elemental-activations:Get*",
            "elemental-activations:Download*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-09-08T17:26:09+00:00"
  },
  "ElementalActivationsFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "elemental-activations:*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-06-04T21:00:13+00:00"
  },
  "ElementalActivationsGenerateLicenses": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "elemental-activations:Get*",
            "elemental-activations:GenerateLicenses",
            "elemental-activations:StartFileUpload",
            "elemental-activations:CompleteFileUpload"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-08-28T18:28:58+00:00"
  },
  "ElementalActivationsReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "elemental-activations:Get*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-08-28T16:51:01+00:00"
  },
  "ElementalAppliancesSoftwareFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "elemental-appliances-software:*",
            "elemental-activations:CompleteAccountRegistration"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2021-02-05T21:01:25+00:00"
  },
  "ElementalAppliancesSoftwareReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "elemental-appliances-software:List*",
            "elemental-appliances-software:Get*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-04-01T22:31:09+00:00"
  },
  "ElementalSupportCenterFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "elemental-support-cases:*",
            "elemental-support-content:*",
            "elemental-activations:CompleteAccountRegistration"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2021-02-05T21:02:54+00:00"
  },
  "FMSServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "waf:UpdateWebACL",
            "waf:DeleteWebACL",
            "waf:GetWebACL",
            "waf:GetRuleGroup",
            "waf:ListSubscribedRuleGroups",
            "waf-regional:UpdateWebACL",
            "waf-regional:DeleteWebACL",
            "waf-regional:GetWebACL",
            "waf-regional:GetRuleGroup",
            "waf-regional:ListSubscribedRuleGroups",
            "waf-regional:ListResourcesForWebACL",
            "waf-regional:AssociateWebACL",
            "waf-regional:DisassociateWebACL",
            "elasticloadbalancing:SetWebACL",
            "apigateway:SetWebACL",
            "elasticloadbalancing:SetSecurityGroups",
            "waf:ListTagsForResource",
            "waf-regional:ListTagsForResource"
          ],
          "Resource": [
            "arn:aws:waf:*:*:webacl/*",
            "arn:aws:waf-regional:*:*:webacl/*",
            "arn:aws:waf:*:*:rulegroup/*",
            "arn:aws:waf-regional:*:*:rulegroup/*",
            "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*",
            "arn:aws:apigateway:*::/restapis/*/stages/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "wafv2:PutLoggingConfiguration",
            "wafv2:GetLoggingConfiguration",
            "wafv2:ListLoggingConfigurations",
            "wafv2:DeleteLoggingConfiguration"
          ],
          "Resource": [
            "arn:aws:wafv2:*:*:regional/webacl/*",
            "arn:aws:wafv2:*:*:global/webacl/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "waf:CreateWebACL",
            "waf-regional:CreateWebACL",
            "waf:GetChangeToken",
            "waf-regional:GetChangeToken",
            "waf-regional:GetWebACLForResource"
          ],
          "Resource": [
            "arn:aws:waf:*:*:*",
            "arn:aws:waf-regional:*:*:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
            "elasticloadbalancing:DescribeTags"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "waf:PutPermissionPolicy",
            "waf:GetPermissionPolicy",
            "waf:DeletePermissionPolicy",
            "waf-regional:PutPermissionPolicy",
            "waf-regional:GetPermissionPolicy",
            "waf-regional:DeletePermissionPolicy"
          ],
          "Resource": [
            "arn:aws:waf:*:*:webacl/*",
            "arn:aws:waf:*:*:rulegroup/*",
            "arn:aws:waf-regional:*:*:webacl/*",
            "arn:aws:waf-regional:*:*:rulegroup/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudfront:GetDistribution",
            "cloudfront:UpdateDistribution",
            "cloudfront:ListDistributionsByWebACLId",
            "cloudfront:ListDistributions"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "config:DeleteConfigRule",
            "config:GetComplianceDetailsByConfigRule",
            "config:PutConfigRule",
            "config:StartConfigRulesEvaluation"
          ],
          "Resource": "arn:aws:config:*:*:config-rule/aws-service-rule/fms.amazonaws.com/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "config:DescribeComplianceByConfigRule",
            "config:DescribeConfigurationRecorders",
            "config:DescribeConfigurationRecorderStatus",
            "config:PutConfigurationRecorder",
            "config:StartConfigurationRecorder",
            "config:PutDeliveryChannel",
            "config:DescribeDeliveryChannels",
            "config:DescribeDeliveryChannelStatus",
            "config:GetComplianceSummaryByConfigRule",
            "config:GetDiscoveredResourceCounts",
            "config:PutEvaluations",
            "config:SelectResourceConfig"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:DeleteServiceLinkedRole",
            "iam:GetServiceLinkedRoleDeletionStatus"
          ],
          "Resource": [
            "arn:aws:iam::*:role/aws-service-role/fms.amazonaws.com/AWSServiceRoleForFMS"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "config:DescribeConfigRuleEvaluationStatus",
            "config:DescribeConfigRules",
            "organizations:ListAccounts",
            "organizations:DescribeOrganizationalUnit",
            "organizations:ListChildren",
            "organizations:ListRoots",
            "organizations:ListParents",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListAWSServiceAccessForOrganization"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "shield:CreateProtection",
            "shield:DeleteProtection",
            "shield:DescribeProtection",
            "shield:ListProtections",
            "shield:ListAttacks",
            "shield:CreateSubscription",
            "shield:DescribeSubscription",
            "shield:GetSubscriptionState",
            "shield:DescribeDRTAccess",
            "shield:DescribeEmergencyContactSettings",
            "shield:UpdateEmergencyContactSettings",
            "elasticloadbalancing:DescribeLoadBalancers",
            "ec2:DescribeAddresses",
            "shield:EnableApplicationLayerAutomaticResponse",
            "shield:DisableApplicationLayerAutomaticResponse",
            "shield:UpdateApplicationLayerAutomaticResponse"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:DeleteSecurityGroup",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
            "ec2:UpdateSecurityGroupRuleDescriptionsIngress"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:network-interface/*",
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:instance/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeNetworkInterfaceAttribute",
            "ec2:DescribeInstances"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:security-group/*"
          ],
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "CreateSecurityGroup"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteTags",
            "ec2:CreateTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:security-group/*"
          ],
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/FMManaged": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSecurityGroup",
            "ec2:DescribeSecurityGroupReferences",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeStaleSecurityGroups",
            "ec2:DescribeNetworkInterfaces",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpcPeeringConnections"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "wafv2:TagResource",
            "wafv2:ListResourcesForWebACL",
            "wafv2:AssociateWebACL",
            "wafv2:ListTagsForResource",
            "wafv2:UntagResource",
            "wafv2:GetWebACL",
            "wafv2:DisassociateFirewallManager",
            "wafv2:DeleteWebACL",
            "wafv2:DisassociateWebACL"
          ],
          "Resource": [
            "arn:aws:wafv2:*:*:global/webacl/*",
            "arn:aws:wafv2:*:*:regional/webacl/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "wafv2:UpdateWebACL",
            "wafv2:CreateWebACL",
            "wafv2:DeleteFirewallManagerRuleGroups",
            "wafv2:PutFirewallManagerRuleGroups"
          ],
          "Resource": [
            "arn:aws:wafv2:*:*:global/webacl/*",
            "arn:aws:wafv2:*:*:regional/webacl/*",
            "arn:aws:wafv2:*:*:global/rulegroup/*",
            "arn:aws:wafv2:*:*:regional/rulegroup/*",
            "arn:aws:wafv2:*:*:global/managedruleset/*",
            "arn:aws:wafv2:*:*:regional/managedruleset/*",
            "arn:aws:wafv2:*:*:global/ipset/*",
            "arn:aws:wafv2:*:*:regional/ipset/*",
            "arn:aws:wafv2:*:*:global/regexpatternset/*",
            "arn:aws:wafv2:*:*:regional/regexpatternset/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "wafv2:PutPermissionPolicy",
            "wafv2:GetPermissionPolicy",
            "wafv2:DeletePermissionPolicy"
          ],
          "Resource": [
            "arn:aws:wafv2:*:*:global/rulegroup/*",
            "arn:aws:wafv2:*:*:regional/rulegroup/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudfront:ListTagsForResource"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "wafv2:GetWebACLForResource"
          ],
          "Resource": [
            "arn:aws:wafv2:*:*:regional/webacl/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": "arn:aws:ec2:*:*:route-table/*",
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "CreateRouteTable"
            },
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "Name",
                "FMManaged"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": [
            "arn:aws:ec2:*:*:subnet/*"
          ],
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "Name",
                "FMManaged"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": [
            "arn:aws:ec2:*:*:vpc-endpoint/*"
          ],
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "CreateVpcEndpoint"
            },
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "Name",
                "FMManaged"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:DeleteRouteTable",
          "Resource": "arn:aws:ec2:*:*:route-table/*",
          "Condition": {
            "StringEquals": {
              "ec2:ResourceTag/FMManaged": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AssociateRouteTable",
            "ec2:CreateSubnet",
            "ec2:CreateRouteTable",
            "ec2:DeleteSubnet",
            "ec2:DisassociateRouteTable",
            "ec2:ReplaceRouteTableAssociation"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInternetGateways",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeAvailabilityZones"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateVpcEndpoint",
          "Resource": [
            "arn:aws:ec2:*:*:vpc-endpoint/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/FMManaged": [
                "true"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateVpcEndpoint",
          "Resource": [
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:vpc/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteVpcEndpoints"
          ],
          "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
          "Condition": {
            "StringEquals": {
              "ec2:ResourceTag/FMManaged": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ram:TagResource"
          ],
          "Resource": [
            "arn:aws:ram:*:*:resource-share/*"
          ],
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "Name",
                "FMManaged"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ram:AssociateResourceShare",
            "ram:UpdateResourceShare",
            "ram:DeleteResourceShare"
          ],
          "Resource": "arn:aws:ram:*:*:resource-share/*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/FMManaged": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ram:CreateResourceShare",
          "Resource": "*",
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "Name",
                "FMManaged"
              ]
            },
            "StringEquals": {
              "aws:RequestTag/FMManaged": [
                "true"
              ]
            }
          }
        },
        {
          "Sid": "ram",
          "Effect": "Allow",
          "Action": [
            "ram:GetResourceShareAssociations",
            "ram:GetResourceShares"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": [
                "network-firewall.amazonaws.com",
                "shield.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:GetRole",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "network-firewall:TagResource"
          ],
          "Resource": "*",
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "Name",
                "FMManaged"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "network-firewall:AssociateSubnets",
            "network-firewall:CreateFirewall",
            "network-firewall:CreateFirewallPolicy",
            "network-firewall:DisassociateSubnets",
            "network-firewall:UpdateFirewallDeleteProtection",
            "network-firewall:UpdateFirewallPolicy",
            "network-firewall:UpdateFirewallPolicyChangeProtection",
            "network-firewall:UpdateSubnetChangeProtection",
            "network-firewall:AssociateFirewallPolicy",
            "network-firewall:DescribeFirewall",
            "network-firewall:DescribeFirewallPolicy",
            "network-firewall:DescribeRuleGroup",
            "network-firewall:ListFirewallPolicies",
            "network-firewall:ListFirewalls",
            "network-firewall:ListRuleGroups",
            "network-firewall:PutResourcePolicy",
            "network-firewall:DescribeResourcePolicy",
            "network-firewall:DeleteResourcePolicy",
            "network-firewall:DescribeLoggingConfiguration",
            "network-firewall:UpdateLoggingConfiguration"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "network-firewall:DeleteFirewallPolicy",
            "network-firewall:DeleteFirewall"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/FMManaged": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:ListLogDeliveries",
            "logs:CreateLogDelivery",
            "logs:GetLogDelivery",
            "logs:UpdateLogDelivery",
            "logs:DeleteLogDelivery"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "route53resolver:ListFirewallRuleGroupAssociations",
            "route53resolver:ListTagsForResource",
            "route53resolver:ListFirewallRuleGroups",
            "route53resolver:GetFirewallRuleGroupAssociation",
            "route53resolver:GetFirewallRuleGroup",
            "route53resolver:GetFirewallRuleGroupPolicy",
            "route53resolver:PutFirewallRuleGroupPolicy"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "route53resolver:UpdateFirewallRuleGroupAssociation",
            "route53resolver:DisassociateFirewallRuleGroup"
          ],
          "Resource": "arn:aws:route53resolver:*:*:firewall-rule-group-association/*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/FMManaged": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "route53resolver:AssociateFirewallRuleGroup",
            "route53resolver:TagResource"
          ],
          "Resource": "arn:aws:route53resolver:*:*:firewall-rule-group-association/*",
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/FMManaged": "true"
            }
          }
        }
      ]
    },
    "VersionId": "v28",
    "IsDefaultVersion": true,
    "CreateDate": "2023-04-21T18:33:58+00:00"
  },
  "FSxDeleteServiceLinkedRoleAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iam:DeleteServiceLinkedRole",
            "iam:GetServiceLinkedRoleDeletionStatus",
            "iam:GetRole"
          ],
          "Resource": "arn:*:iam::*:role/aws-service-role/s3.data-source.lustre.fsx.amazonaws.com/AWSServiceRoleForFSxS3Access_*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-11-28T10:40:24+00:00"
  },
  "GameLiftGameServerGroupPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "ec2:TerminateInstances",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "ec2:ResourceTag/GameLift": "GameServerGroups"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "autoscaling:CompleteLifecycleAction",
            "autoscaling:ResumeProcesses",
            "autoscaling:EnterStandby",
            "autoscaling:SetInstanceProtection",
            "autoscaling:UpdateAutoScalingGroup",
            "autoscaling:SuspendProcesses",
            "autoscaling:DetachInstances"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/GameLift": "GameServerGroups"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeImages",
            "ec2:DescribeInstances",
            "autoscaling:DescribeAutoScalingGroups",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DescribeSubnets"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "sns:Publish",
          "Resource": [
            "arn:*:sns:*:*:ActivatingLifecycleHookTopic-*",
            "arn:*:sns:*:*:TerminatingLifecycleHookTopic-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricData"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": "AWS/GameLift"
            }
          }
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2020-05-13T17:27:43+00:00"
  },
  "GlobalAcceleratorFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "globalaccelerator:*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": "elasticloadbalancing:DescribeLoadBalancers",
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "ec2:DescribeAddresses",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeRegions",
            "ec2:DescribeSubnets"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/globalaccelerator.amazonaws.com/AWSServiceRoleForGlobalAccelerator*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "globalaccelerator.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v6",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-04T19:17:26+00:00"
  },
  "GlobalAcceleratorReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "globalaccelerator:Describe*",
            "globalaccelerator:List*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-11-27T02:41:00+00:00"
  },
  "GreengrassOTAUpdateArtifactAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AllowsIotToAccessGreengrassOTAUpdateArtifacts",
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": [
            "arn:aws:s3:::*-greengrass-updates/*"
          ]
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2018-12-18T00:59:43+00:00"
  },
  "GroundTruthSyntheticConsoleFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "sagemaker-groundtruth-synthetic:*",
            "s3:ListBucket"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-08-25T15:58:49+00:00"
  },
  "GroundTruthSyntheticConsoleReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "sagemaker-groundtruth-synthetic:List*",
            "sagemaker-groundtruth-synthetic:Get*",
            "s3:ListBucket"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-08-25T15:58:49+00:00"
  },
  "Health_OrganizationsServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "organizations:ListAccounts",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListDelegatedAdministrators",
            "organizations:DescribeOrganization",
            "organizations:DescribeAccount"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-07-19T14:34:18+00:00"
  },
  "IAMAccessAdvisorReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iam:ListRoles",
            "iam:ListUsers",
            "iam:ListGroups",
            "iam:ListPolicies",
            "iam:ListPoliciesGrantingServiceAccess",
            "iam:GenerateServiceLastAccessedDetails",
            "iam:GenerateOrganizationsAccessReport",
            "iam:GenerateCredentialReport",
            "iam:GetRole",
            "iam:GetPolicy",
            "iam:GetServiceLastAccessedDetails",
            "iam:GetServiceLastAccessedDetailsWithEntities",
            "iam:GetOrganizationsAccessReport",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:DescribePolicy",
            "organizations:ListChildren",
            "organizations:ListParents",
            "organizations:ListPoliciesForTarget",
            "organizations:ListRoots",
            "organizations:ListPolicies",
            "organizations:ListTargetsForPolicy"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-06-21T19:33:45+00:00"
  },
  "IAMAccessAnalyzerFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "access-analyzer:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "access-analyzer.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:ListAccounts",
            "organizations:ListAccountsForParent",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListChildren",
            "organizations:ListDelegatedAdministrators",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListParents",
            "organizations:ListRoots"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-12-02T17:12:40+00:00"
  },
  "IAMAccessAnalyzerReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "access-analyzer:Get*",
            "access-analyzer:List*",
            "access-analyzer:ValidatePolicy"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2021-03-16T20:37:30+00:00"
  },
  "IAMFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iam:*",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:DescribePolicy",
            "organizations:ListChildren",
            "organizations:ListParents",
            "organizations:ListPoliciesForTarget",
            "organizations:ListRoots",
            "organizations:ListPolicies",
            "organizations:ListTargetsForPolicy"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2019-06-21T19:40:00+00:00"
  },
  "IAMReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iam:GenerateCredentialReport",
            "iam:GenerateServiceLastAccessedDetails",
            "iam:Get*",
            "iam:List*",
            "iam:SimulateCustomPolicy",
            "iam:SimulatePrincipalPolicy"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2018-01-25T19:11:27+00:00"
  },
  "IAMSelfManageServiceSpecificCredentials": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceSpecificCredential",
            "iam:ListServiceSpecificCredentials",
            "iam:UpdateServiceSpecificCredential",
            "iam:DeleteServiceSpecificCredential",
            "iam:ResetServiceSpecificCredential"
          ],
          "Resource": "arn:aws:iam::*:user/${aws:username}"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2016-12-22T17:25:18+00:00"
  },
  "IAMUserChangePassword": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iam:ChangePassword"
          ],
          "Resource": [
            "arn:aws:iam::*:user/${aws:username}"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:GetAccountPasswordPolicy"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2016-11-15T23:18:55+00:00"
  },
  "IAMUserSSHKeys": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iam:DeleteSSHPublicKey",
            "iam:GetSSHPublicKey",
            "iam:ListSSHPublicKeys",
            "iam:UpdateSSHPublicKey",
            "iam:UploadSSHPublicKey"
          ],
          "Resource": "arn:aws:iam::*:user/${aws:username}"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-07-09T17:08:54+00:00"
  },
  "IVSRecordToS3": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:PutObject"
          ],
          "Resource": [
            "arn:aws:s3:::AWSIVS_*/ivs/*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-05T00:10:43+00:00"
  },
  "KafkaConnectServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface"
          ],
          "Resource": "arn:aws:ec2:*:*:network-interface/*",
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/AmazonMSKConnectManaged": "true"
            },
            "ForAllValues:StringEquals": {
              "aws:TagKeys": "AmazonMSKConnectManaged"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:security-group/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": "arn:aws:ec2:*:*:network-interface/*",
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "CreateNetworkInterface"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeNetworkInterfaces",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:AttachNetworkInterface",
            "ec2:DetachNetworkInterface",
            "ec2:DeleteNetworkInterface"
          ],
          "Resource": "arn:aws:ec2:*:*:network-interface/*",
          "Condition": {
            "StringEquals": {
              "ec2:ResourceTag/AmazonMSKConnectManaged": "true"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2021-09-07T13:12:44+00:00"
  },
  "KafkaServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface",
            "ec2:DescribeNetworkInterfaces",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:AttachNetworkInterface",
            "ec2:DeleteNetworkInterface",
            "ec2:DetachNetworkInterface",
            "ec2:DescribeVpcEndpoints",
            "acm-pca:GetCertificateAuthorityCertificate",
            "secretsmanager:ListSecrets"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:ModifyVpcEndpoint"
          ],
          "Resource": "arn:*:ec2:*:*:subnet/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteVpcEndpoints",
            "ec2:ModifyVpcEndpoint"
          ],
          "Resource": "arn:*:ec2:*:*:vpc-endpoint/*",
          "Condition": {
            "StringEquals": {
              "ec2:ResourceTag/AWSMSKManaged": "true"
            },
            "StringLike": {
              "ec2:ResourceTag/ClusterArn": "*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:GetResourcePolicy",
            "secretsmanager:PutResourcePolicy",
            "secretsmanager:DeleteResourcePolicy",
            "secretsmanager:DescribeSecret"
          ],
          "Resource": "*",
          "Condition": {
            "ArnLike": {
              "secretsmanager:SecretId": "arn:*:secretsmanager:*:*:secret:AmazonMSK_*"
            }
          }
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2023-04-28T00:39:35+00:00"
  },
  "KeyspacesReplicationServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cassandra:Select",
            "cassandra:SelectMultiRegionResource",
            "cassandra:Modify",
            "cassandra:ModifyMultiRegionResource"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-05-02T16:15:49+00:00"
  },
  "LakeFormationDataAccessServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListAllMyBuckets"
          ],
          "Resource": [
            "arn:aws:s3:::*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-06-20T20:46:19+00:00"
  },
  "LexBotPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "polly:SynthesizeSpeech"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "comprehend:DetectSentiment"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2019-11-13T22:29:16+00:00"
  },
  "LexChannelPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "lex:PostText"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2017-02-17T23:23:24+00:00"
  },
  "LightsailExportAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "iam:DeleteServiceLinkedRole",
            "iam:GetServiceLinkedRoleDeletionStatus"
          ],
          "Resource": "arn:aws:iam::*:role/aws-service-role/lightsail.amazonaws.com/AWSServiceRoleForLightsail*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CopySnapshot",
            "ec2:DescribeSnapshots",
            "ec2:CopyImage",
            "ec2:DescribeImages"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetAccountPublicAccessBlock"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-01-15T01:45:33+00:00"
  },
  "MediaConnectGatewayInstanceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "MediaConnectGateway",
          "Effect": "Allow",
          "Action": [
            "mediaconnect:DiscoverGatewayPollEndpoint",
            "mediaconnect:PollGateway",
            "mediaconnect:SubmitGatewayStateChange"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-22T20:43:25+00:00"
  },
  "MediaPackageServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "logs:PutLogEvents",
          "Resource": "arn:aws:logs:*:*:log-group:/aws/MediaPackage/*:log-stream:*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogStream",
            "logs:CreateLogGroup",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams"
          ],
          "Resource": "arn:aws:logs:*:*:log-group:/aws/MediaPackage/*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-09-18T17:45:47+00:00"
  },
  "MemoryDBServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": "arn:aws:ec2:*:*:network-interface/*",
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "CreateNetworkInterface"
            },
            "ForAllValues:StringEquals": {
              "aws:TagKeys": [
                "AmazonMemoryDBManaged"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:network-interface/*",
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:security-group/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteNetworkInterface",
            "ec2:ModifyNetworkInterfaceAttribute"
          ],
          "Resource": "arn:aws:ec2:*:*:network-interface/*",
          "Condition": {
            "StringEquals": {
              "ec2:ResourceTag/AmazonMemoryDBManaged": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteNetworkInterface",
            "ec2:ModifyNetworkInterfaceAttribute"
          ],
          "Resource": "arn:aws:ec2:*:*:security-group/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:PutMetricData"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": "AWS/MemoryDB"
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2021-08-18T23:48:16+00:00"
  },
  "MigrationHubDMSAccessServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "mgh:CreateProgressUpdateStream",
          "Resource": "arn:aws:mgh:*:*:progressUpdateStream/DMS"
        },
        {
          "Effect": "Allow",
          "Action": [
            "mgh:DescribeMigrationTask",
            "mgh:AssociateDiscoveredResource",
            "mgh:ListDiscoveredResources",
            "mgh:ImportMigrationTask",
            "mgh:ListCreatedArtifacts",
            "mgh:DisassociateDiscoveredResource",
            "mgh:AssociateCreatedArtifact",
            "mgh:NotifyMigrationTaskState",
            "mgh:DisassociateCreatedArtifact",
            "mgh:PutResourceAttributes"
          ],
          "Resource": "arn:aws:mgh:*:*:progressUpdateStream/DMS/migrationTask/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "mgh:ListMigrationTasks",
            "mgh:NotifyApplicationState",
            "mgh:DescribeApplicationState",
            "mgh:GetHomeRegion"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2019-10-07T17:57:44+00:00"
  },
  "MigrationHubSMSAccessServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "mgh:CreateProgressUpdateStream",
          "Resource": "arn:aws:mgh:*:*:progressUpdateStream/SMS"
        },
        {
          "Effect": "Allow",
          "Action": [
            "mgh:DescribeMigrationTask",
            "mgh:AssociateDiscoveredResource",
            "mgh:ListDiscoveredResources",
            "mgh:ImportMigrationTask",
            "mgh:ListCreatedArtifacts",
            "mgh:DisassociateDiscoveredResource",
            "mgh:AssociateCreatedArtifact",
            "mgh:NotifyMigrationTaskState",
            "mgh:DisassociateCreatedArtifact",
            "mgh:PutResourceAttributes"
          ],
          "Resource": "arn:aws:mgh:*:*:progressUpdateStream/SMS/migrationTask/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "mgh:ListMigrationTasks",
            "mgh:NotifyApplicationState",
            "mgh:DescribeApplicationState",
            "mgh:GetHomeRegion"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2019-10-07T18:02:22+00:00"
  },
  "MigrationHubServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "discovery:ListConfigurations",
            "discovery:DescribeConfigurations"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": [
            "arn:aws:ec2:*:*:instance/*",
            "arn:aws:ec2:*:*:image/*",
            "arn:aws:ec2:*:*:volume/*"
          ],
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": "aws:migrationhub:source-id"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "dms:AddTagsToResource",
          "Resource": [
            "arn:aws:dms:*:*:endpoint:*"
          ],
          "Condition": {
            "ForAllValues:StringEquals": {
              "aws:TagKeys": "aws:migrationhub:source-id"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstanceAttribute"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2020-08-06T18:08:46+00:00"
  },
  "MonitronServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
          ],
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/monitron/*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-05-02T19:22:03+00:00"
  },
  "NeptuneConsoleFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "rds:CreateDBCluster",
            "rds:CreateDBInstance"
          ],
          "Resource": [
            "arn:aws:rds:*:*:*"
          ],
          "Condition": {
            "StringEquals": {
              "rds:DatabaseEngine": [
                "graphdb",
                "neptune"
              ]
            }
          }
        },
        {
          "Action": [
            "rds:AddRoleToDBCluster",
            "rds:AddSourceIdentifierToSubscription",
            "rds:AddTagsToResource",
            "rds:ApplyPendingMaintenanceAction",
            "rds:CopyDBClusterParameterGroup",
            "rds:CopyDBClusterSnapshot",
            "rds:CopyDBParameterGroup",
            "rds:CreateDBClusterParameterGroup",
            "rds:CreateDBClusterSnapshot",
            "rds:CreateDBParameterGroup",
            "rds:CreateDBSubnetGroup",
            "rds:CreateEventSubscription",
            "rds:DeleteDBCluster",
            "rds:DeleteDBClusterParameterGroup",
            "rds:DeleteDBClusterSnapshot",
            "rds:DeleteDBInstance",
            "rds:DeleteDBParameterGroup",
            "rds:DeleteDBSubnetGroup",
            "rds:DeleteEventSubscription",
            "rds:DescribeAccountAttributes",
            "rds:DescribeCertificates",
            "rds:DescribeDBClusterParameterGroups",
            "rds:DescribeDBClusterParameters",
            "rds:DescribeDBClusterSnapshotAttributes",
            "rds:DescribeDBClusterSnapshots",
            "rds:DescribeDBClusters",
            "rds:DescribeDBEngineVersions",
            "rds:DescribeDBInstances",
            "rds:DescribeDBLogFiles",
            "rds:DescribeDBParameterGroups",
            "rds:DescribeDBParameters",
            "rds:DescribeDBSecurityGroups",
            "rds:DescribeDBSubnetGroups",
            "rds:DescribeEngineDefaultClusterParameters",
            "rds:DescribeEngineDefaultParameters",
            "rds:DescribeEventCategories",
            "rds:DescribeEventSubscriptions",
            "rds:DescribeEvents",
            "rds:DescribeOptionGroups",
            "rds:DescribeOrderableDBInstanceOptions",
            "rds:DescribePendingMaintenanceActions",
            "rds:DescribeValidDBInstanceModifications",
            "rds:DownloadDBLogFilePortion",
            "rds:FailoverDBCluster",
            "rds:ListTagsForResource",
            "rds:ModifyDBCluster",
            "rds:ModifyDBClusterParameterGroup",
            "rds:ModifyDBClusterSnapshotAttribute",
            "rds:ModifyDBInstance",
            "rds:ModifyDBParameterGroup",
            "rds:ModifyDBSubnetGroup",
            "rds:ModifyEventSubscription",
            "rds:PromoteReadReplicaDBCluster",
            "rds:RebootDBInstance",
            "rds:RemoveRoleFromDBCluster",
            "rds:RemoveSourceIdentifierFromSubscription",
            "rds:RemoveTagsFromResource",
            "rds:ResetDBClusterParameterGroup",
            "rds:ResetDBParameterGroup",
            "rds:RestoreDBClusterFromSnapshot",
            "rds:RestoreDBClusterToPointInTime"
          ],
          "Effect": "Allow",
          "Resource": [
            "*"
          ]
        },
        {
          "Action": [
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "ec2:AllocateAddress",
            "ec2:AssignIpv6Addresses",
            "ec2:AssignPrivateIpAddresses",
            "ec2:AssociateAddress",
            "ec2:AssociateRouteTable",
            "ec2:AssociateSubnetCidrBlock",
            "ec2:AssociateVpcCidrBlock",
            "ec2:AttachInternetGateway",
            "ec2:AttachNetworkInterface",
            "ec2:CreateCustomerGateway",
            "ec2:CreateDefaultSubnet",
            "ec2:CreateDefaultVpc",
            "ec2:CreateInternetGateway",
            "ec2:CreateNatGateway",
            "ec2:CreateNetworkInterface",
            "ec2:CreateRoute",
            "ec2:CreateRouteTable",
            "ec2:CreateSecurityGroup",
            "ec2:CreateSubnet",
            "ec2:CreateVpc",
            "ec2:CreateVpcEndpoint",
            "ec2:CreateVpcEndpoint",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeCustomerGateways",
            "ec2:DescribeInstances",
            "ec2:DescribeNatGateways",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePrefixLists",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroupReferences",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpcs",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:ModifySubnetAttribute",
            "ec2:ModifyVpcAttribute",
            "ec2:ModifyVpcEndpoint",
            "iam:ListRoles",
            "kms:ListAliases",
            "kms:ListKeyPolicies",
            "kms:ListKeys",
            "kms:ListRetirableGrants",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "sns:ListSubscriptions",
            "sns:ListTopics",
            "sns:Publish"
          ],
          "Effect": "Allow",
          "Resource": [
            "*"
          ]
        },
        {
          "Action": "iam:PassRole",
          "Effect": "Allow",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:passedToService": "rds.amazonaws.com"
            }
          }
        },
        {
          "Action": "iam:CreateServiceLinkedRole",
          "Effect": "Allow",
          "Resource": "arn:aws:iam::*:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "rds.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2020-09-02T17:25:07+00:00"
  },
  "NeptuneFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "rds:CreateDBCluster",
            "rds:CreateDBInstance"
          ],
          "Resource": [
            "arn:aws:rds:*:*:*"
          ],
          "Condition": {
            "StringEquals": {
              "rds:DatabaseEngine": [
                "graphdb",
                "neptune"
              ]
            }
          }
        },
        {
          "Action": [
            "rds:AddRoleToDBCluster",
            "rds:AddSourceIdentifierToSubscription",
            "rds:AddTagsToResource",
            "rds:ApplyPendingMaintenanceAction",
            "rds:CopyDBClusterParameterGroup",
            "rds:CopyDBClusterSnapshot",
            "rds:CopyDBParameterGroup",
            "rds:CreateDBClusterEndpoint",
            "rds:CreateDBClusterParameterGroup",
            "rds:CreateDBClusterSnapshot",
            "rds:CreateDBParameterGroup",
            "rds:CreateDBSubnetGroup",
            "rds:CreateEventSubscription",
            "rds:CreateGlobalCluster",
            "rds:DeleteDBCluster",
            "rds:DeleteDBClusterEndpoint",
            "rds:DeleteDBClusterParameterGroup",
            "rds:DeleteDBClusterSnapshot",
            "rds:DeleteDBInstance",
            "rds:DeleteDBParameterGroup",
            "rds:DeleteDBSubnetGroup",
            "rds:DeleteEventSubscription",
            "rds:DeleteGlobalCluster",
            "rds:DescribeDBClusterEndpoints",
            "rds:DescribeAccountAttributes",
            "rds:DescribeCertificates",
            "rds:DescribeDBClusterParameterGroups",
            "rds:DescribeDBClusterParameters",
            "rds:DescribeDBClusterSnapshotAttributes",
            "rds:DescribeDBClusterSnapshots",
            "rds:DescribeDBClusters",
            "rds:DescribeDBEngineVersions",
            "rds:DescribeDBInstances",
            "rds:DescribeDBLogFiles",
            "rds:DescribeDBParameterGroups",
            "rds:DescribeDBParameters",
            "rds:DescribeDBSecurityGroups",
            "rds:DescribeDBSubnetGroups",
            "rds:DescribeEngineDefaultClusterParameters",
            "rds:DescribeEngineDefaultParameters",
            "rds:DescribeEventCategories",
            "rds:DescribeEventSubscriptions",
            "rds:DescribeEvents",
            "rds:DescribeGlobalClusters",
            "rds:DescribeOptionGroups",
            "rds:DescribeOrderableDBInstanceOptions",
            "rds:DescribePendingMaintenanceActions",
            "rds:DescribeValidDBInstanceModifications",
            "rds:DownloadDBLogFilePortion",
            "rds:FailoverDBCluster",
            "rds:FailoverGlobalCluster",
            "rds:ListTagsForResource",
            "rds:ModifyDBCluster",
            "rds:ModifyDBClusterEndpoint",
            "rds:ModifyDBClusterParameterGroup",
            "rds:ModifyDBClusterSnapshotAttribute",
            "rds:ModifyDBInstance",
            "rds:ModifyDBParameterGroup",
            "rds:ModifyDBSubnetGroup",
            "rds:ModifyEventSubscription",
            "rds:ModifyGlobalCluster",
            "rds:PromoteReadReplicaDBCluster",
            "rds:RebootDBInstance",
            "rds:RemoveFromGlobalCluster",
            "rds:RemoveRoleFromDBCluster",
            "rds:RemoveSourceIdentifierFromSubscription",
            "rds:RemoveTagsFromResource",
            "rds:ResetDBClusterParameterGroup",
            "rds:ResetDBParameterGroup",
            "rds:RestoreDBClusterFromSnapshot",
            "rds:RestoreDBClusterToPointInTime",
            "rds:StartDBCluster",
            "rds:StopDBCluster"
          ],
          "Effect": "Allow",
          "Resource": [
            "*"
          ]
        },
        {
          "Action": [
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs",
            "kms:ListAliases",
            "kms:ListKeyPolicies",
            "kms:ListKeys",
            "kms:ListRetirableGrants",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "sns:ListSubscriptions",
            "sns:ListTopics",
            "sns:Publish"
          ],
          "Effect": "Allow",
          "Resource": [
            "*"
          ]
        },
        {
          "Action": "iam:PassRole",
          "Effect": "Allow",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:passedToService": "rds.amazonaws.com"
            }
          }
        },
        {
          "Action": "iam:CreateServiceLinkedRole",
          "Effect": "Allow",
          "Resource": "arn:aws:iam::*:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "rds.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "neptune-db:*"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v6",
    "IsDefaultVersion": true,
    "CreateDate": "2022-07-28T19:58:27+00:00"
  },
  "NeptuneReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "rds:DescribeAccountAttributes",
            "rds:DescribeCertificates",
            "rds:DescribeDBClusterParameterGroups",
            "rds:DescribeDBClusterParameters",
            "rds:DescribeDBClusterSnapshotAttributes",
            "rds:DescribeDBClusterSnapshots",
            "rds:DescribeDBClusters",
            "rds:DescribeDBEngineVersions",
            "rds:DescribeDBInstances",
            "rds:DescribeDBLogFiles",
            "rds:DescribeDBParameterGroups",
            "rds:DescribeDBParameters",
            "rds:DescribeDBSubnetGroups",
            "rds:DescribeEventCategories",
            "rds:DescribeEventSubscriptions",
            "rds:DescribeEvents",
            "rds:DescribeGlobalClusters",
            "rds:DescribeOrderableDBInstanceOptions",
            "rds:DescribePendingMaintenanceActions",
            "rds:DownloadDBLogFilePortion",
            "rds:ListTagsForResource"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "kms:ListKeys",
            "kms:ListRetirableGrants",
            "kms:ListAliases",
            "kms:ListKeyPolicies"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "logs:DescribeLogStreams",
            "logs:GetLogEvents"
          ],
          "Effect": "Allow",
          "Resource": [
            "arn:aws:logs:*:*:log-group:/aws/rds/*:log-stream:*",
            "arn:aws:logs:*:*:log-group:/aws/neptune/*:log-stream:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "neptune-db:Read*",
            "neptune-db:Get*",
            "neptune-db:List*"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2022-08-03T18:53:32+00:00"
  },
  "NetworkAdministrator": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "autoscaling:Describe*",
            "cloudfront:ListDistributions",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:PutMetricAlarm",
            "directconnect:*",
            "ec2:AcceptVpcEndpointConnections",
            "ec2:AllocateAddress",
            "ec2:AssignIpv6Addresses",
            "ec2:AssignPrivateIpAddresses",
            "ec2:AssociateAddress",
            "ec2:AssociateDhcpOptions",
            "ec2:AssociateRouteTable",
            "ec2:AssociateSubnetCidrBlock",
            "ec2:AssociateVpcCidrBlock",
            "ec2:AttachInternetGateway",
            "ec2:AttachNetworkInterface",
            "ec2:AttachVpnGateway",
            "ec2:CreateCarrierGateway",
            "ec2:CreateCustomerGateway",
            "ec2:CreateDefaultSubnet",
            "ec2:CreateDefaultVpc",
            "ec2:CreateDhcpOptions",
            "ec2:CreateEgressOnlyInternetGateway",
            "ec2:CreateFlowLogs",
            "ec2:CreateInternetGateway",
            "ec2:CreateNatGateway",
            "ec2:CreateNetworkAcl",
            "ec2:CreateNetworkAclEntry",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:CreatePlacementGroup",
            "ec2:CreateRoute",
            "ec2:CreateRouteTable",
            "ec2:CreateSecurityGroup",
            "ec2:CreateSubnet",
            "ec2:CreateTags",
            "ec2:CreateVpc",
            "ec2:CreateVpcEndpoint",
            "ec2:CreateVpcEndpointConnectionNotification",
            "ec2:CreateVpcEndpointServiceConfiguration",
            "ec2:CreateVpnConnection",
            "ec2:CreateVpnConnectionRoute",
            "ec2:CreateVpnGateway",
            "ec2:DeleteCarrierGateway",
            "ec2:DeleteEgressOnlyInternetGateway",
            "ec2:DeleteFlowLogs",
            "ec2:DeleteNatGateway",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DeletePlacementGroup",
            "ec2:DeleteSubnet",
            "ec2:DeleteTags",
            "ec2:DeleteVpc",
            "ec2:DeleteVpcEndpointConnectionNotifications",
            "ec2:DeleteVpcEndpointServiceConfigurations",
            "ec2:DeleteVpcEndpoints",
            "ec2:DeleteVpnConnection",
            "ec2:DeleteVpnConnectionRoute",
            "ec2:DeleteVpnGateway",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeCarrierGateways",
            "ec2:DescribeClassicLinkInstances",
            "ec2:DescribeCustomerGateways",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeEgressOnlyInternetGateways",
            "ec2:DescribeFlowLogs",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeMovingAddresses",
            "ec2:DescribeNatGateways",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeNetworkInterfaceAttribute",
            "ec2:DescribeNetworkInterfacePermissions",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePlacementGroups",
            "ec2:DescribePrefixLists",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroupReferences",
            "ec2:DescribeSecurityGroupRules",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeStaleSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcClassicLink",
            "ec2:DescribeVpcClassicLinkDnsSupport",
            "ec2:DescribeVpcEndpointConnectionNotifications",
            "ec2:DescribeVpcEndpointConnections",
            "ec2:DescribeVpcEndpointServiceConfigurations",
            "ec2:DescribeVpcEndpointServicePermissions",
            "ec2:DescribeVpcEndpointServices",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcPeeringConnections",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpnConnections",
            "ec2:DescribeVpnGateways",
            "ec2:DescribePublicIpv4Pools",
            "ec2:DescribeIpv6Pools",
            "ec2:DetachInternetGateway",
            "ec2:DetachNetworkInterface",
            "ec2:DetachVpnGateway",
            "ec2:DisableVgwRoutePropagation",
            "ec2:DisableVpcClassicLinkDnsSupport",
            "ec2:DisassociateAddress",
            "ec2:DisassociateRouteTable",
            "ec2:DisassociateSubnetCidrBlock",
            "ec2:DisassociateVpcCidrBlock",
            "ec2:EnableVgwRoutePropagation",
            "ec2:EnableVpcClassicLinkDnsSupport",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:ModifySecurityGroupRules",
            "ec2:ModifySubnetAttribute",
            "ec2:ModifyVpcAttribute",
            "ec2:ModifyVpcEndpoint",
            "ec2:ModifyVpcEndpointConnectionNotification",
            "ec2:ModifyVpcEndpointServiceConfiguration",
            "ec2:ModifyVpcEndpointServicePermissions",
            "ec2:ModifyVpcPeeringConnectionOptions",
            "ec2:ModifyVpcTenancy",
            "ec2:MoveAddressToVpc",
            "ec2:RejectVpcEndpointConnections",
            "ec2:ReleaseAddress",
            "ec2:ReplaceNetworkAclAssociation",
            "ec2:ReplaceNetworkAclEntry",
            "ec2:ReplaceRoute",
            "ec2:ReplaceRouteTableAssociation",
            "ec2:ResetNetworkInterfaceAttribute",
            "ec2:RestoreAddressToClassic",
            "ec2:UnassignIpv6Addresses",
            "ec2:UnassignPrivateIpAddresses",
            "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
            "ec2:UpdateSecurityGroupRuleDescriptionsIngress",
            "elasticbeanstalk:Describe*",
            "elasticbeanstalk:List*",
            "elasticbeanstalk:RequestEnvironmentInfo",
            "elasticbeanstalk:RetrieveEnvironmentInfo",
            "elasticloadbalancing:*",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "route53:*",
            "route53domains:*",
            "sns:CreateTopic",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTopics"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AcceptVpcPeeringConnection",
            "ec2:AttachClassicLinkVpc",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateVpcPeeringConnection",
            "ec2:DeleteCustomerGateway",
            "ec2:DeleteDhcpOptions",
            "ec2:DeleteInternetGateway",
            "ec2:DeleteNetworkAcl",
            "ec2:DeleteNetworkAclEntry",
            "ec2:DeleteRoute",
            "ec2:DeleteRouteTable",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteVolume",
            "ec2:DeleteVpcPeeringConnection",
            "ec2:DetachClassicLinkVpc",
            "ec2:DisableVpcClassicLink",
            "ec2:EnableVpcClassicLink",
            "ec2:GetConsoleScreenshot",
            "ec2:RejectVpcPeeringConnection",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateLocalGatewayRoute",
            "ec2:CreateLocalGatewayRouteTableVpcAssociation",
            "ec2:DeleteLocalGatewayRoute",
            "ec2:DeleteLocalGatewayRouteTableVpcAssociation",
            "ec2:DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
            "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
            "ec2:DescribeLocalGatewayRouteTables",
            "ec2:DescribeLocalGatewayVirtualInterfaceGroups",
            "ec2:DescribeLocalGatewayVirtualInterfaces",
            "ec2:DescribeLocalGateways",
            "ec2:SearchLocalGatewayRoutes"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetBucketLocation",
            "s3:GetBucketWebsite",
            "s3:ListBucket"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:GetRole",
            "iam:ListRoles",
            "iam:PassRole"
          ],
          "Resource": "arn:aws:iam::*:role/flow-logs-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "networkmanager:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AcceptTransitGatewayVpcAttachment",
            "ec2:AssociateTransitGatewayRouteTable",
            "ec2:CreateTransitGateway",
            "ec2:CreateTransitGatewayRoute",
            "ec2:CreateTransitGatewayRouteTable",
            "ec2:CreateTransitGatewayVpcAttachment",
            "ec2:DeleteTransitGateway",
            "ec2:DeleteTransitGatewayRoute",
            "ec2:DeleteTransitGatewayRouteTable",
            "ec2:DeleteTransitGatewayVpcAttachment",
            "ec2:DescribeTransitGatewayAttachments",
            "ec2:DescribeTransitGatewayRouteTables",
            "ec2:DescribeTransitGatewayVpcAttachments",
            "ec2:DescribeTransitGateways",
            "ec2:DisableTransitGatewayRouteTablePropagation",
            "ec2:DisassociateTransitGatewayRouteTable",
            "ec2:EnableTransitGatewayRouteTablePropagation",
            "ec2:ExportTransitGatewayRoutes",
            "ec2:GetTransitGatewayAttachmentPropagations",
            "ec2:GetTransitGatewayRouteTableAssociations",
            "ec2:GetTransitGatewayRouteTablePropagations",
            "ec2:ModifyTransitGateway",
            "ec2:ModifyTransitGatewayVpcAttachment",
            "ec2:RejectTransitGatewayVpcAttachment",
            "ec2:ReplaceTransitGatewayRoute",
            "ec2:SearchTransitGatewayRoutes"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": [
                "transitgateway.amazonaws.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v11",
    "IsDefaultVersion": true,
    "CreateDate": "2021-09-16T20:22:54+00:00"
  },
  "OAMFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "oam:*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-27T13:38:29+00:00"
  },
  "OAMReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "oam:Get*",
            "oam:List*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-27T13:29:39+00:00"
  },
  "PartnerCentralAccountManagementUserRoleAssociation": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "PassPartnerCentralRole",
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": "arn:aws:iam::*:role/PartnerCentralRoleFor*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "partnercentral-account-management.amazonaws.com"
            }
          }
        },
        {
          "Sid": "PartnerUserRoleAssociation",
          "Effect": "Allow",
          "Action": [
            "iam:ListRoles",
            "partnercentral-account-management:AssociatePartnerUser",
            "partnercentral-account-management:DisassociatePartnerUser"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-10T02:03:40+00:00"
  },
  "PowerUserAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "NotAction": [
            "iam:*",
            "organizations:*",
            "account:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole",
            "iam:DeleteServiceLinkedRole",
            "iam:ListRoles",
            "organizations:DescribeOrganization",
            "account:ListRegions",
            "account:GetAccountInformation"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2023-07-06T22:04:00+00:00"
  },
  "QuickSightAccessForS3StorageManagementAnalyticsReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": [
            "arn:aws:s3:::s3-analytics-export-shared-*"
          ]
        },
        {
          "Action": [
            "s3:GetAnalyticsConfiguration",
            "s3:ListAllMyBuckets",
            "s3:GetBucketLocation"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2019-10-08T23:53:11+00:00"
  },
  "RDSCloudHsmAuthorizationRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudhsm:CreateLunaClient",
            "cloudhsm:DeleteLunaClient",
            "cloudhsm:DescribeHapg",
            "cloudhsm:DescribeLunaClient",
            "cloudhsm:GetConfig",
            "cloudhsm:ModifyHapg",
            "cloudhsm:ModifyLunaClient"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2019-09-26T22:14:29+00:00"
  },
  "ROSAAmazonEBSCSIDriverOperatorPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstances",
            "ec2:DescribeSnapshots",
            "ec2:DescribeTags",
            "ec2:DescribeVolumes",
            "ec2:DescribeVolumesModifications"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:AttachVolume",
            "ec2:DetachVolume"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*",
            "arn:aws:ec2:*:*:volume/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/red-hat-managed": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteVolume",
            "ec2:ModifyVolume"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:volume/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/red-hat-managed": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateVolume"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:volume/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/red-hat-managed": "true"
            }
          }
        },
        {
          "Sid": "CreateSnapshotResourceTag",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSnapshot"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:volume/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/red-hat-managed": "true"
            }
          }
        },
        {
          "Sid": "CreateSnapshotRequestTag",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSnapshot"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:snapshot/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/red-hat-managed": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteSnapshot"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:snapshot/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/red-hat-managed": "true"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:volume/*",
            "arn:aws:ec2:*:*:snapshot/*"
          ],
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": [
                "CreateVolume",
                "CreateSnapshot"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-04-20T22:36:00+00:00"
  },
  "ROSACloudNetworkConfigOperatorPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "DescribeNetworkResources",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstances",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstanceTypes",
            "ec2:DescribeSubnets",
            "ec2:DescribeNetworkInterfaces"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ModifyEIPs",
          "Effect": "Allow",
          "Action": [
            "ec2:UnassignPrivateIpAddresses",
            "ec2:AssignPrivateIpAddresses",
            "ec2:UnassignIpv6Addresses",
            "ec2:AssignIpv6Addresses"
          ],
          "Resource": "arn:aws:ec2:*:*:network-interface/*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/red-hat-managed": "true"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-04-20T22:34:36+00:00"
  },
  "ROSAControlPlaneOperatorPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "ReadPermissions",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ec2:DescribeSecurityGroups",
            "route53:ListHostedZones"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CreateSecurityGroups",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSecurityGroup"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:security-group*/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/red-hat-managed": "true"
            }
          }
        },
        {
          "Sid": "DeleteSecurityGroup",
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteSecurityGroup"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:security-group*/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/red-hat-managed": "true"
            }
          }
        },
        {
          "Sid": "SecurityGroupIngressEgress",
          "Effect": "Allow",
          "Action": [
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:RevokeSecurityGroupEgress"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:security-group*/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/red-hat-managed": "true"
            }
          }
        },
        {
          "Sid": "CreateSecurityGroupsVPCNoCondition",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSecurityGroup"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:vpc/*"
          ]
        },
        {
          "Sid": "ListResourceRecordSets",
          "Effect": "Allow",
          "Action": [
            "route53:ListResourceRecordSets"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "ChangeResourceRecordSetsRestrictedRecordNames",
          "Effect": "Allow",
          "Action": [
            "route53:ChangeResourceRecordSets"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "ForAllValues:StringLike": {
              "route53:ChangeResourceRecordSetsNormalizedRecordNames": [
                "*.hypershift.local"
              ]
            }
          }
        },
        {
          "Sid": "VPCEndpointWithCondition",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateVpcEndpoint"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:vpc-endpoint/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/red-hat-managed": "true"
            }
          }
        },
        {
          "Sid": "VPCEndpointResourceTagCondition",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateVpcEndpoint"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:security-group*/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/red-hat-managed": "true"
            }
          }
        },
        {
          "Sid": "VPCEndpointNoCondition",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateVpcEndpoint"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:vpc/*",
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:route-table/*"
          ]
        },
        {
          "Sid": "ManageVPCEndpointWithCondition",
          "Effect": "Allow",
          "Action": [
            "ec2:ModifyVpcEndpoint",
            "ec2:DeleteVpcEndpoints"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:vpc-endpoint/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/red-hat-managed": "true"
            }
          }
        },
        {
          "Sid": "ModifyVPCEndpoingNoCondition",
          "Effect": "Allow",
          "Action": [
            "ec2:ModifyVpcEndpoint"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:subnet/*"
          ]
        },
        {
          "Sid": "CreateTagsRestrictedActions",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:vpc-endpoint/*",
            "arn:aws:ec2:*:*:security-group/*"
          ],
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": [
                "CreateVpcEndpoint",
                "CreateSecurityGroup"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-06-30T21:12:32+00:00"
  },
  "ROSAImageRegistryOperatorPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "ListBuckets",
          "Effect": "Allow",
          "Action": [
            "s3:ListBucket",
            "s3:ListBucketMultipartUploads"
          ],
          "Resource": "*"
        },
        {
          "Sid": "AllowSpecificBucketActions",
          "Effect": "Allow",
          "Action": [
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:GetBucketTagging",
            "s3:GetBucketPublicAccessBlock",
            "s3:GetEncryptionConfiguration",
            "s3:GetLifecycleConfiguration",
            "s3:GetBucketLocation",
            "s3:PutBucketPublicAccessBlock",
            "s3:PutBucketTagging",
            "s3:PutEncryptionConfiguration",
            "s3:PutLifecycleConfiguration"
          ],
          "Resource": [
            "arn:aws:s3:::*-image-registry-${aws:RequestedRegion}-*"
          ]
        },
        {
          "Sid": "AllowSpecificObjectActions",
          "Effect": "Allow",
          "Action": [
            "s3:AbortMultipartUpload",
            "s3:DeleteObject",
            "s3:GetObject",
            "s3:ListMultipartUploadParts",
            "s3:PutObject"
          ],
          "Resource": [
            "arn:aws:s3:::*-image-registry-${aws:RequestedRegion}-*/*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-04-27T20:13:18+00:00"
  },
  "ROSAIngressOperatorPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:DescribeLoadBalancers",
            "route53:ListHostedZones",
            "tag:GetResources"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "route53:ChangeResourceRecordSets"
          ],
          "Resource": "*",
          "Condition": {
            "ForAllValues:StringLike": {
              "route53:ChangeResourceRecordSetsNormalizedRecordNames": [
                "*.openshiftapps.com",
                "*.devshift.org",
                "*.openshiftusgov.com",
                "*.devshiftusgov.com"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-04-20T22:37:08+00:00"
  },
  "ROSAInstallerPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "ReadPermissions",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeInstances",
            "ec2:DescribeInstanceTypes",
            "ec2:DescribeRegions",
            "ec2:DescribeReservedInstancesOfferings",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSecurityGroupRules",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs",
            "ec2:DescribeInstanceTypeOfferings",
            "elasticloadbalancing:DescribeAccountLimits",
            "elasticloadbalancing:DescribeLoadBalancers",
            "iam:GetRole",
            "route53:ListHostedZones",
            "route53:ListResourceRecordSets",
            "route53:GetAccountLimit",
            "servicequotas:GetServiceQuota"
          ],
          "Resource": "*"
        },
        {
          "Sid": "PassRoleToEC2",
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:*:iam::*:role/*-ROSA-Worker-Role"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "ec2.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "ManageInstanceProfiles",
          "Effect": "Allow",
          "Action": [
            "iam:AddRoleToInstanceProfile",
            "iam:RemoveRoleFromInstanceProfile",
            "iam:DeleteInstanceProfile",
            "iam:GetInstanceProfile"
          ],
          "Resource": [
            "arn:aws:iam::*:instance-profile/rosa-service-managed-*"
          ]
        },
        {
          "Sid": "CreateInstanceProfiles",
          "Effect": "Allow",
          "Action": [
            "iam:CreateInstanceProfile",
            "iam:TagInstanceProfile"
          ],
          "Resource": [
            "arn:aws:iam::*:instance-profile/rosa-service-managed-*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/red-hat-managed": "true"
            }
          }
        },
        {
          "Sid": "GetSecretValue",
          "Effect": "Allow",
          "Action": [
            "secretsmanager:GetSecretValue"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/red-hat-managed": "true"
            }
          }
        },
        {
          "Sid": "Route53ManageRecords",
          "Effect": "Allow",
          "Action": [
            "route53:ChangeResourceRecordSets"
          ],
          "Resource": "*",
          "Condition": {
            "ForAllValues:StringLike": {
              "route53:ChangeResourceRecordSetsNormalizedRecordNames": [
                "*.openshiftapps.com",
                "*.devshift.org",
                "*.hypershift.local",
                "*.openshiftusgov.com",
                "*.devshiftusgov.com"
              ]
            }
          }
        },
        {
          "Sid": "Route53Manage",
          "Effect": "Allow",
          "Action": [
            "route53:ChangeTagsForResource",
            "route53:CreateHostedZone",
            "route53:DeleteHostedZone"
          ],
          "Resource": "*"
        },
        {
          "Sid": "CreateTags",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*",
            "arn:aws:ec2:*:*:volume/*"
          ],
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": [
                "RunInstances"
              ]
            }
          }
        },
        {
          "Sid": "RunInstancesNoCondition",
          "Effect": "Allow",
          "Action": "ec2:RunInstances",
          "Resource": [
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:network-interface/*",
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:snapshot/*"
          ]
        },
        {
          "Sid": "RunInstancesRestrictedRequestTag",
          "Effect": "Allow",
          "Action": "ec2:RunInstances",
          "Resource": [
            "arn:aws:ec2:*:*:instance/*",
            "arn:aws:ec2:*:*:volume/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/red-hat-managed": "true"
            }
          }
        },
        {
          "Sid": "RunInstancesRedHatOwnedAMIs",
          "Effect": "Allow",
          "Action": [
            "ec2:RunInstances"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:image/*"
          ],
          "Condition": {
            "StringEquals": {
              "ec2:Owner": [
                "531415883065",
                "251351625822",
                "210686502322"
              ]
            }
          }
        },
        {
          "Sid": "ManageInstancesRestrictedResourceTag",
          "Effect": "Allow",
          "Action": [
            "ec2:TerminateInstances",
            "ec2:GetConsoleOutput"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/red-hat-managed": "true"
            }
          }
        },
        {
          "Sid": "CreateGrantRestrictedResourceTag",
          "Effect": "Allow",
          "Action": [
            "kms:CreateGrant"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/red-hat": "true"
            },
            "StringLike": {
              "kms:ViaService": "ec2.*.amazonaws.com"
            },
            "Bool": {
              "kms:GrantIsForAWSResource": true
            }
          }
        },
        {
          "Sid": "ManagedKMSRestrictedResourceTag",
          "Effect": "Allow",
          "Action": [
            "kms:DescribeKey",
            "kms:GenerateDataKeyWithoutPlaintext"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/red-hat": "true"
            }
          }
        },
        {
          "Sid": "CreateSecurityGroups",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSecurityGroup"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:security-group*/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/red-hat-managed": "true"
            }
          }
        },
        {
          "Sid": "DeleteSecurityGroup",
          "Effect": "Allow",
          "Action": [
            "ec2:DeleteSecurityGroup"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:security-group*/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/red-hat-managed": "true"
            }
          }
        },
        {
          "Sid": "SecurityGroupIngressEgress",
          "Effect": "Allow",
          "Action": [
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:RevokeSecurityGroupEgress"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:security-group*/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/red-hat-managed": "true"
            }
          }
        },
        {
          "Sid": "CreateSecurityGroupsVPCNoCondition",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSecurityGroup"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:vpc/*"
          ]
        },
        {
          "Sid": "CreateTagsRestrictedActions",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:security-group/*"
          ],
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": [
                "CreateSecurityGroup"
              ]
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-06-06T21:00:31+00:00"
  },
  "ROSAKMSProviderPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "VolumeEncryption",
          "Effect": "Allow",
          "Action": [
            "kms:Encrypt",
            "kms:Decrypt",
            "kms:DescribeKey"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/red-hat": "true"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-04-27T20:10:20+00:00"
  },
  "ROSAKubeControllerPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "ReadPermissions",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeInstances",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeLoadBalancerAttributes",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "elasticloadbalancing:DescribeLoadBalancerPolicies"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "KMSDescribeKey",
          "Effect": "Allow",
          "Action": [
            "kms:DescribeKey"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/red-hat": "true"
            }
          }
        },
        {
          "Sid": "LoadBalanacerManagement",
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:AddTags",
            "elasticloadbalancing:ConfigureHealthCheck",
            "elasticloadbalancing:CreateLoadBalancerPolicy",
            "elasticloadbalancing:DeleteLoadBalancer",
            "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
            "elasticloadbalancing:ModifyLoadBalancerAttributes",
            "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
            "elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "CreateTargetGroup",
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:CreateTargetGroup"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/red-hat-managed": "true"
            }
          }
        },
        {
          "Sid": "LoadBalanacerManagementResourceTag",
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:DeleteListener",
            "elasticloadbalancing:RegisterTargets",
            "elasticloadbalancing:ModifyTargetGroup",
            "elasticloadbalancing:DeleteTargetGroup",
            "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
            "elasticloadbalancing:CreateLoadBalancerListeners",
            "elasticloadbalancing:DeleteLoadBalancerListeners",
            "elasticloadbalancing:AttachLoadBalancerToSubnets",
            "elasticloadbalancing:DetachLoadBalancerFromSubnets",
            "elasticloadbalancing:ModifyListener",
            "elasticloadbalancing:SetLoadBalancerPoliciesOfListener"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/red-hat-managed": "true"
            }
          }
        },
        {
          "Sid": "CreateListeners",
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:CreateListener"
          ],
          "Resource": [
            "*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/red-hat-managed": "true",
              "aws:ResourceTag/red-hat-managed": "true"
            }
          }
        },
        {
          "Sid": "CreateSecurityGroup",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSecurityGroup"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:security-group/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/red-hat-managed": "true"
            }
          }
        },
        {
          "Sid": "CreateSecurityGroupVpc",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateSecurityGroup"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:vpc/*"
          ]
        },
        {
          "Sid": "CreateLoadBalancer",
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:CreateLoadBalancer"
          ],
          "Resource": [
            "arn:aws:elasticloadbalancing:*:*:loadbalancer/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/red-hat-managed": "true"
            }
          }
        },
        {
          "Sid": "ModifySecurityGroup",
          "Effect": "Allow",
          "Action": [
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:DeleteSecurityGroup"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:security-group/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/red-hat-managed": "true"
            }
          }
        },
        {
          "Sid": "CreateTagsSecurityGroups",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:security-group/*"
          ],
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "CreateSecurityGroup"
            }
          }
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-10-16T18:17:05+00:00"
  },
  "ROSAManageSubscription": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "aws-marketplace:Subscribe",
            "aws-marketplace:Unsubscribe"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws-marketplace:ProductId": [
                "34850061-abaf-402d-92df-94325c9e947f",
                "bfdca560-2c78-4e64-8193-794c159e6d30"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "aws-marketplace:ViewSubscriptions"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-08-04T19:59:14+00:00"
  },
  "ROSANodePoolManagementPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "ReadPermissions",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeImages",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeNetworkInterfaceAttribute",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "CreateServiceLinkedRole",
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": [
            "arn:*:iam::*:role/aws-service-role/elasticloadbalancing.amazonaws.com/AWSServiceRoleForElasticLoadBalancing"
          ],
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"
            }
          }
        },
        {
          "Sid": "PassWorkerRole",
          "Effect": "Allow",
          "Action": [
            "iam:PassRole"
          ],
          "Resource": [
            "arn:*:iam::*:role/*-ROSA-Worker-Role"
          ],
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": [
                "ec2.amazonaws.com"
              ]
            }
          }
        },
        {
          "Sid": "AuthorizeSecurityGroupIngressRestrictedResourceTag",
          "Effect": "Allow",
          "Action": [
            "ec2:AuthorizeSecurityGroupIngress"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:security-group-rule/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/red-hat-managed": "true"
            }
          }
        },
        {
          "Sid": "NetworkInterfaces",
          "Effect": "Allow",
          "Action": [
            "ec2:ModifyNetworkInterfaceAttribute"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/red-hat-managed": "true"
            }
          }
        },
        {
          "Sid": "NetworkInterfacesNoCondition",
          "Effect": "Allow",
          "Action": [
            "ec2:ModifyNetworkInterfaceAttribute"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:network-interface/*",
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:vpc/*"
          ]
        },
        {
          "Sid": "TerminateInstances",
          "Effect": "Allow",
          "Action": [
            "ec2:TerminateInstances"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/red-hat-managed": "true"
            }
          }
        },
        {
          "Sid": "CreateTags",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*",
            "arn:aws:ec2:*:*:volume/*"
          ],
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": [
                "RunInstances"
              ]
            }
          }
        },
        {
          "Sid": "CreateTagsCAPAControllerReconcileInstance",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/red-hat-managed": "true"
            }
          }
        },
        {
          "Sid": "CreateTagsCAPAControllerReconcileVolume",
          "Effect": "Allow",
          "Action": [
            "ec2:CreateTags"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:volume/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/red-hat-managed": "true"
            }
          }
        },
        {
          "Sid": "RunInstancesRequest",
          "Effect": "Allow",
          "Action": [
            "ec2:RunInstances"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:instance/*"
          ],
          "Condition": {
            "StringEquals": {
              "aws:RequestTag/red-hat-managed": "true"
            }
          }
        },
        {
          "Sid": "RunInstancesNoCondition",
          "Effect": "Allow",
          "Action": [
            "ec2:RunInstances"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:network-interface/*",
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:volume/*"
          ]
        },
        {
          "Sid": "RunInstancesRedHatAMI",
          "Effect": "Allow",
          "Action": [
            "ec2:RunInstances"
          ],
          "Resource": [
            "arn:aws:ec2:*:*:image/*"
          ],
          "Condition": {
            "StringEquals": {
              "ec2:Owner": [
                "531415883065",
                "251351625822"
              ]
            }
          }
        },
        {
          "Sid": "ManagedKMSRestrictedResourceTag",
          "Effect": "Allow",
          "Action": [
            "kms:DescribeKey",
            "kms:GenerateDataKeyWithoutPlaintext"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/red-hat": "true"
            }
          }
        },
        {
          "Sid": "CreateGrantRestricted",
          "Effect": "Allow",
          "Action": [
            "kms:CreateGrant"
          ],
          "Resource": "*",
          "Condition": {
            "Bool": {
              "kms:GrantIsForAWSResource": true
            },
            "StringEquals": {
              "aws:ResourceTag/red-hat": "true"
            },
            "StringLike": {
              "kms:ViaService": "ec2.*.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-06-08T20:48:08+00:00"
  },
  "ROSASRESupportPolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "ReadPermissions",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeRegions",
            "sts:DecodeAuthorizationMessage"
          ],
          "Resource": "*"
        },
        {
          "Sid": "Route53",
          "Effect": "Allow",
          "Action": [
            "route53:GetHostedZone",
            "route53:GetHostedZoneCount",
            "route53:ListHostedZones",
            "route53:ListHostedZonesByName",
            "route53:ListResourceRecordSets"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "DecribeIAMRoles",
          "Effect": "Allow",
          "Action": [
            "iam:GetRole",
            "iam:ListRoles"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "EC2DescribeInstance",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstances",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeIamInstanceProfileAssociations",
            "ec2:DescribeReservedInstances",
            "ec2:DescribeScheduledInstances"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "VPCNetwork",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSubnets",
            "ec2:DescribeRouteTables"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "Cloudtrail",
          "Effect": "Allow",
          "Action": [
            "cloudtrail:DescribeTrails",
            "cloudtrail:LookupEvents"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "Cloudwatch",
          "Effect": "Allow",
          "Action": [
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "DescribeVolumes",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeVolumes",
            "ec2:DescribeVolumesModifications",
            "ec2:DescribeVolumeStatus"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "DescribeLoadBalancers",
          "Effect": "Allow",
          "Action": [
            "elasticloadbalancing:DescribeAccountLimits",
            "elasticloadbalancing:DescribeInstanceHealth",
            "elasticloadbalancing:DescribeListenerCertificates",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancerAttributes",
            "elasticloadbalancing:DescribeLoadBalancerPolicies",
            "elasticloadbalancing:DescribeLoadBalancerPolicyTypes",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeRules",
            "elasticloadbalancing:DescribeSSLPolicies",
            "elasticloadbalancing:DescribeTags",
            "elasticloadbalancing:DescribeTargetGroupAttributes",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "DescribeVPC",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeVpcEndpointConnections",
            "ec2:DescribeVpcEndpoints"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "DescribeSecurityGroups",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeSecurityGroupReferences",
            "ec2:DescribeSecurityGroupRules",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeStaleSecurityGroups"
          ],
          "Resource": "arn:aws:ec2:*:*:security-group*/*"
        },
        {
          "Sid": "DescribeAddressesAttribute",
          "Effect": "Allow",
          "Action": "ec2:DescribeAddressesAttribute",
          "Resource": "arn:aws:ec2:*:*:elastic-ip/*"
        },
        {
          "Sid": "DescribeInstance",
          "Effect": "Allow",
          "Action": [
            "iam:GetInstanceProfile"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/red-hat-managed": "true"
            }
          }
        },
        {
          "Sid": "DescribeSpotFleetInstances",
          "Effect": "Allow",
          "Action": "ec2:DescribeSpotFleetInstances",
          "Resource": "arn:aws:ec2:*:*:spot-fleet-request/*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/red-hat-managed": "true"
            }
          }
        },
        {
          "Sid": "DescribeVolumeAttribute",
          "Effect": "Allow",
          "Action": "ec2:DescribeVolumeAttribute",
          "Resource": "arn:aws:ec2:*:*:volume/*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/red-hat-managed": "true"
            }
          }
        },
        {
          "Sid": "ManageInstanceLifecycle",
          "Effect": "Allow",
          "Action": [
            "ec2:RebootInstances",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "StringEquals": {
              "aws:ResourceTag/red-hat-managed": "true"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-06-01T14:36:06+00:00"
  },
  "ROSAWorkerInstancePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "Ec2ReadOnly",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeInstances",
            "ec2:DescribeRegions"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-04-20T22:35:32+00:00"
  },
  "ReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "a4b:Get*",
            "a4b:List*",
            "a4b:Search*",
            "access-analyzer:GetAccessPreview",
            "access-analyzer:GetAnalyzedResource",
            "access-analyzer:GetAnalyzer",
            "access-analyzer:GetArchiveRule",
            "access-analyzer:GetFinding",
            "access-analyzer:GetGeneratedPolicy",
            "access-analyzer:ListAccessPreviewFindings",
            "access-analyzer:ListAccessPreviews",
            "access-analyzer:ListAnalyzedResources",
            "access-analyzer:ListAnalyzers",
            "access-analyzer:ListArchiveRules",
            "access-analyzer:ListFindings",
            "access-analyzer:ListPolicyGenerations",
            "access-analyzer:ListTagsForResource",
            "access-analyzer:ValidatePolicy",
            "account:GetAccountInformation",
            "account:GetAlternateContact",
            "account:GetChallengeQuestions",
            "account:GetContactInformation",
            "account:GetRegionOptStatus",
            "account:ListRegions",
            "acm-pca:Describe*",
            "acm-pca:Get*",
            "acm-pca:List*",
            "acm:Describe*",
            "acm:Get*",
            "acm:List*",
            "airflow:ListEnvironments",
            "airflow:ListTagsForResource",
            "amplify:GetApp",
            "amplify:GetBranch",
            "amplify:GetDomainAssociation",
            "amplify:GetJob",
            "amplify:ListApps",
            "amplify:ListBranches",
            "amplify:ListDomainAssociations",
            "amplify:ListJobs",
            "aoss:BatchGetCollection",
            "aoss:BatchGetVpcEndpoint",
            "aoss:GetAccessPolicy",
            "aoss:GetAccountSettings",
            "aoss:GetPoliciesStats",
            "aoss:GetSecurityConfig",
            "aoss:GetSecurityPolicy",
            "aoss:ListAccessPolicies",
            "aoss:ListCollections",
            "aoss:ListSecurityConfigs",
            "aoss:ListSecurityPolicies",
            "aoss:ListTagsForResource",
            "aoss:ListVpcEndpoints",
            "apigateway:GET",
            "appconfig:GetApplication",
            "appconfig:GetConfiguration",
            "appconfig:GetConfigurationProfile",
            "appconfig:GetDeployment",
            "appconfig:GetDeploymentStrategy",
            "appconfig:GetEnvironment",
            "appconfig:GetHostedConfigurationVersion",
            "appconfig:ListApplications",
            "appconfig:ListConfigurationProfiles",
            "appconfig:ListDeployments",
            "appconfig:ListDeploymentStrategies",
            "appconfig:ListEnvironments",
            "appconfig:ListHostedConfigurationVersions",
            "appconfig:ListTagsForResource",
            "appfabric:GetAppAuthorization",
            "appfabric:GetAppBundle",
            "appfabric:GetIngestion",
            "appfabric:GetIngestionDestination",
            "appfabric:ListAppAuthorizations",
            "appfabric:ListAppBundles",
            "appfabric:ListIngestionDestinations",
            "appfabric:ListIngestions",
            "appfabric:ListTagsForResource",
            "appflow:DescribeConnector",
            "appflow:DescribeConnectorEntity",
            "appflow:DescribeConnectorFields",
            "appflow:DescribeConnectorProfiles",
            "appflow:DescribeConnectors",
            "appflow:DescribeFlow",
            "appflow:DescribeFlowExecution",
            "appflow:DescribeFlowExecutionRecords",
            "appflow:DescribeFlows",
            "appflow:ListConnectorEntities",
            "appflow:ListConnectorFields",
            "appflow:ListConnectors",
            "appflow:ListFlows",
            "appflow:ListTagsForResource",
            "application-autoscaling:Describe*",
            "application-autoscaling:ListTagsForResource",
            "applicationinsights:Describe*",
            "applicationinsights:List*",
            "appmesh:Describe*",
            "appmesh:List*",
            "apprunner:DescribeAutoScalingConfiguration",
            "apprunner:DescribeCustomDomains",
            "apprunner:DescribeObservabilityConfiguration",
            "apprunner:DescribeService",
            "apprunner:DescribeVpcConnector",
            "apprunner:DescribeVpcIngressConnection",
            "apprunner:ListAutoScalingConfigurations",
            "apprunner:ListConnections",
            "apprunner:ListObservabilityConfigurations",
            "apprunner:ListOperations",
            "apprunner:ListServices",
            "apprunner:ListTagsForResource",
            "apprunner:ListVpcConnectors",
            "apprunner:ListVpcIngressConnections",
            "appstream:Describe*",
            "appstream:List*",
            "appsync:Get*",
            "appsync:List*",
            "aps:DescribeAlertManagerDefinition",
            "aps:DescribeLoggingConfiguration",
            "aps:DescribeRuleGroupsNamespace",
            "aps:DescribeWorkspace",
            "aps:GetAlertManagerSilence",
            "aps:GetAlertManagerStatus",
            "aps:GetLabels",
            "aps:GetMetricMetadata",
            "aps:GetSeries",
            "aps:ListAlertManagerAlertGroups",
            "aps:ListAlertManagerAlerts",
            "aps:ListAlertManagerReceivers",
            "aps:ListAlertManagerSilences",
            "aps:ListAlerts",
            "aps:ListRuleGroupsNamespaces",
            "aps:ListRules",
            "aps:ListTagsForResource",
            "aps:ListWorkspaces",
            "aps:QueryMetrics",
            "arc-zonal-shift:GetManagedResource",
            "arc-zonal-shift:ListManagedResources",
            "arc-zonal-shift:ListZonalShifts",
            "artifact:GetReport",
            "artifact:GetReportMetadata",
            "artifact:GetTermForReport",
            "artifact:ListReports",
            "athena:Batch*",
            "athena:Get*",
            "athena:List*",
            "auditmanager:GetAccountStatus",
            "auditmanager:GetAssessment",
            "auditmanager:GetAssessmentFramework",
            "auditmanager:GetAssessmentReportUrl",
            "auditmanager:GetChangeLogs",
            "auditmanager:GetControl",
            "auditmanager:GetDelegations",
            "auditmanager:GetEvidence",
            "auditmanager:GetEvidenceByEvidenceFolder",
            "auditmanager:GetEvidenceFolder",
            "auditmanager:GetEvidenceFoldersByAssessment",
            "auditmanager:GetEvidenceFoldersByAssessmentControl",
            "auditmanager:GetOrganizationAdminAccount",
            "auditmanager:GetServicesInScope",
            "auditmanager:GetSettings",
            "auditmanager:ListAssessmentFrameworks",
            "auditmanager:ListAssessmentReports",
            "auditmanager:ListAssessments",
            "auditmanager:ListControls",
            "auditmanager:ListKeywordsForDataSource",
            "auditmanager:ListNotifications",
            "auditmanager:ListTagsForResource",
            "auditmanager:ValidateAssessmentReportIntegrity",
            "autoscaling-plans:Describe*",
            "autoscaling-plans:GetScalingPlanResourceForecastData",
            "autoscaling:Describe*",
            "autoscaling:GetPredictiveScalingForecast",
            "aws-portal:View*",
            "backup-gateway:ListGateways",
            "backup-gateway:ListHypervisors",
            "backup-gateway:ListTagsForResource",
            "backup-gateway:ListVirtualMachines",
            "backup:Describe*",
            "backup:Get*",
            "backup:List*",
            "batch:Describe*",
            "batch:List*",
            "billing:GetBillingData",
            "billing:GetBillingDetails",
            "billing:GetBillingNotifications",
            "billing:GetBillingPreferences",
            "billing:GetContractInformation",
            "billing:GetCredits",
            "billing:GetIAMAccessPreference",
            "billing:GetSellerOfRecord",
            "billing:ListBillingViews",
            "billingconductor:ListAccountAssociations",
            "billingconductor:ListBillingGroupCostReports",
            "billingconductor:ListBillingGroups",
            "billingconductor:ListCustomLineItems",
            "billingconductor:ListCustomLineItemVersions",
            "billingconductor:ListPricingPlans",
            "billingconductor:ListPricingPlansAssociatedWithPricingRule",
            "billingconductor:ListPricingRules",
            "billingconductor:ListPricingRulesAssociatedToPricingPlan",
            "billingconductor:ListResourcesAssociatedToCustomLineItem",
            "billingconductor:ListTagsForResource",
            "braket:GetDevice",
            "braket:GetQuantumTask",
            "braket:SearchDevices",
            "braket:SearchQuantumTasks",
            "budgets:Describe*",
            "budgets:View*",
            "cassandra:Select",
            "ce:DescribeCostCategoryDefinition",
            "ce:DescribeNotificationSubscription",
            "ce:DescribeReport",
            "ce:GetAnomalies",
            "ce:GetAnomalyMonitors",
            "ce:GetAnomalySubscriptions",
            "ce:GetCostAndUsage",
            "ce:GetCostAndUsageWithResources",
            "ce:GetCostCategories",
            "ce:GetCostForecast",
            "ce:GetDimensionValues",
            "ce:GetPreferences",
            "ce:GetReservationCoverage",
            "ce:GetReservationPurchaseRecommendation",
            "ce:GetReservationUtilization",
            "ce:GetRightsizingRecommendation",
            "ce:GetSavingsPlanPurchaseRecommendationDetails",
            "ce:GetSavingsPlansCoverage",
            "ce:GetSavingsPlansPurchaseRecommendation",
            "ce:GetSavingsPlansUtilization",
            "ce:GetSavingsPlansUtilizationDetails",
            "ce:GetTags",
            "ce:GetUsageForecast",
            "ce:ListCostAllocationTags",
            "ce:ListCostCategoryDefinitions",
            "ce:ListSavingsPlansPurchaseRecommendationGeneration",
            "ce:ListTagsForResource",
            "chatbot:Describe*",
            "chatbot:Get*",
            "chatbot:ListMicrosoftTeamsChannelConfigurations",
            "chatbot:ListMicrosoftTeamsConfiguredTeams",
            "chatbot:ListMicrosoftTeamsUserIdentities",
            "chime:Get*",
            "chime:List*",
            "chime:Retrieve*",
            "chime:Search*",
            "chime:Validate*",
            "cleanrooms:BatchGetCollaborationAnalysisTemplate",
            "cleanrooms:BatchGetSchema",
            "cleanrooms:GetAnalysisTemplate",
            "cleanrooms:GetCollaboration",
            "cleanrooms:GetCollaborationAnalysisTemplate",
            "cleanrooms:GetConfiguredTable",
            "cleanrooms:GetConfiguredTableAnalysisRule",
            "cleanrooms:GetConfiguredTableAssociation",
            "cleanrooms:GetMembership",
            "cleanrooms:GetProtectedQuery",
            "cleanrooms:GetSchema",
            "cleanrooms:GetSchemaAnalysisRule",
            "cleanrooms:ListAnalysisTemplates",
            "cleanrooms:ListCollaborationAnalysisTemplates",
            "cleanrooms:ListCollaborations",
            "cleanrooms:ListConfiguredTableAssociations",
            "cleanrooms:ListConfiguredTables",
            "cleanrooms:ListMembers",
            "cleanrooms:ListMemberships",
            "cleanrooms:ListProtectedQueries",
            "cleanrooms:ListSchemas",
            "cleanrooms:ListTagsForResource",
            "cloud9:Describe*",
            "cloud9:List*",
            "clouddirectory:BatchRead",
            "clouddirectory:Get*",
            "clouddirectory:List*",
            "clouddirectory:LookupPolicy",
            "cloudformation:Describe*",
            "cloudformation:Detect*",
            "cloudformation:Estimate*",
            "cloudformation:Get*",
            "cloudformation:List*",
            "cloudfront:DescribeFunction",
            "cloudfront:Get*",
            "cloudfront:List*",
            "cloudhsm:Describe*",
            "cloudhsm:Get*",
            "cloudhsm:List*",
            "cloudsearch:Describe*",
            "cloudsearch:List*",
            "cloudtrail:Describe*",
            "cloudtrail:Get*",
            "cloudtrail:List*",
            "cloudtrail:LookupEvents",
            "cloudwatch:Describe*",
            "cloudwatch:Get*",
            "cloudwatch:List*",
            "codeartifact:DescribeDomain",
            "codeartifact:DescribePackage",
            "codeartifact:DescribePackageVersion",
            "codeartifact:DescribeRepository",
            "codeartifact:GetAuthorizationToken",
            "codeartifact:GetDomainPermissionsPolicy",
            "codeartifact:GetPackageVersionAsset",
            "codeartifact:GetPackageVersionReadme",
            "codeartifact:GetRepositoryEndpoint",
            "codeartifact:GetRepositoryPermissionsPolicy",
            "codeartifact:ListDomains",
            "codeartifact:ListPackages",
            "codeartifact:ListPackageVersionAssets",
            "codeartifact:ListPackageVersionDependencies",
            "codeartifact:ListPackageVersions",
            "codeartifact:ListRepositories",
            "codeartifact:ListRepositoriesInDomain",
            "codeartifact:ListTagsForResource",
            "codeartifact:ReadFromRepository",
            "codebuild:BatchGet*",
            "codebuild:DescribeCodeCoverages",
            "codebuild:DescribeTestCases",
            "codebuild:List*",
            "codecommit:BatchGet*",
            "codecommit:Describe*",
            "codecommit:Get*",
            "codecommit:GitPull",
            "codecommit:List*",
            "codedeploy:BatchGet*",
            "codedeploy:Get*",
            "codedeploy:List*",
            "codeguru-profiler:Describe*",
            "codeguru-profiler:Get*",
            "codeguru-profiler:List*",
            "codeguru-reviewer:Describe*",
            "codeguru-reviewer:Get*",
            "codeguru-reviewer:List*",
            "codepipeline:Get*",
            "codepipeline:List*",
            "codestar-connections:GetConnection",
            "codestar-connections:GetHost",
            "codestar-connections:ListConnections",
            "codestar-connections:ListHosts",
            "codestar-connections:ListTagsForResource",
            "codestar-notifications:describeNotificationRule",
            "codestar-notifications:listEventTypes",
            "codestar-notifications:listNotificationRules",
            "codestar-notifications:listTagsForResource",
            "codestar-notifications:ListTargets",
            "codestar:Describe*",
            "codestar:Get*",
            "codestar:List*",
            "codestar:Verify*",
            "cognito-identity:Describe*",
            "cognito-identity:GetCredentialsForIdentity",
            "cognito-identity:GetIdentityPoolRoles",
            "cognito-identity:GetOpenIdToken",
            "cognito-identity:GetOpenIdTokenForDeveloperIdentity",
            "cognito-identity:List*",
            "cognito-identity:Lookup*",
            "cognito-idp:AdminGet*",
            "cognito-idp:AdminList*",
            "cognito-idp:Describe*",
            "cognito-idp:Get*",
            "cognito-idp:List*",
            "cognito-sync:Describe*",
            "cognito-sync:Get*",
            "cognito-sync:List*",
            "cognito-sync:QueryRecords",
            "comprehend:BatchDetect*",
            "comprehend:Classify*",
            "comprehend:Contains*",
            "comprehend:Describe*",
            "comprehend:Detect*",
            "comprehend:List*",
            "compute-optimizer:DescribeRecommendationExportJobs",
            "compute-optimizer:GetAutoScalingGroupRecommendations",
            "compute-optimizer:GetEBSVolumeRecommendations",
            "compute-optimizer:GetEC2InstanceRecommendations",
            "compute-optimizer:GetEC2RecommendationProjectedMetrics",
            "compute-optimizer:GetECSServiceRecommendationProjectedMetrics",
            "compute-optimizer:GetECSServiceRecommendations",
            "compute-optimizer:GetEffectiveRecommendationPreferences",
            "compute-optimizer:GetEnrollmentStatus",
            "compute-optimizer:GetEnrollmentStatusesForOrganization",
            "compute-optimizer:GetLambdaFunctionRecommendations",
            "compute-optimizer:GetLicenseRecommendations",
            "compute-optimizer:GetRecommendationPreferences",
            "compute-optimizer:GetRecommendationSummaries",
            "config:BatchGetAggregateResourceConfig",
            "config:BatchGetResourceConfig",
            "config:Deliver*",
            "config:Describe*",
            "config:Get*",
            "config:List*",
            "config:SelectAggregateResourceConfig",
            "config:SelectResourceConfig",
            "connect:Describe*",
            "connect:GetContactAttributes",
            "connect:GetCurrentMetricData",
            "connect:GetCurrentUserData",
            "connect:GetFederationToken",
            "connect:GetMetricData",
            "connect:GetMetricDataV2",
            "connect:GetTaskTemplate",
            "connect:GetTrafficDistribution",
            "connect:List*",
            "consoleapp:GetDeviceIdentity",
            "consoleapp:ListDeviceIdentities",
            "consolidatedbilling:GetAccountBillingRole",
            "consolidatedbilling:ListLinkedAccounts",
            "cur:GetClassicReport",
            "cur:GetClassicReportPreferences",
            "cur:GetUsageReport",
            "customer-verification:GetCustomerVerificationDetails",
            "customer-verification:GetCustomerVerificationEligibility",
            "databrew:DescribeDataset",
            "databrew:DescribeJob",
            "databrew:DescribeJobRun",
            "databrew:DescribeProject",
            "databrew:DescribeRecipe",
            "databrew:DescribeRuleset",
            "databrew:DescribeSchedule",
            "databrew:ListDatasets",
            "databrew:ListJobRuns",
            "databrew:ListJobs",
            "databrew:ListProjects",
            "databrew:ListRecipes",
            "databrew:ListRecipeVersions",
            "databrew:ListRulesets",
            "databrew:ListSchedules",
            "databrew:ListTagsForResource",
            "dataexchange:Get*",
            "dataexchange:List*",
            "datapipeline:Describe*",
            "datapipeline:EvaluateExpression",
            "datapipeline:Get*",
            "datapipeline:List*",
            "datapipeline:QueryObjects",
            "datapipeline:Validate*",
            "datasync:Describe*",
            "datasync:List*",
            "dax:BatchGetItem",
            "dax:Describe*",
            "dax:GetItem",
            "dax:ListTags",
            "dax:Query",
            "dax:Scan",
            "deepcomposer:GetComposition",
            "deepcomposer:GetModel",
            "deepcomposer:GetSampleModel",
            "deepcomposer:ListCompositions",
            "deepcomposer:ListModels",
            "deepcomposer:ListSampleModels",
            "deepcomposer:ListTrainingTopics",
            "detective:BatchGetGraphMemberDatasources",
            "detective:BatchGetMembershipDatasources",
            "detective:Get*",
            "detective:List*",
            "detective:SearchGraph",
            "devicefarm:Get*",
            "devicefarm:List*",
            "devops-guru:DescribeAccountHealth",
            "devops-guru:DescribeAccountOverview",
            "devops-guru:DescribeAnomaly",
            "devops-guru:DescribeEventSourcesConfig",
            "devops-guru:DescribeFeedback",
            "devops-guru:DescribeInsight",
            "devops-guru:DescribeOrganizationHealth",
            "devops-guru:DescribeOrganizationOverview",
            "devops-guru:DescribeOrganizationResourceCollectionHealth",
            "devops-guru:DescribeResourceCollectionHealth",
            "devops-guru:DescribeServiceIntegration",
            "devops-guru:GetCostEstimation",
            "devops-guru:GetResourceCollection",
            "devops-guru:ListAnomaliesForInsight",
            "devops-guru:ListAnomalousLogGroups",
            "devops-guru:ListEvents",
            "devops-guru:ListInsights",
            "devops-guru:ListMonitoredResources",
            "devops-guru:ListNotificationChannels",
            "devops-guru:ListOrganizationInsights",
            "devops-guru:ListRecommendations",
            "devops-guru:SearchInsights",
            "devops-guru:StartCostEstimation",
            "directconnect:Describe*",
            "discovery:Describe*",
            "discovery:Get*",
            "discovery:List*",
            "dlm:Get*",
            "dms:Describe*",
            "dms:List*",
            "dms:Test*",
            "drs:DescribeJobLogItems",
            "drs:DescribeJobs",
            "drs:DescribeLaunchConfigurationTemplates",
            "drs:DescribeRecoveryInstances",
            "drs:DescribeRecoverySnapshots",
            "drs:DescribeReplicationConfigurationTemplates",
            "drs:DescribeSourceNetworks",
            "drs:DescribeSourceServers",
            "drs:GetFailbackReplicationConfiguration",
            "drs:GetLaunchConfiguration",
            "drs:GetReplicationConfiguration",
            "drs:ListExtensibleSourceServers",
            "drs:ListLaunchActions",
            "drs:ListStagingAccounts",
            "drs:ListTagsForResource",
            "ds:Check*",
            "ds:Describe*",
            "ds:Get*",
            "ds:List*",
            "ds:Verify*",
            "dynamodb:BatchGet*",
            "dynamodb:Describe*",
            "dynamodb:Get*",
            "dynamodb:List*",
            "dynamodb:PartiQLSelect",
            "dynamodb:Query",
            "dynamodb:Scan",
            "ec2:Describe*",
            "ec2:Get*",
            "ec2:ListImagesInRecycleBin",
            "ec2:ListSnapshotsInRecycleBin",
            "ec2:SearchLocalGatewayRoutes",
            "ec2:SearchTransitGatewayRoutes",
            "ec2messages:Get*",
            "ecr-public:BatchCheckLayerAvailability",
            "ecr-public:DescribeImages",
            "ecr-public:DescribeImageTags",
            "ecr-public:DescribeRegistries",
            "ecr-public:DescribeRepositories",
            "ecr-public:GetAuthorizationToken",
            "ecr-public:GetRegistryCatalogData",
            "ecr-public:GetRepositoryCatalogData",
            "ecr-public:GetRepositoryPolicy",
            "ecr-public:ListTagsForResource",
            "ecr:BatchCheck*",
            "ecr:BatchGet*",
            "ecr:Describe*",
            "ecr:Get*",
            "ecr:List*",
            "ecs:Describe*",
            "ecs:List*",
            "eks:Describe*",
            "eks:List*",
            "elastic-inference:DescribeAcceleratorOfferings",
            "elastic-inference:DescribeAccelerators",
            "elastic-inference:DescribeAcceleratorTypes",
            "elastic-inference:ListTagsForResource",
            "elasticache:Describe*",
            "elasticache:List*",
            "elasticbeanstalk:Check*",
            "elasticbeanstalk:Describe*",
            "elasticbeanstalk:List*",
            "elasticbeanstalk:Request*",
            "elasticbeanstalk:Retrieve*",
            "elasticbeanstalk:Validate*",
            "elasticfilesystem:Describe*",
            "elasticfilesystem:ListTagsForResource",
            "elasticloadbalancing:Describe*",
            "elasticmapreduce:Describe*",
            "elasticmapreduce:GetBlockPublicAccessConfiguration",
            "elasticmapreduce:List*",
            "elasticmapreduce:View*",
            "elastictranscoder:List*",
            "elastictranscoder:Read*",
            "elemental-appliances-software:Get*",
            "elemental-appliances-software:List*",
            "emr-containers:DescribeJobRun",
            "emr-containers:DescribeManagedEndpoint",
            "emr-containers:DescribeVirtualCluster",
            "emr-containers:ListJobRuns",
            "emr-containers:ListManagedEndpoints",
            "emr-containers:ListTagsForResource",
            "emr-containers:ListVirtualClusters",
            "emr-serverless:GetApplication",
            "emr-serverless:GetDashboardForJobRun",
            "emr-serverless:GetJobRun",
            "emr-serverless:ListApplications",
            "emr-serverless:ListJobRuns",
            "emr-serverless:ListTagsForResource",
            "es:Describe*",
            "es:ESHttpGet",
            "es:ESHttpHead",
            "es:Get*",
            "es:List*",
            "events:Describe*",
            "events:List*",
            "events:Test*",
            "evidently:GetExperiment",
            "evidently:GetExperimentResults",
            "evidently:GetFeature",
            "evidently:GetLaunch",
            "evidently:GetProject",
            "evidently:GetSegment",
            "evidently:ListExperiments",
            "evidently:ListFeatures",
            "evidently:ListLaunches",
            "evidently:ListProjects",
            "evidently:ListSegmentReferences",
            "evidently:ListSegments",
            "evidently:ListTagsForResource",
            "evidently:TestSegmentPattern",
            "firehose:Describe*",
            "firehose:List*",
            "fis:GetAction",
            "fis:GetExperiment",
            "fis:GetExperimentTemplate",
            "fis:GetTargetResourceType",
            "fis:ListActions",
            "fis:ListExperiments",
            "fis:ListExperimentTemplates",
            "fis:ListTagsForResource",
            "fis:ListTargetResourceTypes",
            "fms:GetAdminAccount",
            "fms:GetAppsList",
            "fms:GetComplianceDetail",
            "fms:GetNotificationChannel",
            "fms:GetPolicy",
            "fms:GetProtectionStatus",
            "fms:GetProtocolsList",
            "fms:GetViolationDetails",
            "fms:ListAppsLists",
            "fms:ListComplianceStatus",
            "fms:ListMemberAccounts",
            "fms:ListPolicies",
            "fms:ListProtocolsLists",
            "fms:ListTagsForResource",
            "forecast:DescribeAutoPredictor",
            "forecast:DescribeDataset",
            "forecast:DescribeDatasetGroup",
            "forecast:DescribeDatasetImportJob",
            "forecast:DescribeExplainability",
            "forecast:DescribeExplainabilityExport",
            "forecast:DescribeForecast",
            "forecast:DescribeForecastExportJob",
            "forecast:DescribeMonitor",
            "forecast:DescribePredictor",
            "forecast:DescribePredictorBacktestExportJob",
            "forecast:DescribeWhatIfAnalysis",
            "forecast:DescribeWhatIfForecast",
            "forecast:DescribeWhatIfForecastExport",
            "forecast:GetAccuracyMetrics",
            "forecast:ListDatasetGroups",
            "forecast:ListDatasetImportJobs",
            "forecast:ListDatasets",
            "forecast:ListExplainabilities",
            "forecast:ListExplainabilityExports",
            "forecast:ListForecastExportJobs",
            "forecast:ListForecasts",
            "forecast:ListMonitorEvaluations",
            "forecast:ListMonitors",
            "forecast:ListPredictorBacktestExportJobs",
            "forecast:ListPredictors",
            "forecast:ListWhatIfAnalyses",
            "forecast:ListWhatIfForecastExports",
            "forecast:ListWhatIfForecasts",
            "forecast:QueryForecast",
            "forecast:QueryWhatIfForecast",
            "frauddetector:BatchGetVariable",
            "frauddetector:DescribeDetector",
            "frauddetector:DescribeModelVersions",
            "frauddetector:GetBatchImportJobs",
            "frauddetector:GetBatchPredictionJobs",
            "frauddetector:GetDeleteEventsByEventTypeStatus",
            "frauddetector:GetDetectors",
            "frauddetector:GetDetectorVersion",
            "frauddetector:GetEntityTypes",
            "frauddetector:GetEvent",
            "frauddetector:GetEventPredictionMetadata",
            "frauddetector:GetEventTypes",
            "frauddetector:GetExternalModels",
            "frauddetector:GetKMSEncryptionKey",
            "frauddetector:GetLabels",
            "frauddetector:GetListElements",
            "frauddetector:GetListsMetadata",
            "frauddetector:GetModels",
            "frauddetector:GetModelVersion",
            "frauddetector:GetOutcomes",
            "frauddetector:GetRules",
            "frauddetector:GetVariables",
            "frauddetector:ListEventPredictions",
            "frauddetector:ListTagsForResource",
            "freertos:Describe*",
            "freertos:List*",
            "freetier:GetFreeTierAlertPreference",
            "freetier:GetFreeTierUsage",
            "fsx:Describe*",
            "fsx:List*",
            "gamelift:Describe*",
            "gamelift:Get*",
            "gamelift:List*",
            "gamelift:ResolveAlias",
            "gamelift:Search*",
            "gamesparks:GetExtension",
            "gamesparks:GetExtensionVersion",
            "gamesparks:GetGame",
            "gamesparks:GetGameConfiguration",
            "gamesparks:GetGeneratedCodeJob",
            "gamesparks:GetPlayerConnectionStatus",
            "gamesparks:GetSnapshot",
            "gamesparks:GetStage",
            "gamesparks:GetStageDeployment",
            "gamesparks:ListExtensions",
            "gamesparks:ListExtensionVersions",
            "gamesparks:ListGames",
            "gamesparks:ListGeneratedCodeJobs",
            "gamesparks:ListSnapshots",
            "gamesparks:ListStageDeployments",
            "gamesparks:ListStages",
            "gamesparks:ListTagsForResource",
            "glacier:Describe*",
            "glacier:Get*",
            "glacier:List*",
            "globalaccelerator:Describe*",
            "globalaccelerator:List*",
            "glue:BatchGetCrawlers",
            "glue:BatchGetDevEndpoints",
            "glue:BatchGetJobs",
            "glue:BatchGetPartition",
            "glue:BatchGetTriggers",
            "glue:BatchGetWorkflows",
            "glue:CheckSchemaVersionValidity",
            "glue:GetCatalogImportStatus",
            "glue:GetClassifier",
            "glue:GetClassifiers",
            "glue:GetCrawler",
            "glue:GetCrawlerMetrics",
            "glue:GetCrawlers",
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:GetDataCatalogEncryptionSettings",
            "glue:GetDataflowGraph",
            "glue:GetDevEndpoint",
            "glue:GetDevEndpoints",
            "glue:GetJob",
            "glue:GetJobBookmark",
            "glue:GetJobRun",
            "glue:GetJobRuns",
            "glue:GetJobs",
            "glue:GetMapping",
            "glue:GetMLTaskRun",
            "glue:GetMLTaskRuns",
            "glue:GetMLTransform",
            "glue:GetMLTransforms",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:GetPlan",
            "glue:GetRegistry",
            "glue:GetResourcePolicy",
            "glue:GetSchema",
            "glue:GetSchemaByDefinition",
            "glue:GetSchemaVersion",
            "glue:GetSchemaVersionsDiff",
            "glue:GetSecurityConfiguration",
            "glue:GetSecurityConfigurations",
            "glue:GetTable",
            "glue:GetTables",
            "glue:GetTableVersion",
            "glue:GetTableVersions",
            "glue:GetTags",
            "glue:GetTrigger",
            "glue:GetTriggers",
            "glue:GetUserDefinedFunction",
            "glue:GetUserDefinedFunctions",
            "glue:GetWorkflow",
            "glue:GetWorkflowRun",
            "glue:GetWorkflowRunProperties",
            "glue:GetWorkflowRuns",
            "glue:ListCrawlers",
            "glue:ListCrawls",
            "glue:ListDevEndpoints",
            "glue:ListJobs",
            "glue:ListMLTransforms",
            "glue:ListRegistries",
            "glue:ListSchemas",
            "glue:ListSchemaVersions",
            "glue:ListTriggers",
            "glue:ListWorkflows",
            "glue:QuerySchemaVersionMetadata",
            "glue:SearchTables",
            "grafana:DescribeWorkspace",
            "grafana:DescribeWorkspaceAuthentication",
            "grafana:DescribeWorkspaceConfiguration",
            "grafana:ListPermissions",
            "grafana:ListTagsForResource",
            "grafana:ListVersions",
            "grafana:ListWorkspaces",
            "greengrass:DescribeComponent",
            "greengrass:Get*",
            "greengrass:List*",
            "groundstation:DescribeContact",
            "groundstation:GetConfig",
            "groundstation:GetDataflowEndpointGroup",
            "groundstation:GetMinuteUsage",
            "groundstation:GetMissionProfile",
            "groundstation:GetSatellite",
            "groundstation:ListConfigs",
            "groundstation:ListContacts",
            "groundstation:ListDataflowEndpointGroups",
            "groundstation:ListGroundStations",
            "groundstation:ListMissionProfiles",
            "groundstation:ListSatellites",
            "groundstation:ListTagsForResource",
            "guardduty:Describe*",
            "guardduty:Get*",
            "guardduty:List*",
            "health:Describe*",
            "healthlake:DescribeFHIRDatastore",
            "healthlake:DescribeFHIRExportJob",
            "healthlake:DescribeFHIRImportJob",
            "healthlake:GetCapabilities",
            "healthlake:ListFHIRDatastores",
            "healthlake:ListFHIRExportJobs",
            "healthlake:ListFHIRImportJobs",
            "healthlake:ListTagsForResource",
            "healthlake:ReadResource",
            "healthlake:SearchWithGet",
            "healthlake:SearchWithPost",
            "iam:Generate*",
            "iam:Get*",
            "iam:List*",
            "iam:Simulate*",
            "identity-sync:GetSyncProfile",
            "identity-sync:GetSyncTarget",
            "identity-sync:ListSyncFilters",
            "identitystore-auth:BatchGetSession",
            "identitystore-auth:ListSessions",
            "identitystore:DescribeGroup",
            "identitystore:DescribeGroupMembership",
            "identitystore:DescribeUser",
            "identitystore:GetGroupId",
            "identitystore:GetGroupMembershipId",
            "identitystore:GetUserId",
            "identitystore:IsMemberInGroups",
            "identitystore:ListGroupMemberships",
            "identitystore:ListGroupMembershipsForMember",
            "identitystore:ListGroups",
            "identitystore:ListUsers",
            "imagebuilder:Get*",
            "imagebuilder:List*",
            "importexport:Get*",
            "importexport:List*",
            "inspector:Describe*",
            "inspector:Get*",
            "inspector:List*",
            "inspector:Preview*",
            "inspector2:BatchGetAccountStatus",
            "inspector2:BatchGetFreeTrialInfo",
            "inspector2:DescribeOrganizationConfiguration",
            "inspector2:GetDelegatedAdminAccount",
            "inspector2:GetFindingsReportStatus",
            "inspector2:GetMember",
            "inspector2:ListAccountPermissions",
            "inspector2:ListCoverage",
            "inspector2:ListCoverageStatistics",
            "inspector2:ListDelegatedAdminAccounts",
            "inspector2:ListFilters",
            "inspector2:ListFindingAggregations",
            "inspector2:ListFindings",
            "inspector2:ListMembers",
            "inspector2:ListTagsForResource",
            "inspector2:ListUsageTotals",
            "internetmonitor:GetHealthEvent",
            "internetmonitor:GetMonitor",
            "internetmonitor:ListHealthEvents",
            "internetmonitor:ListMonitors",
            "internetmonitor:ListTagsForResource",
            "invoicing:GetInvoiceEmailDeliveryPreferences",
            "invoicing:GetInvoicePDF",
            "invoicing:ListInvoiceSummaries",
            "iot:Describe*",
            "iot:Get*",
            "iot:List*",
            "iot1click:DescribeDevice",
            "iot1click:DescribePlacement",
            "iot1click:DescribeProject",
            "iot1click:GetDeviceMethods",
            "iot1click:GetDevicesInPlacement",
            "iot1click:ListDeviceEvents",
            "iot1click:ListDevices",
            "iot1click:ListPlacements",
            "iot1click:ListProjects",
            "iot1click:ListTagsForResource",
            "iotanalytics:Describe*",
            "iotanalytics:Get*",
            "iotanalytics:List*",
            "iotanalytics:SampleChannelData",
            "iotevents:DescribeAlarm",
            "iotevents:DescribeAlarmModel",
            "iotevents:DescribeDetector",
            "iotevents:DescribeDetectorModel",
            "iotevents:DescribeInput",
            "iotevents:DescribeLoggingOptions",
            "iotevents:ListAlarmModels",
            "iotevents:ListAlarmModelVersions",
            "iotevents:ListAlarms",
            "iotevents:ListDetectorModels",
            "iotevents:ListDetectorModelVersions",
            "iotevents:ListDetectors",
            "iotevents:ListInputs",
            "iotevents:ListTagsForResource",
            "iotfleethub:DescribeApplication",
            "iotfleethub:ListApplications",
            "iotfleetwise:GetCampaign",
            "iotfleetwise:GetDecoderManifest",
            "iotfleetwise:GetFleet",
            "iotfleetwise:GetLoggingOptions",
            "iotfleetwise:GetModelManifest",
            "iotfleetwise:GetRegisterAccountStatus",
            "iotfleetwise:GetSignalCatalog",
            "iotfleetwise:GetVehicle",
            "iotfleetwise:GetVehicleStatus",
            "iotfleetwise:ListCampaigns",
            "iotfleetwise:ListDecoderManifestNetworkInterfaces",
            "iotfleetwise:ListDecoderManifests",
            "iotfleetwise:ListDecoderManifestSignals",
            "iotfleetwise:ListFleets",
            "iotfleetwise:ListFleetsForVehicle",
            "iotfleetwise:ListModelManifestNodes",
            "iotfleetwise:ListModelManifests",
            "iotfleetwise:ListSignalCatalogNodes",
            "iotfleetwise:ListSignalCatalogs",
            "iotfleetwise:ListTagsForResource",
            "iotfleetwise:ListVehicles",
            "iotfleetwise:ListVehiclesInFleet",
            "iotroborunner:GetDestination",
            "iotroborunner:GetSite",
            "iotroborunner:GetWorker",
            "iotroborunner:GetWorkerFleet",
            "iotroborunner:ListDestinations",
            "iotroborunner:ListSites",
            "iotroborunner:ListWorkerFleets",
            "iotroborunner:ListWorkers",
            "iotsitewise:Describe*",
            "iotsitewise:Get*",
            "iotsitewise:List*",
            "iotwireless:GetDestination",
            "iotwireless:GetDeviceProfile",
            "iotwireless:GetEventConfigurationByResourceTypes",
            "iotwireless:GetFuotaTask",
            "iotwireless:GetLogLevelsByResourceTypes",
            "iotwireless:GetMulticastGroup",
            "iotwireless:GetMulticastGroupSession",
            "iotwireless:GetNetworkAnalyzerConfiguration",
            "iotwireless:GetPartnerAccount",
            "iotwireless:GetPosition",
            "iotwireless:GetPositionConfiguration",
            "iotwireless:GetPositionEstimate",
            "iotwireless:GetResourceEventConfiguration",
            "iotwireless:GetResourceLogLevel",
            "iotwireless:GetResourcePosition",
            "iotwireless:GetServiceEndpoint",
            "iotwireless:GetServiceProfile",
            "iotwireless:GetWirelessDevice",
            "iotwireless:GetWirelessDeviceImportTask",
            "iotwireless:GetWirelessDeviceStatistics",
            "iotwireless:GetWirelessGateway",
            "iotwireless:GetWirelessGatewayCertificate",
            "iotwireless:GetWirelessGatewayFirmwareInformation",
            "iotwireless:GetWirelessGatewayStatistics",
            "iotwireless:GetWirelessGatewayTask",
            "iotwireless:GetWirelessGatewayTaskDefinition",
            "iotwireless:ListDestinations",
            "iotwireless:ListDeviceProfiles",
            "iotwireless:ListDevicesForWirelessDeviceImportTask",
            "iotwireless:ListEventConfigurations",
            "iotwireless:ListFuotaTasks",
            "iotwireless:ListMulticastGroups",
            "iotwireless:ListMulticastGroupsByFuotaTask",
            "iotwireless:ListNetworkAnalyzerConfigurations",
            "iotwireless:ListPartnerAccounts",
            "iotwireless:ListPositionConfigurations",
            "iotwireless:ListQueuedMessages",
            "iotwireless:ListServiceProfiles",
            "iotwireless:ListTagsForResource",
            "iotwireless:ListWirelessDeviceImportTasks",
            "iotwireless:ListWirelessDevices",
            "iotwireless:ListWirelessGateways",
            "iotwireless:ListWirelessGatewayTaskDefinitions",
            "ivs:BatchGetChannel",
            "ivs:GetChannel",
            "ivs:GetPlaybackKeyPair",
            "ivs:GetRecordingConfiguration",
            "ivs:GetStreamSession",
            "ivs:ListChannels",
            "ivs:ListPlaybackKeyPairs",
            "ivs:ListRecordingConfigurations",
            "ivs:ListStreams",
            "ivs:ListStreamSessions",
            "ivs:ListTagsForResource",
            "ivschat:GetLoggingConfiguration",
            "ivschat:GetRoom",
            "ivschat:ListLoggingConfigurations",
            "ivschat:ListRooms",
            "ivschat:ListTagsForResource",
            "kafka:Describe*",
            "kafka:DescribeCluster",
            "kafka:DescribeClusterOperation",
            "kafka:DescribeClusterV2",
            "kafka:DescribeConfiguration",
            "kafka:DescribeConfigurationRevision",
            "kafka:Get*",
            "kafka:GetBootstrapBrokers",
            "kafka:GetCompatibleKafkaVersions",
            "kafka:List*",
            "kafka:ListClusterOperations",
            "kafka:ListClusters",
            "kafka:ListClustersV2",
            "kafka:ListConfigurationRevisions",
            "kafka:ListConfigurations",
            "kafka:ListKafkaVersions",
            "kafka:ListNodes",
            "kafka:ListTagsForResource",
            "kafkaconnect:DescribeConnector",
            "kafkaconnect:DescribeCustomPlugin",
            "kafkaconnect:DescribeWorkerConfiguration",
            "kafkaconnect:ListConnectors",
            "kafkaconnect:ListCustomPlugins",
            "kafkaconnect:ListWorkerConfigurations",
            "kendra:BatchGetDocumentStatus",
            "kendra:DescribeDataSource",
            "kendra:DescribeExperience",
            "kendra:DescribeFaq",
            "kendra:DescribeIndex",
            "kendra:DescribePrincipalMapping",
            "kendra:DescribeQuerySuggestionsBlockList",
            "kendra:DescribeQuerySuggestionsConfig",
            "kendra:DescribeThesaurus",
            "kendra:GetQuerySuggestions",
            "kendra:GetSnapshots",
            "kendra:ListDataSources",
            "kendra:ListDataSourceSyncJobs",
            "kendra:ListEntityPersonas",
            "kendra:ListExperienceEntities",
            "kendra:ListExperiences",
            "kendra:ListFaqs",
            "kendra:ListGroupsOlderThanOrderingId",
            "kendra:ListIndices",
            "kendra:ListQuerySuggestionsBlockLists",
            "kendra:ListTagsForResource",
            "kendra:ListThesauri",
            "kendra:Query",
            "kinesis:Describe*",
            "kinesis:Get*",
            "kinesis:List*",
            "kinesisanalytics:Describe*",
            "kinesisanalytics:Discover*",
            "kinesisanalytics:Get*",
            "kinesisanalytics:List*",
            "kinesisvideo:Describe*",
            "kinesisvideo:Get*",
            "kinesisvideo:List*",
            "kms:Describe*",
            "kms:Get*",
            "kms:List*",
            "lakeformation:DescribeResource",
            "lakeformation:GetDataCellsFilter",
            "lakeformation:GetDataLakeSettings",
            "lakeformation:GetEffectivePermissionsForPath",
            "lakeformation:GetLfTag",
            "lakeformation:GetResourceLfTags",
            "lakeformation:ListDataCellsFilter",
            "lakeformation:ListLfTags",
            "lakeformation:ListPermissions",
            "lakeformation:ListResources",
            "lakeformation:ListTableStorageOptimizers",
            "lakeformation:SearchDatabasesByLfTags",
            "lakeformation:SearchTablesByLfTags",
            "lambda:Get*",
            "lambda:List*",
            "launchwizard:DescribeAdditionalNode",
            "launchwizard:DescribeProvisionedApp",
            "launchwizard:DescribeProvisioningEvents",
            "launchwizard:DescribeSettingsSet",
            "launchwizard:GetInfrastructureSuggestion",
            "launchwizard:GetIpAddress",
            "launchwizard:GetResourceCostEstimate",
            "launchwizard:GetWorkloadAssets",
            "launchwizard:ListAdditionalNodes",
            "launchwizard:ListProvisionedApps",
            "launchwizard:ListSettingsSets",
            "launchwizard:ListWorkloadDeploymentOptions",
            "launchwizard:ListWorkloads",
            "lex:DescribeBot",
            "lex:DescribeBotAlias",
            "lex:DescribeBotChannel",
            "lex:DescribeBotLocale",
            "lex:DescribeBotVersion",
            "lex:DescribeExport",
            "lex:DescribeImport",
            "lex:DescribeIntent",
            "lex:DescribeResourcePolicy",
            "lex:DescribeSlot",
            "lex:DescribeSlotType",
            "lex:Get*",
            "lex:ListBotAliases",
            "lex:ListBotChannels",
            "lex:ListBotLocales",
            "lex:ListBots",
            "lex:ListBotVersions",
            "lex:ListBuiltInIntents",
            "lex:ListBuiltInSlotTypes",
            "lex:ListExports",
            "lex:ListImports",
            "lex:ListIntents",
            "lex:ListSlots",
            "lex:ListSlotTypes",
            "lex:ListTagsForResource",
            "license-manager:Get*",
            "license-manager:List*",
            "lightsail:GetActiveNames",
            "lightsail:GetAlarms",
            "lightsail:GetAutoSnapshots",
            "lightsail:GetBlueprints",
            "lightsail:GetBucketAccessKeys",
            "lightsail:GetBucketBundles",
            "lightsail:GetBucketMetricData",
            "lightsail:GetBuckets",
            "lightsail:GetBundles",
            "lightsail:GetCertificates",
            "lightsail:GetCloudFormationStackRecords",
            "lightsail:GetContainerAPIMetadata",
            "lightsail:GetContainerImages",
            "lightsail:GetContainerServiceDeployments",
            "lightsail:GetContainerServiceMetricData",
            "lightsail:GetContainerServicePowers",
            "lightsail:GetContainerServices",
            "lightsail:GetDisk",
            "lightsail:GetDisks",
            "lightsail:GetDiskSnapshot",
            "lightsail:GetDiskSnapshots",
            "lightsail:GetDistributionBundles",
            "lightsail:GetDistributionLatestCacheReset",
            "lightsail:GetDistributionMetricData",
            "lightsail:GetDistributions",
            "lightsail:GetDomain",
            "lightsail:GetDomains",
            "lightsail:GetExportSnapshotRecords",
            "lightsail:GetInstance",
            "lightsail:GetInstanceMetricData",
            "lightsail:GetInstancePortStates",
            "lightsail:GetInstances",
            "lightsail:GetInstanceSnapshot",
            "lightsail:GetInstanceSnapshots",
            "lightsail:GetInstanceState",
            "lightsail:GetKeyPair",
            "lightsail:GetKeyPairs",
            "lightsail:GetLoadBalancer",
            "lightsail:GetLoadBalancerMetricData",
            "lightsail:GetLoadBalancers",
            "lightsail:GetLoadBalancerTlsCertificates",
            "lightsail:GetOperation",
            "lightsail:GetOperations",
            "lightsail:GetOperationsForResource",
            "lightsail:GetRegions",
            "lightsail:GetRelationalDatabase",
            "lightsail:GetRelationalDatabaseBlueprints",
            "lightsail:GetRelationalDatabaseBundles",
            "lightsail:GetRelationalDatabaseEvents",
            "lightsail:GetRelationalDatabaseLogEvents",
            "lightsail:GetRelationalDatabaseLogStreams",
            "lightsail:GetRelationalDatabaseMetricData",
            "lightsail:GetRelationalDatabaseParameters",
            "lightsail:GetRelationalDatabases",
            "lightsail:GetRelationalDatabaseSnapshot",
            "lightsail:GetRelationalDatabaseSnapshots",
            "lightsail:GetStaticIp",
            "lightsail:GetStaticIps",
            "lightsail:Is*",
            "logs:Describe*",
            "logs:FilterLogEvents",
            "logs:Get*",
            "logs:ListTagsForResource",
            "logs:ListTagsLogGroup",
            "logs:StartLiveTail",
            "logs:StartQuery",
            "logs:StopLiveTail",
            "logs:StopQuery",
            "logs:TestMetricFilter",
            "lookoutequipment:DescribeDataIngestionJob",
            "lookoutequipment:DescribeDataset",
            "lookoutequipment:DescribeInferenceScheduler",
            "lookoutequipment:DescribeLabel",
            "lookoutequipment:DescribeLabelGroup",
            "lookoutequipment:DescribeModel",
            "lookoutequipment:DescribeModelVersion",
            "lookoutequipment:DescribeResourcePolicy",
            "lookoutequipment:DescribeRetrainingScheduler",
            "lookoutequipment:ListDataIngestionJobs",
            "lookoutequipment:ListDatasets",
            "lookoutequipment:ListInferenceEvents",
            "lookoutequipment:ListInferenceExecutions",
            "lookoutequipment:ListInferenceSchedulers",
            "lookoutequipment:ListLabelGroups",
            "lookoutequipment:ListLabels",
            "lookoutequipment:ListModels",
            "lookoutequipment:ListModelVersions",
            "lookoutequipment:ListRetrainingSchedulers",
            "lookoutequipment:ListSensorStatistics",
            "lookoutequipment:ListTagsForResource",
            "lookoutmetrics:Describe*",
            "lookoutmetrics:Get*",
            "lookoutmetrics:List*",
            "lookoutvision:DescribeDataset",
            "lookoutvision:DescribeModel",
            "lookoutvision:DescribeModelPackagingJob",
            "lookoutvision:DescribeProject",
            "lookoutvision:ListDatasetEntries",
            "lookoutvision:ListModelPackagingJobs",
            "lookoutvision:ListModels",
            "lookoutvision:ListProjects",
            "lookoutvision:ListTagsForResource",
            "m2:GetApplication",
            "m2:GetApplicationVersion",
            "m2:GetBatchJobExecution",
            "m2:GetDataSetDetails",
            "m2:GetDataSetImportTask",
            "m2:GetDeployment",
            "m2:GetEnvironment",
            "m2:ListApplications",
            "m2:ListApplicationVersions",
            "m2:ListBatchJobDefinitions",
            "m2:ListBatchJobExecutions",
            "m2:ListDataSetImportHistory",
            "m2:ListDataSets",
            "m2:ListDeployments",
            "m2:ListEngineVersions",
            "m2:ListEnvironments",
            "m2:ListTagsForResource",
            "machinelearning:Describe*",
            "machinelearning:Get*",
            "macie2:BatchGetCustomDataIdentifiers",
            "macie2:DescribeBuckets",
            "macie2:DescribeClassificationJob",
            "macie2:DescribeOrganizationConfiguration",
            "macie2:GetAdministratorAccount",
            "macie2:GetAllowList",
            "macie2:GetAutomatedDiscoveryConfiguration",
            "macie2:GetBucketStatistics",
            "macie2:GetClassificationExportConfiguration",
            "macie2:GetClassificationScope",
            "macie2:GetCustomDataIdentifier",
            "macie2:GetFindings",
            "macie2:GetFindingsFilter",
            "macie2:GetFindingsPublicationConfiguration",
            "macie2:GetFindingStatistics",
            "macie2:GetInvitationsCount",
            "macie2:GetMacieSession",
            "macie2:GetMember",
            "macie2:GetResourceProfile",
            "macie2:GetRevealConfiguration",
            "macie2:GetSensitiveDataOccurrencesAvailability",
            "macie2:GetSensitivityInspectionTemplate",
            "macie2:GetUsageStatistics",
            "macie2:GetUsageTotals",
            "macie2:ListAllowLists",
            "macie2:ListClassificationJobs",
            "macie2:ListClassificationScopes",
            "macie2:ListCustomDataIdentifiers",
            "macie2:ListFindings",
            "macie2:ListFindingsFilters",
            "macie2:ListInvitations",
            "macie2:ListMembers",
            "macie2:ListOrganizationAdminAccounts",
            "macie2:ListResourceProfileArtifacts",
            "macie2:ListResourceProfileDetections",
            "macie2:ListSensitivityInspectionTemplates",
            "macie2:ListTagsForResource",
            "macie2:SearchResources",
            "managedblockchain:GetMember",
            "managedblockchain:GetNetwork",
            "managedblockchain:GetNode",
            "managedblockchain:GetProposal",
            "managedblockchain:ListInvitations",
            "managedblockchain:ListMembers",
            "managedblockchain:ListNetworks",
            "managedblockchain:ListNodes",
            "managedblockchain:ListProposals",
            "managedblockchain:ListProposalVotes",
            "managedblockchain:ListTagsForResource",
            "mediaconnect:DescribeFlow",
            "mediaconnect:DescribeOffering",
            "mediaconnect:DescribeReservation",
            "mediaconnect:ListEntitlements",
            "mediaconnect:ListFlows",
            "mediaconnect:ListOfferings",
            "mediaconnect:ListReservations",
            "mediaconnect:ListTagsForResource",
            "mediaconvert:DescribeEndpoints",
            "mediaconvert:Get*",
            "mediaconvert:List*",
            "medialive:DescribeChannel",
            "medialive:DescribeInput",
            "medialive:DescribeInputDevice",
            "medialive:DescribeInputDeviceThumbnail",
            "medialive:DescribeInputSecurityGroup",
            "medialive:DescribeMultiplex",
            "medialive:DescribeMultiplexProgram",
            "medialive:DescribeOffering",
            "medialive:DescribeReservation",
            "medialive:DescribeSchedule",
            "medialive:ListChannels",
            "medialive:ListInputDevices",
            "medialive:ListInputDeviceTransfers",
            "medialive:ListInputs",
            "medialive:ListInputSecurityGroups",
            "medialive:ListMultiplexes",
            "medialive:ListMultiplexPrograms",
            "medialive:ListOfferings",
            "medialive:ListReservations",
            "medialive:ListTagsForResource",
            "mediapackage-vod:Describe*",
            "mediapackage-vod:List*",
            "mediapackage:Describe*",
            "mediapackage:List*",
            "mediapackagev2:GetChannel",
            "mediapackagev2:GetChannelGroup",
            "mediapackagev2:GetChannelPolicy",
            "mediapackagev2:GetHeadObject",
            "mediapackagev2:GetObject",
            "mediapackagev2:GetOriginEndpoint",
            "mediapackagev2:GetOriginEndpointPolicy",
            "mediapackagev2:ListChannelGroups",
            "mediapackagev2:ListChannels",
            "mediapackagev2:ListOriginEndpoints",
            "mediapackagev2:ListTagsForResource",
            "mediastore:DescribeContainer",
            "mediastore:DescribeObject",
            "mediastore:GetContainerPolicy",
            "mediastore:GetCorsPolicy",
            "mediastore:GetLifecyclePolicy",
            "mediastore:GetMetricPolicy",
            "mediastore:GetObject",
            "mediastore:ListContainers",
            "mediastore:ListItems",
            "mediastore:ListTagsForResource",
            "memorydb:DescribeClusters",
            "memorydb:DescribeParameterGroups",
            "memorydb:DescribeParameters",
            "memorydb:ListTags",
            "mgh:Describe*",
            "mgh:GetHomeRegion",
            "mgh:List*",
            "mgn:DescribeJobLogItems",
            "mgn:DescribeJobs",
            "mgn:DescribeLaunchConfigurationTemplates",
            "mgn:DescribeReplicationConfigurationTemplates",
            "mgn:DescribeSourceServers",
            "mgn:DescribeVcenterClients",
            "mgn:GetLaunchConfiguration",
            "mgn:GetReplicationConfiguration",
            "mgn:ListApplications",
            "mgn:ListSourceServerActions",
            "mgn:ListTemplateActions",
            "mgn:ListWaves",
            "mobileanalytics:Get*",
            "mobiletargeting:Get*",
            "mobiletargeting:List*",
            "monitron:GetProject",
            "monitron:GetProjectAdminUser",
            "monitron:ListProjects",
            "monitron:ListTagsForResource",
            "mq:Describe*",
            "mq:List*",
            "network-firewall:DescribeFirewall",
            "network-firewall:DescribeFirewallPolicy",
            "network-firewall:DescribeLoggingConfiguration",
            "network-firewall:DescribeResourcePolicy",
            "network-firewall:DescribeRuleGroup",
            "network-firewall:DescribeRuleGroupMetadata",
            "network-firewall:DescribeTLSInspectionConfiguration",
            "network-firewall:ListFirewallPolicies",
            "network-firewall:ListFirewalls",
            "network-firewall:ListRuleGroups",
            "network-firewall:ListTagsForResource",
            "network-firewall:ListTLSInspectionConfigurations",
            "networkmanager:DescribeGlobalNetworks",
            "networkmanager:GetConnectAttachment",
            "networkmanager:GetConnections",
            "networkmanager:GetConnectPeer",
            "networkmanager:GetConnectPeerAssociations",
            "networkmanager:GetCoreNetwork",
            "networkmanager:GetCoreNetworkChangeEvents",
            "networkmanager:GetCoreNetworkChangeSet",
            "networkmanager:GetCoreNetworkPolicy",
            "networkmanager:GetCustomerGatewayAssociations",
            "networkmanager:GetDevices",
            "networkmanager:GetLinkAssociations",
            "networkmanager:GetLinks",
            "networkmanager:GetNetworkResourceCounts",
            "networkmanager:GetNetworkResourceRelationships",
            "networkmanager:GetNetworkResources",
            "networkmanager:GetNetworkRoutes",
            "networkmanager:GetNetworkTelemetry",
            "networkmanager:GetResourcePolicy",
            "networkmanager:GetRouteAnalysis",
            "networkmanager:GetSites",
            "networkmanager:GetSiteToSiteVpnAttachment",
            "networkmanager:GetTransitGatewayConnectPeerAssociations",
            "networkmanager:GetTransitGatewayPeering",
            "networkmanager:GetTransitGatewayRegistrations",
            "networkmanager:GetTransitGatewayRouteTableAttachment",
            "networkmanager:GetVpcAttachment",
            "networkmanager:ListAttachments",
            "networkmanager:ListConnectPeers",
            "networkmanager:ListCoreNetworkPolicyVersions",
            "networkmanager:ListCoreNetworks",
            "networkmanager:ListPeerings",
            "networkmanager:ListTagsForResource",
            "nimble:GetEula",
            "nimble:GetFeatureMap",
            "nimble:GetLaunchProfile",
            "nimble:GetLaunchProfileDetails",
            "nimble:GetLaunchProfileInitialization",
            "nimble:GetLaunchProfileMember",
            "nimble:GetStreamingImage",
            "nimble:GetStreamingSession",
            "nimble:GetStudio",
            "nimble:GetStudioComponent",
            "nimble:GetStudioMember",
            "nimble:ListEulaAcceptances",
            "nimble:ListEulas",
            "nimble:ListLaunchProfileMembers",
            "nimble:ListLaunchProfiles",
            "nimble:ListStreamingImages",
            "nimble:ListStreamingSessions",
            "nimble:ListStudioComponents",
            "nimble:ListStudioMembers",
            "nimble:ListStudios",
            "nimble:ListTagsForResource",
            "notifications-contacts:GetEmailContact",
            "notifications-contacts:ListEmailContacts",
            "notifications-contacts:ListTagsForResource",
            "notifications:GetEventRule",
            "notifications:GetNotificationConfiguration",
            "notifications:GetNotificationEvent",
            "notifications:ListChannels",
            "notifications:ListEventRules",
            "notifications:ListNotificationConfigurations",
            "notifications:ListNotificationEvents",
            "notifications:ListNotificationHubs",
            "notifications:ListTagsForResource",
            "oam:GetLink",
            "oam:GetSink",
            "oam:GetSinkPolicy",
            "oam:ListAttachedLinks",
            "oam:ListLinks",
            "oam:ListSinks",
            "omics:Get*",
            "omics:List*",
            "opsworks-cm:Describe*",
            "opsworks-cm:List*",
            "opsworks:Describe*",
            "opsworks:Get*",
            "organizations:Describe*",
            "organizations:List*",
            "osis:GetPipeline",
            "osis:GetPipelineBlueprint",
            "osis:GetPipelineChangeProgress",
            "osis:ListPipelineBlueprints",
            "osis:ListPipelines",
            "osis:ListTagsForResource",
            "outposts:Get*",
            "outposts:List*",
            "payment-cryptography:GetAlias",
            "payment-cryptography:GetKey",
            "payment-cryptography:GetPublicKeyCertificate",
            "payment-cryptography:ListAliases",
            "payment-cryptography:ListKeys",
            "payment-cryptography:ListTagsForResource",
            "payments:GetPaymentInstrument",
            "payments:GetPaymentStatus",
            "payments:ListPaymentPreferences",
            "pca-connector-ad:GetConnector",
            "pca-connector-ad:GetDirectoryRegistration",
            "pca-connector-ad:GetServicePrincipalName",
            "pca-connector-ad:GetTemplate",
            "pca-connector-ad:GetTemplateGroupAccessControlEntry",
            "pca-connector-ad:ListConnectors",
            "pca-connector-ad:ListDirectoryRegistrations",
            "pca-connector-ad:ListServicePrincipalNames",
            "pca-connector-ad:ListTagsForResource",
            "pca-connector-ad:ListTemplateGroupAccessControlEntries",
            "pca-connector-ad:ListTemplates",
            "personalize:Describe*",
            "personalize:Get*",
            "personalize:List*",
            "pi:DescribeDimensionKeys",
            "pi:GetDimensionKeyDetails",
            "pi:GetResourceMetadata",
            "pi:GetResourceMetrics",
            "pi:ListAvailableResourceDimensions",
            "pi:ListAvailableResourceMetrics",
            "pipes:DescribePipe",
            "pipes:ListPipes",
            "pipes:ListTagsForResource",
            "polly:Describe*",
            "polly:Get*",
            "polly:List*",
            "polly:SynthesizeSpeech",
            "pricing:DescribeServices",
            "pricing:GetAttributeValues",
            "pricing:GetPriceListFileUrl",
            "pricing:GetProducts",
            "pricing:ListPriceLists",
            "proton:GetDeployment",
            "proton:GetEnvironment",
            "proton:GetEnvironmentTemplate",
            "proton:GetEnvironmentTemplateVersion",
            "proton:GetService",
            "proton:GetServiceInstance",
            "proton:GetServiceTemplate",
            "proton:GetServiceTemplateVersion",
            "proton:ListDeployments",
            "proton:ListEnvironmentAccountConnections",
            "proton:ListEnvironments",
            "proton:ListEnvironmentTemplates",
            "proton:ListServiceInstances",
            "proton:ListServices",
            "proton:ListServiceTemplates",
            "proton:ListTagsForResource",
            "purchase-orders:GetPurchaseOrder",
            "purchase-orders:ListPurchaseOrderInvoices",
            "purchase-orders:ListPurchaseOrders",
            "purchase-orders:ViewPurchaseOrders",
            "qldb:DescribeJournalKinesisStream",
            "qldb:DescribeJournalS3Export",
            "qldb:DescribeLedger",
            "qldb:GetBlock",
            "qldb:GetDigest",
            "qldb:GetRevision",
            "qldb:ListJournalKinesisStreamsForLedger",
            "qldb:ListJournalS3Exports",
            "qldb:ListJournalS3ExportsForLedger",
            "qldb:ListLedgers",
            "qldb:ListTagsForResource",
            "ram:Get*",
            "ram:List*",
            "rbin:GetRule",
            "rbin:ListRules",
            "rbin:ListTagsForResource",
            "rds:Describe*",
            "rds:Download*",
            "rds:List*",
            "redshift:Describe*",
            "redshift:GetReservedNodeExchangeOfferings",
            "redshift:View*",
            "refactor-spaces:GetApplication",
            "refactor-spaces:GetEnvironment",
            "refactor-spaces:GetResourcePolicy",
            "refactor-spaces:GetRoute",
            "refactor-spaces:GetService",
            "refactor-spaces:ListApplications",
            "refactor-spaces:ListEnvironments",
            "refactor-spaces:ListEnvironmentVpcs",
            "refactor-spaces:ListRoutes",
            "refactor-spaces:ListServices",
            "refactor-spaces:ListTagsForResource",
            "rekognition:CompareFaces",
            "rekognition:DescribeDataset",
            "rekognition:DescribeProjects",
            "rekognition:DescribeProjectVersions",
            "rekognition:DescribeStreamProcessor",
            "rekognition:Detect*",
            "rekognition:GetCelebrityInfo",
            "rekognition:GetCelebrityRecognition",
            "rekognition:GetContentModeration",
            "rekognition:GetFaceDetection",
            "rekognition:GetFaceSearch",
            "rekognition:GetLabelDetection",
            "rekognition:GetPersonTracking",
            "rekognition:GetSegmentDetection",
            "rekognition:GetTextDetection",
            "rekognition:List*",
            "rekognition:RecognizeCelebrities",
            "rekognition:Search*",
            "resiliencehub:DescribeApp",
            "resiliencehub:DescribeAppAssessment",
            "resiliencehub:DescribeAppVersion",
            "resiliencehub:DescribeAppVersionAppComponent",
            "resiliencehub:DescribeAppVersionResource",
            "resiliencehub:DescribeAppVersionResourcesResolutionStatus",
            "resiliencehub:DescribeAppVersionTemplate",
            "resiliencehub:DescribeDraftAppVersionResourcesImportStatus",
            "resiliencehub:DescribeResiliencyPolicy",
            "resiliencehub:ListAlarmRecommendations",
            "resiliencehub:ListAppAssessmentComplianceDrifts",
            "resiliencehub:ListAppAssessments",
            "resiliencehub:ListAppComponentCompliances",
            "resiliencehub:ListAppComponentRecommendations",
            "resiliencehub:ListAppInputSources",
            "resiliencehub:ListApps",
            "resiliencehub:ListAppVersionAppComponents",
            "resiliencehub:ListAppVersionResourceMappings",
            "resiliencehub:ListAppVersionResources",
            "resiliencehub:ListAppVersions",
            "resiliencehub:ListRecommendationTemplates",
            "resiliencehub:ListResiliencyPolicies",
            "resiliencehub:ListSopRecommendations",
            "resiliencehub:ListSuggestedResiliencyPolicies",
            "resiliencehub:ListTagsForResource",
            "resiliencehub:ListTestRecommendations",
            "resiliencehub:ListUnsupportedAppVersionResources",
            "resource-explorer-2:BatchGetView",
            "resource-explorer-2:GetDefaultView",
            "resource-explorer-2:GetIndex",
            "resource-explorer-2:GetView",
            "resource-explorer-2:ListIndexes",
            "resource-explorer-2:ListSupportedResourceTypes",
            "resource-explorer-2:ListTagsForResource",
            "resource-explorer-2:ListViews",
            "resource-explorer-2:Search",
            "resource-groups:Get*",
            "resource-groups:List*",
            "resource-groups:Search*",
            "robomaker:BatchDescribe*",
            "robomaker:Describe*",
            "robomaker:Get*",
            "robomaker:List*",
            "route53-recovery-cluster:Get*",
            "route53-recovery-cluster:ListRoutingControls",
            "route53-recovery-control-config:Describe*",
            "route53-recovery-control-config:List*",
            "route53-recovery-readiness:Get*",
            "route53-recovery-readiness:List*",
            "route53:Get*",
            "route53:List*",
            "route53:Test*",
            "route53domains:Check*",
            "route53domains:Get*",
            "route53domains:List*",
            "route53domains:View*",
            "route53resolver:Get*",
            "route53resolver:List*",
            "rum:GetAppMonitor",
            "rum:GetAppMonitorData",
            "rum:ListAppMonitors",
            "s3-object-lambda:GetObject",
            "s3-object-lambda:GetObjectAcl",
            "s3-object-lambda:GetObjectLegalHold",
            "s3-object-lambda:GetObjectRetention",
            "s3-object-lambda:GetObjectTagging",
            "s3-object-lambda:GetObjectVersion",
            "s3-object-lambda:GetObjectVersionAcl",
            "s3-object-lambda:GetObjectVersionTagging",
            "s3-object-lambda:ListBucket",
            "s3-object-lambda:ListBucketMultipartUploads",
            "s3-object-lambda:ListBucketVersions",
            "s3-object-lambda:ListMultipartUploadParts",
            "s3:DescribeJob",
            "s3:Get*",
            "s3:List*",
            "sagemaker-groundtruth-synthetic:GetAccountDetails",
            "sagemaker-groundtruth-synthetic:GetBatch",
            "sagemaker-groundtruth-synthetic:GetProject",
            "sagemaker-groundtruth-synthetic:ListBatchDataTransfers",
            "sagemaker-groundtruth-synthetic:ListBatchSummaries",
            "sagemaker-groundtruth-synthetic:ListProjectDataTransfers",
            "sagemaker-groundtruth-synthetic:ListProjectSummaries",
            "sagemaker:Describe*",
            "sagemaker:GetSearchSuggestions",
            "sagemaker:List*",
            "sagemaker:Search",
            "savingsplans:DescribeSavingsPlanRates",
            "savingsplans:DescribeSavingsPlans",
            "savingsplans:DescribeSavingsPlansOfferingRates",
            "savingsplans:DescribeSavingsPlansOfferings",
            "savingsplans:ListTagsForResource",
            "scheduler:GetSchedule",
            "scheduler:GetScheduleGroup",
            "scheduler:ListScheduleGroups",
            "scheduler:ListSchedules",
            "scheduler:ListTagsForResource",
            "schemas:Describe*",
            "schemas:Get*",
            "schemas:List*",
            "schemas:Search*",
            "sdb:Get*",
            "sdb:List*",
            "sdb:Select*",
            "secretsmanager:Describe*",
            "secretsmanager:GetResourcePolicy",
            "secretsmanager:List*",
            "securityhub:BatchGetControlEvaluations",
            "securityhub:BatchGetSecurityControls",
            "securityhub:BatchGetStandardsControlAssociations",
            "securityhub:Describe*",
            "securityhub:Get*",
            "securityhub:List*",
            "serverlessrepo:Get*",
            "serverlessrepo:List*",
            "serverlessrepo:SearchApplications",
            "servicecatalog:Describe*",
            "servicecatalog:GetApplication",
            "servicecatalog:GetAttributeGroup",
            "servicecatalog:List*",
            "servicecatalog:Scan*",
            "servicecatalog:Search*",
            "servicediscovery:DiscoverInstances",
            "servicediscovery:DiscoverInstancesRevision",
            "servicediscovery:Get*",
            "servicediscovery:List*",
            "servicequotas:GetAssociationForServiceQuotaTemplate",
            "servicequotas:GetAWSDefaultServiceQuota",
            "servicequotas:GetRequestedServiceQuotaChange",
            "servicequotas:GetServiceQuota",
            "servicequotas:GetServiceQuotaIncreaseRequestFromTemplate",
            "servicequotas:ListAWSDefaultServiceQuotas",
            "servicequotas:ListRequestedServiceQuotaChangeHistory",
            "servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota",
            "servicequotas:ListServiceQuotaIncreaseRequestsInTemplate",
            "servicequotas:ListServiceQuotas",
            "servicequotas:ListServices",
            "ses:BatchGetMetricData",
            "ses:Describe*",
            "ses:Get*",
            "ses:List*",
            "shield:Describe*",
            "shield:Get*",
            "shield:List*",
            "signer:DescribeSigningJob",
            "signer:GetSigningPlatform",
            "signer:GetSigningProfile",
            "signer:ListProfilePermissions",
            "signer:ListSigningJobs",
            "signer:ListSigningPlatforms",
            "signer:ListSigningProfiles",
            "signer:ListTagsForResource",
            "sms-voice:DescribeAccountAttributes",
            "sms-voice:DescribeAccountLimits",
            "sms-voice:DescribeConfigurationSets",
            "sms-voice:DescribeKeywords",
            "sms-voice:DescribeOptedOutNumbers",
            "sms-voice:DescribeOptOutLists",
            "sms-voice:DescribePhoneNumbers",
            "sms-voice:DescribePools",
            "sms-voice:DescribeSenderIds",
            "sms-voice:DescribeSpendLimits",
            "sms-voice:ListPoolOriginationIdentities",
            "sms-voice:ListTagsForResource",
            "snowball:Describe*",
            "snowball:Get*",
            "snowball:List*",
            "sns:Check*",
            "sns:Get*",
            "sns:List*",
            "sqs:Get*",
            "sqs:List*",
            "sqs:Receive*",
            "ssm-contacts:DescribeEngagement",
            "ssm-contacts:DescribePage",
            "ssm-contacts:GetContact",
            "ssm-contacts:GetContactChannel",
            "ssm-contacts:ListContactChannels",
            "ssm-contacts:ListContacts",
            "ssm-contacts:ListEngagements",
            "ssm-contacts:ListPageReceipts",
            "ssm-contacts:ListPagesByContact",
            "ssm-contacts:ListPagesByEngagement",
            "ssm-incidents:GetIncidentRecord",
            "ssm-incidents:GetReplicationSet",
            "ssm-incidents:GetResourcePolicies",
            "ssm-incidents:GetResponsePlan",
            "ssm-incidents:GetTimelineEvent",
            "ssm-incidents:ListIncidentRecords",
            "ssm-incidents:ListRelatedItems",
            "ssm-incidents:ListReplicationSets",
            "ssm-incidents:ListResponsePlans",
            "ssm-incidents:ListTagsForResource",
            "ssm-incidents:ListTimelineEvents",
            "ssm:Describe*",
            "ssm:Get*",
            "ssm:List*",
            "sso-directory:Describe*",
            "sso-directory:List*",
            "sso-directory:Search*",
            "sso:Describe*",
            "sso:Get*",
            "sso:List*",
            "sso:Search*",
            "states:Describe*",
            "states:GetExecutionHistory",
            "states:List*",
            "storagegateway:Describe*",
            "storagegateway:List*",
            "sts:GetAccessKeyInfo",
            "sts:GetCallerIdentity",
            "sts:GetSessionToken",
            "support:DescribeAttachment",
            "support:DescribeCases",
            "support:DescribeCommunications",
            "support:DescribeServices",
            "support:DescribeSeverityLevels",
            "support:DescribeTrustedAdvisorCheckRefreshStatuses",
            "support:DescribeTrustedAdvisorCheckResult",
            "support:DescribeTrustedAdvisorChecks",
            "support:DescribeTrustedAdvisorCheckSummaries",
            "supportplans:GetSupportPlan",
            "supportplans:GetSupportPlanUpdateStatus",
            "sustainability:GetCarbonFootprintSummary",
            "swf:Count*",
            "swf:Describe*",
            "swf:Get*",
            "swf:List*",
            "synthetics:Describe*",
            "synthetics:Get*",
            "synthetics:List*",
            "tag:DescribeReportCreation",
            "tag:Get*",
            "tax:GetExemptions",
            "tax:GetExemptions",
            "tax:GetTaxInheritance",
            "tax:GetTaxInterview",
            "tax:GetTaxRegistration",
            "tax:GetTaxRegistrationDocument",
            "tax:ListTaxRegistrations",
            "timestream:DescribeBatchLoadTask",
            "timestream:DescribeDatabase",
            "timestream:DescribeEndpoints",
            "timestream:DescribeTable",
            "timestream:ListBatchLoadTasks",
            "timestream:ListDatabases",
            "timestream:ListMeasures",
            "timestream:ListTables",
            "timestream:ListTagsForResource",
            "tnb:GetSolFunctionInstance",
            "tnb:GetSolFunctionPackage",
            "tnb:GetSolFunctionPackageContent",
            "tnb:GetSolFunctionPackageDescriptor",
            "tnb:GetSolNetworkInstance",
            "tnb:GetSolNetworkOperation",
            "tnb:GetSolNetworkPackage",
            "tnb:GetSolNetworkPackageContent",
            "tnb:GetSolNetworkPackageDescriptor",
            "tnb:ListSolFunctionInstances",
            "tnb:ListSolFunctionPackages",
            "tnb:ListSolNetworkInstances",
            "tnb:ListSolNetworkOperations",
            "tnb:ListSolNetworkPackages",
            "tnb:ListTagsForResource",
            "transcribe:Get*",
            "transcribe:List*",
            "transfer:Describe*",
            "transfer:List*",
            "transfer:TestIdentityProvider",
            "translate:DescribeTextTranslationJob",
            "translate:GetParallelData",
            "translate:GetTerminology",
            "translate:ListParallelData",
            "translate:ListTerminologies",
            "translate:ListTextTranslationJobs",
            "trustedadvisor:Describe*",
            "verifiedpermissions:GetIdentitySource",
            "verifiedpermissions:GetPolicy",
            "verifiedpermissions:GetPolicyStore",
            "verifiedpermissions:GetPolicyTemplate",
            "verifiedpermissions:GetSchema",
            "verifiedpermissions:IsAuthorized",
            "verifiedpermissions:IsAuthorizedWithToken",
            "verifiedpermissions:ListIdentitySources",
            "verifiedpermissions:ListPolicies",
            "verifiedpermissions:ListPolicyStores",
            "verifiedpermissions:ListPolicyTemplates",
            "vpc-lattice:GetAccessLogSubscription",
            "vpc-lattice:GetAuthPolicy",
            "vpc-lattice:GetListener",
            "vpc-lattice:GetResourcePolicy",
            "vpc-lattice:GetRule",
            "vpc-lattice:GetService",
            "vpc-lattice:GetServiceNetwork",
            "vpc-lattice:GetServiceNetworkServiceAssociation",
            "vpc-lattice:GetServiceNetworkVpcAssociation",
            "vpc-lattice:GetTargetGroup",
            "vpc-lattice:ListAccessLogSubscriptions",
            "vpc-lattice:ListListeners",
            "vpc-lattice:ListRules",
            "vpc-lattice:ListServiceNetworks",
            "vpc-lattice:ListServiceNetworkServiceAssociations",
            "vpc-lattice:ListServiceNetworkVpcAssociations",
            "vpc-lattice:ListServices",
            "vpc-lattice:ListTagsForResource",
            "vpc-lattice:ListTargetGroups",
            "vpc-lattice:ListTargets",
            "waf-regional:Get*",
            "waf-regional:List*",
            "waf:Get*",
            "waf:List*",
            "wafv2:CheckCapacity",
            "wafv2:Describe*",
            "wafv2:Get*",
            "wafv2:List*",
            "workdocs:CheckAlias",
            "workdocs:Describe*",
            "workdocs:Get*",
            "workmail:Describe*",
            "workmail:Get*",
            "workmail:List*",
            "workmail:Search*",
            "workspaces-web:GetBrowserSettings",
            "workspaces-web:GetIdentityProvider",
            "workspaces-web:GetNetworkSettings",
            "workspaces-web:GetPortal",
            "workspaces-web:GetPortalServiceProviderMetadata",
            "workspaces-web:GetTrustStore",
            "workspaces-web:GetUserAccessLoggingSettings",
            "workspaces-web:GetUserSettings",
            "workspaces-web:ListBrowserSettings",
            "workspaces-web:ListIdentityProviders",
            "workspaces-web:ListNetworkSettings",
            "workspaces-web:ListPortals",
            "workspaces-web:ListTagsForResource",
            "workspaces-web:ListTrustStores",
            "workspaces-web:ListUserAccessLoggingSettings",
            "workspaces-web:ListUserSettings",
            "workspaces:Describe*",
            "xray:BatchGet*",
            "xray:Get*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v107",
    "IsDefaultVersion": true,
    "CreateDate": "2023-10-13T14:16:04+00:00"
  },
  "ResourceGroupsServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "tag:GetResources",
            "cloudformation:DescribeStacks",
            "cloudformation:ListStackResources"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-01-05T16:57:08+00:00"
  },
  "ResourceGroupsandTagEditorFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "tag:getResources",
            "tag:getTagKeys",
            "tag:getTagValues",
            "tag:TagResources",
            "tag:UntagResources",
            "resource-groups:*",
            "cloudformation:DescribeStacks",
            "cloudformation:ListStackResources",
            "cloudformation:ListStacks"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v6",
    "IsDefaultVersion": true,
    "CreateDate": "2023-08-10T13:29:19+00:00"
  },
  "ResourceGroupsandTagEditorReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "tag:getResources",
            "tag:getTagKeys",
            "tag:getTagValues",
            "resource-groups:Get*",
            "resource-groups:List*",
            "resource-groups:Search*",
            "cloudformation:DescribeStacks",
            "cloudformation:ListStackResources",
            "cloudformation:ListStacks"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v3",
    "IsDefaultVersion": true,
    "CreateDate": "2023-08-10T13:42:58+00:00"
  },
  "Route53RecoveryReadinessServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:DescribeReservedCapacity",
            "dynamodb:DescribeReservedCapacityOfferings"
          ],
          "Resource": "arn:aws:dynamodb:*:*:*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:DescribeTable",
            "dynamodb:DescribeTimeToLive"
          ],
          "Resource": "arn:aws:dynamodb:*:*:table/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": "arn:aws:iam::*:role/aws-service-role/servicequotas.amazonaws.com/AWSServiceRoleForServiceQuotas",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "servicequotas.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "lambda:GetFunctionConcurrency",
            "lambda:GetFunctionConfiguration",
            "lambda:GetProvisionedConcurrencyConfig",
            "lambda:ListProvisionedConcurrencyConfigs",
            "lambda:ListAliases",
            "lambda:ListVersionsByFunction"
          ],
          "Resource": "arn:aws:lambda:*:*:function:*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "rds:DescribeDBClusters"
          ],
          "Resource": "arn:aws:rds:*:*:cluster:*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "rds:DescribeDBInstances"
          ],
          "Resource": "arn:aws:rds:*:*:db:*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "route53:ListResourceRecordSets"
          ],
          "Resource": "arn:aws:route53:::hostedzone/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "route53:GetHealthCheck",
            "route53:GetHealthCheckStatus"
          ],
          "Resource": "arn:aws:route53:::healthcheck/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "servicequotas:RequestServiceQuotaIncrease"
          ],
          "Resource": "arn:aws:servicequotas:*:*:*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sns:GetTopicAttributes",
            "sns:ListSubscriptionsByTopic"
          ],
          "Resource": "arn:aws:sns:*:*:*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sqs:GetQueueAttributes",
            "sqs:GetQueueUrl"
          ],
          "Resource": "arn:aws:sqs:*:*:*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "apigateway:GET",
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingPolicies",
            "autoscaling:DescribeAccountLimits",
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribeAutoScalingInstances",
            "autoscaling:DescribeLifecycleHooks",
            "autoscaling:DescribeLoadBalancers",
            "autoscaling:DescribeLoadBalancerTargetGroups",
            "autoscaling:DescribeNotificationConfigurations",
            "autoscaling:DescribePolicies",
            "cloudwatch:GetMetricData",
            "cloudwatch:DescribeAlarms",
            "dynamodb:DescribeLimits",
            "dynamodb:ListGlobalTables",
            "dynamodb:ListTables",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeCustomerGateways",
            "ec2:DescribeInstances",
            "ec2:DescribeSubnets",
            "ec2:DescribeVolumes",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpnConnections",
            "ec2:DescribeVpnGateways",
            "ec2:GetEbsEncryptionByDefault",
            "ec2:GetEbsDefaultKmsKeyId",
            "elasticloadbalancing:DescribeInstanceHealth",
            "elasticloadbalancing:DescribeLoadBalancerAttributes",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "kafka:DescribeCluster",
            "kafka:DescribeConfigurationRevision",
            "lambda:ListEventSourceMappings",
            "lambda:ListFunctions",
            "rds:DescribeAccountAttributes",
            "route53:GetHostedZone",
            "servicequotas:ListAWSDefaultServiceQuotas",
            "servicequotas:ListRequestedServiceQuotaChangeHistory",
            "servicequotas:ListServiceQuotas",
            "servicequotas:ListServices",
            "sns:GetEndpointAttributes",
            "sns:GetSubscriptionAttributes"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v5",
    "IsDefaultVersion": true,
    "CreateDate": "2023-02-14T18:08:46+00:00"
  },
  "Route53ResolverServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "logs:CreateLogDelivery",
            "logs:GetLogDelivery",
            "logs:UpdateLogDelivery",
            "logs:DeleteLogDelivery",
            "logs:ListLogDeliveries",
            "logs:DescribeResourcePolicies",
            "logs:DescribeLogGroups",
            "s3:GetBucketPolicy"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-08-12T17:47:24+00:00"
  },
  "S3StorageLensServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "AwsOrgsAccess",
          "Effect": "Allow",
          "Action": [
            "organizations:DescribeOrganization",
            "organizations:ListAccounts",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListDelegatedAdministrators"
          ],
          "Resource": [
            "*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-11-18T18:15:40+00:00"
  },
  "SecretsManagerReadWrite": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:*",
            "cloudformation:CreateChangeSet",
            "cloudformation:DescribeChangeSet",
            "cloudformation:DescribeStackResource",
            "cloudformation:DescribeStacks",
            "cloudformation:ExecuteChangeSet",
            "docdb-elastic:GetCluster",
            "docdb-elastic:ListClusters",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "kms:DescribeKey",
            "kms:ListAliases",
            "kms:ListKeys",
            "lambda:ListFunctions",
            "rds:DescribeDBClusters",
            "rds:DescribeDBInstances",
            "redshift:DescribeClusters",
            "tag:GetResources"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "lambda:AddPermission",
            "lambda:CreateFunction",
            "lambda:GetFunction",
            "lambda:InvokeFunction",
            "lambda:UpdateFunctionConfiguration"
          ],
          "Resource": "arn:aws:lambda:*:*:function:SecretsManager*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "serverlessrepo:CreateCloudFormationChangeSet",
            "serverlessrepo:GetApplication"
          ],
          "Resource": "arn:aws:serverlessrepo:*:*:applications/SecretsManager*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject"
          ],
          "Resource": [
            "arn:aws:s3:::awsserverlessrepo-changesets*",
            "arn:aws:s3:::secrets-manager-rotation-apps-*/*"
          ]
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2023-08-29T20:42:39+00:00"
  },
  "SecurityAudit": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Resource": "*",
          "Sid": "BaseSecurityAuditStatement",
          "Action": [
            "a4b:ListSkills",
            "access-analyzer:GetAnalyzedResource",
            "access-analyzer:GetAnalyzer",
            "access-analyzer:GetArchiveRule",
            "access-analyzer:GetFinding",
            "access-analyzer:ListAnalyzedResources",
            "access-analyzer:ListAnalyzers",
            "access-analyzer:ListArchiveRules",
            "access-analyzer:ListFindings",
            "access-analyzer:ListTagsForResource",
            "account:GetAlternateContact",
            "account:GetRegionOptStatus",
            "acm-pca:DescribeCertificateAuthority",
            "acm-pca:DescribeCertificateAuthorityAuditReport",
            "acm-pca:GetPolicy",
            "acm-pca:ListCertificateAuthorities",
            "acm-pca:ListPermissions",
            "acm-pca:ListTags",
            "acm:Describe*",
            "acm:List*",
            "airflow:ListEnvironments",
            "appflow:ListFlows",
            "appflow:ListTagsForResource",
            "application-autoscaling:Describe*",
            "appmesh:Describe*",
            "appmesh:List*",
            "apprunner:DescribeAutoScalingConfiguration",
            "apprunner:DescribeCustomDomains",
            "apprunner:DescribeObservabilityConfiguration",
            "apprunner:DescribeService",
            "apprunner:DescribeVpcConnector",
            "apprunner:DescribeVpcIngressConnection",
            "apprunner:ListAutoScalingConfigurations",
            "apprunner:ListConnections",
            "apprunner:ListObservabilityConfigurations",
            "apprunner:ListOperations",
            "apprunner:ListServices",
            "apprunner:ListTagsForResource",
            "apprunner:ListVpcConnectors",
            "apprunner:ListVpcIngressConnections",
            "appsync:GetApiCache",
            "appsync:List*",
            "athena:GetWorkGroup",
            "athena:List*",
            "auditmanager:GetAccountStatus",
            "auditmanager:ListAssessmentControlInsightsByControlDomain",
            "auditmanager:ListAssessmentFrameworks",
            "auditmanager:ListAssessmentFrameworkShareRequests",
            "auditmanager:ListAssessmentReports",
            "auditmanager:ListAssessments",
            "auditmanager:ListControlDomainInsights",
            "auditmanager:ListControlDomainInsightsByAssessment",
            "auditmanager:ListControlInsightsByControlDomain",
            "auditmanager:ListControls",
            "auditmanager:ListNotifications",
            "auditmanager:ListTagsForResource",
            "autoscaling-plans:DescribeScalingPlans",
            "autoscaling:Describe*",
            "backup:DescribeRegionSettings",
            "backup:GetBackupVaultAccessPolicy",
            "backup:ListBackupVaults",
            "batch:DescribeComputeEnvironments",
            "batch:DescribeJobDefinitions",
            "braket:SearchJobs",
            "braket:SearchQuantumTasks",
            "chime:List*",
            "cloud9:Describe*",
            "cloud9:ListEnvironments",
            "clouddirectory:ListDirectories",
            "cloudformation:DescribeStack*",
            "cloudformation:GetStackPolicy",
            "cloudformation:GetTemplate",
            "cloudformation:ListStack*",
            "cloudfront:Get*",
            "cloudfront:List*",
            "cloudsearch:DescribeDomainEndpointOptions",
            "cloudsearch:DescribeDomains",
            "cloudsearch:DescribeServiceAccessPolicies",
            "cloudtrail:DescribeTrails",
            "cloudtrail:GetEventSelectors",
            "cloudtrail:GetTrail",
            "cloudtrail:GetTrailStatus",
            "cloudtrail:ListTags",
            "cloudtrail:LookupEvents",
            "cloudwatch:Describe*",
            "cloudwatch:GetDashboard",
            "cloudwatch:ListTagsForResource",
            "cloudwatch:ListDashboards",
            "codeartifact:GetDomainPermissionsPolicy",
            "codeartifact:GetRepositoryPermissionsPolicy",
            "codeartifact:ListRepositories",
            "codebuild:BatchGetProjects",
            "codebuild:ListProjects",
            "codecommit:BatchGetRepositories",
            "codecommit:GetBranch",
            "codecommit:GetObjectIdentifier",
            "codecommit:GetRepository",
            "codecommit:GetRepositoryTriggers",
            "codecommit:List*",
            "codedeploy:Batch*",
            "codedeploy:Get*",
            "codedeploy:List*",
            "codepipeline:GetJobDetails",
            "codepipeline:GetPipeline",
            "codepipeline:GetPipelineExecution",
            "codepipeline:GetPipelineState",
            "codepipeline:ListPipelines",
            "codestar:Describe*",
            "codestar:List*",
            "cognito-identity:Describe*",
            "cognito-identity:GetIdentityPoolRoles",
            "cognito-identity:ListIdentityPools",
            "cognito-identity:ListTagsForResource",
            "cognito-idp:Describe*",
            "cognito-idp:ListDevices",
            "cognito-idp:ListGroups",
            "cognito-idp:ListIdentityProviders",
            "cognito-idp:ListResourceServers",
            "cognito-idp:ListTagsForResource",
            "cognito-idp:ListUserImportJobs",
            "cognito-idp:ListUserPoolClients",
            "cognito-idp:ListUserPools",
            "cognito-idp:ListUsers",
            "cognito-idp:ListUsersInGroup",
            "cognito-sync:Describe*",
            "cognito-sync:List*",
            "comprehend:Describe*",
            "comprehend:List*",
            "comprehendmedical:ListICD10CMInferenceJobs",
            "comprehendmedical:ListPHIDetectionJobs",
            "comprehendmedical:ListRxNormInferenceJobs",
            "comprehendmedical:ListSNOMEDCTInferenceJobs",
            "config:BatchGetAggregateResourceConfig",
            "config:BatchGetResourceConfig",
            "config:Deliver*",
            "config:Describe*",
            "config:Get*",
            "config:List*",
            "config:SelectAggregateResourceConfig",
            "config:SelectResourceConfig",
            "connect:ListInstances",
            "dataexchange:ListDataSets",
            "datapipeline:DescribeObjects",
            "datapipeline:DescribePipelines",
            "datapipeline:EvaluateExpression",
            "datapipeline:GetPipelineDefinition",
            "datapipeline:ListPipelines",
            "datapipeline:QueryObjects",
            "datapipeline:ValidatePipelineDefinition",
            "datasync:Describe*",
            "datasync:List*",
            "dax:Describe*",
            "dax:ListTags",
            "deepracer:ListModels",
            "detective:GetGraphIngestState",
            "detective:ListGraphs",
            "detective:ListMembers",
            "devicefarm:ListProjects",
            "directconnect:Describe*",
            "discovery:DescribeAgents",
            "discovery:DescribeConfigurations",
            "discovery:DescribeContinuousExports",
            "discovery:DescribeExportConfigurations",
            "discovery:DescribeExportTasks",
            "discovery:DescribeImportTasks",
            "dms:Describe*",
            "dms:ListTagsForResource",
            "docdb-elastic:ListClusters",
            "ds:DescribeDirectories",
            "dynamodb:DescribeContinuousBackups",
            "dynamodb:DescribeGlobalTable",
            "dynamodb:DescribeTable",
            "dynamodb:DescribeTimeToLive",
            "dynamodb:ListBackups",
            "dynamodb:ListGlobalTables",
            "dynamodb:ListStreams",
            "dynamodb:ListTables",
            "dynamodb:ListTagsOfResource",
            "ec2:Describe*",
            "ec2:GetEbsEncryptionByDefault",
            "ec2:GetManagedPrefixListAssociations",
            "ec2:GetManagedPrefixListEntries",
            "ec2:GetNetworkInsightsAccessScopeAnalysisFindings",
            "ec2:GetNetworkInsightsAccessScopeContent",
            "ec2:GetTransitGatewayAttachmentPropagations",
            "ec2:GetTransitGatewayMulticastDomainAssociations",
            "ec2:GetTransitGatewayPrefixListReferences",
            "ec2:GetTransitGatewayRouteTableAssociations",
            "ec2:GetTransitGatewayRouteTablePropagations",
            "ec2:SearchTransitGatewayRoutes",
            "ecr-public:DescribeImages",
            "ecr-public:DescribeImageTags",
            "ecr-public:DescribeRegistries",
            "ecr-public:DescribeRepositories",
            "ecr-public:GetRegistryCatalogData",
            "ecr-public:GetRepositoryCatalogData",
            "ecr-public:GetRepositoryPolicy",
            "ecr-public:ListTagsForResource",
            "ecr:BatchGetRepositoryScanningConfiguration",
            "ecr:DescribeImages",
            "ecr:DescribeImageScanFindings",
            "ecr:DescribeRepositories",
            "ecr:GetLifecyclePolicy",
            "ecr:GetRegistryScanningConfiguration",
            "ecr:GetRepositoryPolicy",
            "ecr:ListImages",
            "ecr:ListTagsForResource",
            "ecs:Describe*",
            "ecs:List*",
            "eks:DescribeCluster",
            "eks:DescribeFargateProfile",
            "eks:DescribeNodeGroup",
            "eks:ListClusters",
            "eks:ListFargateProfiles",
            "eks:ListNodeGroups",
            "eks:ListUpdates",
            "elastic-inference:DescribeAccelerators",
            "elasticache:Describe*",
            "elasticache:ListTagsForResource",
            "elasticbeanstalk:Describe*",
            "elasticbeanstalk:ListTagsForResource",
            "elasticfilesystem:DescribeAccountPreferences",
            "elasticfilesystem:DescribeBackupPolicy",
            "elasticfilesystem:DescribeFileSystemPolicy",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DescribeLifecycleConfiguration",
            "elasticfilesystem:DescribeMountTargets",
            "elasticfilesystem:DescribeMountTargetSecurityGroups",
            "elasticfilesystem:DescribeReplicationConfigurations",
            "elasticfilesystem:DescribeTags",
            "elasticloadbalancing:Describe*",
            "elasticmapreduce:Describe*",
            "elasticmapreduce:GetBlockPublicAccessConfiguration",
            "elasticmapreduce:ListClusters",
            "elasticmapreduce:ListInstances",
            "elasticmapreduce:ListSecurityConfigurations",
            "elastictranscoder:ListPipelines",
            "es:Describe*",
            "es:GetCompatibleVersions",
            "es:ListDomainNames",
            "es:ListElasticsearchInstanceTypeDetails",
            "es:ListElasticsearchVersions",
            "es:ListTags",
            "events:Describe*",
            "events:List*",
            "events:TestEventPattern",
            "finspace:ListEnvironments",
            "finspace:ListKxEnvironments",
            "firehose:Describe*",
            "firehose:List*",
            "fms:ListComplianceStatus",
            "fms:ListPolicies",
            "forecast:ListDatasets",
            "frauddetector:GetDetectors",
            "fsx:Describe*",
            "fsx:List*",
            "gamelift:ListBuilds",
            "gamelift:ListFleets",
            "geo:ListMaps",
            "glacier:DescribeVault",
            "glacier:GetVaultAccessPolicy",
            "glacier:GetVaultLock",
            "glacier:ListVaults",
            "globalaccelerator:Describe*",
            "globalaccelerator:List*",
            "glue:GetCrawlers",
            "glue:GetDatabases",
            "glue:GetDataCatalogEncryptionSettings",
            "glue:GetDevEndpoints",
            "glue:GetJobs",
            "glue:GetResourcePolicy",
            "glue:GetSecurityConfigurations",
            "grafana:ListWorkspaces",
            "greengrass:List*",
            "guardduty:DescribePublishingDestination",
            "guardduty:Get*",
            "guardduty:List*",
            "health:DescribeAffectedEntities",
            "health:DescribeEntityAggregates",
            "health:DescribeEventAggregates",
            "health:DescribeEvents",
            "health:DescribeEventTypes",
            "healthlake:ListFHIRDatastores",
            "honeycode:ListTables",
            "iam:GenerateCredentialReport",
            "iam:GenerateServiceLastAccessedDetails",
            "iam:Get*",
            "iam:List*",
            "iam:SimulateCustomPolicy",
            "iam:SimulatePrincipalPolicy",
            "inspector:Describe*",
            "inspector:Get*",
            "inspector:List*",
            "inspector:Preview*",
            "inspector2:BatchGetAccountStatus",
            "inspector2:BatchGetFreeTrialInfo",
            "inspector2:DescribeOrganizationConfiguration",
            "inspector2:GetConfiguration",
            "inspector2:GetDelegatedAdminAccount",
            "inspector2:GetFindingsReportStatus",
            "inspector2:GetMember",
            "inspector2:ListAccountPermissions",
            "inspector2:ListCoverage",
            "inspector2:ListCoverageStatistics",
            "inspector2:ListDelegatedAdminAccounts",
            "inspector2:ListFilters",
            "inspector2:ListFindingAggregations",
            "inspector2:ListFindings",
            "inspector2:ListTagsForResource",
            "inspector2:ListUsageTotals",
            "iot:Describe*",
            "iot:GetPolicy",
            "iot:GetPolicyVersion",
            "iot:List*",
            "iotanalytics:ListChannels",
            "iotevents:ListInputs",
            "iotfleetwise:ListModelManifests",
            "iotsitewise:DescribeGatewayCapabilityConfiguration",
            "iotsitewise:ListAssetModels",
            "iotsitewise:ListGateways",
            "iottwinmaker:ListWorkspaces",
            "kafka-cluster:Describe*",
            "kafka:Describe*",
            "kafka:GetBootstrapBrokers",
            "kafka:GetCompatibleKafkaVersions",
            "kafka:List*",
            "kafkaconnect:Describe*",
            "kafkaconnect:List*",
            "kendra:DescribeIndex",
            "kendra:ListIndices",
            "kinesis:DescribeLimits",
            "kinesis:DescribeStream",
            "kinesis:DescribeStreamConsumer",
            "kinesis:DescribeStreamSummary",
            "kinesis:ListShards",
            "kinesis:ListStreamConsumers",
            "kinesis:ListStreams",
            "kinesis:ListTagsForStream",
            "kinesisanalytics:ListApplications",
            "kinesisvideo:DescribeEdgeConfiguration",
            "kinesisvideo:DescribeMappedResourceConfiguration",
            "kinesisvideo:DescribeMediaStorageConfiguration",
            "kinesisvideo:DescribeNotificationConfiguration",
            "kinesisvideo:DescribeSignalingChannel",
            "kinesisvideo:DescribeStream",
            "kinesisvideo:ListSignalingChannels",
            "kinesisvideo:ListStreams",
            "kinesisvideo:ListTagsForResource",
            "kinesisvideo:ListTagsForStream",
            "kms:Describe*",
            "kms:Get*",
            "kms:List*",
            "lambda:GetAccountSettings",
            "lambda:GetFunctionConfiguration",
            "lambda:GetFunctionEventInvokeConfig",
            "lambda:GetLayerVersionPolicy",
            "lambda:GetPolicy",
            "lambda:List*",
            "lex:DescribeBot",
            "lex:DescribeResourcePolicy",
            "lex:ListBots",
            "license-manager:List*",
            "lightsail:GetDisks",
            "lightsail:GetDiskSnapshots",
            "lightsail:GetInstances",
            "lightsail:GetLoadBalancers",
            "logs:Describe*",
            "logs:ListTagsLogGroup",
            "lookoutequipment:ListDatasets",
            "lookoutmetrics:ListAnomalyDetectors",
            "lookoutvision:ListProjects",
            "machinelearning:DescribeMLModels",
            "managedblockchain:ListNetworks",
            "mechanicalturk:ListHITs",
            "mediaconnect:Describe*",
            "mediaconnect:List*",
            "medialive:ListChannels",
            "mediapackage-vod:DescribePackagingGroup",
            "mediapackage-vod:ListPackagingGroups",
            "mediapackage:DescribeOriginEndpoint",
            "mediapackage:ListOriginEndpoints",
            "mediastore:GetContainerPolicy",
            "mediastore:GetCorsPolicy",
            "mediastore:ListContainers",
            "memorydb:DescribeClusters",
            "mq:DescribeBroker",
            "mq:DescribeBrokerEngineTypes",
            "mq:DescribeBrokerInstanceOptions",
            "mq:DescribeConfiguration",
            "mq:DescribeConfigurationRevision",
            "mq:DescribeUser",
            "mq:ListBrokers",
            "mq:ListConfigurationRevisions",
            "mq:ListConfigurations",
            "mq:ListTags",
            "mq:ListUsers",
            "network-firewall:DescribeFirewall",
            "network-firewall:DescribeFirewallPolicy",
            "network-firewall:DescribeLoggingConfiguration",
            "network-firewall:DescribeResourcePolicy",
            "network-firewall:DescribeRuleGroup",
            "network-firewall:ListFirewallPolicies",
            "network-firewall:ListFirewalls",
            "network-firewall:ListRuleGroups",
            "networkmanager:DescribeGlobalNetworks",
            "nimble:ListStudios",
            "opsworks-cm:DescribeServers",
            "opsworks:DescribeStacks",
            "organizations:Describe*",
            "organizations:List*",
            "personalize:DescribeDatasetGroup",
            "personalize:ListDatasetGroups",
            "private-networks:ListNetworks",
            "qldb:DescribeJournalS3Export",
            "qldb:DescribeLedger",
            "qldb:ListJournalS3Exports",
            "qldb:ListJournalS3ExportsForLedger",
            "qldb:ListLedgers",
            "quicksight:Describe*",
            "quicksight:List*",
            "ram:GetResourceShares",
            "ram:List*",
            "rds:Describe*",
            "rds:DownloadDBLogFilePortion",
            "rds:ListTagsForResource",
            "redshift:Describe*",
            "rekognition:Describe*",
            "rekognition:List*",
            "resource-groups:ListGroupResources",
            "robomaker:Describe*",
            "robomaker:List*",
            "route53:Get*",
            "route53:List*",
            "route53domains:GetDomainDetail",
            "route53domains:GetOperationDetail",
            "route53domains:ListDomains",
            "route53domains:ListOperations",
            "route53domains:ListTagsForDomain",
            "route53resolver:Get*",
            "route53resolver:List*",
            "s3-outposts:ListEndpoints",
            "s3-outposts:ListOutpostsWithS3",
            "s3-outposts:ListSharedEndpoints",
            "s3:GetAccelerateConfiguration",
            "s3:GetAccessPoint",
            "s3:GetAccessPointPolicy",
            "s3:GetAccessPointPolicyStatus",
            "s3:GetAccountPublicAccessBlock",
            "s3:GetAnalyticsConfiguration",
            "s3:GetBucket*",
            "s3:GetEncryptionConfiguration",
            "s3:GetInventoryConfiguration",
            "s3:GetLifecycleConfiguration",
            "s3:GetMetricsConfiguration",
            "s3:GetObjectAcl",
            "s3:GetObjectVersionAcl",
            "s3:GetReplicationConfiguration",
            "s3:ListAccessPoints",
            "s3:ListAllMyBuckets",
            "sagemaker:Describe*",
            "sagemaker:List*",
            "schemas:DescribeCodeBinding",
            "schemas:DescribeDiscoverer",
            "schemas:DescribeRegistry",
            "schemas:DescribeSchema",
            "schemas:GetResourcePolicy",
            "schemas:ListDiscoverers",
            "schemas:ListRegistries",
            "schemas:ListSchemas",
            "schemas:ListSchemaVersions",
            "schemas:ListTagsForResource",
            "sdb:DomainMetadata",
            "sdb:ListDomains",
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetResourcePolicy",
            "secretsmanager:ListSecrets",
            "secretsmanager:ListSecretVersionIds",
            "securityhub:Describe*",
            "securityhub:Get*",
            "securityhub:List*",
            "serverlessrepo:GetApplicationPolicy",
            "serverlessrepo:List*",
            "servicequotas:GetAssociationForServiceQuotaTemplate",
            "servicequotas:GetAWSDefaultServiceQuota",
            "servicequotas:GetRequestedServiceQuotaChange",
            "servicequotas:GetServiceQuota",
            "servicequotas:GetServiceQuotaIncreaseRequestFromTemplate",
            "servicequotas:ListAWSDefaultServiceQuotas",
            "servicequotas:ListRequestedServiceQuotaChangeHistory",
            "servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota",
            "servicequotas:ListServiceQuotaIncreaseRequestsInTemplate",
            "servicequotas:ListServiceQuotas",
            "servicequotas:ListServices",
            "servicequotas:ListTagsForResource",
            "ses:Describe*",
            "ses:GetAccountSendingEnabled",
            "ses:GetIdentityDkimAttributes",
            "ses:GetIdentityPolicies",
            "ses:GetIdentityVerificationAttributes",
            "ses:ListConfigurationSets",
            "ses:ListIdentities",
            "ses:ListIdentityPolicies",
            "ses:ListReceiptRuleSets",
            "ses:ListVerifiedEmailAddresses",
            "shield:Describe*",
            "shield:GetSubscriptionState",
            "shield:List*",
            "snowball:ListClusters",
            "snowball:ListJobs",
            "sns:GetPlatformApplicationAttributes",
            "sns:GetTopicAttributes",
            "sns:ListSubscriptions",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTagsForResource",
            "sns:ListTopics",
            "sqs:GetQueueAttributes",
            "sqs:ListDeadLetterSourceQueues",
            "sqs:ListQueues",
            "sqs:ListQueueTags",
            "ssm:Describe*",
            "ssm:GetAutomationExecution",
            "ssm:ListAssociations",
            "ssm:ListAssociationVersions",
            "ssm:ListCommands",
            "ssm:ListComplianceItems",
            "ssm:ListComplianceSummaries",
            "ssm:ListDocumentMetadataHistory",
            "ssm:ListDocuments",
            "ssm:ListDocumentVersions",
            "ssm:ListInventoryEntries",
            "ssm:ListOpsMetadata",
            "ssm:ListResourceComplianceSummaries",
            "ssm:ListResourceDataSync",
            "ssm:ListTagsForResource",
            "sso:DescribeAccountAssignmentCreationStatus",
            "sso:DescribePermissionSet",
            "sso:DescribePermissionsPolicies",
            "sso:List*",
            "states:DescribeStateMachine",
            "states:ListStateMachines",
            "storagegateway:DescribeBandwidthRateLimit",
            "storagegateway:DescribeCache",
            "storagegateway:DescribeCachediSCSIVolumes",
            "storagegateway:DescribeGatewayInformation",
            "storagegateway:DescribeMaintenanceStartTime",
            "storagegateway:DescribeNFSFileShares",
            "storagegateway:DescribeSnapshotSchedule",
            "storagegateway:DescribeStorediSCSIVolumes",
            "storagegateway:DescribeTapeArchives",
            "storagegateway:DescribeTapeRecoveryPoints",
            "storagegateway:DescribeTapes",
            "storagegateway:DescribeUploadBuffer",
            "storagegateway:DescribeVTLDevices",
            "storagegateway:DescribeWorkingStorage",
            "storagegateway:List*",
            "sts:GetAccessKeyInfo",
            "support:DescribeTrustedAdvisorCheckRefreshStatuses",
            "support:DescribeTrustedAdvisorCheckResult",
            "support:DescribeTrustedAdvisorChecks",
            "support:DescribeTrustedAdvisorCheckSummaries",
            "synthetics:DescribeCanaries",
            "synthetics:DescribeCanariesLastRun",
            "synthetics:DescribeRuntimeVersions",
            "synthetics:GetCanary",
            "synthetics:GetCanaryRuns",
            "synthetics:GetGroup",
            "synthetics:ListAssociatedGroups",
            "synthetics:ListGroupResources",
            "synthetics:ListGroups",
            "synthetics:ListTagsForResource",
            "tag:GetResources",
            "tag:GetTagKeys",
            "transcribe:GetCallAnalyticsCategory",
            "transcribe:GetMedicalVocabulary",
            "transcribe:GetVocabulary",
            "transcribe:GetVocabularyFilter",
            "transcribe:ListCallAnalyticsCategories",
            "transcribe:ListCallAnalyticsJobs",
            "transcribe:ListLanguageModels",
            "transcribe:ListMedicalTranscriptionJobs",
            "transcribe:ListMedicalVocabularies",
            "transcribe:ListTagsForResource",
            "transcribe:ListTranscriptionJobs",
            "transcribe:ListVocabularies",
            "transcribe:ListVocabularyFilters",
            "transfer:Describe*",
            "transfer:List*",
            "translate:List*",
            "trustedadvisor:Describe*",
            "waf-regional:GetWebACL",
            "waf-regional:ListResourcesForWebACL",
            "waf-regional:ListTagsForResource",
            "waf-regional:ListWebACLs",
            "waf:GetWebACL",
            "waf:ListTagsForResource",
            "waf:ListWebACLs",
            "wafv2:GetWebACL",
            "wafv2:GetWebACLforResource",
            "wafv2:ListAvailableManagedRuleGroups",
            "wafv2:ListIPSets",
            "wafv2:ListLoggingConfigurations",
            "wafv2:ListRegexPatternSets",
            "wafv2:ListResourcesForWebACL",
            "wafv2:ListRuleGroups",
            "wafv2:ListTagsForResource",
            "wafv2:ListWebACLs",
            "workdocs:DescribeResourcePermissions",
            "workspaces:Describe*",
            "xray:GetEncryptionConfig",
            "xray:GetGroup",
            "xray:GetGroups",
            "xray:GetSamplingRules",
            "xray:GetSamplingTargets",
            "xray:GetTraceSummaries",
            "xray:ListTagsForResource"
          ]
        },
        {
          "Effect": "Allow",
          "Sid": "APIGatewayAccess",
          "Action": [
            "apigateway:GET"
          ],
          "Resource": [
            "arn:aws:apigateway:*::/apis",
            "arn:aws:apigateway:*::/apis/*/authorizers/*",
            "arn:aws:apigateway:*::/apis/*/authorizers",
            "arn:aws:apigateway:*::/apis/*/cors",
            "arn:aws:apigateway:*::/apis/*/deployments/*",
            "arn:aws:apigateway:*::/apis/*/deployments",
            "arn:aws:apigateway:*::/apis/*/exports/*",
            "arn:aws:apigateway:*::/apis/*/integrations/*",
            "arn:aws:apigateway:*::/apis/*/integrations",
            "arn:aws:apigateway:*::/apis/*/models/*",
            "arn:aws:apigateway:*::/apis/*/models",
            "arn:aws:apigateway:*::/apis/*/routes/*",
            "arn:aws:apigateway:*::/apis/*/routes",
            "arn:aws:apigateway:*::/apis/*/stages",
            "arn:aws:apigateway:*::/apis/*/stages/*",
            "arn:aws:apigateway:*::/clientcertificates",
            "arn:aws:apigateway:*::/clientcertificates/*",
            "arn:aws:apigateway:*::/domainnames",
            "arn:aws:apigateway:*::/domainnames/*/apimappings",
            "arn:aws:apigateway:*::/restapis",
            "arn:aws:apigateway:*::/restapis/*/authorizers/*",
            "arn:aws:apigateway:*::/restapis/*/authorizers",
            "arn:aws:apigateway:*::/restapis/*/deployments/*",
            "arn:aws:apigateway:*::/restapis/*/deployments",
            "arn:aws:apigateway:*::/restapis/*/documentation/parts/*",
            "arn:aws:apigateway:*::/restapis/*/documentation/parts",
            "arn:aws:apigateway:*::/restapis/*/documentation/versions/*",
            "arn:aws:apigateway:*::/restapis/*/documentation/versions",
            "arn:aws:apigateway:*::/restapis/*/gatewayresponses/*",
            "arn:aws:apigateway:*::/restapis/*/gatewayresponses",
            "arn:aws:apigateway:*::/restapis/*/models/*",
            "arn:aws:apigateway:*::/restapis/*/models",
            "arn:aws:apigateway:*::/restapis/*/requestvalidators",
            "arn:aws:apigateway:*::/restapis/*/requestvalidators/*",
            "arn:aws:apigateway:*::/restapis/*/resources/*",
            "arn:aws:apigateway:*::/restapis/*/resources",
            "arn:aws:apigateway:*::/restapis/*/stages",
            "arn:aws:apigateway:*::/restapis/*/stages/*",
            "arn:aws:apigateway:*::/tags/*",
            "arn:aws:apigateway:*::/vpclinks"
          ]
        }
      ]
    },
    "VersionId": "v40",
    "IsDefaultVersion": true,
    "CreateDate": "2023-11-02T20:02:24+00:00"
  },
  "SecurityLakeServiceLinkedRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "OrganizationsPolicies",
          "Effect": "Allow",
          "Action": [
            "organizations:ListAccounts",
            "organizations:DescribeOrganization"
          ],
          "Resource": [
            "*"
          ]
        },
        {
          "Sid": "DescribeOrgAccounts",
          "Effect": "Allow",
          "Action": [
            "organizations:DescribeAccount"
          ],
          "Resource": [
            "arn:aws:organizations::*:account/o-*/*"
          ]
        },
        {
          "Sid": "AllowManagementOfServiceLinkedChannel",
          "Effect": "Allow",
          "Action": [
            "cloudtrail:CreateServiceLinkedChannel",
            "cloudtrail:DeleteServiceLinkedChannel",
            "cloudtrail:GetServiceLinkedChannel",
            "cloudtrail:UpdateServiceLinkedChannel"
          ],
          "Resource": "arn:aws:cloudtrail:*:*:channel/aws-service-channel/security-lake/*"
        },
        {
          "Sid": "AllowListServiceLinkedChannel",
          "Effect": "Allow",
          "Action": [
            "cloudtrail:ListServiceLinkedChannels"
          ],
          "Resource": "*"
        },
        {
          "Sid": "DescribeAnyVpc",
          "Effect": "Allow",
          "Action": [
            "ec2:DescribeVpcs"
          ],
          "Resource": "*"
        },
        {
          "Sid": "ListDelegatedAdmins",
          "Effect": "Allow",
          "Action": [
            "organizations:ListDelegatedAdministrators"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "organizations:ServicePrincipal": "securitylake.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2022-11-29T14:03:33+00:00"
  },
  "ServerMigrationConnector": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "iam:GetUser",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sms:SendMessage",
            "sms:GetMessages"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:DeleteObject",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:PutObject",
            "s3:PutObjectAcl",
            "s3:PutLifecycleConfiguration",
            "s3:AbortMultipartUpload",
            "s3:ListBucketMultipartUploads",
            "s3:ListMultipartUploadParts"
          ],
          "Resource": [
            "arn:aws:s3:::sms-b-*",
            "arn:aws:s3:::import-to-ec2-*",
            "arn:aws:s3:::server-migration-service-upgrade",
            "arn:aws:s3:::server-migration-service-upgrade/*",
            "arn:aws:s3:::connector-platform-upgrade-info/*",
            "arn:aws:s3:::connector-platform-upgrade-info",
            "arn:aws:s3:::connector-platform-upgrade-bundles/*",
            "arn:aws:s3:::connector-platform-upgrade-bundles",
            "arn:aws:s3:::connector-platform-release-notes/*",
            "arn:aws:s3:::connector-platform-release-notes"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "awsconnector:*",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "SNS:Publish"
          ],
          "Resource": "arn:aws:sns:*:*:metrics-sns-topic-for-*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2016-10-24T21:45:56+00:00"
  },
  "ServerMigrationServiceConsoleFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "sms:*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "cloudformation:ListStacks",
            "cloudformation:DescribeStacks",
            "cloudformation:DescribeStackResources"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": "s3:ListAllMyBuckets",
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "s3:GetObject",
          "Resource": "arn:aws:s3:::sms-app-*/*"
        },
        {
          "Action": [
            "ec2:DescribeKeyPairs",
            "ec2:DescribeVpcs",
            "ec2:DescribeSubnets",
            "ec2:DescribeSecurityGroups"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "iam:ListRoles"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "sms.amazonaws.com"
            }
          },
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "iam:GetInstanceProfile",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2020-07-20T22:00:37+00:00"
  },
  "ServerMigrationServiceLaunchRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:ModifyInstanceAttribute",
            "ec2:StopInstances",
            "ec2:StartInstances",
            "ec2:TerminateInstances"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/sms-app-*/*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": "arn:aws:ec2:*:*:instance/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DisassociateIamInstanceProfile",
            "ec2:AssociateIamInstanceProfile",
            "ec2:ReplaceIamInstanceProfileAssociation"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/sms-app-*/*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "ec2.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:RunInstances",
            "ec2:Describe*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "applicationinsights:Describe*",
            "applicationinsights:List*",
            "cloudformation:ListStackResources",
            "cloudformation:DescribeStacks"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "applicationinsights:CreateApplication",
            "applicationinsights:CreateComponent",
            "applicationinsights:UpdateApplication",
            "applicationinsights:DeleteApplication",
            "applicationinsights:UpdateComponentConfiguration",
            "applicationinsights:DeleteComponent"
          ],
          "Resource": "arn:aws:applicationinsights:*:*:application/resource-group/sms-app-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "resource-groups:CreateGroup",
            "resource-groups:GetGroup",
            "resource-groups:UpdateGroup",
            "resource-groups:DeleteGroup"
          ],
          "Resource": "arn:aws:resource-groups:*:*:group/sms-app-*",
          "Condition": {
            "StringLike": {
              "aws:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/sms-app-*/*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": [
            "arn:aws:iam::*:role/aws-service-role/application-insights.amazonaws.com/AWSServiceRoleForApplicationInsights"
          ],
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "application-insights.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2020-10-15T17:29:00+00:00"
  },
  "ServerMigrationServiceRoleForInstanceValidation": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "s3:GetObject",
          "Resource": "arn:aws:s3:::sms-app-*/*"
        },
        {
          "Effect": "Allow",
          "Action": "sms:NotifyAppValidationOutput",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2020-07-20T22:25:07+00:00"
  },
  "ServerMigration_ServiceRole": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:CreateChangeSet",
            "cloudformation:CreateStack"
          ],
          "Resource": "arn:aws:cloudformation:*:*:stack/sms-app-*/*",
          "Condition": {
            "Null": {
              "cloudformation:ResourceTypes": "false"
            },
            "ForAllValues:StringEquals": {
              "cloudformation:ResourceTypes": [
                "AWS::EC2::Instance",
                "AWS::ApplicationInsights::Application",
                "AWS::ResourceGroups::Group"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:DeleteStack",
            "cloudformation:ExecuteChangeSet",
            "cloudformation:DeleteChangeSet",
            "cloudformation:DescribeChangeSet",
            "cloudformation:DescribeStacks",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStackResource",
            "cloudformation:DescribeStackResources",
            "cloudformation:GetTemplate"
          ],
          "Resource": "arn:aws:cloudformation:*:*:stack/sms-app-*/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudformation:ValidateTemplate",
            "s3:ListAllMyBuckets"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:DeleteObject",
            "s3:GetBucketAcl",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:PutObject",
            "s3:PutObjectAcl",
            "s3:PutLifecycleConfiguration"
          ],
          "Resource": "arn:aws:s3:::sms-app-*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sms:CreateReplicationJob",
            "sms:DeleteReplicationJob",
            "sms:GetReplicationJobs",
            "sms:GetReplicationRuns",
            "sms:GetServers",
            "sms:ImportServerCatalog",
            "sms:StartOnDemandReplicationRun",
            "sms:UpdateReplicationJob"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "ssm:SendCommand",
          "Resource": [
            "arn:aws:ssm:*::document/AWS-RunRemoteScript",
            "arn:aws:s3:::sms-app-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "ssm:SendCommand",
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "StringEquals": {
              "ssm:resourceTag/UseForSMSApplicationValidation": [
                "true"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:CancelCommand",
            "ssm:GetCommandInvocation"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CreateTags",
          "Resource": "arn:aws:ec2:*:*:snapshot/*",
          "Condition": {
            "StringEquals": {
              "ec2:CreateAction": "CopySnapshot"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "ec2:CopySnapshot",
          "Resource": "arn:aws:ec2:*:*:snapshot/*",
          "Condition": {
            "StringLike": {
              "aws:RequestTag/SMSJobId": [
                "sms-*"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:ModifySnapshotAttribute",
            "ec2:DeleteSnapshot"
          ],
          "Resource": "arn:aws:ec2:*:*:snapshot/*",
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/SMSJobId": [
                "sms-*"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CopyImage",
            "ec2:DescribeImages",
            "ec2:DescribeInstances",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSnapshotAttribute",
            "ec2:DeregisterImage",
            "ec2:ImportImage",
            "ec2:DescribeImportImageTasks",
            "ec2:GetEbsEncryptionByDefault"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:GetRole",
            "iam:GetInstanceProfile"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:DisassociateIamInstanceProfile",
            "ec2:AssociateIamInstanceProfile",
            "ec2:ReplaceIamInstanceProfileAssociation"
          ],
          "Resource": "arn:aws:ec2:*:*:instance/*",
          "Condition": {
            "StringLike": {
              "ec2:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/sms-app-*/*"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:PassedToService": "ec2.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:PassRole",
          "Resource": "*",
          "Condition": {
            "StringEqualsIfExists": {
              "iam:PassedToService": "cloudformation.amazonaws.com"
            },
            "StringLike": {
              "iam:AssociatedResourceArn": "arn:aws:cloudformation:*:*:stack/sms-app-*/*"
            }
          }
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2020-10-15T17:26:32+00:00"
  },
  "ServiceQuotasFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "autoscaling:DescribeAccountLimits",
            "cloudformation:DescribeAccountLimits",
            "cloudwatch:DescribeAlarmsForMetric",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:PutMetricAlarm",
            "dynamodb:DescribeLimits",
            "elasticloadbalancing:DescribeAccountLimits",
            "iam:GetAccountSummary",
            "kinesis:DescribeLimits",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization",
            "rds:DescribeAccountAttributes",
            "route53:GetAccountLimit",
            "tag:GetTagKeys",
            "tag:GetTagValues",
            "servicequotas:*"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cloudwatch:DeleteAlarms"
          ],
          "Resource": "*",
          "Condition": {
            "Null": {
              "aws:ResourceTag/ServiceQuotaMonitor": "false"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "organizations:EnableAWSServiceAccess"
          ],
          "Resource": "*",
          "Condition": {
            "StringLike": {
              "organizations:ServicePrincipal": [
                "servicequotas.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:CreateServiceLinkedRole"
          ],
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "iam:AWSServiceName": "servicequotas.amazonaws.com"
            }
          }
        }
      ]
    },
    "VersionId": "v4",
    "IsDefaultVersion": true,
    "CreateDate": "2021-02-04T21:29:43+00:00"
  },
  "ServiceQuotasReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "autoscaling:DescribeAccountLimits",
            "cloudformation:DescribeAccountLimits",
            "cloudwatch:DescribeAlarmsForMetric",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "dynamodb:DescribeLimits",
            "elasticloadbalancing:DescribeAccountLimits",
            "iam:GetAccountSummary",
            "kinesis:DescribeLimits",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization",
            "rds:DescribeAccountAttributes",
            "route53:GetAccountLimit",
            "tag:GetTagKeys",
            "tag:GetTagValues",
            "servicequotas:GetAssociationForServiceQuotaTemplate",
            "servicequotas:GetAWSDefaultServiceQuota",
            "servicequotas:GetRequestedServiceQuotaChange",
            "servicequotas:GetServiceQuota",
            "servicequotas:GetServiceQuotaIncreaseRequestFromTemplate",
            "servicequotas:ListAWSDefaultServiceQuotas",
            "servicequotas:ListRequestedServiceQuotaChangeHistory",
            "servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota",
            "servicequotas:ListServices",
            "servicequotas:ListServiceQuotas",
            "servicequotas:ListServiceQuotaIncreaseRequestsInTemplate",
            "servicequotas:ListTagsForResource"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2020-12-21T18:11:57+00:00"
  },
  "ServiceQuotasServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "support:*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2019-06-24T14:52:56+00:00"
  },
  "SimpleWorkflowFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "swf:*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-02-06T18:41:04+00:00"
  },
  "SupportUser": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "support:*",
            "acm:DescribeCertificate",
            "acm:GetCertificate",
            "acm:List*",
            "acm-pca:DescribeCertificateAuthority",
            "acm-pca:ListCertificateAuthorities",
            "apigateway:GET",
            "autoscaling:Describe*",
            "aws-marketplace:ViewSubscriptions",
            "cloudformation:Describe*",
            "cloudformation:Get*",
            "cloudformation:List*",
            "cloudformation:EstimateTemplateCost",
            "cloudfront:Get*",
            "cloudfront:List*",
            "cloudsearch:Describe*",
            "cloudsearch:List*",
            "cloudtrail:DescribeTrails",
            "cloudtrail:GetTrailStatus",
            "cloudtrail:LookupEvents",
            "cloudtrail:ListTags",
            "cloudtrail:ListPublicKeys",
            "cloudwatch:Describe*",
            "cloudwatch:Get*",
            "cloudwatch:List*",
            "codecommit:BatchGetRepositories",
            "codecommit:Get*",
            "codecommit:List*",
            "codedeploy:Batch*",
            "codedeploy:Get*",
            "codedeploy:List*",
            "codepipeline:AcknowledgeJob",
            "codepipeline:AcknowledgeThirdPartyJob",
            "codepipeline:ListActionTypes",
            "codepipeline:ListPipelines",
            "codepipeline:PollForJobs",
            "codepipeline:PollForThirdPartyJobs",
            "codepipeline:GetPipelineState",
            "codepipeline:GetPipeline",
            "cognito-identity:List*",
            "cognito-identity:LookupDeveloperIdentity",
            "cognito-identity:Describe*",
            "cognito-idp:DescribeResourceServer",
            "cognito-idp:DescribeRiskConfiguration",
            "cognito-idp:DescribeUserImportJob",
            "cognito-idp:DescribeUserPool",
            "cognito-idp:DescribeUserPoolDomain",
            "cognito-idp:List*",
            "cognito-sync:Describe*",
            "cognito-sync:GetBulkPublishDetails",
            "cognito-sync:GetCognitoEvents",
            "cognito-sync:GetIdentityPoolConfiguration",
            "cognito-sync:List*",
            "config:DescribeConfigurationRecorders",
            "config:DescribeConfigurationRecorderStatus",
            "config:DescribeConfigRuleEvaluationStatus",
            "config:DescribeConfigRules",
            "config:DescribeDeliveryChannels",
            "config:DescribeDeliveryChannelStatus",
            "config:GetResourceConfigHistory",
            "config:ListDiscoveredResources",
            "datapipeline:DescribeObjects",
            "datapipeline:DescribePipelines",
            "datapipeline:GetPipelineDefinition",
            "datapipeline:ListPipelines",
            "datapipeline:QueryObjects",
            "datapipeline:ReportTaskProgress",
            "datapipeline:ReportTaskRunnerHeartbeat",
            "devicefarm:List*",
            "devicefarm:Get*",
            "directconnect:Describe*",
            "discovery:Describe*",
            "discovery:ListConfigurations",
            "dms:Describe*",
            "dms:List*",
            "ds:DescribeDirectories",
            "ds:DescribeSnapshots",
            "ds:GetDirectoryLimits",
            "ds:GetSnapshotLimits",
            "ds:ListAuthorizedApplications",
            "dynamodb:DescribeLimits",
            "dynamodb:DescribeTable",
            "dynamodb:ListTables",
            "ec2:Describe*",
            "ec2:DescribeHosts",
            "ec2:describeIdentityIdFormat",
            "ec2:DescribeIdFormat",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeNatGateways",
            "ec2:DescribeReservedInstancesModifications",
            "ec2:DescribeTags",
            "ec2:SearchLocalGatewayRoutes",
            "ecr:GetRepositoryPolicy",
            "ecr:BatchCheckLayerAvailability",
            "ecr:DescribeRepositories",
            "ecr:ListImages",
            "ecs:Describe*",
            "ecs:List*",
            "elasticache:Describe*",
            "elasticache:List*",
            "elasticbeanstalk:Check*",
            "elasticbeanstalk:Describe*",
            "elasticbeanstalk:List*",
            "elasticbeanstalk:RequestEnvironmentInfo",
            "elasticbeanstalk:RetrieveEnvironmentInfo",
            "elasticbeanstalk:ValidateConfigurationSettings",
            "elasticfilesystem:Describe*",
            "elasticloadbalancing:Describe*",
            "elasticmapreduce:Describe*",
            "elasticmapreduce:List*",
            "elastictranscoder:List*",
            "elastictranscoder:ReadJob",
            "elasticfilesystem:DescribeFileSystems",
            "es:Describe*",
            "es:List*",
            "es:ESHttpGet",
            "es:ESHttpHead",
            "events:DescribeRule",
            "events:List*",
            "events:TestEventPattern",
            "firehose:Describe*",
            "firehose:List*",
            "gamelift:List*",
            "gamelift:Describe*",
            "glacier:ListVaults",
            "glacier:DescribeVault",
            "glacier:DescribeJob",
            "glacier:Get*",
            "glacier:List*",
            "iam:GenerateCredentialReport",
            "iam:GenerateServiceLastAccessedDetails",
            "iam:Get*",
            "iam:List*",
            "importexport:GetStatus",
            "importexport:ListJobs",
            "inspector:Describe*",
            "inspector:List*",
            "iot:Describe*",
            "iot:Get*",
            "iot:List*",
            "kinesisanalytics:DescribeApplication",
            "kinesisanalytics:DiscoverInputSchema",
            "kinesisanalytics:GetApplicationState",
            "kinesisanalytics:ListApplications",
            "kinesis:Describe*",
            "kinesis:Get*",
            "kinesis:List*",
            "kms:Describe*",
            "kms:Get*",
            "kms:List*",
            "lambda:List*",
            "lambda:Get*",
            "logs:Describe*",
            "logs:TestMetricFilter",
            "machinelearning:Describe*",
            "machinelearning:Get*",
            "opsworks:Describe*",
            "rds:Describe*",
            "rds:ListTagsForResource",
            "redshift:Describe*",
            "route53:Get*",
            "route53:List*",
            "route53domains:CheckDomainAvailability",
            "route53domains:GetDomainDetail",
            "route53domains:GetOperationDetail",
            "route53domains:List*",
            "s3:List*",
            "sdb:GetAttributes",
            "sdb:List*",
            "sdb:Select*",
            "servicecatalog:SearchProducts",
            "servicecatalog:DescribeProduct",
            "servicecatalog:DescribeProductView",
            "servicecatalog:ListLaunchPaths",
            "servicecatalog:DescribeProvisioningParameters",
            "servicecatalog:ListRecordHistory",
            "servicecatalog:DescribeRecord",
            "servicecatalog:ScanProvisionedProducts",
            "ses:Get*",
            "ses:List*",
            "sns:Get*",
            "sns:List*",
            "sqs:GetQueueAttributes",
            "sqs:GetQueueUrl",
            "sqs:ListQueues",
            "sqs:ReceiveMessage",
            "ssm:List*",
            "ssm:Describe*",
            "storagegateway:Describe*",
            "storagegateway:List*",
            "swf:Count*",
            "swf:Describe*",
            "swf:Get*",
            "swf:List*",
            "waf:Get*",
            "waf:List*",
            "workdocs:Describe*",
            "workmail:Describe*",
            "workmail:Get*",
            "workspaces:Describe*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v8",
    "IsDefaultVersion": true,
    "CreateDate": "2023-08-25T18:40:27+00:00"
  },
  "SystemAdministrator": {
    "Document": {
      "Statement": [
        {
          "Action": [
            "acm:Describe*",
            "acm:Get*",
            "acm:List*",
            "acm:Request*",
            "acm:Resend*",
            "autoscaling:*",
            "cloudtrail:DescribeTrails",
            "cloudtrail:GetTrailStatus",
            "cloudtrail:ListPublicKeys",
            "cloudtrail:ListTags",
            "cloudtrail:LookupEvents",
            "cloudtrail:StartLogging",
            "cloudtrail:StopLogging",
            "cloudwatch:*",
            "codecommit:BatchGetRepositories",
            "codecommit:CreateBranch",
            "codecommit:CreateRepository",
            "codecommit:Get*",
            "codecommit:GitPull",
            "codecommit:GitPush",
            "codecommit:List*",
            "codecommit:Put*",
            "codecommit:Test*",
            "codecommit:Update*",
            "codedeploy:*",
            "codepipeline:*",
            "config:*",
            "ds:*",
            "ec2:Allocate*",
            "ec2:AssignPrivateIpAddresses*",
            "ec2:Associate*",
            "ec2:Allocate*",
            "ec2:AttachInternetGateway",
            "ec2:AttachNetworkInterface",
            "ec2:AttachVpnGateway",
            "ec2:Bundle*",
            "ec2:Cancel*",
            "ec2:Copy*",
            "ec2:CreateCustomerGateway",
            "ec2:CreateDhcpOptions",
            "ec2:CreateFlowLogs",
            "ec2:CreateImage",
            "ec2:CreateInstanceExportTask",
            "ec2:CreateInternetGateway",
            "ec2:CreateKeyPair",
            "ec2:CreateLaunchTemplate",
            "ec2:CreateLaunchTemplateVersion",
            "ec2:CreateNatGateway",
            "ec2:CreateNetworkInterface",
            "ec2:CreatePlacementGroup",
            "ec2:CreateReservedInstancesListing",
            "ec2:CreateRoute",
            "ec2:CreateRouteTable",
            "ec2:CreateSecurityGroup",
            "ec2:CreateSnapshot",
            "ec2:CreateSpotDatafeedSubscription",
            "ec2:CreateSubnet",
            "ec2:CreateTags",
            "ec2:CreateVolume",
            "ec2:CreateVpc",
            "ec2:CreateVpcEndpoint",
            "ec2:CreateVpnConnection",
            "ec2:CreateVpnConnectionRoute",
            "ec2:CreateVpnGateway",
            "ec2:DeleteFlowLogs",
            "ec2:DeleteKeyPair",
            "ec2:DeleteLaunchTemplate",
            "ec2:DeleteLaunchTemplateVersions",
            "ec2:DeleteNatGateway",
            "ec2:DeleteNetworkInterface",
            "ec2:DeletePlacementGroup",
            "ec2:DeleteSnapshot",
            "ec2:DeleteSpotDatafeedSubscription",
            "ec2:DeleteSubnet",
            "ec2:DeleteTags",
            "ec2:DeleteVpc",
            "ec2:DeleteVpcEndpoints",
            "ec2:DeleteVpnConnection",
            "ec2:DeleteVpnConnectionRoute",
            "ec2:DeleteVpnGateway",
            "ec2:DeregisterImage",
            "ec2:Describe*",
            "ec2:DetachInternetGateway",
            "ec2:DetachNetworkInterface",
            "ec2:DetachVpnGateway",
            "ec2:DisableVgwRoutePropagation",
            "ec2:DisableVpcClassicLinkDnsSupport",
            "ec2:DisassociateAddress",
            "ec2:DisassociateRouteTable",
            "ec2:EnableVgwRoutePropagation",
            "ec2:EnableVolumeIO",
            "ec2:EnableVpcClassicLinkDnsSupport",
            "ec2:GetConsoleOutput",
            "ec2:GetHostReservationPurchasePreview",
            "ec2:GetLaunchTemplateData",
            "ec2:GetPasswordData",
            "ec2:Import*",
            "ec2:Modify*",
            "ec2:MonitorInstances",
            "ec2:MoveAddressToVpc",
            "ec2:Purchase*",
            "ec2:RegisterImage",
            "ec2:Release*",
            "ec2:Replace*",
            "ec2:ReportInstanceStatus",
            "ec2:Request*",
            "ec2:Reset*",
            "ec2:RestoreAddressToClassic",
            "ec2:RunScheduledInstances",
            "ec2:UnassignPrivateIpAddresses",
            "ec2:UnmonitorInstances",
            "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
            "ec2:UpdateSecurityGroupRuleDescriptionsIngress",
            "elasticloadbalancing:*",
            "events:*",
            "iam:GetAccount*",
            "iam:GetContextKeys*",
            "iam:GetCredentialReport",
            "iam:ListAccountAliases",
            "iam:ListGroups",
            "iam:ListOpenIDConnectProviders",
            "iam:ListPolicies",
            "iam:ListPoliciesGrantingServiceAccess",
            "iam:ListRoles",
            "iam:ListSAMLProviders",
            "iam:ListServerCertificates",
            "iam:Simulate*",
            "iam:UpdateServerCertificate",
            "iam:UpdateSigningCertificate",
            "kinesis:ListStreams",
            "kinesis:PutRecord",
            "kms:CreateAlias",
            "kms:CreateKey",
            "kms:DeleteAlias",
            "kms:Describe*",
            "kms:GenerateRandom",
            "kms:Get*",
            "kms:List*",
            "kms:Encrypt",
            "kms:ReEncrypt*",
            "lambda:Create*",
            "lambda:Delete*",
            "lambda:Get*",
            "lambda:InvokeFunction",
            "lambda:List*",
            "lambda:PublishVersion",
            "lambda:Update*",
            "logs:*",
            "rds:Describe*",
            "rds:ListTagsForResource",
            "route53:*",
            "route53domains:*",
            "ses:*",
            "sns:*",
            "sqs:*",
            "trustedadvisor:*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Action": [
            "ec2:AcceptVpcPeeringConnection",
            "ec2:AttachClassicLinkVpc",
            "ec2:AttachVolume",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateVpcPeeringConnection",
            "ec2:DeleteCustomerGateway",
            "ec2:DeleteDhcpOptions",
            "ec2:DeleteInternetGateway",
            "ec2:DeleteNetworkAcl*",
            "ec2:DeleteRoute",
            "ec2:DeleteRouteTable",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteVolume",
            "ec2:DeleteVpcPeeringConnection",
            "ec2:DetachClassicLinkVpc",
            "ec2:DetachVolume",
            "ec2:DisableVpcClassicLink",
            "ec2:EnableVpcClassicLink",
            "ec2:GetConsoleScreenshot",
            "ec2:RebootInstances",
            "ec2:RejectVpcPeeringConnection",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:RunInstances",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances"
          ],
          "Effect": "Allow",
          "Resource": [
            "*"
          ]
        },
        {
          "Action": "s3:*",
          "Effect": "Allow",
          "Resource": [
            "*"
          ]
        },
        {
          "Action": [
            "iam:GetAccessKeyLastUsed",
            "iam:GetGroup*",
            "iam:GetInstanceProfile",
            "iam:GetLoginProfile",
            "iam:GetOpenIDConnectProvider",
            "iam:GetPolicy*",
            "iam:GetRole*",
            "iam:GetSAMLProvider",
            "iam:GetSSHPublicKey",
            "iam:GetServerCertificate",
            "iam:GetServiceLastAccessed*",
            "iam:GetUser*",
            "iam:ListAccessKeys",
            "iam:ListAttached*",
            "iam:ListEntitiesForPolicy",
            "iam:ListGroupPolicies",
            "iam:ListGroupsForUser",
            "iam:ListInstanceProfiles*",
            "iam:ListMFADevices",
            "iam:ListPolicyVersions",
            "iam:ListRolePolicies",
            "iam:ListSSHPublicKeys",
            "iam:ListSigningCertificates",
            "iam:ListUserPolicies",
            "iam:Upload*"
          ],
          "Effect": "Allow",
          "Resource": [
            "*"
          ]
        },
        {
          "Action": [
            "iam:GetRole",
            "iam:ListRoles",
            "iam:PassRole"
          ],
          "Effect": "Allow",
          "Resource": [
            "arn:aws:iam::*:role/rds-monitoring-role",
            "arn:aws:iam::*:role/ec2-sysadmin-*",
            "arn:aws:iam::*:role/ecr-sysadmin-*",
            "arn:aws:iam::*:role/lambda-sysadmin-*"
          ]
        }
      ],
      "Version": "2012-10-17"
    },
    "VersionId": "v6",
    "IsDefaultVersion": true,
    "CreateDate": "2020-08-24T20:05:29+00:00"
  },
  "TranslateFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "translate:*",
            "comprehend:DetectDominantLanguage",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:GetBucketLocation",
            "iam:ListRoles",
            "iam:GetRole"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2020-01-08T21:22:27+00:00"
  },
  "TranslateReadOnly": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "translate:TranslateText",
            "translate:TranslateDocument",
            "translate:GetTerminology",
            "translate:ListTerminologies",
            "translate:ListTextTranslationJobs",
            "translate:DescribeTextTranslationJob",
            "translate:GetParallelData",
            "translate:ListParallelData",
            "comprehend:DetectDominantLanguage",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v7",
    "IsDefaultVersion": true,
    "CreateDate": "2023-05-24T17:19:30+00:00"
  },
  "VMImportExportRoleForAWSConnector": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListBucket",
            "s3:GetBucketLocation",
            "s3:GetObject"
          ],
          "Resource": [
            "arn:aws:s3:::import-to-ec2-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "ec2:ModifySnapshotAttribute",
            "ec2:CopySnapshot",
            "ec2:RegisterImage",
            "ec2:Describe*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2015-09-03T20:48:59+00:00"
  },
  "VPCLatticeFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "vpc-lattice:*",
            "acm:DescribeCertificate",
            "acm:ListCertificates",
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "ec2:DescribeInstances",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs",
            "elasticloadbalancing:DescribeLoadBalancers",
            "firehose:DescribeDeliveryStream",
            "firehose:ListDeliveryStreams",
            "logs:DescribeLogGroups",
            "s3:ListAllMyBuckets",
            "lambda:ListAliases",
            "lambda:ListFunctions",
            "lambda:ListVersionsByFunction"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "logs:CreateLogDelivery",
            "logs:DeleteLogDelivery",
            "logs:GetLogDelivery",
            "logs:ListLogDeliveries",
            "logs:UpdateLogDelivery",
            "logs:DescribeResourcePolicies"
          ],
          "Resource": "*",
          "Condition": {
            "ForAnyValue:StringEquals": {
              "aws:CalledVia": [
                "vpc-lattice.amazonaws.com"
              ]
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/vpc-lattice.amazonaws.com/AWSServiceRoleForVpcLattice",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "vpc-lattice.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": "iam:CreateServiceLinkedRole",
          "Resource": "arn:aws:iam::*:role/aws-service-role/delivery.logs.amazonaws.com/AWSServiceRoleForLogDelivery",
          "Condition": {
            "StringLike": {
              "iam:AWSServiceName": "delivery.logs.amazonaws.com"
            }
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "iam:DeleteServiceLinkedRole",
            "iam:GetServiceLinkedRoleDeletionStatus"
          ],
          "Resource": "arn:aws:iam::*:role/aws-service-role/vpc-lattice.amazonaws.com/AWSServiceRoleForVpcLattice"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-30T02:49:02+00:00"
  },
  "VPCLatticeReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "vpc-lattice:Get*",
            "vpc-lattice:List*",
            "acm:DescribeCertificate",
            "acm:ListCertificates",
            "cloudwatch:GetMetricData",
            "ec2:DescribeInstances",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs",
            "elasticloadbalancing:DescribeLoadBalancers",
            "firehose:DescribeDeliveryStream",
            "firehose:ListDeliveryStreams",
            "lambda:ListAliases",
            "lambda:ListFunctions",
            "lambda:ListVersionsByFunction",
            "logs:DescribeLogGroups",
            "logs:GetLogDelivery",
            "logs:ListLogDeliveries",
            "s3:ListAllMyBuckets"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-30T02:47:25+00:00"
  },
  "VPCLatticeServicesInvokeAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "vpc-lattice-svcs:Invoke"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-30T02:45:07+00:00"
  },
  "ViewOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "acm:ListCertificates",
            "athena:List*",
            "autoscaling:Describe*",
            "aws-marketplace:ViewSubscriptions",
            "batch:ListJobs",
            "clouddirectory:ListAppliedSchemaArns",
            "clouddirectory:ListDevelopmentSchemaArns",
            "clouddirectory:ListDirectories",
            "clouddirectory:ListPublishedSchemaArns",
            "cloudformation:DescribeStacks",
            "cloudformation:List*",
            "cloudfront:List*",
            "cloudhsm:ListAvailableZones",
            "cloudhsm:ListHapgs",
            "cloudhsm:ListHsms",
            "cloudhsm:ListLunaClients",
            "cloudsearch:DescribeDomains",
            "cloudsearch:List*",
            "cloudtrail:DescribeTrails",
            "cloudtrail:LookupEvents",
            "cloudwatch:Get*",
            "cloudwatch:List*",
            "codebuild:ListBuilds*",
            "codebuild:ListProjects",
            "codecommit:List*",
            "codedeploy:Get*",
            "codedeploy:List*",
            "codepipeline:ListPipelines",
            "codestar:List*",
            "cognito-identity:ListIdentities",
            "cognito-identity:ListIdentityPools",
            "cognito-idp:List*",
            "cognito-sync:ListDatasets",
            "config:Describe*",
            "config:List*",
            "connect:List*",
            "comprehend:Describe*",
            "comprehend:List*",
            "datapipeline:DescribePipelines",
            "datapipeline:GetAccountLimits",
            "datapipeline:ListPipelines",
            "dax:DescribeClusters",
            "dax:DescribeDefaultParameters",
            "dax:DescribeEvents",
            "dax:DescribeParameterGroups",
            "dax:DescribeParameters",
            "dax:DescribeSubnetGroups",
            "dax:ListTags",
            "devicefarm:List*",
            "directconnect:Describe*",
            "discovery:List*",
            "dms:List*",
            "ds:DescribeDirectories",
            "dynamodb:DescribeBackup",
            "dynamodb:DescribeContinuousBackups",
            "dynamodb:DescribeGlobalTable",
            "dynamodb:DescribeGlobalTableSettings",
            "dynamodb:DescribeLimits",
            "dynamodb:DescribeReservedCapacity",
            "dynamodb:DescribeReservedCapacityOfferings",
            "dynamodb:DescribeStream",
            "dynamodb:DescribeTable",
            "dynamodb:DescribeTimeToLive",
            "dynamodb:ListBackups",
            "dynamodb:ListGlobalTables",
            "dynamodb:ListStreams",
            "dynamodb:ListTables",
            "dynamodb:ListTagsOfResource",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeBundleTasks",
            "ec2:DescribeCarrierGateways",
            "ec2:DescribeClassicLinkInstances",
            "ec2:DescribeConversionTasks",
            "ec2:DescribeCustomerGateways",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeExportTasks",
            "ec2:DescribeFlowLogs",
            "ec2:DescribeHost*",
            "ec2:DescribeIdFormat",
            "ec2:DescribeIdentityIdFormat",
            "ec2:DescribeImage*",
            "ec2:DescribeImport*",
            "ec2:DescribeInstance*",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
            "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
            "ec2:DescribeLocalGatewayRouteTables",
            "ec2:DescribeLocalGatewayVirtualInterfaceGroups",
            "ec2:DescribeLocalGatewayVirtualInterfaces",
            "ec2:DescribeLocalGateways",
            "ec2:DescribeMovingAddresses",
            "ec2:DescribeNatGateways",
            "ec2:DescribeNetwork*",
            "ec2:DescribePlacementGroups",
            "ec2:DescribePrefixLists",
            "ec2:DescribeRegions",
            "ec2:DescribeReserved*",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroupRules",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshot*",
            "ec2:DescribeSpot*",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:DescribeVolume*",
            "ec2:DescribeVpc*",
            "ec2:DescribeVpnGateways",
            "ec2:SearchLocalGatewayRoutes",
            "ecr:DescribeRepositories",
            "ecr:ListImages",
            "ecs:Describe*",
            "ecs:List*",
            "elastic-inference:DescribeAccelerators",
            "elastic-inference:DescribeAcceleratorTypes",
            "elastic-inference:DescribeAcceleratorOfferings",
            "elastic-inference:ListTagsForResource",
            "elasticache:Describe*",
            "elasticbeanstalk:DescribeApplicationVersions",
            "elasticbeanstalk:DescribeApplications",
            "elasticbeanstalk:DescribeEnvironments",
            "elasticbeanstalk:ListAvailableSolutionStacks",
            "elasticfilesystem:DescribeFileSystems",
            "elasticloadbalancing:DescribeInstanceHealth",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "elasticmapreduce:List*",
            "elastictranscoder:List*",
            "es:DescribeElasticsearchDomain",
            "es:DescribeElasticsearchDomains",
            "es:ListDomainNames",
            "events:ListRuleNamesByTarget",
            "events:ListRules",
            "events:ListTargetsByRule",
            "firehose:DescribeDeliveryStream",
            "firehose:List*",
            "fsx:DescribeFileSystems",
            "gamelift:List*",
            "glacier:List*",
            "greengrass:List*",
            "iam:GetAccountSummary",
            "iam:GetLoginProfile",
            "iam:List*",
            "importexport:ListJobs",
            "inspector:List*",
            "iot:List*",
            "kinesis:ListStreams",
            "kinesisanalytics:ListApplications",
            "kms:ListKeys",
            "lambda:List*",
            "lex:GetBotAliases",
            "lex:GetBotChannelAssociations",
            "lex:GetBotVersions",
            "lex:GetBots",
            "lex:GetIntentVersions",
            "lex:GetIntents",
            "lex:GetSlotTypeVersions",
            "lex:GetSlotTypes",
            "lex:GetUtterancesView",
            "lightsail:GetBlueprints",
            "lightsail:GetBundles",
            "lightsail:GetInstanceSnapshots",
            "lightsail:GetInstances",
            "lightsail:GetKeyPair",
            "lightsail:GetRegions",
            "lightsail:GetStaticIps",
            "lightsail:IsVpcPeered",
            "logs:Describe*",
            "lookoutvision:ListModelPackagingJobs",
            "lookoutvision:ListModels",
            "lookoutvision:ListProjects",
            "machinelearning:Describe*",
            "mediaconnect:ListEntitlements",
            "mediaconnect:ListFlows",
            "mediaconnect:ListOfferings",
            "mediaconnect:ListReservations",
            "mobiletargeting:GetApplicationSettings",
            "mobiletargeting:GetCampaigns",
            "mobiletargeting:GetImportJobs",
            "mobiletargeting:GetSegments",
            "opsworks-cm:Describe*",
            "opsworks:Describe*",
            "organizations:List*",
            "outposts:GetOutpost",
            "outposts:GetOutpostInstanceTypes",
            "outposts:ListOutposts",
            "outposts:ListSites",
            "outposts:ListTagsForResource",
            "polly:Describe*",
            "polly:List*",
            "rds:Describe*",
            "redshift:DescribeClusters",
            "redshift:DescribeEvents",
            "redshift:ViewQueriesInConsole",
            "resource-explorer-2:GetDefaultView",
            "resource-explorer-2:GetIndex",
            "resource-explorer-2:ListIndexes",
            "resource-explorer-2:ListSupportedResourceTypes",
            "resource-explorer-2:ListTagsForResource",
            "resource-explorer-2:ListViews",
            "route53:Get*",
            "route53:List*",
            "route53domains:List*",
            "route53resolver:Get*",
            "route53resolver:List*",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "sagemaker:Describe*",
            "sagemaker:List*",
            "sdb:List*",
            "servicecatalog:List*",
            "ses:List*",
            "shield:List*",
            "sns:List*",
            "sqs:ListQueues",
            "ssm:ListAssociations",
            "ssm:ListDocuments",
            "states:ListActivities",
            "states:ListStateMachines",
            "storagegateway:ListGateways",
            "storagegateway:ListLocalDisks",
            "storagegateway:ListVolumeRecoveryPoints",
            "storagegateway:ListVolumes",
            "swf:List*",
            "trustedadvisor:Describe*",
            "waf-regional:List*",
            "waf:List*",
            "wafv2:List*",
            "workdocs:DescribeAvailableDirectories",
            "workdocs:DescribeInstances",
            "workmail:Describe*",
            "workspaces:Describe*"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v17",
    "IsDefaultVersion": true,
    "CreateDate": "2023-03-06T15:59:28+00:00"
  },
  "WAFLoggingServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "firehose:PutRecord",
            "firehose:PutRecordBatch"
          ],
          "Resource": [
            "arn:aws:firehose:*:*:deliverystream/aws-waf-logs-*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-08-24T21:05:47+00:00"
  },
  "WAFRegionalLoggingServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "firehose:PutRecord",
            "firehose:PutRecordBatch"
          ],
          "Resource": [
            "arn:aws:firehose:*:*:deliverystream/aws-waf-logs-*"
          ]
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-08-24T18:40:55+00:00"
  },
  "WAFV2LoggingServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "firehose:PutRecord",
            "firehose:PutRecordBatch"
          ],
          "Resource": [
            "arn:aws:firehose:*:*:deliverystream/aws-waf-logs-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": "organizations:DescribeOrganization",
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2020-07-23T17:04:25+00:00"
  },
  "WellArchitectedConsoleFullAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "wellarchitected:*"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2018-11-29T18:19:23+00:00"
  },
  "WellArchitectedConsoleReadOnlyAccess": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "wellarchitected:Get*",
            "wellarchitected:List*",
            "wellarchitected:ExportLens"
          ],
          "Resource": "*"
        }
      ]
    },
    "VersionId": "v2",
    "IsDefaultVersion": true,
    "CreateDate": "2023-06-29T17:16:13+00:00"
  },
  "WorkLinkServiceRolePolicy": {
    "Document": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:DeleteNetworkInterface"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "kinesis:PutRecord",
            "kinesis:PutRecords"
          ],
          "Resource": "arn:aws:kinesis:*:*:stream/AmazonWorkLink-*"
        }
      ]
    },
    "VersionId": "v1",
    "IsDefaultVersion": true,
    "CreateDate": "2019-01-23T19:03:45+00:00"
  }
}
